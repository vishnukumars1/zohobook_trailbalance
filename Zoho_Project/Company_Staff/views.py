#Zoho Final
from django.shortcuts import render,redirect
from Register_Login.models import *
from Register_Login.views import logout
from django.contrib import messages
from django.conf import settings
from datetime import date
from datetime import datetime, timedelta
from Company_Staff.models import *
from django.db import models
from django.shortcuts import get_object_or_404
from django.http import JsonResponse
from django.core.mail import send_mail
from django.core.mail import EmailMessage
from xhtml2pdf import pisa
from django.template.loader import get_template
from bs4 import BeautifulSoup
import io,os
import csv
import math
import pandas as pd
from openpyxl import Workbook
from openpyxl import load_workbook
from django.http import HttpResponse,HttpResponseRedirect
from io import BytesIO
from django.db.models import Max
from django.db.models import Q
from django.http import JsonResponse,HttpResponse,HttpResponseRedirect
from django.urls import reverse
from django.shortcuts import render,redirect,get_object_or_404
from . models import *
from decimal import Decimal
from Company_Staff.models import Vendor, Vendor_comments_table, Vendor_doc_upload_table, Vendor_mail_table,Vendor_remarks_table,VendorContactPerson,VendorHistory
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseBadRequest, HttpResponseNotFound, JsonResponse
from email.message import EmailMessage
from django.core.exceptions import ObjectDoesNotExist
import re
from .models import payroll_employee,Attendance,Attendance_History,Holiday,Attendance_comment,Bloodgroup
from calendar import monthrange
from collections import defaultdict
import calendar
from Company_Staff.models import *
import openpyxl
from django.shortcuts import get_object_or_404
import calendar
from django.core.mail import EmailMultiAlternatives  
from django.http.response import JsonResponse, HttpResponse
from django.core.mail import send_mail, EmailMultiAlternatives
from django.utils.html import strip_tags
from django.template.loader import render_to_string
from Company_Staff.models import BankAccount
from Company_Staff.models import loan_account
from Company_Staff.models import LoanRepayemnt
from Company_Staff.models import LoanAccountHistory
from Company_Staff.models import LoanRepaymentHistory
from Company_Staff.models import BankAccountHistory
from Company_Staff.models import Comments
from Company_Staff.models import Banking
from django.shortcuts import render, get_object_or_404
from datetime import date as dt
from django.db.models import Sum
from django.utils.timezone import now
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import Paragraph, SimpleDocTemplate, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import Spacer
from email.mime.base import MIMEBase
from email import encoders
from reportlab.pdfgen import canvas
from django.core.mail import EmailMessage as EmailMsg
from django.core.mail import send_mass_mail
from django.core import serializers
from django.http import JsonResponse
from .models import Items, CompanyDetails
from .models import RetainerInvoice, retInvoiceReference, retainer_payment_details
from django.shortcuts import redirect
from .models import Retaineritems
from django.contrib.auth.models import User
from django.shortcuts import render
from .models import RetainerInvoice
from .models import RetainerInvoice, Retaineritems
from .models import RetainerInvoiceComment  # Import the RetainerInvoiceComment model
from django.shortcuts import render, redirect
from django.http import JsonResponse
from datetime import date
from .models import Items, CompanyDetails, StaffDetails, RetainerInvoice, retInvoiceReference, Banking, LoginDetails, Unit, Chart_of_Accounts, Customer, ZohoModules
from django.db.models import Max
from django.contrib.auth.models import AnonymousUser
from django.db import transaction  # Import transaction to ensure atomicity
from django.shortcuts import redirect, HttpResponse
from openpyxl import Workbook, load_workbook
from .models import RetainerInvoice, Retaineritems, retInvoiceReference
from django.utils import timezone
from django.http import JsonResponse
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from django.db.models import Count, Sum
from Company_Staff.models import Customer,Items,EwayBill,Eway_bill_item,EwayBillHistory,Eway_bill_Reference,Eway_Bill_Comments
from django.db.models import F,Value,CharField,BooleanField,FloatField
from Company_Staff.models import Customer,Items,EwayBill,Eway_bill_item,EwayBillHistory,Eway_bill_Reference,Eway_Bill_Comments,Transportation
from django.template.response import TemplateResponse
from .models import LoginDetails, CompanyDetails, StaffDetails, ZohoModules, Items, SalesOrderItems
from django.db.models import Sum,F,IntegerField,Q  
from django.utils.dateparse import parse_date
from datetime import datetime
from django.db.models import Sum, DecimalField
from .models import (
    LoginDetails,
    CompanyDetails,
    StaffDetails,
    ZohoModules,
    PurchaseOrderItems,
    PurchaseOrder,
    Bill,
    Recurring_bills,
    debitnote
)
from django.contrib import messages
from .models import (LoginDetails, CompanyDetails, StaffDetails, ZohoModules, RecurrItemsList,
                     BillItems, debitnote_item, Bill, Recurring_bills, debitnote)
                     
from django.db.models import Sum,F,IntegerField,Q ,Value as V 
from django.db.models.functions import Cast
from django.db.models import Value,CharField,F,Q,Case,When
from django.db.models.functions import Concat
from datetime import datetime, date
import pdfkit
from django.http import Http404
import json 
# Create your views here.



# -------------------------------Company section--------------------------------

# company dashboard
def company_dashboard(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        # Calculate the date 20 days before the end date for payment term renew and 10 days before for trial period renew
        if dash_details.payment_term:
            reminder_date = dash_details.End_date - timedelta(days=20)
        else:
            reminder_date = dash_details.End_date - timedelta(days=10)
        current_date = date.today()
        alert_message = current_date >= reminder_date
        
        payment_request = True if PaymentTermsUpdates.objects.filter(company=dash_details,update_action=1,status='Pending').exists() else False

        # Calculate the number of days between the reminder date and end date
        days_left = (dash_details.End_date - current_date).days
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'alert_message':alert_message,
            'days_left':days_left,
            'payment_request':payment_request,
        }
        return render(request, 'company/company_dash.html', context)
    else:
        return redirect('/')


# company staff request for login approval
def company_staff_request(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        staff_request=StaffDetails.objects.filter(company=dash_details.id, company_approval=0).order_by('-id')
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'requests':staff_request,
        }
        return render(request, 'company/staff_request.html', context)
    else:
        return redirect('/')

# company staff accept or reject
def staff_request_accept(request,pk):
    staff=StaffDetails.objects.get(id=pk)
    staff.company_approval=1
    staff.save()
    return redirect('company_staff_request')

def staff_request_reject(request,pk):
    staff=StaffDetails.objects.get(id=pk)
    login_details=LoginDetails.objects.get(id=staff.company.id)
    login_details.delete()
    staff.delete()
    return redirect('company_staff_request')


# All company staff view, cancel staff approval
def company_all_staff(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        all_staffs=StaffDetails.objects.filter(company=dash_details.id, company_approval=1).order_by('-id')
       
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'staffs':all_staffs,
        }
        return render(request, 'company/all_staff_view.html', context)
    else:
        return redirect('/')

def staff_approval_cancel(request, pk):
    """
    Sets the company approval status to 2 for the specified staff member, effectively canceling staff approval.

    This function is designed to be used for canceling staff approval, and the company approval value is set to 2.
    This can be useful for identifying resigned staff under the company in the future.

    """
    staff = StaffDetails.objects.get(id=pk)
    staff.company_approval = 2
    staff.save()
    return redirect('company_all_staff')


# company profile, profile edit
def company_profile(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        terms=PaymentTerms.objects.all()
        payment_history=dash_details.previous_plans.all()

        # Calculate the date 20 days before the end date
        reminder_date = dash_details.End_date - timedelta(days=20)
        current_date = date.today()
        renew_button = current_date >= reminder_date

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'renew_button': renew_button,
            'terms':terms,
            'payment_history':payment_history,
        }
        return render(request, 'company/company_profile.html', context)
    else:
        return redirect('/')

def company_profile_editpage(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        context = {
            'details': dash_details,
            'allmodules': allmodules
        }
        return render(request, 'company/company_profile_editpage.html', context)
    else:
        return redirect('/')

def company_profile_basicdetails_edit(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')

        log_details= LoginDetails.objects.get(id=log_id)
        if request.method == 'POST':
            # Get data from the form
            log_details.first_name = request.POST.get('fname')
            log_details.last_name = request.POST.get('lname')
            log_details.email = request.POST.get('eid')
            log_details.username = request.POST.get('uname')
            log_details.save()
            messages.success(request,'Updated')
            return redirect('company_profile_editpage') 
        else:
            return redirect('company_profile_editpage') 

    else:
        return redirect('/')
    
def company_password_change(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')

        log_details= LoginDetails.objects.get(id=log_id)
        if request.method == 'POST':
            # Get data from the form
            password = request.POST.get('pass')
            cpassword = request.POST.get('cpass')
            if password == cpassword:
                if LoginDetails.objects.filter(password=password).exists():
                    messages.error(request,'Use another password')
                    return redirect('company_profile_editpage')
                else:
                    log_details.password=password
                    log_details.save()

            messages.success(request,'Password Changed')
            return redirect('company_profile_editpage') 
        else:
            return redirect('company_profile_editpage') 

    else:
        return redirect('/')
       
def company_profile_companydetails_edit(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')

        log_details = LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

        if request.method == 'POST':
            # Get data from the form
            gstno = request.POST.get('gstno')
            profile_pic = request.FILES.get('image')

            # Update the CompanyDetails object with form data
            dash_details.company_name = request.POST.get('cname')
            dash_details.contact = request.POST.get('phone')
            dash_details.address = request.POST.get('address')
            dash_details.city = request.POST.get('city')
            dash_details.state = request.POST.get('state')
            dash_details.country = request.POST.get('country')
            dash_details.pincode = request.POST.get('pincode')
            dash_details.pan_number = request.POST.get('pannumber')

            if gstno:
                dash_details.gst_no = gstno
            else:
                dash_details.gst_no = ''

            if profile_pic:
                dash_details.profile_pic = profile_pic

            dash_details.save()

            messages.success(request, 'Updated')
            return redirect('company_profile_editpage')
        else:
            return redirect('company_profile_editpage')
    else:
        return redirect('/')    

# company modules editpage
def company_module_editpage(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        context = {
            'details': dash_details,
            'allmodules': allmodules
        }
        return render(request, 'company/company_module_editpage.html', context)
    else:
        return redirect('/')

def company_module_edit(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        # Check for any previous module update request
        if ZohoModules.objects.filter(company=dash_details,status='Pending').exists():
            messages.warning(request,'You have a pending update request, wait for approval or contact our support team for any help..?')
            return redirect('company_profile')
        if request.method == 'POST':
            # Retrieve values
            items = request.POST.get('items', 0)
            price_list = request.POST.get('price_list', 0)
            stock_adjustment = request.POST.get('stock_adjustment', 0)
            godown = request.POST.get('godown', 0)

            cash_in_hand = request.POST.get('cash_in_hand', 0)
            offline_banking = request.POST.get('offline_banking', 0)
            upi = request.POST.get('upi', 0)
            bank_holders = request.POST.get('bank_holders', 0)
            cheque = request.POST.get('cheque', 0)
            loan_account = request.POST.get('loan_account', 0)

            customers = request.POST.get('customers', 0)
            invoice = request.POST.get('invoice', 0)
            estimate = request.POST.get('estimate', 0)
            sales_order = request.POST.get('sales_order', 0)
            recurring_invoice = request.POST.get('recurring_invoice', 0)
            retainer_invoice = request.POST.get('retainer_invoice', 0)
            credit_note = request.POST.get('credit_note', 0)
            payment_received = request.POST.get('payment_received', 0)
            delivery_challan = request.POST.get('delivery_challan', 0)

            vendors = request.POST.get('vendors', 0)
            bills = request.POST.get('bills', 0)
            recurring_bills = request.POST.get('recurring_bills', 0)
            vendor_credit = request.POST.get('vendor_credit', 0)
            purchase_order = request.POST.get('purchase_order', 0)
            expenses = request.POST.get('expenses', 0)
            recurring_expenses = request.POST.get('recurring_expenses', 0)
            payment_made = request.POST.get('payment_made', 0)

            projects = request.POST.get('projects', 0)

            chart_of_accounts = request.POST.get('chart_of_accounts', 0)
            manual_journal = request.POST.get('manual_journal', 0)

            eway_bill = request.POST.get('ewaybill', 0)

            employees = request.POST.get('employees', 0)
            employees_loan = request.POST.get('employees_loan', 0)
            holiday = request.POST.get('holiday', 0)
            attendance = request.POST.get('attendance', 0)
            salary_details = request.POST.get('salary_details', 0)

            reports = request.POST.get('reports', 0)

            update_action=1
            status='Pending'

            # Create a new ZohoModules instance and save it to the database
            data = ZohoModules(
                company=dash_details,
                items=items, price_list=price_list, stock_adjustment=stock_adjustment, godown=godown,
                cash_in_hand=cash_in_hand, offline_banking=offline_banking, upi=upi, bank_holders=bank_holders,
                cheque=cheque, loan_account=loan_account,
                customers=customers, invoice=invoice, estimate=estimate, sales_order=sales_order,
                recurring_invoice=recurring_invoice, retainer_invoice=retainer_invoice, credit_note=credit_note,
                payment_received=payment_received, delivery_challan=delivery_challan,
                vendors=vendors, bills=bills, recurring_bills=recurring_bills, vendor_credit=vendor_credit,
                purchase_order=purchase_order, expenses=expenses, recurring_expenses=recurring_expenses,
                payment_made=payment_made,
                projects=projects,
                chart_of_accounts=chart_of_accounts, manual_journal=manual_journal,
                eway_bill=eway_bill,
                employees=employees, employees_loan=employees_loan, holiday=holiday,
                attendance=attendance, salary_details=salary_details,
                reports=reports,update_action=update_action,status=status    
            )
            data.save()
            messages.success(request,"Request sent successfully. Please wait for approval.")
            return redirect('company_profile')
        else:
            return redirect('company_module_editpage')  
    else:
        return redirect('/')


def company_renew_terms(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

        # Check for any previous  extension request
        if PaymentTermsUpdates.objects.filter(company=dash_details,update_action=1,status='Pending').exists():
            messages.warning(request,'You have a pending request, wait for approval or contact our support team for any help..?')
            return redirect('company_profile')
        if request.method == 'POST':
            select=request.POST['select']
            terms=PaymentTerms.objects.get(id=select)
            update_action=1
            status='Pending'
            newterms=PaymentTermsUpdates(
               company=dash_details,
               payment_term=terms,
               update_action=update_action,
               status=status 
            )
            newterms.save()
            messages.success(request,'Request sent successfully, Please wait for approval...')
            return redirect('company_profile')
        else:
            return redirect('company_profile')
    else:
        return redirect('/')

# company notifications and messages
def company_notifications(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        notifications = dash_details.notifications.filter(is_read=0).order_by('-date_created','-time')
        end_date = dash_details.End_date
        company_days_remaining = (end_date - date.today()).days
        payment_request = True if PaymentTermsUpdates.objects.filter(company=dash_details,update_action=1,status='Pending').exists() else False
        
        print(company_days_remaining)
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'notifications':notifications,
            'days_remaining':company_days_remaining,
            'payment_request':payment_request,
        }

        return render(request,'company/company_notifications.html',context)
        
    else:
        return redirect('/')
        
        
def company_message_read(request,pk):
    '''
    message read functions set the is_read to 1, 
    by default it is 0 means not seen by user.

    '''
    notification=Notifications.objects.get(id=pk)
    notification.is_read=1
    notification.save()
    return redirect('company_notifications')
    
    
def company_payment_history(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/') 
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        payment_history=dash_details.previous_plans.all()

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'payment_history':payment_history,
            
        }
        return render(request,'company/company_payment_history.html', context)
    else:
        return redirect('/')
        
def company_trial_feedback(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/') 
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        trial_instance = TrialPeriod.objects.get(company=dash_details)
        if request.method == 'POST':
            interested = request.POST.get('interested')
            feedback=request.POST.get('feedback') 
            
            trial_instance.interested_in_buying=1 if interested =='yes' else 2
            trial_instance.feedback=feedback
            trial_instance.save()

            if interested =='yes':
                return redirect('company_profile')
            else:
                return redirect('company_dashboard')
        else:
            return redirect('company_dashboard')
    else:
        return redirect('/')
# -------------------------------Staff section--------------------------------

# staff dashboard
def staff_dashboard(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        context={
            'details':dash_details,
            'allmodules': allmodules,
        }
        return render(request,'staff/staff_dash.html',context)
    else:
        return redirect('/')


# staff profile
def staff_profile(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        context={
            'details':dash_details,
            'allmodules': allmodules,
        }
        return render(request,'staff/staff_profile.html',context)
    else:
        return redirect('/')


def staff_profile_editpage(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        context = {
            'details': dash_details,
            'allmodules': allmodules
        }
        return render(request, 'staff/staff_profile_editpage.html', context)
    else:
        return redirect('/')

def staff_profile_details_edit(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')

        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
        if request.method == 'POST':
            # Get data from the form
            log_details.first_name = request.POST.get('fname')
            log_details.last_name = request.POST.get('lname')
            log_details.email = request.POST.get('eid')
            log_details.username = request.POST.get('uname')
            log_details.save()
            dash_details.contact = request.POST.get('phone')
            old=dash_details.image
            new=request.FILES.get('profile_pic')
            print(new,old)
            if old!=None and new==None:
                dash_details.image=old
            else:
                print(new)
                dash_details.image=new
            dash_details.save()
            messages.success(request,'Updated')
            return redirect('staff_profile_editpage') 
        else:
            return redirect('staff_profile_editpage') 

    else:
        return redirect('/')

def staff_password_change(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')

        log_details= LoginDetails.objects.get(id=log_id)
        if request.method == 'POST':
            # Get data from the form
            password = request.POST.get('pass')
            cpassword = request.POST.get('cpass')
            if password == cpassword:
                if LoginDetails.objects.filter(password=password).exists():
                    messages.error(request,'Use another password')
                    return redirect('staff_profile_editpage')
                else:
                    log_details.password=password
                    log_details.save()

            messages.success(request,'Password Changed')
            return redirect('staff_profile_editpage') 
        else:
            return redirect('staff_profile_editpage') 

    else:
        return redirect('/')

# -------------------------------Zoho Modules section--------------------------------

#--------------------------------------------------- TINTO VIEW ITEMS START-------------------------------------------

# items llist
    
def items_list(request):                                                                
     if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                item=Items.objects.filter(company=dash_details.company)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'item':item,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/items/items_list.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            item=Items.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            context = {
                    'details': dash_details,
                    'item': item,
                    'allmodules': allmodules,
            }
        return render(request,'zohomodules/items/items_list.html',context)

   
   
# create Items

def new_items(request):                                                              
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=login_id)
    if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                item=Items.objects.filter(company=dash_details.company)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                units = Unit.objects.filter(company=dash_details.company)
                accounts=Chart_of_Accounts.objects.filter(company=dash_details.company)
                context = {
                     'details': dash_details,
                    'units': units,
                    'allmodules': allmodules,
                    'accounts':accounts
                }
                return render(request,'zohomodules/items/newitem.html',context)
    if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            item=Items.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            units = Unit.objects.filter(company=dash_details)
            accounts=Chart_of_Accounts.objects.filter(company=dash_details)
            context = {
                    'details': dash_details,
                    'units': units,
                    'allmodules': allmodules,
                    'accounts':accounts
            }
    
            return render(request, 'zohomodules/items/newitem.html',context)
# create Items
def create_item(request):                                                                #new by tinto mt
    
    login_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.Date=date.today()
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            uid=Unit.objects.get(id=unit_id)
            # unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = uid
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track = request.POST.get("trackState",None)
            track_state_value = request.POST.get("trackstate", None)

# Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0

            
            minstock=request.POST.get("minimum_stock",None)
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            a.activation_tag = 'Active'
            a.type = 'Opening Stock'
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
            a.opening_stock_per_unit = request.POST.get("rate",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if Items.objects.filter(item_name=item_name, company=c).exists():
                error='yes'
                messages.error(request,'Item with same name exsits !!!')
                return redirect('new_items')
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('new_items')
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                return redirect('items_list')
    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = unit_instance
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track_state_value = request.POST.get("trackState", None)

            track_state_value = request.POST.get("trackstate", None)

            # Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0
            minstock=request.POST.get("minimum_stock",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            # a.activation_tag = request.POST.get("status",None)
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
        
        

        
            if Items.objects.filter(item_name=item_name,company=c).exists():
                error='yes'
                messages.error(request,'Item with same name exsits !!!')
                return redirect('new_items')
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('new_items')
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                return redirect('items_list')
    return redirect('items_list')

# create unit
def add_unit(request):                                                                #new by tinto mt (item)
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    elif log_user.user_type == 'Staff':
        if request.method == 'POST':
            staff = LoginDetails.objects.get(id=login_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c = sf.company
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    return JsonResponse({"message": "success"})
# create unit


    
def unit_dropdown(request):                                                               
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_user)
            options = {}
            option_objects = Unit.objects.filter(company=dash_details)
            for option in option_objects:
                unit_name=option.unit_name
            options[option.id] = [unit_name,f"{unit_name}"]
            return JsonResponse(options)
      

    elif log_user.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_user)
            options = {}
            option_objects = Unit.objects.filter(company=dash_details.company)
            for option in option_objects:
                unit_name=option.unit_name
            options[option.id] = [unit_name,f"{unit_name}"]
            return JsonResponse(options)
             



def add_account(request):                                                              
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        if request.method == 'POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.logindetails=log_user
            b.action="Created"
            b.Date=date.today()
            a.login_details=log_user
            a.company=c
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.description = request.POST.get("description",None)
    
            a.Create_status="active"
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
          
                a.save()
                t=Chart_of_Accounts.objects.get(id=a.id)
                b.chart_of_accounts=t
                b.save()
                acc_id = a.id  
                acc_name=a.account_name
                response_data = {
                "message": "success",
                "acc_id":acc_id,
                "acc_name":acc_name,
        
                         }

                return JsonResponse(response_data)
        

    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            a=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.description = request.POST.get("description",None)
    
            a.Create_status="active"
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
          
                a.save()
                t=Chart_of_Accounts.objects.get(id=a.id)
                b.chart_of_accounts=t
                b.save()
                acc_id = a.id  
                acc_name=a.account_name
                response_data = {
                "message": "success",
                "acc_id":acc_id,
                "acc_name":acc_name,
        
                         }

                return JsonResponse(response_data)
        
      
        
    return redirect('newitems')

def account_dropdown(request):                                                                
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_user)
            options = {}
            option_objects = Chart_of_Accounts.objects.filter(Q(company=dash_details) & (Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold')))
            for option in option_objects:
                account_name=option.account_name
                account_type=option.account_type
                options[option.id] = [account_name,f"{account_name}"]
            return JsonResponse(options)
    elif log_user.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_user)
            options = {}
       
            option_objects = Chart_of_Accounts.objects.filter(Q(company=dash_details.company) & (Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold')))
            for option in option_objects:
                account_name=option.account_name
                options[option.id] = [account_name,f"{account_name}"]
            return JsonResponse(options)


def itemsoverview(request,pk):                                                                
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=login_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        cmp = dash_details.company
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        cmp = dash_details

    allmodules= ZohoModules.objects.get(company=cmp,status='New')
    item=Items.objects.filter(company=cmp)
    items=Items.objects.filter(company=cmp)
    selitem=Items.objects.get(id=pk)
    est_comments=Items_comments.objects.filter(Items=pk)
    stock_value=selitem.opening_stock*selitem.purchase_price  
    latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
    filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)

    ret_inv = RetainerInvoice.objects.filter(company=cmp)
    recurr_bill = Recurring_bills.objects.filter(company=cmp)
    transactions = list(invoiceitems.objects.filter(company=cmp,Items=selitem).annotate(object_type=Value("Invoice",output_field=CharField()),object_name=Concat(F('invoice__customer__first_name'), Value(' '), F('invoice__customer__last_name'), output_field=CharField()),object_date=F("invoice__date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('invoice__status'))
    )+list(
        SalesOrderItems.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Sales Order",output_field=CharField()),object_name=Concat(F('sales_order__customer__first_name'), Value(' '), F('sales_order__customer__last_name'), output_field=CharField()),object_date=F("sales_order__sales_order_date"),object_qty=F('quantity'),object_price=F('price'),
        object_status= Case(
            When(sales_order__status='Save',then=Value('Saved')),
            default=Value('Draft'),
            output_field=CharField()
            )
        )
    )+list(
        Reccurring_Invoice_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Recurring Invoice",output_field=CharField()),object_name=Concat(F('reccuring_invoice__customer__first_name'), Value(' '), F('reccuring_invoice__customer__last_name'), output_field=CharField()),object_date=F("reccuring_invoice__start_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('reccuring_invoice__status'))
    )+list(
        Retaineritems.objects.filter(item=selitem,retainer__in=ret_inv).annotate(object_type=Value("Retainer Invoice",output_field=CharField()),object_name=Concat(F('retainer__customer_name__first_name'), Value(' '), F('retainer__customer_name__last_name'), output_field=CharField()),object_date=F("retainer__retainer_invoice_date"),object_qty=F('quantity'),object_price=F('item__selling_price'),
        object_status=Case(
            When(retainer__is_sent=True,then=Value('Saved')),
            default=Value('Draft'),
            output_field=CharField()
            )
        )
    )+list(
        Credit_Note_Items.objects.filter(company=cmp,items=selitem).annotate(object_type=Value("Credit Note",output_field=CharField()),object_name=Concat(F('credit_note__customer__first_name'), Value(' '), F('credit_note__customer__last_name'), output_field=CharField()),object_date=F("credit_note__credit_note_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('credit_note__status'))
    )+list(
        Delivery_challan_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Delivery Challan",output_field=CharField()),object_name=Concat(F('delivery_challan__customer__first_name'), Value(' '), F('delivery_challan__customer__last_name'), output_field=CharField()),object_date=F("delivery_challan__challan_date"),object_qty=F('quantity'),object_price=F('price'),
        object_status=Case(
            When(delivery_challan__status="save",then=Value('Saved')),
            default=Value('Draft'),
            output_field=CharField()
            )
        )
    )+list(
        BillItems.objects.filter(Company=cmp,item_id=selitem).annotate(object_type=Value("Purchase Bill",output_field=CharField()),object_name=Concat(F('Bills__Vendor__first_name'), Value(' '), F('Bills__Vendor__last_name'), output_field=CharField()),object_date=F("Bills__Bill_Date"),object_qty=F('qty'),object_price=F('price'),object_status=F('Bills__Status'))
    )+list(
        RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,item_id=selitem).annotate(object_type=Value("Recurring Bill",output_field=CharField()),object_name=Concat(F('recurr_bill_id__vendor_details__first_name'), Value(' '), F('recurr_bill_id__vendor_details__last_name'), output_field=CharField()),object_date=F("recurr_bill_id__rec_bill_date"),object_qty=F('qty'),object_price=F('price'),
        object_status=Case(
            When(recurr_bill_id__status="save",then=Value('Saved')),
            default=Value('Draft'),
            output_field=CharField()
            )
        )
    )+list(
        debitnote_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Debit Note",output_field=CharField()),object_name=Concat(F('debit_note__vendor__first_name'), Value(' '), F('debit_note__vendor__last_name'), output_field=CharField()),object_date=F("debit_note__debitnote_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('debit_note__status'))
    )+list(
        PurchaseOrderItems.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Purchase Order",output_field=CharField()),object_name=Concat(F('purchase_order__vendor__first_name'), Value(' '), F('purchase_order__vendor__last_name'), output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_qty=F('quantity'),object_price=F('price'),
        object_status=Case(
            When(purchase_order__status="save",then=Value('Saved')),
            default=Value('Draft'),
            output_field=CharField()
            )
        )
    )+list(
        Eway_bill_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Eway Bill",output_field=CharField()),object_name=Concat(F('EwayBill__customer__first_name'), Value(' '), F('EwayBill__customer__last_name'), output_field=CharField()),object_date=F("EwayBill__start_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('EwayBill__status'))
    )

    context = {
        'details': dash_details,
        'allmodules': allmodules,
        'items':items,
        'selitem':selitem,
        'stock_value':stock_value,
        'latest_item_id':filtered_data,
        'est_comments':est_comments,
        "transactions":transactions,
    }
    return render(request, 'zohomodules/items/itemsoverview.html',context)


def edititems(request, pr):                                                                #new by tinto mt
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    
    # Retrieve the chart of accounts entry
    item = get_object_or_404(Items, id=pr)
    

    # Check if 'company_id' is in the session

    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
      
     
        dash_details = CompanyDetails.objects.get(login_details=log_user)
        units = Unit.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        item = get_object_or_404(Items, id=pr)
        accounts=Chart_of_Accounts.objects.filter(company=dash_details)
        units = Unit.objects.filter(company=dash_details)
        context = {
                    'item': item,
                    'units':units,
                    'details': dash_details,
                   'accounts': accounts,
                    'allmodules': allmodules,
            }
       
    
        
        if request.method=='POST':
   
            b=Item_Transaction_History()
            # c = CompanyDetails.objects.get(login_details=company_id)
            b.company=dash_details
            b.logindetails=log_user
            b.action="Edited"
            b.Date=date.today()
            item.login_details=log_user
            item.company=dash_details
            item.item_type = request.POST.get("type",None)
            item.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            unit_instance = get_object_or_404(Unit, id=unit_id)
            item.unit = unit_instance
            item.hsn_code = request.POST.get("hsn",None)
            item.tax_reference = request.POST.get("radio",None)
            if request.POST.get("radio",None) == 'taxable':

                item.intrastate_tax = request.POST.get("intra",None)
                item.interstate_tax= request.POST.get("inter",None)
            elif request.POST.get("radio",None) == 'None-Taxable':
                item.intrastate_tax = 0
                item.interstate_tax= 0
            item.selling_price = request.POST.get("sel_price",None)
            item.sales_account = request.POST.get("sel_acc",None)
            item.sales_description = request.POST.get("sel_desc",None)
            item.purchase_price = request.POST.get("cost_price",None)
            item.purchase_account = request.POST.get("cost_acc",None)
            item.purchase_description = request.POST.get("pur_desc",None)
            minstock=request.POST.get("minimum_stock",None)
            if minstock != "":
                item.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                item.minimum_stock_to_maintain = 0
            # item.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            # item.activation_tag = request.POST.get("status",None)
            item.inventory_account = request.POST.get("invacc",None)
            item.opening_stock = request.POST.get("openstock",None)
            item.opening_stock_per_unit = request.POST.get("rate",None)
            item.current_stock= request.POST.get("openstock",None)
            track_state_value = request.POST.get("trackstate", None)
            if track_state_value == "on":
                item.track_inventory = 1
            else:
                item.track_inventory = 0
            
            # Save the changes
            item.save()
            t=Items.objects.get(id=item.id)
            b.items=t
            b.save()
            # Redirect to another page after successful update
            return redirect('itemsoverview', pr)
        return render(request, 'zohomodules/items/edititems.html',context)
    if log_user.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_user)
                
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        item = get_object_or_404(Items, id=pr)
        units = Unit.objects.filter(company=dash_details.company)
        accounts=Chart_of_Accounts.objects.filter(company=dash_details.company)
        context = {
                    'item': item,
                    'units':units,
                    'details': dash_details,
                    'accounts': accounts,
                   
                    'allmodules': allmodules,
            }
 
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()

            c=dash_details.company
            b.company=c
            b.logindetails=log_user
            b.action="Edited"
            b.Date=date.today()
            a.login_details=log_user
            a.company=c
            item.item_type = request.POST.get("type",None)
            item.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            unit_instance = get_object_or_404(Unit, id=unit_id)
            item.unit = unit_instance
            item.hsn_code = request.POST.get("hsn",None)
            item.tax_reference = request.POST.get("radio",None)
            item.intrastate_tax = request.POST.get("intra",None)
            item.interstate_tax= request.POST.get("inter",None)
            item.selling_price = request.POST.get("sel_price",None)
            item.sales_account = request.POST.get("sel_acc",None)
            item.sales_description = request.POST.get("sel_desc",None)
            item.purchase_price = request.POST.get("cost_price",None)
            item.purchase_account = request.POST.get("cost_acc",None)
            item.purchase_description = request.POST.get("pur_desc",None)
            minstock=request.POST.get("minimum_stock",None)
            if minstock != "":
                item.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                item.minimum_stock_to_maintain = 0
            # item.activation_tag = request.POST.get("status",None)
            item.inventory_account = request.POST.get("invacc",None)
            item.opening_stock = request.POST.get("openstock",None)
            item.current_stock= request.POST.get("openstock",None)
            item.opening_stock_per_unit = request.POST.get("rate",None)
            track_state_value = request.POST.get("trackstate", None)
            if track_state_value == "on":
                item.track_inventory = 1
            else:
                item.track_inventory = 0
            item.save()
            t=Items.objects.get(id=item.id)
            b.items=t
            b.save()

            return redirect('itemsoverview', pr)
 
        return render(request, 'zohomodules/items/edititems.html', context)
   
def item_status_edit(request, pv):                                                                #new by tinto mt
    
    selitem = Items.objects.get(id=pv)

    if selitem.activation_tag == 'Active':
        selitem.activation_tag = 'inactive'
        selitem.save()
    elif selitem.activation_tag != 'Active':
        selitem.activation_tag = 'Active'
        selitem.save()

    selitem.save()

    return redirect('itemsoverview',pv)


def shareItemToEmail(request,pt):                                                                #new by tinto mt
    if request.user: 
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                print(emails_list)
                print('1')
           
                if 'login_id' in request.session:
                    login_id = request.session['login_id']
                if 'login_id' not in request.session:
                    return redirect('/')
                selitem = Items.objects.get(id=pt)
                log_details= LoginDetails.objects.get(id=login_id)
                if log_details.user_type == 'Staff':
                    dash_details = StaffDetails.objects.get(login_details=log_details)
                    cmp = dash_details.company
                if log_details.user_type == 'Company':
                    dash_details = CompanyDetails.objects.get(login_details=log_details)
                    cmp = dash_details

                ret_inv = RetainerInvoice.objects.filter(company=cmp)
                recurr_bill = Recurring_bills.objects.filter(company=cmp)
                transactions = list(invoiceitems.objects.filter(company=cmp,Items=selitem).annotate(object_type=Value("Invoice",output_field=CharField()),object_name=Concat(F('invoice__customer__first_name'), Value(' '), F('invoice__customer__last_name'), output_field=CharField()),object_date=F("invoice__date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('invoice__status'))
                )+list(
                    SalesOrderItems.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Sales Order",output_field=CharField()),object_name=Concat(F('sales_order__customer__first_name'), Value(' '), F('sales_order__customer__last_name'), output_field=CharField()),object_date=F("sales_order__sales_order_date"),object_qty=F('quantity'),object_price=F('price'),
                    object_status= Case(
                        When(sales_order__status='Save',then=Value('Saved')),
                        default=Value('Draft'),
                        output_field=CharField()
                        )
                    )
                )+list(
                    Reccurring_Invoice_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Recurring Invoice",output_field=CharField()),object_name=Concat(F('reccuring_invoice__customer__first_name'), Value(' '), F('reccuring_invoice__customer__last_name'), output_field=CharField()),object_date=F("reccuring_invoice__start_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('reccuring_invoice__status'))
                )+list(
                    Retaineritems.objects.filter(item=selitem,retainer__in=ret_inv).annotate(object_type=Value("Retainer Invoice",output_field=CharField()),object_name=Concat(F('retainer__customer_name__first_name'), Value(' '), F('retainer__customer_name__last_name'), output_field=CharField()),object_date=F("retainer__retainer_invoice_date"),object_qty=F('quantity'),object_price=F('item__selling_price'),
                    object_status=Case(
                        When(retainer__is_sent=True,then=Value('Saved')),
                        default=Value('Draft'),
                        output_field=CharField()
                        )
                    )
                )+list(
                    Credit_Note_Items.objects.filter(company=cmp,items=selitem).annotate(object_type=Value("Credit Note",output_field=CharField()),object_name=Concat(F('credit_note__customer__first_name'), Value(' '), F('credit_note__customer__last_name'), output_field=CharField()),object_date=F("credit_note__credit_note_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('credit_note__status'))
                )+list(
                    Delivery_challan_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Delivery Challan",output_field=CharField()),object_name=Concat(F('delivery_challan__customer__first_name'), Value(' '), F('delivery_challan__customer__last_name'), output_field=CharField()),object_date=F("delivery_challan__challan_date"),object_qty=F('quantity'),object_price=F('price'),
                    object_status=Case(
                        When(delivery_challan__status="save",then=Value('Saved')),
                        default=Value('Draft'),
                        output_field=CharField()
                        )
                    )
                )+list(
                    BillItems.objects.filter(Company=cmp,item_id=selitem).annotate(object_type=Value("Purchase Bill",output_field=CharField()),object_name=Concat(F('Bills__Vendor__first_name'), Value(' '), F('Bills__Vendor__last_name'), output_field=CharField()),object_date=F("Bills__Bill_Date"),object_qty=F('qty'),object_price=F('price'),object_status=F('Bills__Status'))
                )+list(
                    RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,item_id=selitem).annotate(object_type=Value("Recurring Bill",output_field=CharField()),object_name=Concat(F('recurr_bill_id__vendor_details__first_name'), Value(' '), F('recurr_bill_id__vendor_details__last_name'), output_field=CharField()),object_date=F("recurr_bill_id__rec_bill_date"),object_qty=F('qty'),object_price=F('price'),
                    object_status=Case(
                        When(recurr_bill_id__status="save",then=Value('Saved')),
                        default=Value('Draft'),
                        output_field=CharField()
                        )
                    )
                )+list(
                    debitnote_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Debit Note",output_field=CharField()),object_name=Concat(F('debit_note__vendor__first_name'), Value(' '), F('debit_note__vendor__last_name'), output_field=CharField()),object_date=F("debit_note__debitnote_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('debit_note__status'))
                )+list(
                    PurchaseOrderItems.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Purchase Order",output_field=CharField()),object_name=Concat(F('purchase_order__vendor__first_name'), Value(' '), F('purchase_order__vendor__last_name'), output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_qty=F('quantity'),object_price=F('price'),
                    object_status=Case(
                        When(purchase_order__status="save",then=Value('Saved')),
                        default=Value('Draft'),
                        output_field=CharField()
                        )
                    )
                )+list(
                    Eway_bill_item.objects.filter(company=cmp,item=selitem).annotate(object_type=Value("Eway Bill",output_field=CharField()),object_name=Concat(F('EwayBill__customer__first_name'), Value(' '), F('EwayBill__customer__last_name'), output_field=CharField()),object_date=F("EwayBill__start_date"),object_qty=F('quantity'),object_price=F('price'),object_status=F('EwayBill__status'))
                )


                context = {
                    'selitem':selitem,
                    'transactions':transactions,
                }
                print('2')
                template_path = 'zohomodules/items/itememailpdf.html'
                print('3')
                template = get_template(template_path)
                print('4')
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                print('5')
                filename = f'Item Transactions.pdf'
                subject = f"Transactipns"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Item transactions. \n{email_message}\n\n--\nRegards,\n{item.item_name}\n{item.item_type}", from_email=settings.EMAIL_HOST_USER,to=emails_list)
                email.attach(filename,pdf,"application/pdf")
                email.send(fail_silently=False)
                msg = messages.success(request, 'Details has been shared via email successfully..!')
                return redirect(itemsoverview,pt)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(itemsoverview,pt)  
        
def deleteitem(request,pl):                                                                #new by tinto mt
    items=Items.objects.filter(id=pl)
    items.delete()
    
    return redirect(items_list)

def delete_item_comment(request,ph,pr):                                                                #new by tinto mt
    items=Items_comments.objects.filter(id=ph)
    items.delete()
    ac=Items.objects.get(id=pr)
    
    return redirect(itemsoverview,ac.id)


def add_item_comment(request,pc):                                                                #new by tinto mt

    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        if request.method=="POST":
                    
                    com=Items_comments()
                    c = CompanyDetails.objects.get(login_details=company_id)
            
                    comment_comments=request.POST['comment']
                    com.company=c
                    com.logindetails=log_user
                    com.comments=comment_comments
                    item=Items.objects.get(id=pc)
                    com.Items=item
                    
                    com.save()
                    return redirect('itemsoverview',pc)

    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            com=Items_comments()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            
            comment_comments=request.POST['comment']
            com.company=c
            com.logindetails=log_user
            com.comments=comment_comments
            item=Items.objects.get(id=pc)
            com.Items=item
                    
            com.save()
            return redirect('itemsoverview',pc)
    return redirect('itemsoverview',pc)
        




         
def downloadItemSampleImportFile(request):                                                                  #new by tinto mt
    estimate_table_data = [['No.','ITEM TYPE','ITEM NAME','HSN','TAX REFERENCE','INTRASTATE TAX','INTERSTATE TAX','SELLING PRICE','SALES ACCOUNT','SALES DESCRIPTION','PURCHASE PRICE','PURCHASE ACCOUNT','PURCHASE DESCRIPTION','MINIMUM STOCK TO MAINTAIN','ACTIVATION TAG','OPENING STOCK','CURRENT STOCK','OPENING STOCK PER UNIT']]      
    wb = Workbook()
    sheet1 = wb.active
    sheet1.title = 'Sheet1'
    

    # Populate the sheets with data
    for row in estimate_table_data:
        sheet1.append(row)  
    
    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=expense_sample_file.xlsx'
     # Save the workbook to the response
    wb.save(response)
    return response





def import_item(request):                                                                #new by tinto mt
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        company_id = request.session['login_id']

        if request.method == 'POST' and 'excel_file' in request.FILES:
            company = CompanyDetails.objects.get(login_details=company_id)
            excel_file = request.FILES.get('excel_file')
            wb = load_workbook(excel_file)

            try:
                ws = wb["Sheet1"]
                header_row = ws[1]
                column_names = [cell.value for cell in header_row]
                print("Column Names:", column_names)
            except KeyError:
                print('Sheet not found')
                messages.error(request, '`Sheet1` not found in the Excel file. Please check.')
                return redirect('expensepage')

            expected_columns = ['No.', 'ITEM TYPE', 'ITEM NAME', 'HSN', 'TAX REFERENCE', 'INTRASTATE TAX', 'INTERSTATE TAX',
                                'SELLING PRICE', 'SALES ACCOUNT', 'SALES DESCRIPTION', 'PURCHASE PRICE',
                                'PURCHASE ACCOUNT', 'PURCHASE DESCRIPTION', 'MINIMUM STOCK TO MAINTAIN', 'ACTIVATION TAG',
                                'OPENING STOCK', 'CURRENT STOCK', 'OPENING STOCK PER UNIT']

            if column_names != expected_columns:
                print('Invalid sheet columns or order')
                messages.error(request, 'Sheet column names or order is not in the required format. Please check.')
                return redirect("comapny_items")

            for row in ws.iter_rows(min_row=2, values_only=True):
                _, item_type, item_name, hsn, tax_reference, intrastate_tax, interstate_tax, selling_price, sales_account, \
                sales_description, purchase_price, purchase_account, purchase_description, min_stock, activation_tag, \
                opening_stock, current_stock, opening_stock_per_unit = row

                # Fetching the 'Unit' instance with id=1 (you may adjust this based on your 'Unit' model)
                unit_instance = Unit.objects.get(pk=1)

                # Creating an instance of the 'Items' model and saving it
                item = Items(
                    login_details=log_user,
                    company=company,
                    unit=unit_instance,  # Use the fetched 'Unit' instance
                    item_type=item_type,
                    item_name=item_name,
                    hsn_code=hsn,
                    tax_reference=tax_reference,
                    intrastate_tax=intrastate_tax,
                    interstate_tax=interstate_tax,
                    selling_price=selling_price,
                    sales_account=sales_account,
                    sales_description=sales_description,
                    purchase_price=purchase_price,
                    purchase_account=purchase_account,
                    purchase_description=purchase_description,
                    minimum_stock_to_maintain=min_stock,
                    activation_tag=activation_tag,
                    inventory_account="Inventory Account",
                    opening_stock=opening_stock,
                    opening_stock_per_unit=opening_stock_per_unit
                )
                item.save()

            messages.success(request, 'Data imported successfully!')
            return redirect("items_list")
        else:
            messages.error(request, 'Invalid request. Please check the file and try again.')
            return redirect("items_list")
    else:
        messages.error(request, 'Invalid user type. Please check your user type.')
        return redirect("items_list")


def item_view_sort_by_name(request, pk):    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
            
                items = list(Items.objects.filter(company=dash_details.company).values())

    # Sort the items by the 'item_name' field
                sorted_items = sorted(items, key=lambda r: r['item_name'])

                # Get the selected item by ID
                selitem = Items.objects.get(id=pk)

                # Fetch related comments for the selected item
                est_comments = Items_comments.objects.filter(Items=pk)

                # Calculate stock value for the selected item
                stock_value = selitem.opening_stock * selitem.purchase_price

                # Find the latest date for the item transaction history
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']

                # Filter transaction history for the latest date and the selected item
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)

                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'items': sorted_items, 
                    'selitem': selitem, 
                    'stock_value': stock_value, 
                    'latest_item_id': filtered_data, 
                    'est_comments': est_comments
                    
            } 
                return render(request,'zohomodules/items/itemsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                items = list(Items.objects.filter(company=dash_details).values())

    # Sort the items by the 'item_name' field
                sorted_items = sorted(items, key=lambda r: r['item_name'])

                # Get the selected item by ID
                selitem = Items.objects.get(id=pk)

                # Fetch related comments for the selected item
                est_comments = Items_comments.objects.filter(Items=pk)

                # Calculate stock value for the selected item
                stock_value = selitem.opening_stock * selitem.purchase_price

                # Find the latest date for the item transaction history
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']

                # Filter transaction history for the latest date and the selected item
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)

                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                        'details': dash_details,
                        'allmodules': allmodules,
                        'items': sorted_items, 
                        'selitem': selitem, 
                        'stock_value': stock_value, 
                        'latest_item_id': filtered_data, 
                        'est_comments': est_comments
                        
                }  
                return render(request,'zohomodules/items/itemsoverview.html',content)

def item_view_sort_by_hsn(request, pk):      
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
            
                items = list(Items.objects.filter(company=dash_details.company).values())

    # Sort the items by the 'item_name' field
                sorted_items = sorted(items, key=lambda r: r['hsn_code'])

                # Get the selected item by ID
                selitem = Items.objects.get(id=pk)

                # Fetch related comments for the selected item
                est_comments = Items_comments.objects.filter(Items=pk)

                # Calculate stock value for the selected item
                stock_value = selitem.opening_stock * selitem.purchase_price

                # Find the latest date for the item transaction history
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']

                # Filter transaction history for the latest date and the selected item
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)

                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'items': sorted_items, 
                    'selitem': selitem, 
                    'stock_value': stock_value, 
                    'latest_item_id': filtered_data, 
                    'est_comments': est_comments
                    
            } 
                return render(request,'zohomodules/items/itemsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                items = list(Items.objects.filter(company=dash_details).values())

    # Sort the items by the 'item_name' field
                sorted_items = sorted(items, key=lambda r: r['item_name'])

                # Get the selected item by ID
                selitem = Items.objects.get(id=pk)

                # Fetch related comments for the selected item
                est_comments = Items_comments.objects.filter(Items=pk)

                # Calculate stock value for the selected item
                stock_value = selitem.opening_stock * selitem.purchase_price

                # Find the latest date for the item transaction history
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']

                # Filter transaction history for the latest date and the selected item
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)

                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                        'details': dash_details,
                        'allmodules': allmodules,
                        'items': sorted_items, 
                        'selitem': selitem, 
                        'stock_value': stock_value, 
                        'latest_item_id': filtered_data, 
                        'est_comments': est_comments
                        
                }  
                return render(request,'zohomodules/items/itemsoverview.html',content)

def filter_item_view_Active(request,pk):          
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
            
           

    # Sort the items by the 'item_name' field
                items=Items.objects.filter(activation_tag='Active',company=dash_details.company)  
                selitem=Items.objects.get(id=pk)
                est_comments=Items_comments.objects.filter(Items=pk)
                stock_value=selitem.opening_stock*selitem.purchase_price  
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'items':items,
                    'selitem':selitem,
                    'stock_value':stock_value,
                    'latest_item_id':filtered_data,
                    'est_comments':est_comments
                    
            } 
                return render(request,'zohomodules/items/itemsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
         

    # Sort the items by the 'item_name' field
                items=Items.objects.filter(activation_tag='Active',company=dash_details)  
                selitem=Items.objects.get(id=pk)
                est_comments=Items_comments.objects.filter(Items=pk)
                stock_value=selitem.opening_stock*selitem.purchase_price  
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)
                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'items':items,
                    'selitem':selitem,
                    'stock_value':stock_value,
                    'latest_item_id':filtered_data,
                    'est_comments':est_comments
                    
            } 
                return render(request,'zohomodules/items/itemsoverview.html',content) 

def filter_item_view_inActive(request,pk):         
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
            
           

    # Sort the items by the 'item_name' field
                items=Items.objects.filter(activation_tag='inactive',company=dash_details.company)  
                selitem=Items.objects.get(id=pk)
                est_comments=Items_comments.objects.filter(Items=pk)
                stock_value=selitem.opening_stock*selitem.purchase_price  
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'items':items,
                    'selitem':selitem,
                    'stock_value':stock_value,
                    'latest_item_id':filtered_data,
                    'est_comments':est_comments
                    
            } 
                return render(request,'zohomodules/items/itemsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
         

    # Sort the items by the 'item_name' field
                items=Items.objects.filter(activation_tag='inactive',company=dash_details)  
                selitem=Items.objects.get(id=pk)
                est_comments=Items_comments.objects.filter(Items=pk)
                stock_value=selitem.opening_stock*selitem.purchase_price  
                latest_date = Item_Transaction_History.objects.filter(items_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
                filtered_data = Item_Transaction_History.objects.filter(Date=latest_date, items_id=pk)
                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'items':items,
                    'selitem':selitem,
                    'stock_value':stock_value,
                    'latest_item_id':filtered_data,
                    'est_comments':est_comments
                    
            } 
                return render(request,'zohomodules/items/itemsoverview.html',content) 

    
    #--------------------------------------------------- TINTO VIEW ITEMS END-------------------------------------------


        #--------------------------------------------------- TINTO VIEW CHART OF ACCOUNTS START-------------------------------------------
def addchartofaccounts(request):                                                                #new by tinto mt
        if 'login_id' in request.session:
            login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                item=Items.objects.filter(company=dash_details.company)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                units = Unit.objects.filter(company=dash_details.company)
                accounts=Chart_of_Accounts.objects.filter(company=dash_details.company)
                context = {
                     'details': dash_details,
        
                    'allmodules': allmodules,
         
                }
                return render(request,'zohomodules/chartofaccounts/addchartofaccounts.html',context)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            item=Items.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            units = Unit.objects.filter(company=dash_details)
            accounts=Chart_of_Accounts.objects.filter(company=dash_details)
            context = {
                    'details': dash_details,
          
                    'allmodules': allmodules,
           
            }
    
            return render(request,'zohomodules/chartofaccounts/addchartofaccounts.html',context)


def chartofaccounts(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc=Chart_of_Accounts.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
  

def create_account(request):                                                                #new by tinto mt
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            account=Chart_of_Accounts.objects.all()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.logindetails=log_user
            b.action="Created"
            b.Date=date.today()
            a.login_details=log_user
            a.company=c
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number2",None)
            a.account_description = request.POST['description']
            if a.account_type=="Other Current Assets":

                a.sub_account = request.POST.get("sub_account",None)
                a.parent_account = request.POST.get("parent_account",None)
               

            if a.account_type=="Cash":
             
                a.sub_account = request.POST.get("sub_account22",None)
                a.parent_account = request.POST.get("parent_account22",None)
               

            if a.account_type=="Fixed Assets":
            
                a.sub_account = request.POST.get("sub_account33",None)
                a.parent_account = request.POST.get("parent_account33",None)
               
            
            if a.account_type=="Stock":
               
                a.sub_account = request.POST.get("sub_account44",None)
                a.parent_account = request.POST.get("parent_account44",None)
             
            
            if a.account_type=="Other Current Liability":
             
                a.sub_account = request.POST.get("sub_account55",None)
                a.parent_account = request.POST.get("parent_account55",None)
               
            if a.account_type=="Long Term Liability":
            
                a.sub_account = request.POST.get("sub_account66",None)
                a.parent_account = request.POST.get("parent_account66",None)
              
            
            if a.account_type=="Other Liability":
              
                a.sub_account = request.POST.get("sub_account77",None)
                a.parent_account = request.POST.get("parent_account77",None)
              
            if a.account_type=="Equity":
            
                a.sub_account = request.POST.get("sub_account88",None)
                a.parent_account = request.POST.get("parent_account88",None)
            
            
            if a.account_type=="Income":
             
                a.sub_account = request.POST.get("sub_account99",None)
                a.parent_account = request.POST.get("parent_account99",None)
              
            
            if a.account_type=="Expense":
             
                a.sub_account = request.POST.get("sub_account100",None)
                a.parent_account = request.POST.get("parent_account100",None)
              
            if a.account_type=="Cost Of Goods Sold":
              
                a.sub_account = request.POST.get("sub_account111",None)
                a.parent_account = request.POST.get("parent_account111",None)
             
            if a.account_type=="Other Expense":
             
                a.sub_account = request.POST.get("sub_account222",None)
                a.parent_account = request.POST.get("parent_account222",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
       

            
    
            a.Create_status="active"
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=c).exists():
                error='yes'
                messages.error(request,'Account with same name exsits !!!')
                return redirect('addchartofaccounts')
            else:
                a.save()
                t=Chart_of_Accounts.objects.get(id=a.id)
                b.chart_of_accounts=t
                b.save()
                return redirect('chartofaccounts')
    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number2",None)
            a.account_description = request.POST['description']
            account_type=request.POST.get("account_type",None)
            if a.account_type=="Other Current Assets":

                a.sub_account = request.POST.get("sub_account",None)
                a.parent_account = request.POST.get("parent_account",None)
               

            if a.account_type=="Cash":
             
                a.sub_account = request.POST.get("sub_account22",None)
                a.parent_account = request.POST.get("parent_account22",None)
               

            if a.account_type=="Fixed Assets":
            
                a.sub_account = request.POST.get("sub_account33",None)
                a.parent_account = request.POST.get("parent_account33",None)
               
            
            if a.account_type=="Stock":
               
                a.sub_account = request.POST.get("sub_account44",None)
                a.parent_account = request.POST.get("parent_account44",None)
             
            
            if a.account_type=="Other Current Liability":
             
                a.sub_account = request.POST.get("sub_account55",None)
                a.parent_account = request.POST.get("parent_account55",None)
               
            if a.account_type=="Long Term Liability":
            
                a.sub_account = request.POST.get("sub_account66",None)
                a.parent_account = request.POST.get("parent_account66",None)
              
            
            if a.account_type=="Other Liability":
              
                a.sub_account = request.POST.get("sub_account77",None)
                a.parent_account = request.POST.get("parent_account77",None)
              
            if a.account_type=="Equity":
            
                a.sub_account = request.POST.get("sub_account88",None)
                a.parent_account = request.POST.get("parent_account88",None)
            
            
            if a.account_type=="Income":
             
                a.sub_account = request.POST.get("sub_account99",None)
                a.parent_account = request.POST.get("parent_account99",None)
              
            
            if a.account_type=="Expense":
             
                a.sub_account = request.POST.get("sub_account100",None)
                a.parent_account = request.POST.get("parent_account100",None)
              
            if a.account_type=="Cost Of Goods Sold":
              
                a.sub_account = request.POST.get("sub_account111",None)
                a.parent_account = request.POST.get("parent_account111",None)
             
            if a.account_type=="Other Expense":
             
                a.sub_account = request.POST.get("sub_account222",None)
                a.parent_account = request.POST.get("parent_account222",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
       
    
            a.Create_status="active"
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=c).exists():
                error='yes'
                messages.error(request,'Account with same name exsits')
                return redirect('addchartofaccounts')
            else:
                a.save()
                t=Chart_of_Accounts.objects.get(id=a.id)
                b.chart_of_accounts=t
                b.save()
                return redirect('chartofaccounts')

    return redirect('addchartofaccounts')

def chartofaccountsoverview(request,pk):                                                                #new by tinto mt
       if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
                    dash_details = StaffDetails.objects.get(login_details=log_details)

                    allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                
                    acc=Chart_of_Accounts.objects.filter(company=dash_details.company)  
                    selacc=Chart_of_Accounts.objects.get(id=pk)  
                    est_comments=chart_of_accounts_comments.objects.filter(chart_of_accounts=pk)
                    latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
                    filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=pk)
                    context = {
                        'details': dash_details,
                    
                        'allmodules': allmodules,
                        'acc':acc,
                        'selacc':selacc,
                        'latest_item_id':filtered_data,
                        'est_comments':est_comments,
                    }
                    return render(request, 'zohomodules/chartofaccounts/chartofaccountsoverview.html',context)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
       
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            acc=Chart_of_Accounts.objects.filter(company=dash_details)  
            selacc=Chart_of_Accounts.objects.get(id=pk)  
            est_comments=chart_of_accounts_comments.objects.filter(chart_of_accounts=pk)
            latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
            filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=pk)
            context = {
                        'details': dash_details,
                    
                        'allmodules': allmodules,
                        'acc':acc,
                        'selacc':selacc,
                        'latest_item_id':filtered_data,
                        'est_comments':est_comments,
                    }
    
            return render(request, 'zohomodules/chartofaccounts/chartofaccountsoverview.html',context)



   
        
    # acc=Chart_of_Accounts.objects.all()  
    # selacc=Chart_of_Accounts.objects.get(id=pk)  
    # est_comments=chart_of_accounts_comments.objects.filter(chart_of_accounts=pk)
    # latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=pk).aggregate(latest_date=Max('Date'))['latest_date']    
    # filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=pk)
    # return render(request, 'zohomodules/chartofaccounts/chartofaccountsoverview.html',{'acc':acc,'selacc':selacc,'latest_item_id':filtered_data,'est_comments':est_comments})


from django.shortcuts import render, redirect

def editchartofaccounts(request, pr):                                                                #new by tinto mt
    # Retrieve the chart of accounts entry
    

    # Check if 'company_id' is in the session
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    
    # Retrieve the chart of accounts entry
    acc = get_object_or_404(Chart_of_Accounts, id=pr)

    # Check if 'company_id' is in the session

    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
     
        dash_details = CompanyDetails.objects.get(login_details=log_user)
       
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
   
        context = {
                    'acc': acc,
              
                    'details': dash_details,
                   
                    'allmodules': allmodules,
            }
       
    
        
        

        if request.method == 'POST':
        
            b=Chart_of_Accounts_History()
       
            b.company=dash_details
            b.logindetails=log_user
            b.action="Edited"
            b.Date=date.today()
            acc.login_details=log_user
            acc.company=dash_details
            # Update the chart of accounts entry with the form data
            acc.account_type = request.POST['account_type']
            acc.account_name = request.POST['account_name']
            acc.account_code = request.POST['account_code']
            acc.account_description = request.POST['description']
            
            # Save the changes
            acc.save()
            t=Chart_of_Accounts.objects.get(id=acc.id)
            b.chart_of_accounts=t
            b.save()

            # Redirect to another page after successful update
            return redirect('chartofaccountsoverview', pr)
        return render(request, 'zohomodules/chartofaccounts/editchartofaccounts.html', context)
    if log_user.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_user)
                
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        
   
        context = {
                    'acc': acc,
              
                    'details': dash_details,
                   
                    'allmodules': allmodules,
            }
        if request.method=='POST':
         
            b=Chart_of_Accounts_History()
         
            c=dash_details.company
            b.company=c
            b.logindetails=log_user
            b.action="Edited"
            b.Date=date.today()
            acc.login_details=log_user
            acc.company=c
            # Update the chart of accounts entry with the form data
            acc.account_type = request.POST['account_type']
            acc.account_name = request.POST['account_name']
            acc.account_code = request.POST['account_code']
            acc.account_description = request.POST['description']
            
            # Save the changes
            acc.save()
            t=Chart_of_Accounts.objects.get(id=acc.id)
            b.chart_of_accounts=t
            b.save()

            # Redirect to another page after successful update
            return redirect('chartofaccountsoverview', pr)
        return render(request, 'zohomodules/chartofaccounts/editchartofaccounts.html', context)

def deleteaccount(request,pl):                                                                #new by tinto mt
    acc=Chart_of_Accounts.objects.filter(id=pl)
    acc.delete()
    
    return redirect(chartofaccounts)


def acc_status_edit(request, pv):                                                                #new by tinto mt
    
    selacc = Chart_of_Accounts.objects.get(id=pv)

    if selacc.status == 'Active':
        selacc.status = 'inactive'
        selacc.save()
    elif selacc.status != 'Active':
        selacc.status = 'Active'
        selacc.save()

    selacc.save()

    return redirect('chartofaccountsoverview',pv)


def add_account_comment(request,pc):                                                                #new by tinto mt

    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        if request.method=="POST":
                    
                    com=chart_of_accounts_comments()
                    c = CompanyDetails.objects.get(login_details=company_id)
            
                    comment_comments=request.POST['comment']
                    com.company=c
                    com.logindetails=log_user
                    com.comments=comment_comments
                    acc=Chart_of_Accounts.objects.get(id=pc)
                    com.chart_of_accounts=acc
                    
                    com.save()
                    return redirect('chartofaccountsoverview',pc)

    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            com=chart_of_accounts_comments()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            
            comment_comments=request.POST['comment']
            com.company=c
            com.logindetails=log_user
            com.comments=comment_comments
            acc=Chart_of_Accounts.objects.get(id=pc)
            com.chart_of_accounts=acc
                    
            com.save()
            return redirect('chartofaccountsoverview',pc)


def delete_account_comment(request,ph,pr):                                                                #new by tinto mt
    acc=chart_of_accounts_comments.objects.filter(id=ph)
    acc.delete()
    ac=Chart_of_Accounts.objects.get(id=pr)
    
    return redirect(chartofaccountsoverview,ac.id)

def account_view_sort_by_name(request,pk):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc = Chart_of_Accounts.objects.filter(company=dash_details.company).order_by('account_name')
                selacc = Chart_of_Accounts.objects.get(id=pk)
                est_comments = chart_of_accounts_comments.objects.filter(chart_of_accounts=pk)

                latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=pk).aggregate(latest_date=Max('Date'))['latest_date']
                filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=pk)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc': acc, 
                        'selacc': selacc, 
                        'latest_item_id': filtered_data,
                        'est_comments': est_comments,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccountsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                acc = Chart_of_Accounts.objects.filter(company=dash_details).order_by('account_name')
                selacc = Chart_of_Accounts.objects.get(id=pk)
                est_comments = chart_of_accounts_comments.objects.filter(chart_of_accounts=pk)

                latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=pk).aggregate(latest_date=Max('Date'))['latest_date']
                filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=pk)
                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                        'details': dash_details,
                        'acc': acc, 
                        'selacc': selacc, 
                        'latest_item_id': filtered_data,
                        'est_comments': est_comments,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccountsoverview.html',content)


def shareaccountToEmail(request,pt):                                                                #new by tinto mt
    if request.user: 
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                print(emails_list)
                print('1')
           
           
                acc = Chart_of_Accounts.objects.get(id=pt)
                context = {
                
                    'selacc':acc,
                }
                print('2')
                template_path = 'zohomodules/chartofaccounts/accountemailpdf.html'
                print('3')
                template = get_template(template_path)
                print('4')
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                print('5')
                filename = f'Account Details.pdf'
                subject = f"Account"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Account Details. \n{email_message}\n\n--\nRegards,\n{acc.account_name}\n{acc.account_type}", from_email=settings.EMAIL_HOST_USER,to=emails_list)
                email.attach(filename,pdf,"application/pdf")
                email.send(fail_silently=False)
                msg = messages.success(request, 'Details has been shared via email successfully..!')
                return redirect(chartofaccountsoverview,pt)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(chartofaccountsoverview,pt)
        
        #--------------------------------------------------- TINTO VIEW CHART OF ACCOUNTS END-------------------------------------------
        
        
def chartofaccountsActive(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,status="active")
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc=Chart_of_Accounts.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
            
def chartofaccountsInactive(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,status="inactive")
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc=Chart_of_Accounts.objects.filter(company=dash_details,status="inactive")
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
            
            
#------------------------------------payroll employee--------------------------------
#------------------------------------------------GEORGE MATHEW---------------------------------------
def payroll_employee_create(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    blood=Bloodgroup.objects.all()
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    content = {
            'details': dash_details,
            'allmodules': allmodules,
            'log_id':log_details,
            'blood':blood
            
    }
    return render(request,'zohomodules/payroll-employee/payroll_create_employee.html',content)
    
def employee_list(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        pay=payroll_employee.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        content = {
                'details': dash_details,
                'pay':pay,
                'allmodules': allmodules,
                'log_id':log_details
        }
        return render(request,'zohomodules/payroll-employee/payroll_list.html',content)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        pay=payroll_employee.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        content = {
                'details': dash_details,
                'pay':pay,
                'allmodules': allmodules,
                'log_id':log_details
        }
        return render(request,'zohomodules/payroll-employee/payroll_list.html',content)
        
def employee_overview(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type =='Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        pay=payroll_employee.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        p=payroll_employee.objects.get(id=pk)
        comment_data=payroll_employee_comment.objects.filter(employee=pk)
        history=employee_history.objects.filter(employee=pk)
    if log_details.user_type =='Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        pay=payroll_employee.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        p=payroll_employee.objects.get(id=pk)
        comment_data=payroll_employee_comment.objects.filter(employee=pk)
        history=employee_history.objects.filter(employee=pk)
    content = {
                'details': dash_details,
                'pay':pay,
                'p':p,
                'allmodules': allmodules,
                'comment':comment_data,
                'history':history,
                'log_id':log_details,
        }
    return render(request,'zohomodules/payroll-employee/overview_page.html',content)
    
def create_employee(request):
    if request.method=='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':    
            company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            title=request.POST['title']
            fname=request.POST['fname']
            lname=request.POST['lname']
            alias=request.POST['alias']
            joindate=request.POST['joindate']
            salarydate=request.POST['salary']
            saltype=request.POST['saltype']
            if (saltype == 'Fixed'):
                salary=request.POST['fsalary']
            else:
                salary=request.POST['vsalary']
            image=request.FILES.get('file')
            amountperhr=request.POST['amnthr']
            workhr=request.POST['hours'] 
            empnum=request.POST['empnum']
            if payroll_employee.objects.filter(emp_number=empnum,company=company_details):
                messages.info(request,'employee number all ready exists')
                return redirect('payroll_employee_create')
            designation = request.POST['designation']
            location=request.POST['location']
            gender=request.POST['gender']
            dob=request.POST['dob']
            blood=request.POST['blood']
            fmname=request.POST['fm_name']
            sname=request.POST['s_name']        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            phone=request.POST['phone']
            ephone=request.POST['ephone']
            result_set1 = payroll_employee.objects.filter(company=company_details,Phone=phone)
            result_set2 = payroll_employee.objects.filter(company=company_details,emergency_phone=ephone)
            if result_set1:
                messages.error(request,'phone no already exists')
                return redirect('payroll_employee_create')
            if result_set2:
                messages.error(request,'phone no already exists')
                return redirect('payroll_employee_create')
            email=request.POST['email']
            result_set = payroll_employee.objects.filter(company=company_details,email=email)
            if result_set:
                messages.error(request,'email already exists')
                return redirect('payroll_employee_create')
            isdts=request.POST['tds']
            attach=request.FILES.get('attach')
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']
            an=request.POST['an']
            if payroll_employee.objects.filter(Aadhar=an,company=company_details):
                    messages.error(request,'Aadhra number already exists')
                    return redirect('payroll_employee_create')   
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
                payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                            emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                            amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                            UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=dash_details,login_details=log_details)
                payroll.save()
                history=employee_history(company=dash_details,login_details=log_details, employee=payroll,Action='CREATED')
                history.save()
                messages.info(request,'employee created')
                return redirect('employee_list')
        if log_details.user_type == 'Staff':
            company_details = StaffDetails.objects.get(login_details=log_details)
            title=request.POST['title']
            fname=request.POST['fname']
            lname=request.POST['lname']
            alias=request.POST['alias']
            joindate=request.POST['joindate']
            salarydate=request.POST['salary']
            saltype=request.POST['saltype']
            if (saltype == 'Fixed'):
                salary=request.POST['fsalary']
            else:
                salary=request.POST['vsalary']
            image=request.FILES.get('file')
            amountperhr=request.POST['amnthr']
            workhr=request.POST['hours'] 
            empnum=request.POST['empnum']
            if payroll_employee.objects.filter(emp_number=empnum,company=company_details.company):
                messages.info(request,'employee number all ready exists')
                return redirect('payroll_employee_create')
            designation = request.POST['designation']
            location=request.POST['location']
            gender=request.POST['gender']
            dob=request.POST['dob']
            blood=request.POST['blood']
            fmname=request.POST['fm_name']
            sname=request.POST['s_name']        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            phone=request.POST['phone']
            ephone=request.POST['ephone']
            result_set1 = payroll_employee.objects.filter(company=company_details.company,Phone=phone)
            result_set2 = payroll_employee.objects.filter(company=company_details.company,emergency_phone=ephone)
            if result_set1:
                messages.error(request,'phone no already exists')
                return redirect('payroll_employee_create')
            if result_set2:
                messages.error(request,'emerency phone no already exists')
                return redirect('payroll_employee_create')
            email=request.POST['email']
            result_set = payroll_employee.objects.filter(company=company_details.company,email=email)
            if result_set:
                messages.error(request,'email already exists')
                return redirect('payroll_employee_create')
            isdts=request.POST['tds']
            attach=request.FILES.get('attach')
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']
            an=request.POST['an']
            if payroll_employee.objects.filter(Aadhar=an,company=company_details.company):
                    messages.error(request,'Aadhra number already exists')
                    return redirect('payroll_employee_create')   
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            dash_details = StaffDetails.objects.get(login_details=log_details)
            payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                         emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                         amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                         UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=dash_details.company,login_details=log_details)
            payroll.save()
            history=employee_history(company=dash_details.company,login_details=log_details, employee=payroll,Action='CREATED')
            history.save()
            messages.info(request,'employee created')
            return redirect('employee_list')
    return redirect('payroll_employee_create')
    
def payroll_employee_edit(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    blood=Bloodgroup.objects.all()
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        p=payroll_employee.objects.get(id=pk)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        p=payroll_employee.objects.get(id=pk)
        
    print(p)
    content = {
            'details': dash_details,
            'allmodules': allmodules,
            'p':p,
            'log_id':log_details,
            'blood':blood
    }
    return render(request,'zohomodules/payroll-employee/edit_employee.html',content)
    
def do_payroll_edit(request,pk):
    if request.method=='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type =='Company':
            company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)    
            title=request.POST['title']
            fname=request.POST['fname']
            lname=request.POST['lname']
            alias=request.POST['alias']
            joindate=request.POST['joindate']
            salarydate=request.POST['salary']
            saltype=request.POST['saltype']
            if (saltype == 'Fixed' or saltype =='Temporary'):
                salary=request.POST['fsalary']
            else:
                salary=request.POST['vsalary']
            image=request.FILES.get('file')
            amountperhr=request.POST['amnthr']
            workhr=request.POST['hours']
            empnum=request.POST['empnum']
            result_set2 = payroll_employee.objects.filter(company=company_details,emp_number=empnum).exclude(id=pk)
            if result_set2:
                messages.error(request,'employee number  already exists')
                return redirect('payroll_employee_edit',pk)
            designation = request.POST['designation']
            location=request.POST['location']
            gender=request.POST['gender']
            dob=request.POST['dob']
            blood=request.POST['blood']
            fmname=request.POST['fm_name']
            sname=request.POST['s_name']        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            phone=request.POST['phone']
            ephone=request.POST['ephone']
            result_set1 = payroll_employee.objects.filter(company=company_details,Phone=phone).exclude(id=pk)
            result_set3 = payroll_employee.objects.filter(company=company_details,emergency_phone=phone).exclude(id=pk)
            if result_set1:
                messages.error(request,'phone no already exists')
                return redirect('payroll_employee_edit',pk)
            if result_set3:
                messages.error(request,'emergency phone no already exists')
                return redirect('payroll_employee_edit',pk)
            email=request.POST['email']
            result_set = payroll_employee.objects.filter(company=company_details,email=email).exclude(id=pk)
            if result_set:
                messages.error(request,'email already exists')
                return redirect('payroll_employee_edit',pk)
            isdts=request.POST['tds']
            attach=request.FILES.get('attach')
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']
            an=request.POST['an'] 
            if payroll_employee.objects.filter(Aadhar=an,company=company_details).exclude(id=pk):
                messages.error(request,'Aadhra number already exists')
                return redirect('payroll_employee_edit',pk)
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
                payroll= payroll_employee.objects.get(id=pk)
                payroll.title=title
                payroll.first_name=fname
                payroll.last_name=lname
                payroll.alias=alias
                if len(request.FILES) != 0:
                    if image :
                        if payroll.image:
                            try:
                                # Check if the file exists before removing it
                                if os.path.exists(payroll.image.path):
                                    os.remove(payroll.image.path)
                            except Exception as e:
                                return redirect('payroll_employee_edit',pk)

                            # Assign the new file to payroll.image
                            payroll.image = image
                        else:
                            # Assign the new file to payroll.image
                            payroll.image = image
                payroll.joindate=joindate
                payroll.salary_type=saltype
                payroll.salary=salary
                age=age
                payroll.emp_number=empnum
                payroll.designation=designation
                payroll.location=location
                payroll.gender=gender
                payroll.dob=dob
                payroll.blood=blood
                payroll.parent=fmname
                payroll.spouse_name=sname
                payroll.workhr=workhr
                payroll.amountperhr = amountperhr
                payroll.address=address
                payroll.permanent_address=paddress
                payroll.Phone=phone
                payroll.emergency_phone=ephone
                payroll.email=email
                payroll.Income_tax_no=itn
                payroll.Aadhar=an
                payroll.UAN=uan
                payroll.PFN=pfn
                payroll.PRAN=pran
                if len(request.FILES) !=0:
                    if attach :
                        if payroll.uploaded_file:
                            try:
                                # Check if the file exists before removing it
                                if os.path.exists(payroll.uploaded_file.path):
                                    os.remove(payroll.uploaded_file.path)
                            except Exception as e:
                                return redirect('payroll_employee_edit',pk)

                            # Assign the new file to payroll.image
                            payroll.uploaded_file = attach
                        else:
                            # Assign the new file to payroll.image
                            payroll.uploaded_file = attach
                payroll.isTDS=istdsval
                payroll.TDS_percentage=tds
                payroll.salaryrange = salarydate
                payroll.acc_no=accno
                payroll.IFSC=ifsc
                payroll.bank_name=bname
                payroll.branch=branch
                payroll.transaction_type=ttype
                payroll.company=dash_details
                payroll.login_details=log_details
                payroll.save()
                history=employee_history(company=dash_details,login_details=log_details, employee=payroll,Action='EDITED')
                history.save()
                messages.info(request,'Updated')
                return redirect('employee_overview',pk)
        if log_details.user_type == 'Staff':
            if log_details.user_type =='Staff':
                company_details = StaffDetails.objects.get(login_details=log_details)    
                title=request.POST['title']
                fname=request.POST['fname']
                lname=request.POST['lname']
                alias=request.POST['alias']
                joindate=request.POST['joindate']
                salarydate=request.POST['salary']
                saltype=request.POST['saltype']
                if (saltype == 'Fixed' or saltype =='Temporary'):
                    salary=request.POST['fsalary']
                else:
                    salary=request.POST['vsalary']
                image=request.FILES.get('file')
                amountperhr=request.POST['amnthr']
                workhr=request.POST['hours']
                empnum=request.POST['empnum']
                result_set2 = payroll_employee.objects.filter(company=company_details.company,emp_number=empnum).exclude(id=pk)
                if result_set2:
                    messages.error(request,'employee number  already exists')
                    return redirect('payroll_employee_edit',pk)
                designation = request.POST['designation']
                location=request.POST['location']
                gender=request.POST['gender']
                dob=request.POST['dob']
                blood=request.POST['blood']
                fmname=request.POST['fm_name']
                sname=request.POST['s_name']        
                add1=request.POST['address']
                add2=request.POST['address2']
                address=add1+" "+add2
                padd1=request.POST['paddress'] 
                padd2=request.POST['paddress2'] 
                paddress= padd1+padd2
                phone=request.POST['phone']
                ephone=request.POST['ephone']
                result_set1 = payroll_employee.objects.filter(company=company_details.company,Phone=phone).exclude(id=pk)
                result_set3 = payroll_employee.objects.filter(company=company_details.company,emergency_phone=ephone).exclude(id=pk)
                if result_set1:
                    messages.error(request,'phone no already exists')
                    return redirect('payroll_employee_edit',pk)
                if result_set3:
                    messages.error(request,'emergency phone no already exists')
                    return redirect('payroll_employee_edit',pk)
                email=request.POST['email']
                result_set = payroll_employee.objects.filter(company=company_details.company,email=email).exclude(id=pk)
                if result_set:
                    messages.error(request,'email already exists')
                    return redirect('payroll_employee_edit',pk)
                isdts=request.POST['tds']
                attach=request.FILES.get('attach')
                if isdts == '1':
                    istdsval=request.POST['pora']
                    if istdsval == 'Percentage':
                        tds=request.POST['pcnt']
                    elif istdsval == 'Amount':
                        tds=request.POST['amnt']
                else:
                    istdsval='No'
                    tds = 0
                itn=request.POST['itn']
                an=request.POST['an'] 
                if payroll_employee.objects.filter(Aadhar=an,company=company_details.company).exclude(id=pk):
                    messages.error(request,'Aadhra number already exists')
                    return redirect('payroll_employee_edit',pk)
                uan=request.POST['uan'] 
                pfn=request.POST['pfn']
                pran=request.POST['pran']
                age=request.POST['age']
                bank=request.POST['bank']
                accno=request.POST['acc_no']       
                ifsc=request.POST['ifsc']       
                bname=request.POST['b_name']       
                branch=request.POST['branch']
                ttype=request.POST['ttype']
                dash_details = StaffDetails.objects.get(login_details=log_details)
                payroll= payroll_employee.objects.get(id=pk)
                payroll.title=title
                payroll.first_name=fname
                payroll.last_name=lname
                payroll.alias=alias
                if len(request.FILES) != 0:
                    if image :
                        if payroll.image:
                            try:
                                # Check if the file exists before removing it
                                if os.path.exists(payroll.image.path):
                                    os.remove(payroll.image.path)
                            except Exception as e:
                                return redirect('payroll_employee_edit',pk)

                            # Assign the new file to payroll.image
                            payroll.image = image
                        else:
                            # Assign the new file to payroll.image
                            payroll.image = image
                payroll.joindate=joindate
                payroll.salary_type=saltype
                payroll.salary=salary
                age=age
                payroll.emp_number=empnum
                payroll.designation=designation
                payroll.location=location
                payroll.gender=gender
                payroll.dob=dob
                payroll.blood=blood
                payroll.parent=fmname
                payroll.spouse_name=sname
                payroll.workhr=workhr
                payroll.amountperhr = amountperhr
                payroll.address=address
                payroll.permanent_address=paddress
                payroll.Phone=phone
                payroll.emergency_phone=ephone
                payroll.email=email
                payroll.Income_tax_no=itn
                payroll.Aadhar=an
                payroll.UAN=uan
                payroll.PFN=pfn
                payroll.PRAN=pran
                if len(request.FILES) !=0:
                    if attach :
                        if payroll.uploaded_file:
                            try:
                                # Check if the file exists before removing it
                                if os.path.exists(payroll.uploaded_file.path):
                                    os.remove(payroll.uploaded_file.path)
                            except Exception as e:
                                return redirect('payroll_employee_edit',pk)

                            # Assign the new file to payroll.image
                            payroll.uploaded_file = attach
                        else:
                            # Assign the new file to payroll.image
                            payroll.uploaded_file = attach
                payroll.isTDS=istdsval
                payroll.TDS_percentage=tds
                payroll.salaryrange = salarydate
                payroll.acc_no=accno
                payroll.IFSC=ifsc
                payroll.bank_name=bname
                payroll.branch=branch
                payroll.transaction_type=ttype
                payroll.company=dash_details.company
                payroll.login_details=log_details
                payroll.save()
                history=employee_history(company=dash_details.company,login_details=log_details, employee=payroll,Action='EDITED')
                history.save()
                messages.info(request,'Updated')
                return redirect('employee_overview',pk)
    return redirect('employee_overview',pk)
    
def add_comment(request,pk):
    if request.method =='POST':
        comment_data=request.POST['comments']
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        payroll= payroll_employee.objects.get(id=pk) 
        data=payroll_employee_comment(comment=comment_data,login_details=log_details,employee=payroll)
        data.save()
        return redirect('employee_overview',pk)
    return redirect('employee_overview',pk)
    
def delete_commet(request,pk,pi):
    data=payroll_employee_comment.objects.get(id=pk)
    data.delete()
    return redirect('employee_overview',pi)
    
def delete_employee(request,pk):
    data=payroll_employee.objects.get(id=pk)
    data.delete()
    return redirect('employee_list')
    
def employee_status(request,pk):
    data=payroll_employee.objects.get(id=pk)
    if data.status == 'Active':
        data.status ='Inactive'
    elif data.status == 'Inactive':
        data.status ='Active'
    data.save()
    return redirect('employee_overview',pk)
    
def add_blood(request):
    if request.method == 'POST':
        blood = request.POST.get('blood')
        print(blood)

        # Validate input
        if not blood:
            return JsonResponse({'message': 'Invalid or missing blood group'})

        # Use get_or_create for simplicity
        if Bloodgroup.objects.filter(Blood_group=blood):
            return JsonResponse({'message': 'Blood group already exists'})
        Bloodgroup.objects.create(Blood_group=blood)
        data=Bloodgroup.objects.all()
        return JsonResponse({'message': 'Blood group added','blood' : blood})
        
def import_payroll_excel(request):
    print(1)
    print('hello')
    if request.method == 'POST' :
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            if 'empfile' in request.FILES:
                excel_bill = request.FILES['empfile']
                excel_b = load_workbook(excel_bill)
                eb = excel_b['Sheet1']
                for row_number1 in range(2, eb.max_row + 1):
                    billsheet = [eb.cell(row=row_number1, column=col_num).value for col_num in range(1, eb.max_column + 1)]
                    payroll=payroll_employee(title=billsheet[0],first_name=billsheet[1],last_name=billsheet[2],alias=billsheet[3],joindate=datetime.date.fromisoformat(billsheet[4]),salary_type=billsheet[6],salary=billsheet[9],
                                emp_number=billsheet[10],designation=billsheet[11],location=billsheet[12], gender=billsheet[13],dob=datetime.date.fromisoformat(billsheet[14]),blood=billsheet[15],parent=billsheet[16],spouse_name=billsheet[17],workhr=billsheet[8],
                                amountperhr = billsheet[7], address=billsheet[19],permanent_address=billsheet[18],Phone=billsheet[20],emergency_phone=billsheet[21], email=billsheet[22],Income_tax_no=billsheet[32],Aadhar=billsheet[33],
                                UAN=billsheet[34],PFN=billsheet[35],PRAN=billsheet[36],isTDS=billsheet[29],TDS_percentage=billsheet[30],salaryrange = billsheet[5],acc_no=billsheet[24],IFSC=billsheet[25],bank_name=billsheet[26],branch=billsheet[27],transaction_type=billsheet[28],company=dash_details.company,login_details=log_details)
                    payroll.save()
                    history=employee_history(company=dash_details.company,login_details=log_details, employee=payroll,Action='IMPORTED')
                    history.save()
                    messages.warning(request,'file imported')
                    return redirect('employee_list')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            if 'empfile' in request.FILES:
                excel_bill = request.FILES['empfile']
                excel_b = load_workbook(excel_bill)
                eb = excel_b['Sheet1']
                for row_number1 in range(2, eb.max_row + 1):
                    billsheet = [eb.cell(row=row_number1, column=col_num).value for col_num in range(1, eb.max_column + 1)]
                    payroll=payroll_employee(title=billsheet[0],first_name=billsheet[1],last_name=billsheet[2],alias=billsheet[3],joindate=billsheet[4],salary_type=billsheet[6],salary=billsheet[9],
                                emp_number=billsheet[10],designation=billsheet[11],location=billsheet[12], gender=billsheet[13],dob=billsheet[14],blood=billsheet[15],parent=billsheet[16],spouse_name=billsheet[17],workhr=billsheet[8],
                                amountperhr = billsheet[7], address=billsheet[19],permanent_address=billsheet[18],Phone=billsheet[20],emergency_phone=billsheet[21], email=billsheet[22],Income_tax_no=billsheet[32],Aadhar=billsheet[33],
                                UAN=billsheet[34],PFN=billsheet[35],PRAN=billsheet[36],isTDS=billsheet[29],TDS_percentage=billsheet[30],salaryrange = billsheet[5],acc_no=billsheet[24],IFSC=billsheet[25],bank_name=billsheet[26],branch=billsheet[27],transaction_type=billsheet[28],company=dash_details,login_details=log_details)
                    payroll.save()
                    history=employee_history(company=dash_details,login_details=log_details, employee=payroll,Action='IMPORTED')
                    history.save()
                    messages.warning(request,'file imported')
                    return redirect('employee_list')
    messages.error(request,'File upload Failed!11')
    return redirect('employee_list')
    
def add_file(request,pk):
    if request.method == 'POST':
        data=request.FILES.get('file')
        payroll=payroll_employee.objects.get(id=pk)
        if payroll.uploaded_file:
            try:
                                # Check if the file exists before removing it
                if os.path.exists(payroll.uploaded_file.path):
                    os.remove(payroll.uploaded_file.path)
            except Exception as e:
                messages.error(request,'file upload error')
                return redirect('employee_overview',pk)

                            # Assign the new file to payroll.image
            payroll.uploaded_file = data
            payroll.save()
            messages.info(request,'fil uploaded')
            return redirect('employee_overview',pk)
        else:
            payroll.uploaded_file = data
            payroll.save()
        messages.info(request,'fil uploaded')
        return redirect('employee_overview',pk)
        
def shareemail(request,pk):
    try:
            if request.method == 'POST':
                emails_string = request.POST['email']

    
                emails_list = [email.strip() for email in emails_string.split(',')]
                print(emails_list)
                p=payroll_employee.objects.get(id=pk)
                        
                context = {'p':p}
                template_path = 'zohomodules/payroll-employee/mailoverview.html'
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'{p.first_name}details - {p.id}.pdf'
                subject = f"{p.first_name}{p.last_name}  - {p.id}-details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached employee details - File-{p.first_name}{p.last_name} .\n--\nRegards,\n", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                messages.success(request, 'over view page has been shared via email successfully..!')
                return redirect('employee_overview',pk)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect('employee_overview',pk)
#----------------------------------------------------------end----------------------------------------


def accounts_asset_filter(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,account_type__in=["Other Current Asset", "Fixed Asset","Other Asset"])
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc = Chart_of_Accounts.objects.filter(company=dash_details,account_type__in=["Other Current Asset", "Fixed Asset","Other Asset"])
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        

def accounts_liability_filter(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,account_type__in=["Other Current Liability", "Other Liability","Long Term Liability","Credit card","Overseas Tax Payable"])
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc = Chart_of_Accounts.objects.filter(company=dash_details,account_type__in=["Other Current Liability", "Other Liability","Long Term Liability","Credit card","Overseas Tax Payable"])
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)


def accounts_equity_filter(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,account_type__in=["Equity"])
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc = Chart_of_Accounts.objects.filter(company=dash_details,account_type__in=["Equity"])
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        

def accounts_income_filter(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,account_type__in=["Income","Other Income"])
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc = Chart_of_Accounts.objects.filter(company=dash_details,account_type__in=["Income","Other Income"])
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
def accounts_expense_filter(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,account_type__in=["Expense","Other Expense","Cost of Goods Sold"])
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            acc = Chart_of_Accounts.objects.filter(company=dash_details,account_type__in=["Expense","Other Expense","Cost of Goods Sold"])
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
            
            
def account_view_sort_by_namelist(request):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                # acc=Chart_of_Accounts.objects.filter(company=dash_details.company)
                acc = Chart_of_Accounts.objects.filter(company=dash_details.company).order_by('account_name')
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc':acc,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            # acc=Chart_of_Accounts.objects.filter(company=dash_details)
            acc = Chart_of_Accounts.objects.filter(company=dash_details).order_by('account_name')
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            content = {
                    'details': dash_details,
                    'acc': acc,
                    'allmodules': allmodules,
            }   
            return render(request,'zohomodules/chartofaccounts/chartofaccounts.html',content)
            
            
def account_view_filterActive(request,ph):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,status="active")
                selacc = Chart_of_Accounts.objects.get(id=ph)
                est_comments = chart_of_accounts_comments.objects.filter(chart_of_accounts=ph)

                latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=ph).aggregate(latest_date=Max('Date'))['latest_date']
                filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=ph)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc': acc, 
                        'selacc': selacc, 
                        'latest_item_id': filtered_data,
                        'est_comments': est_comments,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccountsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details,status="active")
                selacc = Chart_of_Accounts.objects.get(id=ph)
                est_comments = chart_of_accounts_comments.objects.filter(chart_of_accounts=ph)

                latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=ph).aggregate(latest_date=Max('Date'))['latest_date']
                filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=ph)
                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                        'details': dash_details,
                        'acc': acc, 
                        'selacc': selacc, 
                        'latest_item_id': filtered_data,
                        'est_comments': est_comments,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccountsoverview.html',content)
                
                
def account_view_filterinActive(request,ph):                                                                #new by tinto mt
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details.company,status="inactive")
                selacc = Chart_of_Accounts.objects.get(id=ph)
                est_comments = chart_of_accounts_comments.objects.filter(chart_of_accounts=ph)

                latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=ph).aggregate(latest_date=Max('Date'))['latest_date']
                filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=ph)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                content = {
                        'details': dash_details,
                        'acc': acc, 
                        'selacc': selacc, 
                        'latest_item_id': filtered_data,
                        'est_comments': est_comments,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccountsoverview.html',content)
        if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                acc=Chart_of_Accounts.objects.filter(company=dash_details,status="inactive")
                selacc = Chart_of_Accounts.objects.get(id=ph)
                est_comments = chart_of_accounts_comments.objects.filter(chart_of_accounts=ph)

                latest_date = Chart_of_Accounts_History.objects.filter(chart_of_accounts_id=ph).aggregate(latest_date=Max('Date'))['latest_date']
                filtered_data = Chart_of_Accounts_History.objects.filter(Date=latest_date, chart_of_accounts_id=ph)
                allmodules= ZohoModules.objects.get(company=dash_details,status='New')
                content = {
                        'details': dash_details,
                        'acc': acc, 
                        'selacc': selacc, 
                        'latest_item_id': filtered_data,
                        'est_comments': est_comments,
                        'allmodules': allmodules,
                }
                return render(request,'zohomodules/chartofaccounts/chartofaccountsoverview.html',content)
                
                
#----------------- Banking -----------------------------#

def bank_list(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    bnk = Banking.objects.filter(company = cmp)
    allmodules= ZohoModules.objects.get(company = cmp)
    return render(request, 'bank_list.html',{'bnk':bnk, 'allmodules':allmodules, 'details':dash_details})

def load_bank_create(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    bnk = Banking.objects.filter(company = cmp)
    allmodules= ZohoModules.objects.get(company = cmp)
    tod = datetime.now().strftime('%Y-%m-%d')
    return render(request, 'bank_create.html',{'tod':tod, 'allmodules':allmodules, 'details':dash_details})

def bank_create(request):
    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company

        date = request.POST.get('date')
        name = request.POST.get('name')
        opn_bal = request.POST.get('opn_bal')
        if opn_bal != '':
            opn_bal = float(opn_bal)
        else:
            opn_bal = 0
        bal_type=request.POST.get('bal_type')
        branch= request.POST.get('branch')
        ac_no= request.POST.get('ac_no')
        ifsc=request.POST.get('ifsc')

        if Banking.objects.filter(company = cmp, bnk_acno = ac_no).exists():
            messages.info(request, 'Bank with this account number already exsist !!')
            return redirect('bank_list')

        bank = Banking.objects.create(
            login_details = log_details,
            company = cmp,
            bnk_name=name,
            bnk_bal_type = bal_type,
            bnk_opnbal=opn_bal,
            bnk_bal=opn_bal,
            bnk_branch=branch,
            bnk_acno=ac_no,
            bnk_ifsc=ifsc,
            date=date
        )

        bank.save()

        BankTransaction.objects.create( login_details=log_details, company=cmp, banking=bank, trans_amount=opn_bal, trans_adj_date=date, 
                                       trans_type='Opening Balance', trans_adj_type='', trans_adj_amount = opn_bal)

        BankingHistory.objects.create( login_details=log_details, company=cmp, banking=bank, hist_adj_amount = 0, hist_adj_date=date, hist_action='Created')

        return redirect('bank_list')
    
def bank_view(request, id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    allmodules= ZohoModules.objects.get(company = cmp)
    tod = datetime.now().strftime('%Y-%m-%d')
    bnk_list = Banking.objects.filter(company=cmp)
    bnk = Banking.objects.get(id=id, company=cmp)
    show_div = request.GET.get('Transaction', False)
    trans = BankTransaction.objects.filter(company=cmp, banking = bnk)
    hist_f = BankingHistory.objects.get(company = cmp, banking = bnk, hist_action = 'Created')
    hist_l = BankingHistory.objects.filter(company = cmp, banking = bnk).order_by('-id').first()
    context = {'cmp': cmp, 'bnk': bnk, 'bnk_list':bnk_list, 'trans':trans, 'tod':tod, 'id':id, 'show_div':show_div,
               'allmodules':allmodules, 'details':dash_details, 'hist_f':hist_f, 'hist_l':hist_l}
    return render(request, 'bank_view.html', context)

def bank_transaction_create(request, id):
    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company

        date = request.POST.get('date')
        origin = request.POST.get('origin')
        dest = request.POST.get('dest')
        amount = float(request.POST.get('amount', 0.0))
        description = request.POST.get('description')
        ttype = request.POST.get('type')
        adjtype = request.POST.get('adjtype') 
        adjacname = request.POST.get('adjacname')
                    
        if ttype == 'Bank To Cash Transfer':
            origin_bnk = Banking.objects.get(id=origin)
            bal = float(origin_bnk.bnk_bal) - float(amount)
            thist =  BankTransaction.objects.create(
                login_details = log_details,
                company = cmp,
                banking = origin_bnk,
                trans_cur_amount = origin_bnk.bnk_opnbal,
                trans_amount = amount,
                trans_adj_amount = bal,
                trans_desc = description,
                trans_adj_date = date,
                trans_type = 'Bank to Cash',
                trans_adj_type = 'Balance Decrease'
            )
            BankTransactionHistory.objects.create(login_details=log_details, company=cmp, transaction=thist, hist_cur_amount=origin_bnk.bnk_bal, hist_amount=amount, 
                                                  hist_adj_amount = bal, hist_adj_date=date, hist_action='Created')
            origin_bnk.bnk_bal = bal
            origin_bnk.save()

        if ttype == 'Cash To Bank Transfer':
            dest_bnk = Banking.objects.get(id=dest)
            bal = float(dest_bnk.bnk_bal) + float(amount)
            thist = BankTransaction.objects.create(
                login_details = log_details,
                company = cmp,
                banking = dest_bnk,
                trans_cur_amount = dest_bnk.bnk_bal,
                trans_amount = amount,
                trans_adj_amount = bal,
                trans_desc = description,
                trans_adj_date = date,
                trans_type = 'Cash to Bank',
                trans_adj_type = 'Balance Increase'
            )
            BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=thist, hist_cur_amount=dest_bnk.bnk_bal, hist_amount=amount, 
                                                  hist_adj_amount = bal, hist_adj_date=date, hist_action='Created')
            dest_bnk.bnk_bal = bal
            dest_bnk.save()
            
        if ttype == 'Bank To Bank Transfer':
            from_bank = Banking.objects.get(id=origin)
            to_bank = Banking.objects.get(id=dest)
            bal = float(from_bank.bnk_bal) - float(amount)
            thist1 = BankTransaction.objects.create(
                login_details = log_details,
                company = cmp,
                banking = from_bank,
                trans_cur_amount = from_bank.bnk_bal,
                trans_amount = amount,
                trans_adj_amount = bal,
                trans_desc = description,
                trans_adj_date = date,
                trans_type = 'Bank to Bank',
                trans_adj_type = 'Balance Decrease'
            )
            BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=thist1, hist_cur_amount=from_bank.bnk_bal, hist_amount=amount, 
                                                  hist_adj_amount = bal, hist_adj_date=date, hist_action='Created')
            from_bank.bnk_bal = bal
            from_bank.save()

            bal = float(to_bank.bnk_bal) + float(amount)
            thist2 = BankTransaction.objects.create(
                login_details = log_details,
                company = cmp,
                banking = to_bank,
                trans_cur_amount = to_bank.bnk_bal,
                trans_amount = amount,
                trans_adj_amount = bal,
                trans_desc = description,
                trans_adj_date = date,
                trans_type = 'Bank to Bank',
                trans_adj_type = 'Balance Increase'
            )
            BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=thist2, hist_cur_amount=to_bank.bnk_bal, hist_amount=amount, 
                                                  hist_adj_amount = bal, hist_adj_date=date, hist_action='Created')
            to_bank.bnk_bal = bal
            to_bank.save()

            thist1.bank_to_bank_no = thist2.id
            thist2.bank_to_bank_no = thist1.id
            thist1.save()
            thist2.save()
                    
        if ttype == 'Adjust Bank Balance':
            adj_bank = Banking.objects.get(id=adjacname)
            if adjtype == 'Reduce Balance':
                adj_type = 'Balance Decrease'
                bal = float(adj_bank.bnk_bal) - float(amount)
            else:
                adj_type = 'Balance Increase'
                bal = float(adj_bank.bnk_bal) + float(amount)
            thist = BankTransaction.objects.create(
                login_details = log_details,
                company = cmp,
                banking = adj_bank,
                trans_cur_amount = adj_bank.bnk_bal,
                trans_amount = amount,
                trans_adj_amount = bal,
                trans_desc = description,
                trans_adj_date = date,
                trans_type = 'Bank Adjustment',
                trans_adj_type = adj_type
            )
            BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=thist, hist_cur_amount = adj_bank.bnk_bal, hist_amount = amount, 
                                                  hist_adj_amount = bal, hist_adj_date=date, hist_action='Created')
            adj_bank.bnk_bal = bal
            adj_bank.save()
        url = reverse('bank_view', kwargs={'id': id}) + '?Transaction=True'
        return redirect(url)
    
def load_trans_details(request):
    id = request.POST.get('id')
    trans = BankTransaction.objects.get(id=id)
    bnk_org_name = ''
    bnk_dest_name = ''
    if trans.trans_type == 'Bank to Bank':
        dest_trans = BankTransaction.objects.get(id=trans.bank_to_bank_no)
        bnk_org_name = trans.banking.id
        bnk_dest_name = dest_trans.banking.id
    else:
        bnk_org_name = trans.banking.id
        bnk_dest_name = trans.banking.id

    return JsonResponse({'message':'success', 
                         'ttype':trans.trans_type,
                         'origin':bnk_org_name,
                         'destination':bnk_dest_name,
                         'trans_id':trans.id,
                         'trans_adj_type':trans.trans_adj_type,
                         'trans_desc':trans.trans_desc,
                         'trans_adj_date':trans.trans_adj_date,
                         'trans_amount':trans.trans_amount})

def bank_transaction_edit(request):
    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company

        id = request.POST.get('id')
        origin = request.POST.get('origin')
        dest = request.POST.get('dest')
        amount = float((request.POST.get('amount',0.0)))
        edit_date = request.POST.get('edit_date')
        desc = request.POST.get('desc')
        ttype = request.POST.get('type')
        adjtype = request.POST.get('adjtype') 
        adjacname = request.POST.get('adjacname')
                    
        # If it is Bank to Cash Transfer
        if ttype == 'Bank To Cash Transfer':
            htrans = BankTransaction.objects.get(id=id)
            origin_bnk = Banking.objects.get(id=origin)
            # If we did not change the Bank while editing
            if htrans.banking.bnk_acno == origin_bnk.bnk_acno:
                # Changing balance using edit amount
                bal = float(htrans.trans_cur_amount) - float(amount)
                htrans.trans_amount = amount
                htrans.trans_adj_amount = bal
                htrans.trans_desc = desc
                htrans.trans_adj_date = edit_date
                htrans.save()
                # Creating a transaction history for the edit
                BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=htrans, hist_cur_amount = htrans.trans_cur_amount, 
                                                        hist_amount = amount, hist_adj_amount = bal, hist_action='Updated')
                newbal = bal
                # Obtaning all transaction done after the edited transaction for that particular bank
                trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans.banking, id__gt=id)
                # Creating transaction history for all the transactions done after the edited transaction by calculating new balance
                for t in trans_list:
                    t.trans_cur_amount = newbal
                    nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                          hist_amount = t.trans_amount,  hist_action='Updated')
                    if t.trans_adj_type == 'Balance Increase':
                        newbal = float(t.trans_amount) + newbal
                    else:
                        newbal = newbal - float(t.trans_amount)  
                    nhist.hist_adj_amount = newbal
                    nhist.save()
                    t.trans_adj_amount = newbal
                    t.save()
                    
                # Changing final balance for the bank
                origin_bnk.bnk_bal = newbal
                origin_bnk.save()
            # If we changed the Bank while editing
            else:
                origin_bnk = Banking.objects.get(id=origin)
                htrans = BankTransaction.objects.get(id=id)
                # Deleting Transaction history of the transaction
                BankTransactionHistory.objects.filter(transaction = htrans).delete()

                # Obtaning all transaction done after the edited transaction for that particular bank
                trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans.banking, id__gt=id)
                newbal = htrans.trans_cur_amount
                # Creating transaction history for all the transactions done after the edited transaction by calculating new balance
                for t in trans_list:
                    t.trans_cur_amount = newbal
                    nhist = BankTransactionHistory.objects.create(login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                    hist_amount = t.trans_amount,  hist_action='Updated')
                    if t.trans_adj_type == 'Balance Increase':
                        newbal = float(t.trans_amount) + newbal
                    else:
                        newbal = newbal - float(t.trans_amount)  
                    nhist.hist_adj_amount = newbal
                    nhist.save()
                    t.trans_adj_amount = newbal
                    t.save()
                # Changing final balance for the bank
                htrans.banking.bnk_bal = newbal
                htrans.banking.save()

                bal = float(origin_bnk.bnk_bal) - float(amount)
                # Creating a transaction for the new bank
                newtrans = BankTransaction.objects.create(
                    login_details=log_details, 
                    company=cmp,
                    banking = origin_bnk,
                    trans_type = htrans.trans_type,
                    trans_adj_type = htrans.trans_adj_type,
                    trans_cur_amount = origin_bnk.bnk_bal,
                    trans_amount = amount,
                    trans_adj_amount = bal,
                    trans_desc = desc,
                    trans_adj_date = edit_date,
                )
                origin_bnk.bnk_bal = bal
                origin_bnk.save()
                # Creating a transaction history for the new bank
                BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans, hist_cur_amount=newtrans.trans_cur_amount, 
                                                          hist_amount=amount, hist_adj_amount=bal, hist_action='Created')
                # Deleting old bank transaction
                htrans.delete()

        # If it is Cash to Bank Transfer
        if ttype == 'Cash To Bank Transfer':
            htrans = BankTransaction.objects.get(id=id)
            dest_bnk = Banking.objects.get(id=dest)
            if htrans.banking.bnk_acno == dest_bnk.bnk_acno:
                bal = float(htrans.trans_cur_amount) + float(amount)
                htrans.trans_amount = amount
                htrans.trans_adj_amount = bal
                htrans.trans_desc = desc
                htrans.trans_adj_date = edit_date
                htrans.save()
                BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=htrans, hist_cur_amount = htrans.trans_cur_amount, 
                                                        hist_amount = amount, hist_adj_amount = bal, hist_action='Updated')
                newbal = bal
                trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans.banking, id__gt=id)
                for t in trans_list:
                    t.trans_cur_amount = newbal
                    nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                          hist_amount = t.trans_amount,  hist_action='Updated')
                    if t.trans_adj_type == 'Balance Increase':
                        newbal = float(t.trans_amount) + newbal
                    else:
                        newbal = newbal - float(t.trans_amount)  
                    nhist.hist_adj_amount = newbal
                    nhist.save()
                    t.trans_adj_amount = newbal
                    t.save()
                dest_bnk.bnk_bal = newbal
                dest_bnk.save()
            else:
                dest_bnk = Banking.objects.get(id=dest)
                htrans = BankTransaction.objects.get(id=id)
                BankTransactionHistory.objects.filter(transaction = htrans).delete()

                trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans.banking, id__gt=id)
                newbal = htrans.trans_cur_amount
                for t in trans_list:
                    t.trans_cur_amount = newbal
                    nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                          hist_amount = t.trans_amount,  hist_action='Updated')
                    if t.trans_adj_type == 'Balance Increase':
                        newbal = float(t.trans_amount) + newbal
                    else:
                        newbal = newbal - float(t.trans_amount)  
                    nhist.hist_adj_amount = newbal
                    nhist.save()
                    t.trans_adj_amount = newbal
                    t.save()
                htrans.banking.bnk_bal = newbal
                htrans.banking.save()

                bal = float(dest_bnk.bnk_bal) + float(amount)
                newtrans = BankTransaction.objects.create(
                    login_details=log_details, 
                    company=cmp,
                    banking = dest_bnk,
                    trans_type = htrans.trans_type,
                    trans_adj_type = htrans.trans_adj_type,
                    trans_cur_amount = dest_bnk.bnk_bal,
                    trans_amount = amount,
                    trans_adj_amount = bal,
                    trans_desc = desc,
                    trans_adj_date = edit_date,
                )
                dest_bnk.bnk_bal = bal
                dest_bnk.save()
                BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans, hist_cur_amount=newtrans.trans_cur_amount, 
                                                          hist_amount=amount, hist_adj_amount=bal, hist_action='Created')
                htrans.delete()

        # If it is Bank to Bank Transfer   
        if ttype == 'Bank To Bank Transfer':
            htrans_in = BankTransaction.objects.get(id=id)
            htrans_de = BankTransaction.objects.get(id=htrans_in.bank_to_bank_no)

            if htrans_in.trans_adj_type == 'Balance Decrease':
                red_bal = float(htrans_in.trans_cur_amount) - float(amount)
                add_bal = float(htrans_de.trans_cur_amount) + float(amount)
            else:
                red_bal = float(htrans_in.trans_cur_amount) + float(amount)
                add_bal = float(htrans_de.trans_cur_amount) - float(amount)

            origin_bnk = Banking.objects.get(id=origin)
            dest_bnk = Banking.objects.get(id=dest)

            # If Origin Bank is not changed
            if htrans_in.banking.bnk_acno == origin_bnk.bnk_acno:
                # If destination bank is not changed
                if htrans_in.banking.bnk_acno == dest_bnk.bnk_acno:
                    htrans_in.trans_amount = amount
                    htrans_in.trans_adj_amount = red_bal
                    htrans_in.trans_desc = desc
                    htrans_in.trans_adj_date = edit_date
                    htrans_in.save()
                    BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=htrans_in, hist_cur_amount = htrans_in.trans_cur_amount, 
                                                            hist_amount = amount, hist_adj_amount = red_bal, hist_action='Updated')
                    newbal = red_bal
                    trans_list = BankTransaction.objects.filter(company=cmp, banking=origin_bnk, id__gt=htrans_in.id)
                    for t in trans_list:
                        t.trans_cur_amount = newbal
                        nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                        if t.trans_adj_type == 'Balance Increase':
                            newbal = float(t.trans_amount) + newbal
                        else:
                            newbal = newbal - float(t.trans_amount)  
                        nhist.hist_adj_amount = newbal
                        nhist.save()
                        t.trans_adj_amount = newbal
                        t.save()
                    origin_bnk.bnk_bal = newbal
                    origin_bnk.save()

                    htrans_de.trans_amount = amount
                    htrans_de.trans_adj_amount = add_bal
                    htrans_de.trans_desc = desc
                    htrans_de.trans_adj_date = edit_date
                    htrans_de.save()
                    BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=htrans_de, hist_cur_amount = htrans_de.trans_cur_amount, 
                                                            hist_amount = amount, hist_adj_amount = add_bal, hist_action='Updated')
                    newbal = add_bal
                    trans_list = BankTransaction.objects.filter(company=cmp, banking=dest_bnk, id__gt=htrans_de.id)
                    for t in trans_list:
                        t.trans_cur_amount = newbal
                        nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                        if t.trans_adj_type == 'Balance Increase':
                            newbal = float(t.trans_amount) + newbal
                        else:
                            newbal = newbal - float(t.trans_amount)  
                        nhist.hist_adj_amount = newbal
                        nhist.save()
                        t.trans_adj_amount = newbal
                        t.save()
                    dest_bnk.bnk_bal = newbal
                    dest_bnk.save()
                #if destination bank is changed
                else:
                    htrans_in.trans_amount = amount
                    htrans_in.trans_adj_amount = red_bal
                    htrans_in.trans_desc = desc
                    htrans_in.trans_adj_date = edit_date
                    htrans_in.save()
                    BankTransactionHistory.objects.create(login_details=log_details, company=cmp, transaction=htrans_in, hist_cur_amount=htrans_in.trans_cur_amount, 
                                                            hist_amount = amount, hist_adj_amount = red_bal, hist_action='Updated')
                    newbal = red_bal
                    trans_list = BankTransaction.objects.filter(company=cmp, banking=origin_bnk, id__gt=htrans_in.id)
                    for t in trans_list:
                        t.trans_cur_amount = newbal
                        nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                        if t.trans_adj_type == 'Balance Increase':
                            newbal = float(t.trans_amount) + newbal
                        else:
                            newbal = newbal - float(t.trans_amount)  
                        nhist.hist_adj_amount = newbal
                        nhist.save()
                        t.trans_adj_amount = newbal
                        t.save()
                    origin_bnk.bnk_bal = newbal
                    origin_bnk.save()


                    BankTransactionHistory.objects.filter(transaction = htrans_de).delete()
                    trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_de.banking, id__gt=htrans_de.id)
                    newbal = htrans_de.trans_cur_amount
                    for t in trans_list:
                        t.trans_cur_amount = newbal
                        nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                        if t.trans_adj_type == 'Balance Increase':
                            newbal = float(t.trans_amount) + newbal
                        else:
                            newbal = newbal - float(t.trans_amount)  
                        nhist.hist_adj_amount = newbal
                        nhist.save()
                        t.trans_adj_amount = newbal
                        t.save()
                    htrans_de.banking.bnk_bal = newbal
                    htrans_de.banking.save()

                    if htrans_de.trans_adj_type == 'Balance Decrease':
                        bal = float(dest_bnk.bnk_bal) - float(amount)
                    else:
                        bal = float(dest_bnk.bnk_bal) + float(amount)

                    newtrans = BankTransaction.objects.create(
                        login_details=log_details, 
                        company=cmp,
                        banking = dest_bnk,
                        trans_type = htrans_de.trans_type,
                        trans_adj_type = htrans_de.trans_adj_type,
                        origin = origin_bnk.bnk_name,
                        origin_accno = origin_bnk.bnk_acno,
                        destination = dest_bnk.bnk_name,
                        destination_accno = dest_bnk.bnk_acno,
                        trans_cur_amount = dest_bnk.bnk_bal,
                        trans_amount = amount,
                        trans_adj_amount = bal,
                        trans_desc = desc,
                        trans_adj_date = edit_date,
                        bank_to_bank_no = htrans_in.id
                    )
                    dest_bnk.bnk_bal = bal
                    dest_bnk.save()
                    BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans, hist_cur_amount=newtrans.trans_cur_amount, 
                                                            hist_amount=amount, hist_adj_amount=bal, hist_action='Created')
                    htrans_de.delete()
            # if origin bank is changed 
            else:
                # if destination bank is not changed
                if htrans_in.banking.bnk_acno == dest_bnk.bnk_acno:
                    htrans_de.trans_amount = amount
                    htrans_de.trans_adj_amount = add_bal
                    htrans_de.trans_desc = desc
                    htrans_de.trans_adj_date = edit_date
                    htrans_de.save()
                    BankTransactionHistory.objects.create(login_details=log_details, company=cmp, transaction=htrans_de, hist_cur_amount=htrans_de.trans_cur_amount, 
                                                            hist_amount = amount, hist_adj_amount = add_bal, hist_action='Updated')
                    newbal = add_bal
                    trans_list = BankTransaction.objects.filter(company=cmp, banking=dest_bnk, id__gt=htrans_de.id)
                    for t in trans_list:
                        t.trans_cur_amount = newbal
                        nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                        if t.trans_adj_type == 'Balance Increase':
                            newbal = float(t.trans_amount) + newbal
                        else:
                            newbal = newbal - float(t.trans_amount)  
                        nhist.hist_adj_amount = newbal
                        nhist.save()
                        t.trans_adj_amount = newbal
                        t.save()
                    dest_bnk.bnk_bal = newbal
                    dest_bnk.save()

                    BankTransactionHistory.objects.filter(transaction = htrans_in).delete()
                    trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_in.banking, id__gt=htrans_in.id)
                    newbal = htrans_in.trans_cur_amount
                    for t in trans_list:
                        t.trans_cur_amount = newbal
                        nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                        if t.trans_adj_type == 'Balance Increase':
                            newbal = float(t.trans_amount) + newbal
                        else:
                            newbal = newbal - float(t.trans_amount)  
                        nhist.hist_adj_amount = newbal
                        nhist.save()
                        t.trans_adj_amount = newbal
                        t.save()
                    htrans_in.banking.bnk_bal = newbal
                    htrans_in.banking.save()

                    if htrans_in.trans_adj_type == 'Balance Decrease':
                        bal = float(origin_bnk.bnk_bal) - float(amount)
                    else:
                        bal = float(origin_bnk.bnk_bal) + float(amount)

                    newtrans = BankTransaction.objects.create(
                        login_details=log_details, 
                        company=cmp,
                        banking = origin_bnk,
                        trans_type = htrans_in.trans_type,
                        trans_adj_type = htrans_in.trans_adj_type,
                        trans_cur_amount = origin_bnk.bnk_bal,
                        trans_amount = amount,
                        trans_adj_amount = bal,
                        trans_desc = desc,
                        trans_adj_date = edit_date,
                        bank_to_bank_no = htrans_de.id
                    )
                    origin_bnk.bnk_bal = bal
                    origin_bnk.save()
                    BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans, hist_cur_amount=newtrans.trans_cur_amount, 
                                                            hist_amount=amount, hist_adj_amount=bal, hist_action='Created')
                    htrans_in.delete()
                # if destination bank is changed
                else:
                    # if new origin bank is not previous destination bank and new destiantion bank is not previous origin bank
                    if origin_bnk.bnk_acno != htrans_in.banking.bnk_acno and dest_bnk.bnk_acno != htrans_in.banking.bnk_acno:
                        BankTransactionHistory.objects.filter(transaction = htrans_in).delete()
                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_in.banking, id__gt=htrans_in.id)
                        newbal = htrans_in.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_in.banking.bnk_bal = newbal
                        htrans_in.banking.save()

                        if htrans_in.trans_adj_type == 'Balance Decrease':
                            bal = float(origin_bnk.bnk_bal) - float(amount)
                        else:
                            bal = float(origin_bnk.bnk_bal) + float(amount)

                        newtrans_or = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = origin_bnk,
                            trans_type = htrans_in.trans_type,
                            trans_adj_type = htrans_in.trans_adj_type,
                            trans_cur_amount = origin_bnk.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        origin_bnk.bnk_bal = bal
                        origin_bnk.save()
                        BankTransactionHistory.objects.create(login_details=log_details, company=cmp, transaction=newtrans_or, hist_amount=amount, 
                                                              hist_cur_amount=newtrans_or.trans_cur_amount, hist_adj_amount=bal, hist_action='Created')
                        htrans_in.delete()

                        BankTransactionHistory.objects.filter(transaction = htrans_de).delete()
                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_de.banking, id__gt=htrans_de.id)
                        newbal = htrans_de.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                            hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_de.banking.bnk_bal = newbal
                        htrans_de.banking.save()

                        if htrans_de.trans_adj_type == 'Balance Decrease':
                            bal = float(dest_bnk.bnk_bal) - float(amount)
                        else:
                            bal = float(dest_bnk.bnk_bal) + float(amount)

                        newtrans_tar = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = dest_bnk,
                            trans_type = htrans_de.trans_type,
                            trans_adj_type = htrans_de.trans_adj_type,
                            trans_cur_amount = dest_bnk.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        dest_bnk.bnk_bal = bal
                        dest_bnk.save()
                        BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans_tar, hist_cur_amount=newtrans_tar.trans_cur_amount, 
                                                                hist_amount=amount, hist_adj_amount=bal, hist_action='Created')
                        htrans_de.delete()

                        newtrans_or.bank_to_bank_no = newtrans_tar.id
                        newtrans_tar.bank_to_bank_no = newtrans_or.id
                        newtrans_or.save()
                        newtrans_tar.save()
                    
                    # if new origin bank is equal to previous destination bank and new destiantion bank is not previous origin bank
                    elif origin_bnk.bnk_acno == htrans_in.banking.bnk_acno and dest_bnk.bnk_acno != htrans_in.banking.bnk_acno:
                        BankTransactionHistory.objects.filter(transaction = htrans_in).delete()
                        BankTransactionHistory.objects.filter(transaction = htrans_de).delete()

                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_in.banking, id__gt=htrans_in.id)
                        newbal = htrans_in.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_in.banking.bnk_bal = newbal
                        htrans_in.banking.save()

                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_de.banking, id__gt=htrans_de.id)
                        newbal = htrans_de.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_de.banking.bnk_bal = newbal
                        htrans_de.banking.save()
                                                                        
                        if htrans_de.trans_adj_type == 'Balance Decrease':
                            bal = float(htrans_de.banking.bnk_bal) - float(amount)
                        else:
                            bal = float(htrans_de.banking.bnk_bal) + float(amount)

                        newtrans_or = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = origin_bnk,
                            trans_type = htrans_de.trans_type,
                            trans_adj_type = htrans_de.trans_adj_type,
                            trans_cur_amount = htrans_de.banking.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        origin_bnk.bnk_bal = bal
                        origin_bnk.save()
                        BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans_or, hist_cur_amount=newtrans_or.trans_cur_amount, 
                                                                hist_amount=amount, hist_adj_amount=bal, hist_action='Created')

                        if htrans_in.trans_adj_type == 'Balance Decrease':
                            bal = float(htrans_in.banking.bnk_bal) - float(amount)
                        else:
                            bal = float(htrans_in.banking.bnk_bal) + float(amount)

                        newtrans_tar = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = dest_bnk,
                            trans_type = htrans_in.trans_type,
                            trans_adj_type = htrans_in.trans_adj_type,
                            trans_cur_amount = htrans_in.banking.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        dest_bnk.bnk_bal = bal
                        dest_bnk.save()
                        BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans_tar, hist_cur_amount=newtrans_tar.trans_cur_amount, 
                                                                hist_amount=amount, hist_adj_amount=bal, hist_action='Created')

                        newtrans_or.bank_to_bank_no = newtrans_tar.id
                        newtrans_tar.bank_to_bank_no = newtrans_or.id
                        newtrans_or.save()
                        newtrans_tar.save()
                        htrans_in.delete()
                        htrans_de.delete()

                    # if new origin bank is not previous destination bank and new destiantion bank is equal to previous origin bank
                    elif origin_bnk.bnk_acno != htrans_in.banking.bnk_acno and dest_bnk.bnk_acno == htrans_in.banking.bnk_acno:
                        BankTransactionHistory.objects.filter(transaction = htrans_in).delete()
                        BankTransactionHistory.objects.filter(transaction = htrans_de).delete()
                    
                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_in.banking, id__gt=htrans_in.id)
                        newbal = htrans_in.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_in.banking.bnk_bal = newbal
                        htrans_in.banking.save()

                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_de.banking, id__gt=htrans_de.id)
                        newbal = htrans_de.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_de.banking.bnk_bal = newbal
                        htrans_de.banking.save()
                                                                        
                        if htrans_in.trans_adj_type == 'Balance Decrease':
                            bal = float(htrans_in.banking.bnk_bal) - float(amount)
                        else:
                            bal = float(htrans_in.banking.bnk_bal) + float(amount)

                        newtrans_or = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = origin_bnk,
                            trans_type = htrans_in.trans_type,
                            trans_adj_type = htrans_in.trans_adj_type,
                            trans_cur_amount = htrans_in.banking.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        origin_bnk.bnk_bal = bal
                        origin_bnk.save()
                        BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans_or, hist_cur_amount=newtrans_or.trans_cur_amount, 
                                                                hist_amount=amount, hist_adj_amount=bal, hist_action='Created')

                        if htrans_de.trans_adj_type == 'Balance Decrease':
                            bal = float(htrans_de.banking.bnk_bal) - float(amount)
                        else:
                            bal = float(htrans_de.banking.bnk_bal) + float(amount)

                        newtrans_tar = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = dest_bnk,
                            trans_type = htrans_de.trans_type,
                            trans_adj_type = htrans_de.trans_adj_type,
                            trans_cur_amount = htrans_de.banking.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        dest_bnk.bnk_bal = bal
                        dest_bnk.save()
                        BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans_tar, hist_cur_amount=newtrans_tar.trans_cur_amount, 
                                                                hist_amount=amount, hist_adj_amount=bal, hist_action='Created')

                        newtrans_or.bank_to_bank_no = newtrans_tar.id
                        newtrans_tar.bank_to_bank_no = newtrans_or.id
                        newtrans_or.save()
                        newtrans_tar.save()
                        htrans_in.delete()
                        htrans_de.delete()

                    # if new origin bank is equal to previous destination bank and new destiantion bank is equal to previous origin bank
                    else:
                        BankTransactionHistory.objects.filter(transaction = htrans_in).delete()
                        BankTransactionHistory.objects.filter(transaction = htrans_de).delete()
                    
                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_in.banking, id__gt=htrans_in.id)
                        newbal = htrans_in.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_in.banking.bnk_bal = newbal
                        htrans_in.banking.save()

                        trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans_de.banking, id__gt=htrans_de.id)
                        newbal = htrans_de.trans_cur_amount
                        for t in trans_list:
                            t.trans_cur_amount = newbal
                            nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                                hist_amount = t.trans_amount,  hist_action='Updated')
                            if t.trans_adj_type == 'Balance Increase':
                                newbal = float(t.trans_amount) + newbal
                            else:
                                newbal = newbal - float(t.trans_amount)  
                            nhist.hist_adj_amount = newbal
                            nhist.save()
                            t.trans_adj_amount = newbal
                            t.save()
                        htrans_de.banking.bnk_bal = newbal
                        htrans_de.banking.save()
                                           
                        if htrans_in.trans_adj_type == 'Balance Decrease':
                            bal = float(htrans_in.banking.bnk_bal) - float(amount)
                        else:
                            bal = float(htrans_in.banking.bnk_bal) + float(amount)

                        newtrans_or = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = htrans_in.banking,
                            trans_type = htrans_in.trans_type,
                            trans_adj_type = htrans_in.trans_adj_type,
                            trans_cur_amount = htrans_in.banking.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        origin_bnk.bnk_bal = bal
                        origin_bnk.save()
                        BankTransactionHistory.objects.create(login_details=log_details, company=cmp, transaction=newtrans_or, hist_amount=amount, 
                                                              hist_cur_amount=newtrans_or.trans_cur_amount, hist_adj_amount=bal, hist_action='Created')

                        if htrans_de.trans_adj_type == 'Balance Decrease':
                            bal = float(htrans_de.banking.bnk_bal) - float(amount)
                        else:
                            bal = float(htrans_de.banking.bnk_bal) + float(amount)

                        newtrans_tar = BankTransaction.objects.create(
                            login_details=log_details, 
                            company=cmp,
                            banking = htrans_de.banking,
                            trans_type = htrans_de.trans_type,
                            trans_adj_type = htrans_de.trans_adj_type,
                            trans_cur_amount = htrans_de.banking.bnk_bal,
                            trans_amount = amount,
                            trans_adj_amount = bal,
                            trans_desc = desc,
                            trans_adj_date = edit_date,
                        )
                        dest_bnk.bnk_bal = bal
                        dest_bnk.save()
                        BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans_tar, hist_amount=amount, 
                                                                hist_cur_amount=newtrans_or.trans_cur_amount, hist_adj_amount=bal, hist_action='Created')

                        newtrans_or.bank_to_bank_no = newtrans_tar.id
                        newtrans_tar.bank_to_bank_no = newtrans_or.id
                        newtrans_or.save()
                        newtrans_tar.save()
                        htrans_in.delete()
                        htrans_de.delete()

        # If it is Adjust Bank Balance           
        if ttype == 'Adjust Bank Balance':
            htrans = BankTransaction.objects.get(id=id)
            adj_bank = Banking.objects.get(id=adjacname)
            if adjtype == 'Reduce Balance':
                adj_type = 'Balance Decrease'
                bal = float(htrans.trans_cur_amount) - float(amount)
            else:
                adj_type = 'Balance Increase'
                bal = float(htrans.trans_cur_amount) + float(amount)
            if htrans.banking.bnk_acno == adj_bank.bnk_acno:
                htrans.trans_amount = amount
                htrans.trans_adj_amount = bal
                htrans.trans_desc = desc
                htrans.trans_adj_date = edit_date
                htrans.trans_adj_type = adj_type
                htrans.save()
                BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=htrans, hist_cur_amount = htrans.trans_cur_amount, 
                                                        hist_amount = amount, hist_adj_amount = bal, hist_action='Updated')
                newbal = bal
                trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans.banking, id__gt=id)
                for t in trans_list:
                    t.trans_cur_amount = newbal
                    nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                          hist_amount = t.trans_amount,  hist_action='Updated')
                    if t.trans_adj_type == 'Balance Increase':
                        newbal = float(t.trans_amount) + newbal
                    else:
                        newbal = newbal - float(t.trans_amount)  
                    nhist.hist_adj_amount = newbal
                    nhist.save()
                    t.trans_adj_amount = newbal
                    t.save()
                adj_bank.bnk_bal = newbal
                adj_bank.save()
            else:
                htrans = BankTransaction.objects.get(id=id)
                adj_bank = Banking.objects.get(id=adjacname)
                BankTransactionHistory.objects.filter(transaction = htrans).delete()
                trans_list = BankTransaction.objects.filter(company=cmp, banking=htrans.banking, id__gt=id)
                newbal = htrans.trans_cur_amount
                for t in trans_list:
                    t.trans_cur_amount = newbal
                    nhist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal, 
                                                          hist_amount = t.trans_amount,  hist_action='Updated')
                    if t.trans_adj_type == 'Balance Increase':
                        newbal = float(t.trans_amount) + newbal
                    else:
                        newbal = newbal - float(t.trans_amount)  
                    nhist.hist_adj_amount = newbal
                    nhist.save()
                    t.trans_adj_amount = newbal
                    t.save()
                htrans.banking.bnk_bal = newbal
                htrans.banking.save()

                bal = float(adj_bank.bnk_bal) - float(amount)
                newtrans = BankTransaction.objects.create(
                    login_details=log_details, 
                    company=cmp,
                    banking = adj_bank,
                    trans_type = 'Bank Adjustment',
                    trans_adj_type = htrans.trans_adj_type,
                    trans_cur_amount = adj_bank.bnk_bal,
                    trans_amount = amount,
                    trans_adj_amount = bal,
                    trans_desc = desc,
                    trans_adj_date = edit_date,
                )
                adj_bank.bnk_bal = bal
                adj_bank.save()
                BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=newtrans, hist_cur_amount=newtrans.trans_cur_amount, 
                                                          hist_amount=amount, hist_adj_amount=bal, hist_action='Created')
                htrans.delete()
        return JsonResponse({'message':'success'})
    
def load_bank_edit(request, id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    bnk = Banking.objects.filter(company = cmp)
    allmodules= ZohoModules.objects.get(company = cmp)
    bnk = Banking.objects.get(id=id)
    return render(request, 'bank_edit.html', {'bnk':bnk, 'allmodules':allmodules, 'details':dash_details})

def bank_edit(request,id):
    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company

        bnk = Banking.objects.get(id=id)
        bnk.bnk_name = request.POST.get('name')
        bnk.bnk_branch = request.POST.get('branch')
        bnk.bnk_acno = request.POST.get('ac_no')
        bnk.bnk_ifsc = request.POST.get('ifsc')
        bnk.bnk_bal_type = request.POST.get('bal_type')
        bnk.date = request.POST.get('date')
        newbal = request.POST.get('opn_bal')
        if newbal != '':
            newbal = float(newbal)
        else:
            newbal = 0
        bnk.bnk_opnbal = newbal
        bnk.save()
        BankingHistory.objects.create(login_details=log_details, company=cmp, banking=bnk, hist_adj_amount=request.POST.get('opn_bal', 0.0), hist_action='Updated')

        trans_list = BankTransaction.objects.filter(company=cmp, banking=bnk)
        for t in trans_list:
            hist = BankTransactionHistory.objects.create( login_details=log_details, company=cmp, transaction=t, hist_cur_amount = newbal,
                                                            hist_amount = t.trans_amount,  hist_action='Updated')
            if t.trans_type == 'Opening Balance':
                t.trans_amount = newbal
                t.trans_adj_amount = newbal
                t.trans_adj_date = bnk.date
            else:
                t.trans_cur_amount = newbal
                t.trans_adj_date = bnk.date
                if t.trans_adj_type == 'Balance Increase':
                    newbal = float(t.trans_amount) + newbal
                else:
                    newbal = newbal - float(t.trans_amount)  
                t.trans_adj_amount = newbal
            t.save()
            hist.hist_adj_amount = newbal
            hist.save()
        bnk.bnk_bal = newbal
        bnk.save()
        return redirect('bank_view',id)
    return redirect('bank_list')

def load_bank_history(request,id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    bnk = Banking.objects.filter(company = cmp)
    allmodules= ZohoModules.objects.get(company = cmp)
    bhis = BankingHistory.objects.filter(company=cmp, banking=id)
    return render(request, 'bank_history.html', {'allmodules':allmodules, 'id':id, 'bhis':bhis, 'details':dash_details})

def load_bank_trans_history(request,id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    bnk = Banking.objects.filter(company = cmp)
    allmodules= ZohoModules.objects.get(company = cmp)
    thist = BankTransactionHistory.objects.filter(transaction=id)
    bnk_id = thist[0].transaction.banking.id
    return render(request, 'bank_trans_history.html', {'allmodules':allmodules, 'thist':thist, 'id':bnk_id, 'details':dash_details})

def delete_banking(request, id):
    bnk = Banking.objects.get(id=id)
    if BankTransaction.objects.filter(banking=bnk).count() > 1:
        messages.info(request,'This bank cannot be deleted as it has done some transactions !!')
        return redirect('bank_view',id)
    bnk.delete()
    return redirect ('bank_list')

def delete_transaction(request, id):
    cp = company_details.objects.get(user=request.user)
    transaction = get_object_or_404(transactions, id=id)
    
    bank = transaction.bank
    from_bank_id = transaction.fromB
    to_bank_id=transaction.toB
    print(f"Original Bank : {bank.balance}")
    
    print(f"From Bank ID: {from_bank_id}")
    print(f"To Bank ID: {to_bank_id}")

    # Update the bank balance based on the type of transaction
    if transaction.adjtype == 'Increase Balance':
        bank.balance -= transaction.amount
    elif transaction.adjtype == 'Reduce Balance':
        bank.balance += transaction.amount
    elif transaction.type == 'Bank To Cash Transfer':
        bank.balance += transaction.amount
    elif transaction.type == 'Cash To Bank Transfer':
        bank.balance -= transaction.amount
    # elif transaction.type == 'Bank To Bank Transfer':
        # from_bank = Bankcreation.objects.get(id=transaction.fromB,user=request.user)
        # to_bank = Bankcreation.objects.get(id=transaction.toB,user=request.user)
        # from_bank = transaction.fromB
        # to_bank =transaction.toB
        # from_bank = Bankcreation.objects.get(id=from_bank_id)
        # to_bank= Bankcreation.objects.get(id=to_bank_id)
        # print( from_bank)
        # print( to_bank)

        
        # from_bank.balance += transaction.amount
        # to_bank.balance -= transaction.amount
        # # bank.balance+= transaction.amount
       
        # from_bank_id.save()
        # to_bank_id.save()
        # try:
            # from_bank = Bankcreation.objects.get(id=from_bank_id.id,user=request.user)
            # to_bank = Bankcreation.objects.get(id=to_bank_id.id,user=request.user)

            # print(f"From Bank Balance Before Transfer: {from_bank.balance}")
            # print(f"To Bank Balance Before Transfer: {to_bank.balance}")
        # print(f"From Bank Balance After Transfer: {from_bank_id.balance}")
        # print(f"To Bank Balance After Transfer: {to_bank_id.balance}")
        # from_bank_id.balance += transaction.amount
        # to_bank_id.balance -= transaction.amount


        # print(f"From Bank Balance After Transfer: {from_bank_id.balance}")
        # print(f"To Bank Balance After Transfer: {to_bank_id.balance}")

        # from_bank_id.save()
        # to_bank_id.save()
        # print(f"From Bank Balance After Transfer: {from_bank_id.balance}")
        # print(f"To Bank Balance After Transfer: {to_bank_id.balance}")
        # except Bankcreation.DoesNotExist:
        #     raise Http404("Bank does not exist")


        # print(f"After Transfer - From Bank Balance: {from_bank.balance}, To Bank Balance: {to_bank.balance}")
    bank.save()
   

    previous_transaction = transactions.objects.filter(bank=bank, id__lt=transaction.id).order_by('-id').first()
    subsequent_transactions = transactions.objects.filter(bank=bank, id__gt=transaction.id).order_by('id')
    cumulative_balance_change = previous_transaction.balance if previous_transaction else 0

    for sub_transaction in subsequent_transactions:
        if sub_transaction.type == 'Bank To Bank Transfer':
            # try:
            #     to_bank = Bankcreation.objects.get(name=sub_transaction.toB.name, user=request.user)
            #     print(f"To Bank: {sub_transaction.toB.name}")
            # except Bankcreation.DoesNotExist:
            #     # Handle the case where to_bank is not found
            #     to_bank = None
            # print("Before try-except block")
            try:
                to_bank = Bankcreation.objects.get(id=sub_transaction.toB.id, user=request.user)
                print(f"To Bank: {sub_transaction.toB.id}")
                print(to_bank)
            except Bankcreation.DoesNotExist:
                print("Bankcreation.DoesNotExist exception caught")
                to_bank = None

            print("After try-except block")

            if to_bank:
                # if sub_transaction.toB.id == to_bank:
                cumulative_balance_change -= sub_transaction.amount
            else:
                # Handle the case where to_bank is not found
                pass
            
        
        elif sub_transaction.type == 'Bank To Cash Transfer':
            cumulative_balance_change -= sub_transaction.amount
        elif sub_transaction.adjtype == 'Reduce Balance':
            cumulative_balance_change -= sub_transaction.amount
        else:
            cumulative_balance_change += sub_transaction.amount

        sub_transaction.balance = cumulative_balance_change
        sub_transaction.save()

    bank_id = transaction.bank.id
    if transaction.type == 'Bank To Bank Transfer':
      
        print(f"From Bank Balance After Transfer: {from_bank_id.balance}")
        print(f"To Bank Balance After Transfer: {to_bank_id.balance}")
        from_bank_id.balance += transaction.amount
        to_bank_id.balance -= transaction.amount


        print(f"From Bank Balance After Transfer: {from_bank_id.balance}")
        print(f"To Bank Balance After Transfer: {to_bank_id.balance}")

        from_bank_id.save()
        to_bank_id.save()
        print(f"From Bank Balance After Transfer: {from_bank_id.balance}")
        print(f"To Bank Balance After Transfer: {to_bank_id.balance}")
    transaction.delete()
    
    return redirect('bank_listout', id=bank_id)

def banking_status(request,id):
    bnk = Banking.objects.get(id=id)
    if bnk.status == 'Active':
        bnk.status = 'Inactive'
    else:
        bnk.status = 'Active'
    bnk.save()
    return redirect('bank_view',id)

def bank_attachfile(request,id):
    if request.method == 'POST':
        bnk = Banking.objects.get(id=id) 
        bnk.document = request.POST.get('file')
        if len(request.FILES) != 0:
            bnk.document = request.FILES['file']
        bnk.save()
        return redirect('bank_view',id)
    
def send_bank_transaction(request,id):
    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details)
        bnk = Banking.objects.get(id=id, company=cmp)
        trans = BankTransaction.objects.filter(company=cmp, banking=bnk)
        context = { 'bnk':bnk, 'trans':trans}

        emails_string = request.POST['mail']
        cemail = [email.strip() for email in emails_string.split(',')]
        template_path = 'bank_trans_template.html'
        template = get_template(template_path)
        html  = template.render(context)
        
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
        pdf = result.getvalue()
        filename = f'Transactions.pdf'
        subject = f"Bank Transactions"
        email = EmailMessage(subject, f"Hi,\nPlease find below the attached bank transaction on the bank {bnk.bnk_name} with account number {bnk.bnk_acno}.\n", 
                             from_email=settings.EMAIL_HOST_USER, to=cemail)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)
        
        messages.success(request, 'Bill has been shared via email successfully..!')
        return redirect('bank_view', id)
    
def company_gsttype_change(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')

        log_details = LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

        if request.method == 'POST':
            # Get data from the form
            
            gstno = request.POST.get('gstno')
            gsttype = request.POST.get('gsttype')

            # Check if gsttype is one of the specified values
            if gsttype in ['unregistered Business', 'Overseas', 'Consumer']:
                dash_details.gst_no = None
            else:
                if gstno:
                    dash_details.gst_no = gstno
                else:
                    messages.error(request,'GST Number is not entered*')
                    return redirect('company_profile_editpage')


            dash_details.gst_type = gsttype

            dash_details.save()
            messages.success(request,'GST Type changed')
            return redirect('company_profile_editpage')
        else:
            return redirect('company_profile_editpage')
    else:
        return redirect('/') 
        
        
#------------------- PRICE LIST MODULE ------------
#  display all price lists
def all_price_lists(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'name':
            price_lists = price_lists.order_by('name')
        elif sort_option == 'type':
            price_lists = price_lists.order_by('type')

        if filter_option == 'active':
            price_lists = price_lists.filter(status='Active')
        elif filter_option == 'inactive':
            price_lists = price_lists.filter(status='Inactive')
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'sort_option': sort_option,
            'filter_option': filter_option,
        }
        return render(request,'zohomodules/price_list/all_price_lists.html',context)
    
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'name':
            price_lists = price_lists.order_by('name')
        elif sort_option == 'type':
            price_lists = price_lists.order_by('type')

        if filter_option == 'active':
            price_lists = price_lists.filter(status='Active')
        elif filter_option == 'inactive':
            price_lists = price_lists.filter(status='Inactive')
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'sort_option': sort_option,
            'filter_option': filter_option,
        }
        return render(request,'zohomodules/price_list/all_price_lists.html',context)



def import_price_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)

        if request.method == 'POST' and request.FILES.get('price_list_file') and request.FILES.get('items_file'):
            price_list_file = request.FILES['price_list_file']
            items_file = request.FILES['items_file']

            try:
                # Read PriceList Excel file(price_list_file)
                price_list_df = pd.read_excel(price_list_file)

                # Create PriceList and PriceListItem instances
                for index, row in price_list_df.iterrows():
                    # Check if a PriceList with the same name already exists
                    existing_price_list = PriceList.objects.filter(name=row['NAME'], company=dash_details).first()
                    if existing_price_list:
                        messages.error(request, f'Error importing data: PriceList with name "{row["NAME"]}" already exists.')
                        continue

                    new_price_list = PriceList.objects.create(
                        name=row['NAME'],
                        type=row['TYPE'],
                        item_rate_type=row['ITEM_RATE_TYPE'], 
                        description=row['DESCRIPTION'],
                        percentage_type=row['PERCENTAGE_TYPE'],
                        percentage_value=row['PERCENTAGE_VALUE'],
                        round_off=row['ROUNDING'],
                        currency=row['CURRENCY'],
                        company=dash_details, 
                        login_details=log_details,
                    )
                    PriceListTransactionHistory.objects.create(
                        company=dash_details,
                        login_details=log_details,
                        price_list=new_price_list,
                        action='Created',
                    )

                    # Read Items Excel file(items_file) for each PriceList
                    items_df = pd.read_excel(items_file)
                    for item_index, item_row in items_df.iterrows():
                        item = Items.objects.filter(item_name=item_row['ITEM_NAME'], company=dash_details, activation_tag='active').first()
                        if item:
                            standard_rate = item.selling_price if new_price_list.type == 'Sales' else item.purchase_price
                            custom_rate1 = item_row.get('SELLING_CUSTOM_RATE') if new_price_list.type == 'Sales' else item_row.get('PURCHASE_CUSTOM_RATE')
                            custom_rate = standard_rate if new_price_list.item_rate_type == 'Percentage' else custom_rate1
                            if custom_rate is None or math.isnan(custom_rate) or custom_rate == '':
                                custom_rate = Decimal(standard_rate)
                            
                            PriceListItem.objects.create(
                                company=dash_details,
                                login_details=log_details,
                                price_list=new_price_list,
                                item=item,
                                standard_rate=standard_rate,
                                custom_rate=custom_rate,
                            )
                        else:
                            messages.warning(request, f'Skipping item "{item_row["ITEM_NAME"]}" in PriceList "{row["NAME"]}": Item is not active.')

                messages.success(request, 'Price List data imported successfully.')
                return redirect('all_price_lists')

            except Exception as e:
                messages.error(request, f'Error importing data: {str(e)}')

    
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)

        if request.method == 'POST' and request.FILES.get('price_list_file') and request.FILES.get('items_file'):
            price_list_file = request.FILES['price_list_file']
            items_file = request.FILES['items_file']

            try:
                # Read PriceList Excel file(price_list_file)
                price_list_df = pd.read_excel(price_list_file)

                # Create PriceList and PriceListItem instances
                for index, row in price_list_df.iterrows():
                    # Check if a PriceList with the same name already exists
                    existing_price_list = PriceList.objects.filter(name=row['NAME'], company=dash_details.company).first()
                    if existing_price_list:
                        messages.error(request, f'Error importing data: PriceList with name "{row["NAME"]}" already exists.')
                        continue

                    new_price_list = PriceList.objects.create(
                        name=row['NAME'],
                        type=row['TYPE'],
                        item_rate_type=row['ITEM_RATE_TYPE'], 
                        description=row['DESCRIPTION'],
                        percentage_type=row['PERCENTAGE_TYPE'],
                        percentage_value=row['PERCENTAGE_VALUE'],
                        round_off=row['ROUNDING'],
                        currency=row['CURRENCY'],
                        company=dash_details.company, 
                        login_details=log_details,
                    )
                    PriceListTransactionHistory.objects.create(
                        company=dash_details.company,
                        login_details=log_details,
                        price_list=new_price_list,
                        action='Created',
                    )

                    # Read Items Excel file(items_file) for each PriceList
                    items_df = pd.read_excel(items_file)
                    for item_index, item_row in items_df.iterrows():
                        item = Items.objects.filter(item_name=item_row['ITEM_NAME'], company=dash_details.company, activation_tag='active').first()
                        if item:
                            standard_rate = item.selling_price if new_price_list.type == 'Sales' else item.purchase_price
                            custom_rate1 = item_row.get('SELLING_CUSTOM_RATE') if new_price_list.type == 'Sales' else item_row.get('PURCHASE_CUSTOM_RATE')
                            custom_rate = standard_rate if new_price_list.item_rate_type == 'Percentage' else custom_rate1
                            if custom_rate is None or math.isnan(custom_rate) or custom_rate == '':
                                custom_rate = Decimal(standard_rate)
                            
                            PriceListItem.objects.create(
                                company=dash_details.company,
                                login_details=log_details,
                                price_list=new_price_list,
                                item=item,
                                standard_rate=standard_rate,
                                custom_rate=custom_rate,
                            )
                        else:
                            messages.warning(request, f'Skipping item "{item_row["ITEM_NAME"]}" in PriceList "{row["NAME"]}": Item is not active.')

                messages.success(request, 'Price List data imported successfully.')
                return redirect('all_price_lists')

            except Exception as e:
                messages.error(request, f'Error importing data: {str(e)}')

    else:
        return redirect('/')

    return redirect('all_price_lists')

def create_price_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        allmodules = ZohoModules.objects.get(company=dash_details, status='New')
        items = Items.objects.filter(company=dash_details,activation_tag='active')

        if request.method == 'POST':
            name = request.POST['name']
            if PriceList.objects.filter(name=name, company=dash_details).exists():
                messages.error(request, f"A Price List with the name '{name}' already exists.")
                return redirect('create_price_list')
            
            new_price_list = PriceList.objects.create(
                name=name,
                type=request.POST['type'],
                item_rate_type=request.POST['item_rate_type'],
                description=request.POST['description'],
                percentage_type=request.POST['percentage_type'],
                percentage_value=request.POST['percentage_value'],
                round_off=request.POST['round_off'],
                currency=request.POST['currency'],
                company=dash_details,
                login_details=log_details,
            )

            PriceListTransactionHistory.objects.create(
                company=dash_details,
                login_details=log_details,
                price_list=new_price_list,
                action='Created',
            )
            custom_rates = request.POST.getlist('custom_rate')
            for item, custom_rate in zip(items, custom_rates):
                custom_rate = custom_rate if custom_rate else (item.selling_price if new_price_list.type == 'Sales' else item.purchase_price)
                standard_rate = item.selling_price if new_price_list.type == 'Sales' else item.purchase_price
                PriceListItem.objects.create(
                    company=dash_details,
                    login_details=log_details,
                    price_list=new_price_list,
                    item=item,
                    standard_rate=standard_rate,
                    custom_rate=custom_rate,
                )
            return redirect('all_price_lists')
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'items': items,
        }
        return render(request, 'zohomodules/price_list/create_price_list.html', context)

    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
        items = Items.objects.filter(company=dash_details.company,activation_tag='active')

        if request.method == 'POST':
            name = request.POST['name']
            if PriceList.objects.filter(name=name, company=dash_details.company).exists():
                messages.error(request, f"A Price List with the name '{name}' already exists.")
                return redirect('create_price_list')
            
            new_price_list = PriceList.objects.create(
                name=name,
                type=request.POST['type'],
                item_rate_type=request.POST['item_rate_type'],
                description=request.POST['description'],
                percentage_type=request.POST['percentage_type'],
                percentage_value=request.POST['percentage_value'],
                round_off=request.POST['round_off'],
                currency=request.POST['currency'],
                company=dash_details.company,
                login_details=log_details
            )
            
            PriceListTransactionHistory.objects.create(
                company=dash_details.company,
                login_details=log_details,
                price_list=new_price_list,
                action='Created',
            )
            
            custom_rates = request.POST.getlist('custom_rate')
            for item, custom_rate in zip(items, custom_rates):
                custom_rate = custom_rate if custom_rate else (item.selling_price if new_price_list.type == 'Sales' else item.purchase_price)
                standard_rate = item.selling_price if new_price_list.type == 'Sales' else item.purchase_price
                PriceListItem.objects.create(
                    company=dash_details.company,
                    login_details=log_details,
                    price_list=new_price_list,
                    item=item,
                    standard_rate=standard_rate,
                    custom_rate=custom_rate,
                )

            return redirect('all_price_lists')

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'items': items,
        }
        return render(request, 'zohomodules/price_list/create_price_list.html', context)
 

def edit_price_list(request, price_list_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details)
        allmodules = ZohoModules.objects.get(company=dash_details, status='New')
        price_list = get_object_or_404(PriceList, id=price_list_id)
        items = PriceListItem.objects.filter(price_list=price_list)

        
        if request.method == 'POST':
            price_list.name = request.POST['name']
            price_list.type = request.POST['type']
            price_list.item_rate_type = request.POST['item_rate_type']
            price_list.description = request.POST['description']
            price_list.percentage_type = request.POST['percentage_type']
            price_list.percentage_value = request.POST['percentage_value']
            price_list.round_off = request.POST['round_off']
            price_list.currency = request.POST['currency']
            price_list.save()
            
            PriceListTransactionHistory.objects.create(
                company=dash_details,
                login_details=log_details,
                price_list=price_list,
                action='Edited',
            )
            
            # edit PriceListItem
            custom_rate = request.POST.getlist('custom_rate')
            items = PriceListItem.objects.filter(price_list=price_list)
            for item, custom_rate in zip(items, custom_rate):
                standard_rate = item.item.selling_price if price_list.type == 'Sales' else item.item.purchase_price
                item.standard_rate = standard_rate
                item.custom_rate = custom_rate
                item.save()
            
            
            return redirect('price_list_details', price_list_id=price_list_id)
        context = {
            'log_details': log_details,
            'details': dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'price_list': price_list,
            'items': items,
        }
        return render(request, 'zohomodules/price_list/edit_price_list.html', context)
    elif log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details.company)
        allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
        price_list = get_object_or_404(PriceList, id=price_list_id)
        items = PriceListItem.objects.filter(price_list=price_list)
        
        if request.method == 'POST':
            price_list.name = request.POST['name']
            price_list.type = request.POST['type']
            price_list.item_rate_type = request.POST['item_rate_type']
            price_list.description = request.POST['description']
            price_list.percentage_type = request.POST['percentage_type']
            price_list.percentage_value = request.POST['percentage_value']
            price_list.round_off = request.POST['round_off']
            price_list.currency = request.POST['currency']
            price_list.save()
            PriceListTransactionHistory.objects.create(
                    company=dash_details.company,
                    login_details=log_details,
                    price_list=price_list,
                    action='Edited',
                )
            
            # edit PriceListItem
            custom_rate = request.POST.getlist('custom_rate')
            for item, custom_rate in zip(items, custom_rate):
                    standard_rate = item.item.selling_price if price_list.type == 'Sales' else item.item.purchase_price
                    item.standard_rate = standard_rate
                    item.custom_rate = custom_rate
                    item.save()
            
            return redirect('price_list_details', price_list_id=price_list_id)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'price_list': price_list,
            'items':items,
        }
        return render(request, 'zohomodules/price_list/edit_price_list.html', context)


# display details of selected price list
def price_list_details(request, price_list_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details)
        price_list = get_object_or_404(PriceList, id=price_list_id)
        comments = PriceListComment.objects.filter(price_list=price_list)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'name':
            price_lists = price_lists.order_by('name')
        elif sort_option == 'type':
            price_lists = price_lists.order_by('type')

        if filter_option == 'active':
            price_lists = price_lists.filter(status='Active')
        elif filter_option == 'inactive':
            price_lists = price_lists.filter(status='Inactive')
        transaction_history = PriceListTransactionHistory.objects.filter(price_list=price_list)
        items = PriceListItem.objects.filter(company=dash_details, price_list=price_list)
        latest_transaction = PriceListTransactionHistory.objects.filter(price_list=price_list)

        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'price_list': price_list,
            'comments': comments,
            'sort_option': sort_option,
            'filter_option': filter_option,
            'latest_transaction': latest_transaction,
            'transaction_history': transaction_history,
            'items':items,
        }
        return render(request,'zohomodules/price_list/price_list_details.html',context)
    
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details.company)
        price_list = get_object_or_404(PriceList, id=price_list_id)
        comments = PriceListComment.objects.filter(price_list=price_list)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'name':
            price_lists = price_lists.order_by('name')
        elif sort_option == 'type':
            price_lists = price_lists.order_by('type')

        if filter_option == 'active':
            price_lists = price_lists.filter(status='Active')
        elif filter_option == 'inactive':
            price_lists = price_lists.filter(status='Inactive')
        transaction_history = PriceListTransactionHistory.objects.filter(price_list=price_list)
        items = PriceListItem.objects.filter(company=dash_details.company, price_list=price_list)
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'comments': comments,
            'price_list': price_list,
            'sort_option': sort_option,
            'filter_option': filter_option,
            'transaction_history': transaction_history,
            'items':items,
        }
        return render(request,'zohomodules/price_list/price_list_details.html',context)
    

def delete_price_list(request, price_list_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details)
        price_list = get_object_or_404(PriceList, id=price_list_id)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        price_list.delete()
        context={
            'details':dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'price_list': price_list,
        }
        return render(request,'zohomodules/price_list/all_price_lists.html',context)
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        price_lists = PriceList.objects.filter(company=dash_details.company)
        price_list = get_object_or_404(PriceList, id=price_list_id)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        price_list.delete()
        context={
            'details':dash_details,
            'allmodules': allmodules,
            'price_lists': price_lists,
            'price_list': price_list,
        }
        return render(request,'zohomodules/price_list/all_price_lists.html',context)


def toggle_price_list_status(request, price_list_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        price_list = get_object_or_404(PriceList, id=price_list_id, company=dash_details)
        if price_list.status == 'Active':
            price_list.status = 'Inactive'
        else:
            price_list.status = 'Active'
        price_list.save()
        PriceListTransactionHistory.objects.create(
            company=dash_details,
            login_details=log_details,
            price_list=price_list,
            action='Edited' 
        )
        return redirect('price_list_details', price_list_id=price_list_id)
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        price_list = get_object_or_404(PriceList, id=price_list_id, company=dash_details.company)
        if price_list.status == 'Active':
            price_list.status = 'Inactive'
        else:
            price_list.status = 'Active'
        price_list.save()
        PriceListTransactionHistory.objects.create(
            company=dash_details.company,
            login_details=log_details,
            price_list=price_list,
            action='Edited'  
        )
        return redirect('price_list_details', price_list_id=price_list_id)

def add_pricelist_comment(request, price_list_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        price_list = get_object_or_404(PriceList, id=price_list_id, company=dash_details)
        if request.method == 'POST':
            comment = request.POST.get('comment_text')
            PriceListComment.objects.create(
                company=dash_details,
                login_details=log_details,
                price_list=price_list,
                comment=comment
            )
            
        return redirect('price_list_details', price_list_id=price_list_id)
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        price_list = get_object_or_404(PriceList, id=price_list_id, company=dash_details.company)
        if request.method == 'POST':
            comment = request.POST.get('comment_text')
            PriceListComment.objects.create(
                company=dash_details.company,
                login_details=log_details,
                price_list=price_list,
                comment=comment
            )
        return redirect('price_list_details', price_list_id=price_list_id)

def delete_pricelist_comment(request, comment_id, price_list_id):
    comment = get_object_or_404(PriceListComment, id=comment_id)
    comment.delete()
    return redirect('price_list_details', price_list_id=price_list_id)





def whatsapp_pricelist(request, price_list_id):
    try:
        price_list = PriceList.objects.get(id=price_list_id)
        price_list_items = PriceListItem.objects.filter(price_list=price_list)

        context = {
            'price_list': price_list,
            'price_list_items': price_list_items,
        }

        # Render the template
        html = render(request, 'zohomodules/price_list/pdf_price_list.html', context).content

        # Create a PDF file
        pdf_file = BytesIO()
        pisa.pisaDocument(BytesIO(html), pdf_file)

        # Check if PDF generation was successful
        if pdf_file.tell():
            pdf_file.seek(0)

            # Save the PDF to the server's media folder
            pdf_filename = f"{price_list.name}_price_list.pdf"
            pdf_path = os.path.join('media', pdf_filename)
            with open(pdf_path, 'wb') as pdf_file_on_server:
                pdf_file_on_server.write(pdf_file.read())

            # Create a direct link to the saved PDF
            pdf_link = f"{request.scheme}://{request.get_host()}/{pdf_path}"

            # Create the WhatsApp message with a link to download the PDF
            whatsapp_message = f"Check out this price list: [Download PDF]{pdf_link}"

            # Create the WhatsApp link
            whatsapp_link = f"https://wa.me/?text={whatsapp_message}"

            # Return the WhatsApp link
            return redirect(whatsapp_link)

    except Exception as e:
        print(e)
        messages.error(request, f'{e}')

    # If there is an error or PDF generation fails, redirect to 'all_price_lists'
    return redirect('all_price_lists')



# email pricelist details(overview)
def email_pricelist(request, price_list_id):
    try:
        price_list = PriceList.objects.get(id=price_list_id)
        price_list_item = PriceListItem.objects.filter( price_list=price_list)

        if request.method == 'POST':
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            context = {
                'price_list': price_list,
                'price_list_item': price_list_item,
            }

            template_path = 'zohomodules/price_list/pdf_price_list.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()

            filename = f'Price_List_Details.pdf'
            subject = f"Price List Details: {price_list.name}"
            email = EmailMessage(subject, f"Hi,\nPlease find the attached Price List Details. \n{email_message}\n\n--\nRegards,\n{price_list.name}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            msg = messages.success(request, 'Details have been shared via email successfully..!')
            return redirect('price_list_details', price_list_id=price_list_id)  

    except Exception as e:
        print(e)
        messages.error(request, f'{e}')
        return redirect('all_price_lists')  

# dwnld pdf
def price_list_pdf(request, price_list_id):
    try:
        price_list = PriceList.objects.get(id=price_list_id)
        price_list_item = PriceListItem.objects.filter(price_list=price_list)

        context = {
            'price_list': price_list,
            'price_list_item': price_list_item,
        }

        template_path = 'zohomodules/price_list/pdf_price_list.html'
        template = get_template(template_path)
        html = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
        pdf = result.getvalue()
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="{price_list.name}_Details.pdf"'
        response.write(pdf)
        return response
    except Exception as e:
        print(e)
        messages.error(request, f'{e}')
        return redirect('all_price_lists')

# upload attachment
def attach_file(request, price_list_id):
    price_list = PriceList.objects.get(pk=price_list_id)
    if request.method == 'POST':
        attachment = request.FILES.get('attachment')
        price_list.attachment = attachment
        price_list.save()
        return redirect('price_list_details', price_list_id=price_list.id)
    return HttpResponse("Invalid request method.")


#----------------------------------------------------------akshay--end--------------------------------------------------------


#-------------------------------Arya E.R-----------------------------------------------

 ##### Vendor #####
    
def vendor(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        # net_30_exists = Company_Payment_Term.objects.filter(company=dash_details, term_name='NET 30').exists()

        # net_60_exists = Company_Payment_Term.objects.filter(company=dash_details, term_name='NET 60').exists()

        # if not net_30_exists:
        #     normalized_data='NET30'
        #     pay_tm = add_space_before_first_digit(normalized_data)

        #     Company_Payment_Term.objects.create(company=dash_details, term_name='NET 30',days=30)

        # if not net_60_exists:
        #     normalized_data='NET60'
        #     pay_tm = add_space_before_first_digit(normalized_data)
        #     Company_Payment_Term.objects.create(company=dash_details, term_name='NET 60',days=60)
        comp_payment_terms=Company_Payment_Term.objects.filter(company=dash_details)
        if log_details.user_type=='Staff':

            return render(request,'zohomodules/vendor/create_vendor.html',{'details':dash_details,'allmodules': allmodules,'comp_payment_terms':comp_payment_terms,'log_details':log_details}) 
        else:
            return render(request,'zohomodules/vendor/create_vendor.html',{'details':dash_details,'allmodules': allmodules,'comp_payment_terms':comp_payment_terms,'log_details':log_details}) 
    else:
        return redirect('/')

def view_vendor_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)

        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company=dash_details,status='New')  

        data=Vendor.objects.filter(company=dash_details)

         # Pagination
        
        # page = request.GET.get('page', 1)
        # paginator = Paginator(data, 5)

        # try:
        #     items = paginator.page(page)
        # except PageNotAnInteger:
        #     items = paginator.page(1)
        # except EmptyPage:
        #     items = paginator.page(paginator.num_pages)

        return render(request,'zohomodules/vendor/vendor_list.html',{'details':dash_details,'allmodules': allmodules,'data':data,'log_details':log_details}) 


    else:
        return redirect('/')


# @login_required(login_url='login')
def add_vendor(request):
   
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        

       
        if request.method=="POST":
            vendor_data=Vendor()
            vendor_data.login_details=log_details
            vendor_data.company=dash_details
            vendor_data.title = request.POST.get('salutation')
            vendor_data.first_name=request.POST['first_name']
            vendor_data.last_name=request.POST['last_name']
            vendor_data.company_name=request.POST['company_name']
            vendor_data.vendor_display_name=request.POST['v_display_name']
            vendor_data.vendor_email=request.POST['vendor_email']
            vendor_data.phone=request.POST['w_phone']
            vendor_data.mobile=request.POST['m_phone']
            vendor_data.skype_name_number=request.POST['skype_number']
            vendor_data.designation=request.POST['designation']
            vendor_data.department=request.POST['department']
            vendor_data.website=request.POST['website']
            vendor_data.gst_treatment=request.POST['gst']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remark']
            vendor_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_number']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_number']
                vendor_data.pan_number=request.POST['pan_number']

            vendor_data.source_of_supply=request.POST['source_supply']
            vendor_data.currency=request.POST['currency']
            print(vendor_data.currency)
            op_type=request.POST.get('op_type')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
    
            vendor_data.opening_balance=request.POST['opening_bal']
            vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])

           
            vendor_data.billing_attention=request.POST['battention']
            vendor_data.billing_country=request.POST['bcountry']
            vendor_data.billing_address=request.POST['baddress']
            vendor_data.billing_city=request.POST['bcity']
            vendor_data.billing_state=request.POST['bstate']
            vendor_data.billing_pin_code=request.POST['bzip']
            vendor_data.billing_phone=request.POST['bphone']
            vendor_data.billing_fax=request.POST['bfax']
            vendor_data.shipping_attention=request.POST['sattention']
            vendor_data.shipping_country=request.POST['s_country']
            vendor_data.shipping_address=request.POST['saddress']
            vendor_data.shipping_city=request.POST['scity']
            vendor_data.shipping_state=request.POST['sstate']
            vendor_data.shipping_pin_code=request.POST['szip']
            vendor_data.shipping_phone=request.POST['sphone']
            vendor_data.shipping_fax=request.POST['sfax']
            vendor_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=dash_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            rdata=Vendor_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=dash_details
            rdata.vendor=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = VendorContactPerson.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=dash_details,vendor=vendor)
                
        
            messages.success(request, 'Data saved successfully!')   

            return redirect('view_vendor_list')
        
        else:
            messages.error(request, 'Some error occurred !')   

            return redirect('view_vendor_list')
    

    
def sort_vendor_by_name(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
  
        data=Vendor.objects.filter(login_details=log_details).order_by('first_name')
        return render(request,'zohomodules/vendor/vendor_list.html',{'data':data,'dash_details':dash_details})
    else:
            return redirect('/')   

def sort_vendor_by_amount(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
   
        data=Vendor.objects.filter(login_details=log_details).order_by('opening_balance')
        return render(request,'zohomodules/vendor/vendor_list.html',{'data':data,'dash_details':dash_details})
    else:
         return redirect('/') 

def view_vendor_active(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
   
        data=Vendor.objects.filter(login_details=log_details,vendor_status='Active').order_by('-id')
        return render(request,'zohomodules/vendor/vendor_list.html',{'data':data,'dash_details':dash_details})
    else:
         return redirect('/') 

    
    
def view_vendor_inactive(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
   
        data=Vendor.objects.filter(login_details=log_details,vendor_status='Inactive').order_by('-id')
        return render(request,'zohomodules/vendor/vendor_list.html',{'data':data,'dash_details':dash_details})
    else:
         return redirect('/') 
    
def delete_vendor(request,pk):
    if Vendor_comments_table.objects.filter(vendor=pk).exists():
        user2=Vendor_comments_table.objects.filter(vendor=pk)
        user2.delete()
    if Vendor_mail_table.objects.filter(vendor=pk).exists():
        user3=Vendor_mail_table.objects.filter(vendor=pk)
        user3.delete()
    if Vendor_doc_upload_table.objects.filter(vendor=pk).exists():
        user4=Vendor_doc_upload_table.objects.filter(vendor=pk)
        user4.delete()
    if VendorContactPerson.objects.filter(vendor=pk).exists():
        user5=VendorContactPerson.objects.filter(vendor=pk)
        user5.delete()
    if Vendor_remarks_table.objects.filter(vendor=pk).exists():
        user6=Vendor_remarks_table.objects.filter(vendor=pk)
        user6.delete()
    
    user1=Vendor.objects.get(id=pk)
    user1.delete()
    return redirect("view_vendor_list")



def view_vendor_details(request,pk):
    if 'login_id' in request.session and request.session.has_key('login_id'):
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=='Staff':
        staff_details=StaffDetails.objects.get(login_details=log_details)
        dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
        cmp=dash_details
    else:    
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        cmp=dash_details
    allmodules= ZohoModules.objects.get(company=dash_details,status='New')

    vendor_obj=Vendor.objects.get(id=pk)

    # Getting all vendor to disply on the left side of vendor_detailsnew page
    vendor_objs=Vendor.objects.filter(company=cmp)

    vendor_comments=Vendor_comments_table.objects.filter(vendor=vendor_obj)
    vendor_history=VendorHistory.objects.filter(vendor=vendor_obj)

    recurr_bill = Recurring_bills.objects.filter(company=cmp)

    transactions = list(
        BillItems.objects.filter(Company=cmp,Bills__Vendor=vendor_obj).annotate(object_type=Value("Purchase Bill",output_field=CharField()),object_number=F('Bills__Bill_Number'),object_date=F("Bills__Bill_Date"),object_total=F('Bills__Grand_Total'),object_balance=F('Bills__Balance'))
    )+list(
        RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,recurr_bill_id__vendor_details=vendor_obj).annotate(object_type=Value("Recurring Bill",output_field=CharField()),object_number=F('recurr_bill_id__recc_bill_no'),object_date=F("recurr_bill_id__rec_bill_date"),object_total=F('recurr_bill_id__total'),object_balance=F('recurr_bill_id__bal'))
    )+list(
        debitnote_item.objects.filter(company=cmp,debit_note__vendor=vendor_obj).annotate(object_type=Value("Debit Note",output_field=CharField()),object_number=F('debit_note__debitnote_no'),object_date=F("debit_note__debitnote_date"),object_total=F('debit_note__grandtotal'),object_balance=F('debit_note__balance'))
    )+list(
        PurchaseOrderItems.objects.filter(company=cmp,purchase_order__vendor=vendor_obj).annotate(object_type=Value("Purchase Order",output_field=CharField()),object_number=Value('',output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_total=F('purchase_order__grand_total'),object_balance=F('purchase_order__balance'))
    )

    tot_balance = 0
    for i in transactions:
        if i.object_type == "Debit Note":
            tot_balance-=float(i.object_balance)
        else:
            tot_balance+=float(i.object_balance)
    tot_balance= float(vendor_obj.current_balance) - float(tot_balance)

    content = {
        'details': dash_details,
        'allmodules': allmodules,
        'vendor_obj':vendor_obj,
        'log_details':log_details,
        'vendor_objs':vendor_objs,
        'vendor_comments':vendor_comments,
        'vendor_history':vendor_history,
        'transactions':transactions,
        'tot_balance':tot_balance
        }
    return render(request,'zohomodules/vendor/vendor_detailsnew.html',content)

def import_vendor_excel(request):
   if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)

        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
            

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        if request.method == 'POST' :
       
            if 'empfile' in request.FILES:
                excel_bill = request.FILES['empfile']
                excel_b = load_workbook(excel_bill)
                eb = excel_b['Sheet1']
                for row_number1 in range(2, eb.max_row + 1):
                            
                    vendorsheet = [eb.cell(row=row_number1, column=col_num).value for col_num in range(1, eb.max_column + 1)]
                    comp_term=vendorsheet[16]
                    pay_tm = add_space_before_first_digit(comp_term)
                    try:
                        com_term_obj=Company_Payment_Term.objects.get(company=dash_details,term_name=pay_tm)
                    except Company_Payment_Term.DoesNotExist:
                        com_term_obj= None
                    opn_blc_str = vendorsheet[15]  # Assuming vendorsheet[15] is a string representing a decimal
                    opn_blc = Decimal(opn_blc_str)
                    Vendor_object=Vendor(title=vendorsheet[0],first_name=vendorsheet[1],last_name=vendorsheet[2],company_name=vendorsheet[3],vendor_email=vendorsheet[4],phone=vendorsheet[5],mobile=vendorsheet[6],skype_name_number=vendorsheet[7],designation=vendorsheet[8],department=vendorsheet[9],website=vendorsheet[10],
                                         gst_treatment=vendorsheet[11],source_of_supply=vendorsheet[12],currency=vendorsheet[13],opening_balance_type=vendorsheet[14],
                                         opening_balance=opn_blc,payment_term=com_term_obj,billing_attention=vendorsheet[17],billing_address=vendorsheet[18],
                                         billing_city=vendorsheet[19],billing_state=vendorsheet[20],billing_country=vendorsheet[21],billing_pin_code=vendorsheet[22],
                                         billing_phone=vendorsheet[23],billing_fax=vendorsheet[24],shipping_attention=vendorsheet[25],shipping_address=vendorsheet[26],shipping_city=vendorsheet[27],
                                         shipping_state=vendorsheet[28],shipping_country=vendorsheet[29],shipping_pin_code=vendorsheet[30],
                                         shipping_phone=vendorsheet[31], shipping_fax=vendorsheet[32], remarks=vendorsheet[33],vendor_status="Active",company=dash_details,login_details=log_details)
                    Vendor_object.save()

    
                   
                messages.warning(request,'file imported')
                return redirect('view_vendor_list')    

    
            messages.error(request,'File upload Failed!11')
            return redirect('view_vendor_list')
        else:
            messages.error(request,'File upload Failed!11')
            return redirect('view_vendor_list')
        
def Vendor_edit(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)

   

    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company=dash_details,status='New') 

        vendor_obj=Vendor.objects.get(id=pk)

    vendor_contact_obj=VendorContactPerson.objects.filter(vendor=vendor_obj)  
    comp_payment_terms=Company_Payment_Term.objects.filter(company=dash_details)
   
    content = {
            'details': dash_details,
            'allmodules': allmodules,
            'vendor_obj':vendor_obj,
            'log_details':log_details,
            'vendor_contact_obj':vendor_contact_obj,
            'comp_payment_terms':comp_payment_terms,
    }
   

    return render(request,'zohomodules/vendor/edit_vendor.html',content)

def do_vendor_edit(request,pk):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        if request.method=="POST":
            vendor_data=Vendor.objects.get(id=pk)
            vendor_data.login_details=log_details
            vendor_data.company=dash_details
            vendor_data.title = request.POST.get('salutation')
            vendor_data.first_name=request.POST['first_name']
            vendor_data.last_name=request.POST['last_name']
            vendor_data.company_name=request.POST['company_name']
            vendor_data.vendor_display_name=request.POST['v_display_name']
            vendor_data.vendor_email=request.POST['vendor_email']
            vendor_data.phone=request.POST['w_phone']
            vendor_data.mobile=request.POST['m_phone']
            vendor_data.skype_name_number=request.POST['skype_number']
            vendor_data.designation=request.POST['designation']
            vendor_data.department=request.POST['department']
            vendor_data.website=request.POST['website']
            vendor_data.gst_treatment=request.POST['gst']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remark']
            
            cob=Decimal(request.POST['opening_bal'])
            oc=Decimal(vendor_data.current_balance) 
            ob=Decimal(vendor_data.opening_balance) 

            if cob > ob:
                diffadd=cob-ob
                oc=oc + diffadd
                vendor_data.current_balance=oc
                vendor_data.opening_balance=cob
            elif cob < ob:
                diffadd=ob-cob
                oc=oc-diffadd
                vendor_data.current_balance=oc
                vendor_data.opening_balance=cob

            else:
                vendor_data.current_balance=request.POST['opening_bal']   
       
            

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_number']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_number']
                vendor_data.pan_number=request.POST['pan_number']

            vendor_data.source_of_supply=request.POST['source_supply']
            vendor_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
            vendor_data.opening_balance=request.POST['opening_bal']
            vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            
           
            vendor_data.billing_attention=request.POST['battention']
            vendor_data.billing_country=request.POST['bcountry']
            vendor_data.billing_address=request.POST['baddress']
            vendor_data.billing_city=request.POST['bcity']
            vendor_data.billing_state=request.POST['bstate']
            vendor_data.billing_pin_code=request.POST['bzip']
            vendor_data.billing_phone=request.POST['bphone']
            vendor_data.billing_fax=request.POST['bfax']
            vendor_data.shipping_attention=request.POST['sattention']
            vendor_data.shipping_country=request.POST['s_country']
            vendor_data.shipping_address=request.POST['saddress']
            vendor_data.shipping_city=request.POST['scity']
            vendor_data.shipping_state=request.POST['sstate']
            vendor_data.shipping_pin_code=request.POST['szip']
            vendor_data.shipping_phone=request.POST['sphone']
            vendor_data.shipping_fax=request.POST['sfax']
            vendor_data.save()


              # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=dash_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Edited'
            vendor_history_obj.save()
    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            try:

                rdata=Vendor_remarks_table.objects.get(vendor=vdata)
                rdata.remarks=request.POST['remark']
                rdata.company=dash_details
                rdata.vendor=vdata
                rdata.save()
            except Vendor_remarks_table.DoesNotExist:
                remarks_obj= Vendor_remarks_table()   
                remarks_obj.remarks=request.POST['remark']
                remarks_obj.company=dash_details
                remarks_obj.vendor=vdata
                remarks_obj.save()


    #  ...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            person = request.POST.getlist('contact_person_id[]')
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            print(person)
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department)==len(person):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department,person)
                    mapped2=list(mapped2)
                    for ele in mapped2:
                       
                        existing_instance = VendorContactPerson.objects.filter(id=ele[9], company=dash_details, vendor=vendor).first()
                        if existing_instance:
                            # Update the existing instance
                            existing_instance.title = ele[0]
                            existing_instance.first_name = ele[1]
                            existing_instance.last_name = ele[2]
                            existing_instance.email = ele[3]
                            existing_instance.work_phone  = ele[4]
                            existing_instance.mobile = ele[5]
                            existing_instance.skype_name_number = ele[6]
                            existing_instance.designation = ele[7]
                            existing_instance.department = ele[8]

                            # Update other fields

                            existing_instance.save()
                        else:
                            # Create a new instance
                            new_instance = VendorContactPerson.objects.create(
                                title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=dash_details,vendor=vendor
                            )
            return redirect('view_vendor_details',pk)
    

def delete_vendors(request, pk):
    try:
        vendor_obj = Vendor.objects.get(id=pk)

        vendor_obj.delete()
        return redirect('view_vendor_list')  
    except Vendor.DoesNotExist:
        return HttpResponseNotFound("Vendor not found.")
    
def vendor_status(request,pk):
    vendor_obj = Vendor.objects.get(id=pk)
    if vendor_obj.vendor_status == 'Active':
        vendor_obj.vendor_status ='Inactive'
    elif vendor_obj.vendor_status == 'Inactive':
        vendor_obj.vendor_status ='Active'
    vendor_obj.save()
    return redirect('view_vendor_details',pk)   

def vendor_add_comment(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
  
        if request.method =='POST':
            comment_data=request.POST['comments']
       
            vendor_id= Vendor.objects.get(id=pk) 
            vendor_obj=Vendor_comments_table()
            vendor_obj.comment=comment_data
            vendor_obj.vendor=vendor_id
            vendor_obj.company=dash_details
            vendor_obj.login_details= LoginDetails.objects.get(id=log_id)

            vendor_obj.save()
            return redirect('view_vendor_details',pk)
    return redirect('view_vendor_details',pk) 


def vendor_delete_comment(request, pk):
    try:
        vendor_comment =Vendor_comments_table.objects.get(id=pk)
        vendor_id=vendor_comment.vendor.id
        vendor_comment.delete()
        return redirect('view_vendor_details',vendor_id)  
    except Vendor_comments_table.DoesNotExist:
        return HttpResponseNotFound("comments not found.")
    

def add_vendor_file(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        if request.method == 'POST':
            data=request.FILES.getlist('file')
            try:
                for doc in data:

                    vendor_obj=Vendor_doc_upload_table()
                    
                    vendor_obj.document = doc
                    vendor_obj.login_details = log_details
                    vendor_obj.company = dash_details
                    vendor_obj.vendor = Vendor.objects.get(id=pk)
                    vendor_obj.save()
                
                messages.success(request,'File uploaded')
                return redirect('view_vendor_details',pk) 
            except Vendor_doc_upload_table.DoesNotExist:
                return redirect('view_vendor_details',pk) 


from django.core.mail import EmailMultiAlternatives    
def vendor_shareemail(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
    
        vendor_obj=Vendor.objects.get(id=pk)

        context = {'vendor_obj':vendor_obj}

        emails_string = request.POST.get('email', '').strip()
        cemail = [email.strip() for email in emails_string.split(',')]
        
        
        subject = "Transaction Details"
       
        message = 'Hi,\nPlease find the attached transaction details - File-{vendor_obj.first_name} {vendor_obj.last_name} .\n--\nRegards,\n",'
       
        email_from = settings.EMAIL_HOST_USER
            
        recipient_list = [emails_string, ]
        
       
        msg = EmailMultiAlternatives(subject, message, email_from, [emails_string])
        msg.attach_alternative('Transactions.pdf', "application/pdf")
        msg.send()
        messages.success(request, 'Transaction has been shared via email successfully..!')
        return redirect('view_vendor_details',pk)
    
    

def payment_terms_add(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)        
        if request.method == 'POST':
            terms = request.POST.get('name')
            day = request.POST.get('days')
            normalized_data = terms.replace(" ", "")
            pay_tm = add_space_before_first_digit(normalized_data)
            ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=dash_details)
            ptr.save()
            payterms_obj = Company_Payment_Term.objects.filter(company=dash_details).values('id', 'term_name')


            payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name']} for pay_terms in payterms_obj]
            response_data = {
            "message": "success",
            'payment_list':payment_list,
            }
            return JsonResponse(response_data)

        else:
            return JsonResponse({'error': 'Invalid request'}, status=400)     
            

#---------------------------------------End----------------------------------------------------------------  


def check_term_exist(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

    if request.method == 'GET':
       term_name = request.GET.get('term_name', None)
       if term_name:
            normalized_data = term_name.replace(" ", "")
            term_name_processed = add_space_before_first_digit(normalized_data)
            exists = Company_Payment_Term.objects.filter(
                    term_name=term_name_processed,
                    company=dash_details
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        
def check_email_exist(request):
    if request.method == 'GET':
       vendoremail = request.GET.get('vendor_email', None)

       if vendoremail:
          
            exists = Vendor.objects.filter(
                    vendor_email=vendoremail
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        
def check_work_phone_exist(request):
    if request.method == 'GET':
       wPhone = request.GET.get('w_Phone', None)

       if wPhone:
          
            exists = Vendor.objects.filter(
                    phone=wPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        
        
def check_phonenumber_exist(request):
    if request.method == 'GET':
       mPhone = request.GET.get('m_Phone', None)

       if mPhone:
          
            exists = Vendor.objects.filter(
                    mobile=mPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        
        
def add_space_before_first_digit(data):
    for index, char in enumerate(data):
        if char.isdigit():
            return data[:index] + ' ' + data[index:]
    return data
    
    
# -------------------------------Zoho Modules section--------------------------------
 
# Check Pan Number Exist or Not
def check_pan(request):
    if request.method == 'POST':
        panNumber = request.POST.get('panNumber')
        pan_exists = Vendor.objects.filter(pan_number=panNumber).exists()

        if pan_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}) 
        
# Check GST Number Exist or Not
def check_gst(request):
    if request.method == 'POST':
        gstNumber = request.POST.get('gstNumber')
        gst_exists = Vendor.objects.filter(gst_number=gstNumber).exists()
       
        if gst_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})
        
        
# -------------------------------Zoho Modules section--------------------------------
 
def sort_vendor(request,selectId,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)

        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        vendor_obj = Vendor.objects.get(id=pk)
        vendor_objs = Vendor.objects.filter(company=dash_details)

        if selectId == 0:
            vendor_objs=Vendor.objects.filter(company=dash_details)
        if selectId == 1:
            vendor_objs=Vendor.objects.filter(company=dash_details).order_by('first_name')
        if selectId == 2:
            vendor_objs=Vendor.objects.filter(company=dash_details).order_by('opening_balance')
           
        
        vendor_comments=Vendor_comments_table.objects.filter(vendor=vendor_obj)
        vendor_history=VendorHistory.objects.filter(vendor=vendor_obj)
    
        content = {
                'details': dash_details,
                'allmodules': allmodules,
                'vendor_obj':vendor_obj,
                'log_details':log_details,
                'vendor_objs':vendor_objs,
                'vendor_comments':vendor_comments,
                'vendor_history':vendor_history,
        }
    return render(request,'zohomodules/vendor/vendor_detailsnew.html',content)


def vendor_status_change(request,statusId,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)

        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        vendor_obj = Vendor.objects.get(id=pk)
        vendor_objs = Vendor.objects.filter(company=dash_details)

        if statusId == 0:
            vendor_objs=Vendor.objects.filter(company=dash_details)
        if statusId == 1:
            vendor_objs=Vendor.objects.filter(company=dash_details,vendor_status='Active').order_by('-id')
        if statusId == 2:
            vendor_objs=Vendor.objects.filter(company=dash_details,vendor_status='Inactive').order_by('-id')
           
        
        vendor_comments=Vendor_comments_table.objects.filter(vendor=vendor_obj)
        vendor_history=VendorHistory.objects.filter(vendor=vendor_obj)
    
        content = {
                'details': dash_details,
                'allmodules': allmodules,
                'vendor_obj':vendor_obj,
                'log_details':log_details,
                'vendor_objs':vendor_objs,
                'vendor_comments':vendor_comments,
                'vendor_history':vendor_history,
        }
    return render(request,'zohomodules/vendor/vendor_detailsnew.html',content)
    
#End


#---------------- Zoho Final Attendance - Meenu Shaju - Start--------------------
    
def get_days_in_month(target_year, target_month):
    _, days_in_month = monthrange(target_year, target_month)
    days = [day for day in range(1, days_in_month + 1)]
    return days
    
def calculate_leave_count(employee, target_month, target_year):
    return Attendance.objects.filter(employee=employee, date__month =target_month, date__year=target_year).count()
    
def calculate_holiday_count(company, target_month, target_year):
    _, last_day = monthrange(target_year, target_month)
    first_day_of_month = datetime(target_year, target_month, 1)
    last_day_of_month = datetime(target_year, target_month, last_day) + timedelta(days=1)  # Add one day to include the entire end day

    holidays = Holiday.objects.filter(
        start_date__lt=last_day_of_month,
        end_date__gte=first_day_of_month,
        company=company,
    )

    count = 0
    for day in range(1, last_day + 1):
        target_date = datetime(target_year, target_month, day)
        if holidays.filter(start_date__lte=target_date, end_date__gte=target_date).exists():
            count += 1

    return count

   
def company_attendance_list(request):
        
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=staff.company,employee__in=payroll_employee.objects.filter(status='Active'))
            allmodules= ZohoModules.objects.get(company=staff.company,status='New')
                
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=company,employee__in=payroll_employee.objects.filter(status='Active'))
            allmodules= ZohoModules.objects.get(company=company,status='New')
             

        consolidated_entries = defaultdict(list)
        MONTH_NAMES = {
                    1: 'January',
                    2: 'February',
                    3: 'March',
                    4: 'April',
                    5: 'May',
                    6: 'June',
                    7: 'July',
                    8: 'August',
                    9: 'September',
                    10: 'October',
                    11: 'November',
                    12: 'December'
                }


        for item in items:
            target_month = item.date.month
            target_year = item.date.year
            employee_id = item.employee.id

            leave_count = calculate_leave_count(item.employee, target_month, target_year)

            existing_entry = next(
                (
                    entry
                    for entry in consolidated_entries[employee_id]
                    if entry['target_month'] == target_month and entry['target_year'] == target_year
                ),
                None,
            )

            if existing_entry:
                existing_entry['leave'] += leave_count
            else:
               
                entry = {
                    'employee': item.employee,
                    'target_month': target_month,
                    'target_month_name': MONTH_NAMES.get(target_month, ''),
                    'target_year': target_year,
                    'working_days': len(get_days_in_month(target_year, target_month)),
                    'holidays': calculate_holiday_count(item.company, target_month, target_year),
                    'leave': leave_count,
                    'work_days': len(get_days_in_month(target_year, target_month)) - calculate_holiday_count(item.company, target_month, target_year) - leave_count,
                    'total_leave': leave_count,
                }

                consolidated_entries[employee_id].append(entry)

        all_entries = []
        for employee_id, entries in consolidated_entries.items():
            for entry in entries:
                all_entries.append(entry)
        employee_ids = [entry['employee'].id for entries in consolidated_entries.values() for entry in entries]
        employee_ids = [int(id) for id in employee_ids]  # Convert IDs to integers
        request.session['employee_ids'] = employee_ids
        print(employee_ids)

        return render(request, 'zohomodules/Attendance/company_attendance_list.html', {
            'all_entries': all_entries,
            'month_name': MONTH_NAMES,
            'allmodules': allmodules
        })
            
def company_mark_attendance(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            employee = payroll_employee.objects.filter(login_details=log_details,status='Active')
            allmodules= ZohoModules.objects.get(company=company)
            bloods=Bloodgroup.objects.all
            return render(request,'zohomodules/Attendance/company_mark_attendance.html',{'staffs':employee,'blood':bloods,'allmodules':allmodules})
        if log_details.user_type=='Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            
            employee = payroll_employee.objects.filter(company=staff.company,status='Active')
            allmodules= ZohoModules.objects.get(company=staff.company)
            bloods = Bloodgroup.objects.all()
            return render(request,'zohomodules/Attendance/company_mark_attendance.html',{'staffs':employee,'blood':bloods,'allmodules':allmodules})
        
def add_attendance(request):
        if request.method == 'POST':
            emp_id = request.POST['employee']
        date = request.POST['date']
        status = request.POST['status']
        reason = request.POST['reason']

        if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details = LoginDetails.objects.get(id=log_id)

            if log_details.user_type == 'Company':
                employee = get_object_or_404(payroll_employee, id=emp_id, login_details=log_details)
                company = CompanyDetails.objects.get(login_details=log_details)
            elif log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                employee = get_object_or_404(payroll_employee, id=emp_id, company=staff.company)
                company = staff.company

            is_holiday = Holiday.objects.filter(company=company, start_date__lte=date, end_date__gte=date).exists()

            if is_holiday:
                messages.warning(request, 'Selected date is a company holiday.')
                return redirect('company_mark_attendance')
            

            attendance, created = Attendance.objects.get_or_create(
                employee=employee,
                date=date,
                defaults={'status': status, 'reason': reason, 'company': company, 'login_details': log_details}
            )

            if not created:
                # Update the existing attendance if it already exists for the specified date
                attendance.status = status
                attendance.reason = reason
           
                
            history=Attendance_History(company=company,login_details=log_details,attendance=attendance,date=date,action='Created')
            history.save()
            attendance.save()
            
            return redirect('company_attendance_list')

def attendance_calendar(request, employee_id, target_year, target_month):
    calendar_data = {
        'employee_id': employee_id,
        'target_year': target_year,
        'target_month': target_month,
       
    }
    comment = Attendance_comment.objects.filter(month=target_month,year=target_year,employee=employee_id)
    history = Attendance_History.objects.filter(date__month=target_month,date__year=target_year,attendance__employee=employee_id)
    
# Sort the combined list based on the date of the history or attendance entry
    

    employee_attendance = Attendance.objects.filter(
        employee_id=employee_id,
        date__year=target_year,
        date__month=target_month
    ).values('status', 'date')  # Fetch only the required fields
    
    employee=payroll_employee.objects.get(id=employee_id)
    target_month = max(1, min(target_month, 12))

# Calculate the next month and year if target_month is December
    next_month = 1 if target_month == 12 else target_month + 1
    next_year = target_year + 1 if target_month == 12 else target_year

# Construct the date strings for the start and end of the month
    start_date = datetime(target_year, target_month, 1).date()
    end_date = datetime(next_year, next_month, 1).date() - timedelta(days=1)
    
    holidays = Holiday.objects.filter(
    Q(company=employee.company) & (
    (Q(start_date__lte=end_date) & Q(end_date__gte=start_date)))  # Holidays overlapping the target month
    
)   
    for holiday in holidays:
        holiday.end_date += timedelta(days=1)
    
    
    # for getting atendance list
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=staff.company)
            
            allmodules= ZohoModules.objects.get(company=staff.company,status='New')
                
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=company)
            allmodules= ZohoModules.objects.get(company=company,status='New')

        
             

        consolidated_entries = defaultdict(list)

        for item in items:
            target_month = item.date.month
            target_year = item.date.year
            employee_id = item.employee.id

            leave_count = calculate_leave_count(item.employee, target_month, target_year)

            existing_entry = next(
                (
                    entry
                    for entry in consolidated_entries[employee_id]
                    if entry['target_month'] == target_month and entry['target_year'] == target_year
                ),
                None,
            )

            if existing_entry:
                existing_entry['leave'] += leave_count
            else:
                MONTH_NAMES = {
                    1: 'January',
                    2: 'February',
                    3: 'March',
                    4: 'April',
                    5: 'May',
                    6: 'June',
                    7: 'July',
                    8: 'August',
                    9: 'September',
                    10: 'October',
                    11: 'November',
                    12: 'December'
                }

                entry = {
                    'employee': item.employee,
                    'target_month': target_month,
                    'target_month_name': MONTH_NAMES.get(target_month, ''),
                    'target_year': target_year,
                    'working_days': len(get_days_in_month(target_year, target_month)),
                    'holidays': calculate_holiday_count(item.company, target_month, target_year),
                    'leave': leave_count,
                    'work_days': len(get_days_in_month(target_year, target_month)) - calculate_holiday_count(item.company, target_month, target_year) - leave_count,
                    'total_leave': leave_count,
                }

                consolidated_entries[employee_id].append(entry)

        all_entries = []
        for employee_id, entries in consolidated_entries.items():
            for entry in entries:
                
                all_entries.append(entry)
    
   
    
    return render(request, 'zohomodules/Attendance/attendance_calendar.html', {'emp_attendance': employee_attendance,'holiday':holidays,'entries':all_entries,'employee':employee,'comments':comment,'calendar_data':calendar_data,'history':history,'allmodules':allmodules})

def attendance_add_comment(request):
    if request.method == 'POST':
        if 'login_id' not in request.session:
            return JsonResponse({'error': 'User not logged in'}, status=401)

        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)

        employee_id = request.POST.get('employee')
        employee = payroll_employee.objects.get(id=employee_id)
        target_month = request.POST.get('target_month')
        target_year = request.POST.get('target_year')
        comment_text = request.POST.get('comment')

        # Create the comment object
        if comment_text:  # Check if comment text is provided
            # Create the comment object
            comment = Attendance_comment(
                comment=comment_text,
                employee=employee,
                month=target_month,
                year=target_year,
                company=company,
                login_details=log_details
            )
            comment.save()

            return JsonResponse({'message': 'Comment added successfully'})
        else:
            return JsonResponse({'error': 'Comment text is required'}, status=400)  # Return an error response if comment text is empty

    return JsonResponse({'error': 'Invalid request method'}, status=405)
    
def delete_attendance_comment(request,id):
    comment = Attendance_comment.objects.get(id=id)    
    comment.delete()  
    return redirect('attendance_calendar', employee_id=comment.employee.id, target_year=comment.year, target_month=comment.month)      
                
def attendance_overview(request, employee_id, target_month, target_year):  
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        employee = payroll_employee.objects.get(id=employee_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=staff.company,date__month=target_month,date__year=target_year,employee=employee)
            allmodules= ZohoModules.objects.get(company=staff.company)    
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=company,date__month=target_month,date__year=target_year,employee=employee)
            allmodules= ZohoModules.objects.get(company=company) 
        
        target_month = max(1, min(target_month, 12))
        target_month = int(target_month)

# Calculate the next month and year if target_month is December
        next_month = 1 if target_month == 12 else target_month + 1
        next_year = target_year + 1 if target_month == 12 else target_year

# Construct the date strings for the start and end of the month
        start_date = datetime(target_year, target_month, 1).date()
        end_date = datetime(next_year, next_month, 1).date() - timedelta(days=1)
        MONTH_NAMES = {
    1: 'January',
    2: 'February',
    3: 'March',
    4: 'April',
    5: 'May',
    6: 'June',
    7: 'July',
    8: 'August',
    9: 'September',
    10: 'October',
    11: 'November',
    12: 'December'
}
        
       
        target_month_name = MONTH_NAMES[target_month]

    
# Filter holidays that fall within the target month and year
        days_in_month = get_days_in_month(target_year, target_month)
        current_url = request.build_absolute_uri()

    # Calculate the leave count for the employee
        leave_count = calculate_leave_count(employee, target_month, target_year)

    # Calculate the holiday count for the company
        holiday_count = calculate_holiday_count(employee.company, target_month, target_year)

    # Calculate the working days
        working_days = len(days_in_month) - leave_count - holiday_count

        return render(request,'zohomodules/Attendance/attendance_overview.html',{'current_url': current_url,'items':items,'employee': employee,'tm':target_month,'target_month': target_month_name,'target_year': target_year,'leave_count': leave_count,'holiday_count': holiday_count,'working_days': working_days,'allmodules':allmodules})

def attendance_pdf(request,employee_id,target_month,target_year) :
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        employee = payroll_employee.objects.get(id=employee_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=staff.company,employee=employee,date__month=target_month,date__year=target_year)
                
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            items = Attendance.objects.filter(company=company,employee=employee,date__month=target_month,date__year=target_year)
       
        
        target_month = max(1, min(target_month, 12))
        target_month = int(target_month)

# Calculate the next month and year if target_month is December
        next_month = 1 if target_month == 12 else target_month + 1
        next_year = target_year + 1 if target_month == 12 else target_year

# Construct the date strings for the start and end of the month
        start_date = datetime(target_year, target_month, 1).date()
        end_date = datetime(next_year, next_month, 1).date() - timedelta(days=1)
        
        MONTH_NAMES = {
    1: 'January',
    2: 'February',
    3: 'March',
    4: 'April',
    5: 'May',
    6: 'June',
    7: 'July',
    8: 'August',
    9: 'September',
    10: 'October',
    11: 'November',
    12: 'December'
}
        
       
        target_month_name = MONTH_NAMES[target_month]

    

        days_in_month = get_days_in_month(target_year, target_month)

    
        leave_count = calculate_leave_count(employee, target_month, target_year)

    
        holiday_count = calculate_holiday_count(employee.company, target_month, target_year)

    
        working_days = len(days_in_month) - leave_count - holiday_count

        template_path = 'zohomodules/Attendance/attendance_pdf.html'
    context = {
        'items': items,
        'employee': employee,
        'target_month': target_month_name,
        'target_year': target_year,
        'leave_count': leave_count,
        'holiday_count': holiday_count,
        'working_days': working_days
    }

    html = get_template(template_path).render(context)

    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename=attendance.pdf'

    pisa_status = pisa.CreatePDF(html, dest=response)
    if pisa_status.err:
        return HttpResponse('We had some errors <pre>' + html + '</pre>')
    return response
    
def attendance_email(request,employee_id,target_month,target_year):
    if request.method == 'POST':
        try:
            emails_string = request.POST['email_ids']

                    # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            if 'login_id' in request.session:
                log_id = request.session['login_id']
                if 'login_id' not in request.session:
                    return redirect('/')
                log_details = LoginDetails.objects.get(id=log_id)
                employee = payroll_employee.objects.get(id=employee_id)

                if log_details.user_type == 'Staff':
                    staff = StaffDetails.objects.get(login_details=log_details)
                    company=staff.company
                    items = Attendance.objects.filter(company=company,employee=employee,date__month=target_month,date__year=target_year)
                        
                elif log_details.user_type == 'Company':
                    company = CompanyDetails.objects.get(login_details=log_details)
                    items = Attendance.objects.filter(company=company,employee=employee,date__month=target_month,date__year=target_year)
            
                
                target_month = max(1, min(target_month, 12))
                target_month = int(target_month)

        
                next_month = 1 if target_month == 12 else target_month + 1
                next_year = target_year + 1 if target_month == 12 else target_year

        
                start_date = datetime(target_year, target_month, 1).date()
                end_date = datetime(next_year, next_month, 1).date() - timedelta(days=1)
                
                MONTH_NAMES = {
            1: 'January',
            2: 'February',
            3: 'March',
            4: 'April',
            5: 'May',
            6: 'June',
            7: 'July',
            8: 'August',
            9: 'September',
            10: 'October',
            11: 'November',
            12: 'December'
        }
                
            
                target_month_name = MONTH_NAMES[target_month]

            
       
                days_in_month = get_days_in_month(target_year, target_month)

            
                leave_count = calculate_leave_count(employee, target_month, target_year)

           
                holiday_count = calculate_holiday_count(employee.company, target_month, target_year)

           
                working_days = len(days_in_month) - leave_count - holiday_count
                context = {
            'items': items,
            'company':company,
            'employee': employee,
            'target_month': target_month_name,
            'target_year': target_year,
            'leave_count': leave_count,
            'holiday_count': holiday_count,
            'working_days': working_days
        }
                template_path = 'zohomodules/Attendance/attendance_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                subject = f"Attendance Details - {company.company_name}"
                email = f"Hi,\nPlease find the attached file for -{employee.first_name} {employee.last_name}. \n{email_message}\n\n--\nRegards,\n{company.company_name}\n{company.address}\n{company.city} - {company.state}\n{company.contact}"
                email_from = settings.EMAIL_HOST_USER

        
                msg = EmailMultiAlternatives(subject, email, email_from, emails_list)
                msg.attach(f'{employee.first_name}_{employee.last_name}_Attendance_Details.pdf', pdf, "application/pdf")
                
                # Send the email
                msg.send()

                messages.success(request, 'Statement has been shared via email successfully..!')
                return redirect(attendance_overview, employee_id, target_month, target_year)

        except Exception as e:
            print(f"Error sending email: {e}")
            messages.error(request, 'An error occurred while sending the email. Please try again later.')
            return redirect(attendance_overview, employee_id, target_month, target_year)
        
def attendance_edit(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company=CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=company,status='New')
            
            employee = payroll_employee.objects.filter(login_details=log_details,status='Active')
            
        if log_details.user_type=='Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            allmodules=ZohoModules.objects.get(company=staff.company)
            
            employee = payroll_employee.objects.filter(company=staff.company,status='Active')
            
        attendance=Attendance.objects.get(id=id)
        target_month = attendance.date.month
        target_year = attendance.date.year
        return render(request,'zohomodules/Attendance/attendance_edit.html',{'item':attendance,'employee':employee,'tm':target_month,'ty':target_year,'allmodules':allmodules})

def edit_attendance(request,id):
    if request.method =='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)
        
            if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                
            
            elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
            
            
            ename = request.POST['employee']
            emp = payroll_employee.objects.get(id=ename)
            date = request.POST['date']
            status = request.POST['status']
            reason = request.POST['reason']
            attendance = get_object_or_404(Attendance, id=id)
            employee_id = attendance.employee.id
            target_month = attendance.date.month
            target_year = attendance.date.year
            attendance.employee=emp
            attendance.date=date
            attendance.status=status
            attendance.reason=reason
            is_holiday = Holiday.objects.filter(company=company, start_date__lte=date, end_date__gte=date).exists()

            if is_holiday:
                    messages.warning(request, 'Selected date is a company holiday.')
                    return redirect('attendance_edit',id=id)
                
            attendance.save()
                
            history = Attendance_History(company=company,login_details=log_details,attendance=attendance,date=date,action='Edited')
            history.save()
            
            
            messages.success(request,'Leave edited successfully!!')
            return redirect('attendance_overview',employee_id,target_month,target_year)
        
def attendance_delete(request,id):
    item = Attendance.objects.get(id=id)
    employee_id = item.employee.id
    target_month = item.date.month
    target_year = item.date.year
    item.delete()
    return redirect('attendance_overview',employee_id,target_month,target_year)

def attendance_create_employee(request):
     if request.method == 'POST':
        # Get login_id from session
        log_id = request.session.get('login_id')
        if not log_id:
            return redirect('/')
        
        
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            
            company = dash_details.company
            print(company)
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
        
        
        # Extract data from POST request
        title=request.POST['title']
        fname=request.POST['fname']
        lname=request.POST['lname']
        alias=request.POST['alias']
        joindate=request.POST['joindate']
        salarydate=request.POST['salary']
        saltype=request.POST['saltype']
        if (saltype == 'Fixed'):
            salary=request.POST['fsalary']
        else:
            salary=request.POST['vsalary']
        image=request.FILES.get('file')
        amountperhr=request.POST['amnthr']
        workhr=request.POST['hours'] 
        empnum=request.POST['empnum']
        if payroll_employee.objects.filter(emp_number=empnum,company=company).exists():
            return JsonResponse({'status': 'error', 'message': 'empnum_exists'}, status=400)
            
        designation = request.POST['designation']
        location=request.POST['location']
        gender=request.POST['gender']
        dob=request.POST['dob']
        blood=request.POST['blood']
        fmname=request.POST['fm_name']
        sname=request.POST['s_name']        
        add1=request.POST['address']
        add2=request.POST['address2']
        address=add1+" "+add2
        padd1=request.POST['paddress'] 
        padd2=request.POST['paddress2'] 
        paddress= padd1+padd2
        phone=request.POST['phone']
        ephone=request.POST['ephone']
        result_set1 = payroll_employee.objects.filter(company=company,Phone=phone)
        result_set2 = payroll_employee.objects.filter(company=company,emergency_phone=ephone)
        if result_set1:
            messages.error(request,'phone no already exists')
            return redirect('company_mark_attendance')
        if result_set2:
            messages.error(request,'phone no already exists')
            return redirect('company_mark_attendance')
        email=request.POST['email']
        result_set = payroll_employee.objects.filter(company=company,email=email)
        if result_set:
            messages.error(request,'email already exists')
            return redirect('company_mark_attendance')
        isdts=request.POST['tds']
        attach=request.FILES.get('attach')
        if isdts == '1':
            istdsval=request.POST['pora']
            if istdsval == 'Percentage':
                tds=request.POST['pcnt']
            elif istdsval == 'Amount':
                tds=request.POST['amnt']
        else:
                istdsval='No'
                tds = 0
        itn=request.POST['itn']
        an=request.POST['an']
        if payroll_employee.objects.filter(Aadhar=an,company=company):
                messages.error(request,'Aadhra number already exists')
                return redirect('company_mark_attendance')   
        uan=request.POST['uan'] 
        pfn=request.POST['pfn']
        pran=request.POST['pran']
        age=request.POST['age']
        bank=request.POST['bank']
        accno=request.POST['acc_no']       
        ifsc=request.POST['ifsc']       
        bname=request.POST['b_name']       
        branch=request.POST['branch']
        ttype=request.POST['ttype']
        try:
            payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                                emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                                amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                                UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=company,login_details=log_details)
            payroll.save()
            history=employee_history(company=company,login_details=log_details, employee=payroll,Action='CREATED')
            history.save()
            new_employee_id = payroll.id  
            new_employee_name = f"{fname} {lname}"
            
            
            data = {
                'status': 'success',
                'employee_id': new_employee_id,
                'employee_name': new_employee_name
            }
            
            
            return JsonResponse(data)
        except Exception as e:
           
            error_message = str(e)
            return JsonResponse({'status': 'error', 'message': error_message})
            
def attendance_employee_dropdown(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company=CompanyDetails.objects.get(login_details=log_details)
            options = {}
            option_objects = payroll_employee.objects.filter(company=company,status='Active')
            for option in option_objects:
                full_name = f"{option.first_name} {option.last_name}"
                options[option.id] = full_name

            return JsonResponse(options)
            
        if log_details.user_type=='Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            options = {}
            option_objects = payroll_employee.objects.filter(company=staff.company,status='Active')
            for option in option_objects:
                full_name = f"{option.first_name} {option.last_name}"
                options[option.id] = full_name

            return JsonResponse(options)
           
            
def attendance_add_blood(request):
     if request.method == "POST":
        blood = request.POST.get('blood')

        # Check if the blood group already exists
        existing_entry = Bloodgroup.objects.filter(Blood_group=blood).first()

        if existing_entry:
            # Blood group already exists, return an appropriate message
            return JsonResponse({'blood': blood, 'message': 'Blood group already exists'})

        # Blood group doesn't exist, create a new entry
        Bloodgroup.objects.create(Blood_group=blood)
        return JsonResponse({'blood': blood, 'message': 'Blood group saved successfully'})

     return JsonResponse({'message': 'Invalid request method'}, status=400)
     
def attendance_import(request):
    if request.method == 'POST' and 'file' in request.FILES:
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)

            if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                    
            elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)

            excel_file = request.FILES['file']
            workbook = openpyxl.load_workbook(excel_file)
            sheet = workbook.active

            for row in sheet.iter_rows(min_row=2, values_only=True):
                
                Employee_No, date, status, reason = row
                if not any(row):
                  continue 
                    
                for employee in payroll_employee.objects.filter(emp_number=Employee_No, company=company):
                        leave_exists = Attendance.objects.filter(employee=employee, company=company, date=date).exists()
                        
                        if not leave_exists:
                            attendance = Attendance.objects.create(
                                employee=employee,
                                company=company,
                                login_details=log_details,
                                date=date,
                                status=status,
                                reason=reason
                            )
                        
                    

                        
                            history = Attendance_History.objects.create(
                                company=company,
                                login_details=log_details,
                                attendance=attendance,
                                date=date,
                                action='Created'
                            )
               
                
                
            return redirect('company_attendance_list')

    return HttpResponse("No file uploaded or invalid request method")

#---------------- Zoho Final Attendance - Meenu Shaju - End--------------------
# ------------------------------- GOKUL KRISHNA UR -----------------------------------------
def SalaryDetailsListPage(request):
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                employees=SalaryDetails.objects.filter(company=dash_details.company)
                context = {
                    'employees':employees,
                    'allmodules': allmodules,
                    'details': dash_details,    
                    }
                return render(request,'zohomodules/SalaryDetails/SalaryDetailsListPage.html',context)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            employees=SalaryDetails.objects.filter(company=dash_details)
            company = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            context = {
                'employees':employees,
                'allmodules': allmodules,
                'company':company,
                'details': dash_details,    
            }
        
        return render (request, 'zohomodules/SalaryDetails/SalaryDetailsListPage.html',context )
     
def EditSalaryDetails(request,id):
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        current_year = datetime.now().year
        end_year = current_year + 5
        current_date = datetime.now().strftime('%Y-%m-%d')
        range_year_list = range(current_year, end_year + 1)
        log_details= LoginDetails.objects.get(id=log_id)
        blood=Bloodgroup.objects.all()
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            
            employees=payroll_employee.objects.filter(company=dash_details.company)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            salary=SalaryDetails.objects.get(id=id)
            formatted_join_date = salary.employee.joindate.strftime('%Y-%m-%d')
            formatted_salary_date= salary.salary_date.strftime('%Y-%m-%d')
            attendance = Attendance.objects.filter(employee=salary.employee.id)
            holyday =Holiday.objects.filter(company=dash_details.company)
            total_rows = 0
            holyday_rows = 0
            for attendance in attendance:
                total_rows += 1
            for holyday in holyday:
                holyday_rows += 1
            context = {
              
                'employees':employees,
                'range_year_list':range_year_list,
                'current_date':current_date,
                'salary':salary,
                'formatted_join_date':formatted_join_date,
                'formatted_salary_date':formatted_salary_date,
                'total_rows':total_rows,
                'holyday_rows':holyday_rows,
                'blood':blood,
                'allmodules':allmodules,
                'details':dash_details,
             
            }
            return render(request,'zohomodules/SalaryDetails/EditSalaryDetails.html',context) 
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            employees=payroll_employee.objects.filter(company=company)
            allmodules= ZohoModules.objects.get(company=company,status='New')
            salary=SalaryDetails.objects.get(id=id)
            formatted_join_date = salary.employee.joindate.strftime('%Y-%m-%d')
            formatted_salary_date= salary.salary_date.strftime('%Y-%m-%d')
            
            attendance = Attendance.objects.filter(employee=salary.employee.id)
            holyday =Holiday.objects.filter(company=company)
            total_rows = 0
            holyday_rows = 0
            for attendance in attendance:
                total_rows += 1
            for holyday in holyday:
                holyday_rows += 1
            context = {
              
                'employees':employees,
                'range_year_list':range_year_list,
                'current_date':current_date,
                'salary':salary,
                'formatted_join_date':formatted_join_date,
                'formatted_salary_date':formatted_salary_date,
                'total_rows':total_rows,
                'holyday_rows':holyday_rows,
                'blood':blood,
                'allmodules':allmodules,
                
                'details':company,
           
            }
  
        return render(request,'zohomodules/SalaryDetails/EditSalaryDetails.html',context)

def SalaryDetailsOverViewPageWithId(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                allmodules= ZohoModules.objects.get(company=dash_details.company)
                employees=SalaryDetails.objects.filter(company=dash_details.company )
                employee =SalaryDetails.objects.get(company=dash_details.company,id=id)
                attendance =Attendance.objects.filter(company=dash_details.company,employee=employee.employee)
                holydays= Holiday.objects.filter(company=dash_details.company)
                total_rows = 0
                holyday_rows= 0
                for attendance in attendance:  
                    total_rows += 1
                for holyday in holydays:
                    holyday_rows += 1
                comment= CommentSalaryDetails.objects.filter(company=dash_details.company,salary_details=id)
                last_history = HistorySalaryDetails.objects.filter(salary_details=id ).last()
                history = HistorySalaryDetails.objects.filter(company=dash_details.company,salary_details=id )
                total = employee.total_amount
                bonus =employee.add_bonus
                netsalary  =employee.salary
                total_percentage = employee.basic_salary + employee.conveyance_allowance + employee.other_allowance + employee.hra
                print('total_percentage',total_percentage)
                basic_salary_amount = (employee.basic_salary / total_percentage) * total
                conveyance_allowance_amount = (employee.conveyance_allowance / total_percentage) * total
                hra_amount = (employee.hra / total_percentage) * total
                other_allowance_amount = (employee.other_allowance / total_percentage) * total
                salary = SalaryDetails.objects.filter(company=dash_details.company).first()
                basic_salary_deduction = basic_salary_amount - salary.basic_salary
                print('deduction',basic_salary_deduction)
                allowance_amounts = {
                    "Basic_Salary": basic_salary_amount,
                    "Conveyance_Allowance": conveyance_allowance_amount,
                    "HRA": hra_amount,
                    "Other_Allowance": other_allowance_amount,
                    'basic_salary_deduction':basic_salary_deduction,
                    "bonus":bonus,
                    "netsalary":netsalary,
                }
                print("Corrected Basic Salary Amount:", basic_salary_amount)
                print("Corrected Conveyance Allowance Amount:", conveyance_allowance_amount)
                print("Corrected HRA Amount:", hra_amount)
                print("Corrected Other Allowance Amount:", other_allowance_amount)
                
                return render(request,'zohomodules/SalaryDetails/SalaryDetailsOVerViewPage.html', {'details':dash_details,'allowance_amounts':allowance_amounts,'allmodules':allmodules,'details':dash_details, 'history':history,'last_history':last_history,'comment':comment,'employees':employees,'allmodules': allmodules,'employee':employee,'attendance':total_rows,'holyday':holyday_rows})
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            employees=SalaryDetails.objects.filter(company=dash_details )
            employee =SalaryDetails.objects.get(company=dash_details,id=id)
            attendance =Attendance.objects.filter(company=dash_details,employee=employee.employee )
            holydays= Holiday.objects.filter(company=dash_details)
            total_rows = 0
            holyday_rows= 0
            for attendance in attendance:   
                total_rows += 1
            for holyday in holydays:
                holyday_rows += 1
            comment= CommentSalaryDetails.objects.filter(company=dash_details,salary_details=id)
            last_history = HistorySalaryDetails.objects.filter(salary_details=id ).last()
            history = HistorySalaryDetails.objects.filter(company=dash_details,salary_details=id )
            total = employee.total_amount
            bonus =employee.add_bonus
            netsalary  =employee.salary
            total_percentage = employee.basic_salary + employee.conveyance_allowance + employee.other_allowance + employee.hra
            print('total_percentage',total_percentage)
            basic_salary_amount = (employee.basic_salary / total_percentage) * total
            conveyance_allowance_amount = (employee.conveyance_allowance / total_percentage) * total
            hra_amount = (employee.hra / total_percentage) * total
            other_allowance_amount = (employee.other_allowance / total_percentage) * total
            salary = SalaryDetails.objects.filter(company=dash_details).first()
            basic_salary_deduction = basic_salary_amount - salary.basic_salary
            allowance_amounts = {
                "Basic_Salary": basic_salary_amount,
                "Conveyance_Allowance": conveyance_allowance_amount,
                "HRA": hra_amount,
                "Other_Allowance": other_allowance_amount,
                "basic_salary_deduction":basic_salary_deduction,
                "bonus":bonus,
                "netsalary":netsalary,
            }
            print("Corrected Basic Salary Amount:", basic_salary_amount)
            print("Corrected Conveyance Allowance Amount:", conveyance_allowance_amount)
            print("Corrected HRA Amount:", hra_amount)
            print("Corrected Other Allowance Amount:", other_allowance_amount)
            return render (request, 'zohomodules/SalaryDetails/SalaryDetailsOVerViewPage.html', {'allowance_amounts':allowance_amounts,'details':dash_details,'employee':employee,'comment':comment,'employees':employees,'allmodules': allmodules, 'attendance':total_rows,'holyday':holyday_rows,'last_history':last_history,'history':history} )

def CreateSalaryDetailsFunction(request):
    if request.method == 'POST':
        if 'login_id' not in request.session:
            return redirect('/')
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
        salary_date_str = request.POST.get('salary_date')
        salary_date = datetime.strptime(salary_date_str, '%Y-%m-%d').date()
        year = request.POST.get('year')
        other_cuttings_str = request.POST.get('other_cuttings')
        other_cuttings = float(other_cuttings_str) if other_cuttings_str else 0.0

        holiday = request.POST.get('Holiday')
        month = request.POST.get('month')
        description = request.POST.get('Description')
        employee_id = request.POST.get('title')
        print('emplyeeeeeeeee',employee_id)
        employee= payroll_employee.objects.get(id=employee_id)
        
        casual_leave = request.POST.get('Casual_leave')
        working_day = request.POST.get('working_days')
        bonus_str = request.POST.get('bonus')
        bonus = float(bonus_str) if bonus_str else 0.0


        calculated_salary = request.POST.get('calculated_salary')
        basic_salary = float(request.POST.get('Basic_Salary'))
        conveyance_allowance_str = request.POST.get('Conveyance_Allowance')
        conveyance_allowance = float(conveyance_allowance_str) if conveyance_allowance_str else 0.0

        hra_str = request.POST.get('HRA')
        hra = float(hra_str) if hra_str else 0.0
        other_allowance_str = request.POST.get('Other_Allowance')
        other_allowance = float(other_allowance_str) if other_allowance_str else 0.0
        attendance = Attendance.objects.filter(employee_id=employee_id, company=company).first()
        draft = request.POST.get('draft')
        save = request.POST.get('save')

        total = basic_salary + conveyance_allowance + hra + other_allowance
        

        
        
        if draft:   
            DraftorSave = "Draft"
            status= "Inactive"
        else:   
            DraftorSave = "Save"
            status= "Active"
        
        SalaryDetails.objects.create(
            year=year,
            other_cuttings=other_cuttings,
            employee=employee,
            month=month,
            attendance=attendance,
            casual_leave=casual_leave,
            description=description,
            add_bonus=bonus,
            salary=calculated_salary,
            salary_date=salary_date,
            basic_salary=basic_salary,
            conveyance_allowance=conveyance_allowance,
            hra=hra,
            other_allowance=other_allowance,


           
            DraftorSave=DraftorSave,
            company=company,
            status = status,
            holiday=holiday,
            total_amount=total,
            total_working_days=working_day
        )


        salary = SalaryDetails.objects.filter(company=company)
        ids=salary.last()

        HistorySalaryDetails.objects.create(
        login_details=log_details,company=company,salary_details=ids,
                action='CREATED'
        )
        
        return redirect('SalaryDetailsListPage' )
    
    return render(request, 'zohomodules/SalaryDetails/CreateSalaryDetails.html')

def SharePayslipMail(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            return HttpResponse('<script>alert("Invalid user type!");window.location="/"</script>')
        
        employee = SalaryDetails.objects.get(company=dash_details, id=id)
        attendance = Attendance.objects.filter(company=dash_details, employee=employee.employee)
        holydays = Holiday.objects.filter(company=dash_details)
        total_rows = attendance.count()
        holyday_rows = holydays.count()
        
        total = employee.total_amount
        netsalary =employee.salary
        bouns =employee.add_bonus
        total_percentage = employee.basic_salary + employee.conveyance_allowance + employee.other_allowance + employee.hra
        basic_salary_amount = (employee.basic_salary / total_percentage) * total
        conveyance_allowance_amount = (employee.conveyance_allowance / total_percentage) * total
        hra_amount = (employee.hra / total_percentage) * total
        other_allowance_amount = (employee.other_allowance / total_percentage) * total
        salary = SalaryDetails.objects.filter(company=dash_details).first()
        basic_salary_deduction = basic_salary_amount - salary.basic_salary
        allowance_amounts = {
            "Basic_Salary": basic_salary_amount,
            "Conveyance_Allowance": conveyance_allowance_amount,
            "HRA": hra_amount,
            "Other_Allowance": other_allowance_amount,
            "basic_salary_deduction":basic_salary_deduction,
            "netsalary":netsalary,
            "bouns":bouns,
        }
        
        my_subject = "PAYSLIP"
        emails_string = request.POST.get('email_ids', '')
        emails_list = [email.strip() for email in emails_string.split(',')]

        html_message = render_to_string('zohomodules/SalaryDetails/payslip_pdf.html', {'allowance_amounts': allowance_amounts, 'details': dash_details, 'employee': employee, 'attendance': total_rows, 'holyday': holyday_rows}) 
        plain_message = strip_tags(html_message)
        
        pdf_content = BytesIO()
        pisa_document = pisa.CreatePDF(html_message.encode("UTF-8"), pdf_content) 
        pdf_content.seek(0)
        
        filename = f'Payslip_{dash_details.company_name}.pdf'
        
        subject = "Payslip"
  
        
        message = EmailMultiAlternatives(
            subject=subject,
            body=plain_message,
            to=emails_list,
        )
        
        message.attach_alternative(html_message, "text/html")
        message.attach(filename, pdf_content.read(), 'application/pdf')

        try:
            message.send()
            return HttpResponse('<script>alert("Report has been shared successfully!");window.location="/SalaryDetailsOverViewPageWithId/' + str(id) + '"</script>')
        except Exception as e:
            return HttpResponse('<script>alert("Failed to send email!");window.location="/SalaryDetailsOverViewPageWithId/' + str(id) + '"</script>')

    return HttpResponse('<script>alert("Invalid Request!");window.location="/SalaryDetailsOverViewPage/' + str(id) + '"</script>')

     

def CreateSalaryDetails(request): 
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        current_year = datetime.now().year
        end_year = current_year + 5
        current_date = datetime.now().strftime('%Y-%m-%d')
        range_year_list = range(current_year, end_year + 1)
        blood=Bloodgroup.objects.all()
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            employees=payroll_employee.objects.filter(company=dash_details.company)
            salary = SalaryDetails.objects.filter(company=dash_details.company).first()
          
            if salary is not None:
                total = salary.total_amount
                total_percentage = salary.basic_salary + salary.conveyance_allowance + salary.other_allowance + salary.hra
                print('total_percentage',total_percentage)
                basic_salary_amount = (salary.basic_salary / total_percentage) * total
                conveyance_allowance_amount = (salary.conveyance_allowance / total_percentage) * total
                hra_amount = (salary.hra / total_percentage) * total
                other_allowance_amount = (salary.other_allowance / total_percentage) * total
            else:
                basic_salary_amount = None
                conveyance_allowance_amount =None
                hra_amount = None
                other_allowance_amount =None

       
            context = {
                'employees':employees,
                'allmodules': allmodules,
                'range_year_list':range_year_list,
                'current_date':current_date,
                'details':dash_details,
                'salary':salary,
                "Basic_Salary": basic_salary_amount,
                "Conveyance_Allowance": conveyance_allowance_amount,
                "HRA": hra_amount,
                "Other_Allowance": other_allowance_amount,
                "blood":blood,
            }
            return render (request, 'zohomodules/SalaryDetails/CreateSalaryDetails.html',context )
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            employees=payroll_employee.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            
            salary = SalaryDetails.objects.filter(company=dash_details).first()
            if salary is not None:
                total = salary.total_amount
                total_percentage = salary.basic_salary + salary.conveyance_allowance + salary.other_allowance + salary.hra
                print('total_percentage',total_percentage)
                basic_salary_amount = (salary.basic_salary / total_percentage) * total
                conveyance_allowance_amount = (salary.conveyance_allowance / total_percentage) * total
                hra_amount = (salary.hra / total_percentage) * total
                other_allowance_amount = (salary.other_allowance / total_percentage) * total
            else:
                basic_salary_amount = None
                conveyance_allowance_amount =None
                hra_amount = None
                other_allowance_amount =None
            context = {
              
                'employees':employees,
                'allmodules': allmodules,
                'range_year_list':range_year_list,
                'current_date':current_date,
                'details':dash_details,
                'salary':salary,
                "Basic_Salary": basic_salary_amount,
                "Conveyance_Allowance": conveyance_allowance_amount,
                "HRA": hra_amount,
                "Other_Allowance": other_allowance_amount,
                "blood":blood,
            }
        
        return render (request, 'zohomodules/SalaryDetails/CreateSalaryDetails.html',context )
     

def addCommentSalaryDetails(request,id):
    if request.method == 'POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        company = CompanyDetails.objects.get(id=dash_details.company.id)
    elif log_details.user_type == 'Company':
        company = CompanyDetails.objects.get(login_details=log_details)
    salary = SalaryDetails.objects.get(id=id) 
    comments = request.POST.get('comments')
    CommentSalaryDetails.objects.create(comment=comments,company=company,employee=salary.employee,salary_details=salary)
    return redirect('SalaryDetailsOverViewPageWithId', salary.id)


def DeleteCommentSalaryDetails(request, id):
    comment = CommentSalaryDetails.objects.get(id=id)
    salary_id = comment.employee.salarydetails_set.first().id
    comment.delete()
    return redirect('SalaryDetailsOverViewPageWithId', salary_id)
     
def ImportSalaryDetails(request):
    if request.method == 'POST' and 'empfile' in request.FILES:
        if 'login_id' not in request.session:
            return redirect('/')
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
        excel_file = request.FILES['empfile']
        workbook = openpyxl.load_workbook(excel_file)
        sheet = workbook.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            emp_number,year, month ,salary_date, other_cuttings,casual_leave,description,bonus,DraftorSave,basic_salary,conveyance_allowance,hra,other_allowance= row
            employee=payroll_employee.objects.get(emp_number=emp_number)
            attendance = Attendance.objects.filter(employee=employee)
            total = basic_salary + conveyance_allowance + hra + other_allowance
            basic_salary_percentage = float((basic_salary / total) * 100)
            conveyance_allowance_percentage = float((conveyance_allowance / total) * 100)
            hra_percentage = float((hra / total) * 100)
            other_allowance_percentage = float((other_allowance / total) * 100)
            salary = employee.salary
            total_rows = 0
            for attendance in attendance:
                total_rows += 1
            days=calendar.monthrange(year, month)[1]
            totalWorkedDays = days - total_rows + casual_leave
            calculatedSalary = (salary / days) * totalWorkedDays + bonus - other_cuttings ; 
            SalaryDetails.objects.create(
                employee=employee,
                year=year,
                other_cuttings=other_cuttings,
                month=month,
                attendance=attendance,
                casual_leave=casual_leave,
                description=description,
                add_bonus=bonus,
                salary=calculatedSalary,
                salary_date=salary_date,
                basic_salary =basic_salary_percentage,
                hra =hra_percentage,
                other_allowance=other_allowance_percentage,
                conveyance_allowance=conveyance_allowance_percentage,
                DraftorSave =DraftorSave,
                company=company,
            )
            HistorySalaryDetails.objects.create(
            login_details=log_details,
         
                company=company,
                action='CREATED'
        )
        return redirect('SalaryDetailsListPage')


def addEmployeeFromSalaryDetails(request):
    if request.method=='POST':
        print("hii")
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':    
            company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            title=request.POST['title']
            print(title)
            fname=request.POST['fname']
            print(fname)
            lname=request.POST['lname']
            print(lname)
            alias=request.POST['alias']
            print(alias)
            joindate=request.POST.get('joindate')
            print(joindate)
            salarydate=request.POST['salarydate']
            print(salarydate)

            saltype=request.POST['saltype']
            print(saltype)
            if (saltype == 'Fixed'):
                salary=request.POST['fsalary']
                print(salary)
            else:
                salary=request.POST['vsalary']
                print(salary)
            
            image=request.FILES.get('file')
            print(image)
            amountperhr=request.POST['amnts']
            print(amountperhr)
            workhr=request.POST['hours'] 
            print(workhr)
            empnum=request.POST['empnum']
            print(empnum)
            if payroll_employee.objects.filter(emp_number=empnum,company=company_details):
                messages.info(request,'employee number all ready exists')
                return redirect('employeeloan_create')
            designation = request.POST['designation']
            print(designation)
            location=request.POST['location']
            print(location)
            gender=request.POST['gender']
            print(gender)
            dob=request.POST['dob']
            print(dob)
            blood=request.POST['blood']
            print(blood)
            fmname=request.POST['fm_name']
            print(fmname)
            sname=request.POST['s_name']
            print(sname)        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            print(address)
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            print(paddress)
            phone=request.POST['phone']
            print(phone)
            ephone=request.POST['ephone']
            print(ephone)
        
            email=request.POST['email2']
            print(email)
            
            isdts=request.POST['tds']
            print(isdts)
            attach=request.FILES.get('attach')
            print(attach)
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']

            an=request.POST['an']
            print(itn)
            print(an)
           
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            print(uan)
            print(pfn)
           
            print(pran)
            
            print(age)
            
            print(bank)
            
            print(accno)
            print(ifsc)
            
            print(bname)
            
            print(branch)
            
            print(ttype)
           
           
            payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                            emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                            amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                            UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=company_details,login_details=log_details)
            print(payroll)
            payroll.save()
            
            history=employee_history(company=company_details,login_details=log_details, employee=payroll,Action='CREATED')
            history.save()
            messages.info(request,'employee created')
            
        if log_details.user_type == 'Staff':
            company_details = StaffDetails.objects.get(login_details=log_details)
            title=request.POST['title']
            print(title)
            fname=request.POST['fname']
            print(fname)
            lname=request.POST['lname']
            print(lname)
            alias=request.POST['alias']
            print(alias)
            joindate=request.POST.get('joindate')
            print(joindate)
            salarydate=request.POST['salarydate']
            print(salarydate)

            saltype=request.POST['saltype']
            print(saltype)
            if (saltype == 'Fixed'):
                salary=request.POST['fsalary']
                print(salary)
            else:
                salary=request.POST['vsalary']
                print(salary)
            
            image=request.FILES.get('file')
            print(image)
            amountperhr=request.POST['amnts']
            print(amountperhr)
            workhr=request.POST['hours'] 
            print(workhr)
            empnum=request.POST['empnum']
            print(empnum)
            if payroll_employee.objects.filter(emp_number=empnum,company=company_details.company):
                messages.info(request,'employee number all ready exists')
                return redirect('employeeloan_create')
            designation = request.POST['designation']
            print(designation)
            location=request.POST['location']
            print(location)
            gender=request.POST['gender']
            print(gender)
            dob=request.POST['dob']
            print(dob)
            blood=request.POST['blood']
            print(blood)
            fmname=request.POST['fm_name']
            print(fmname)
            sname=request.POST['s_name']
            print(sname)        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            print(address)
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            print(paddress)
            phone=request.POST['phone']
            print(phone)
            ephone=request.POST['ephone']
            print(ephone)
        
            email=request.POST['email2']
            print(email)
            
            isdts=request.POST['tds']
            print(isdts)
            attach=request.FILES.get('attach')
            print(attach)
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']

            an=request.POST['an']
            print(itn)
            print(an)
           
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            print(uan)
            print(pfn)
           
            print(pran)
            
            print(age)
            
            print(bank)
            
            print(accno)
            print(ifsc)
            
            print(bname)
            
            print(branch)
            
            print(ttype)
           
           
            payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                            emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                            amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                            UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=company_details.company,login_details=log_details)
            print(payroll)
            payroll.save()
            
            history=employee_history(company=company_details.company,login_details=log_details, employee=payroll,Action='CREATED')
            history.save()
            messages.info(request,'employee created')
            
        return redirect('CreateSalaryDetails')


def EditSalaryDetailsFunction(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
            return redirect('/')
    if request.method == 'POST':
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
        salary= SalaryDetails.objects.get(id=id)
        salary_date_str = request.POST.get('salary_date')
        salary.salary_date = datetime.strptime(salary_date_str, '%Y-%m-%d').date()
        salary.year = request.POST.get('year')
        salary.other_cuttings = request.POST.get('other_cuttings')
        salary.month = request.POST.get('month')
        salary.description = request.POST.get('Description')
        salary.employee = request.POST.get('id')
        salary.casual_leave = request.POST.get('Casual_leave')
        salary.total_working_days = request.POST.get('working_day')
        salary.add_bonus = request.POST.get('bonus')
       
        employee_id = request.POST.get('employee_id')

        salary.employee = get_object_or_404(payroll_employee, id=employee_id)  
        salary.salary= request.POST.get('calculated_salary')
        salary.save()
        existing_entry = HistorySalaryDetails.objects.filter(
            login_details=log_details,
            action='EDITED'
        ).exists()

        salary = SalaryDetails.objects.get(company=company,id=id)

        if not existing_entry:
            HistorySalaryDetails.objects.create(
                login_details=log_details,salary_details=salary,company=company,
                action='EDITED'
            )
        return redirect('SalaryDetailsOverViewPageWithId', salary.id)
    return render (request, 'zohomodules/SalaryDetails/SalaryDetailsOverViewPage.html' ) 


def SalaryDetailsActiveAndInnactive(request, id):
    if request.method == 'GET':
        salary = SalaryDetails.objects.get(id=id)
        if salary.status == 'Active':
            salary.status = 'Inactive'
        else:
            salary.status = 'Active'
        salary.save()
    return redirect('SalaryDetailsOverViewPageWithId', salary.id)
 

def SalaryDetailsAddBloodGroup(request):
    if request.method == "POST":
        if 'login_id' not in request.session:
            return redirect('/')
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
        blood = request.POST.get('blood')
        Bloodgroup.objects.create(Blood_group=blood, company=company)
        return JsonResponse({'blood': blood})
    return render(request, 'zohomodules/SalaryDetails/CreateSalaryDetails.html')

  
def SalaryDetailsConvert(request, id):
    if request.method == 'GET':
        salary = SalaryDetails.objects.get(id=id)
        if salary.DraftorSave == 'Draft':
            salary.DraftorSave = 'Save'
            salary.save()   
    return redirect('SalaryDetailsOverViewPageWithId', salary.id)


def custdata(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
            return redirect('/')
    if request.method == 'POST':
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            cid = request.POST.get('id')
            employee = payroll_employee.objects.get(id=cid)
            attendance =Attendance.objects.filter(employee=employee.id)
            holyday = Holiday.objects.filter(company=dash_details.company)
            print(attendance)
            print(holyday)
            total_rows = 0
            holyday_rows = 0
            for attendance in attendance:
                total_rows += 1
            for holyday in holyday:
                holyday_rows += 1
            data = {
                'email': employee.email,
                'join_date': employee.joindate.strftime('%Y-%m-%d'),
                'employee_id':employee.emp_number,
                'salary_id':employee.salary,
                'Designation_id':employee.designation,
                'total_rows':total_rows,
                'holyday':holyday_rows,
            }
            return JsonResponse(data)

            
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            cid = request.POST.get('id')
            employee = payroll_employee.objects.get(id=cid)
            attendance =Attendance.objects.filter(employee=employee.id)
            holyday = Holiday.objects.filter(company=company)
            print(attendance)
            print(holyday)
            total_rows = 0
            holyday_rows = 0
            for attendance in attendance:
                total_rows += 1
            for holyday in holyday:
                holyday_rows += 1
            data = {
                'email': employee.email,
                'join_date': employee.joindate.strftime('%Y-%m-%d'),
                'employee_id':employee.emp_number,
                'salary_id':employee.salary,
                'Designation_id':employee.designation,
                'total_rows':total_rows,
                'holyday':holyday_rows,
            }
            return JsonResponse(data)

def SalaryDetailsDelete (request,id):
    salary_details = SalaryDetails.objects.get(id=id)
    salary_details.delete()
    return redirect('SalaryDetailsListPage')
 
# ------------------------------- GOKUL KRISHNA UR -----------------------------------------

#-------------------------employeeloan views by haripriya-------------#
def employee_listpage(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        pay= payroll_employee.objects.filter(company=dash_details)
        emp=EmployeeLoan.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        emp=EmployeeLoan.objects.filter(company=dash_details.company)
        pay= payroll_employee.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    content = {
                'details': dash_details,
                'emp':emp,
                'allmodules': allmodules,
                'log_id':log_details,
                'pay':pay,
                
        }
    return render(request,'zohomodules/employe_loan/employee_loan_list.html',content)   

def employeeloan_create(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    blood=Bloodgroup.objects.all()
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        pay = payroll_employee.objects.filter(company=dash_details,status='active')
        dur =LoanDuration.objects.filter(company=dash_details)
     
        bank=Banking.objects.filter(company=dash_details)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        
        
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d") 
    
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        pay = payroll_employee.objects.filter(company=dash_details.company,status='active')
        dur =LoanDuration.objects.filter(company=dash_details.company)
        bank=Banking.objects.filter(company=dash_details.company)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d") 
    content = {
            'details': dash_details,
            'allmodules': allmodules,
            'log_id':log_details,
            'pay':pay,
            'dur':dur,
            'tod':tod,
            'bank':bank,
            'blood':blood       
    }
    return render(request,'zohomodules/employe_loan/employee_loan_create.html',content)


def check_user_loan(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
  
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        emp = request.GET.get('emp',None)
        print('done')
        print(emp)
        data = {
            'is_tak': EmployeeLoan.objects.filter(Employee=emp).exists()
        }
        if data['is_tak']:
            data['error_message'] = 'Loan  already Taken.'
        return JsonResponse(data)
    elif log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        emp = request.GET.get('emp',None)
        print('done')
        print(emp)
        data = {
            'is_tak': EmployeeLoan.objects.filter(Employee=emp).exists()
        }
        if data['is_tak']:
            data['error_message'] = 'Loan  already Taken.'
        return JsonResponse(data)
    

def listemployee_loan(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        id = request.POST.get('id')
        cust = payroll_employee.objects.get(id = id, company = dash_details)
        email = cust.email
        employeeno = cust.emp_number
        joindate = cust.joindate
        amount = cust.salary
   
        print(email)
        print(employeeno)
       
        return JsonResponse({'email': email,'employeeno': employeeno,'joindate':joindate,'amount': amount},safe=False)

    elif log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        id = request.POST.get('id')
        cust = payroll_employee.objects.get(id = id, company = dash_details.company)
        email = cust.email
        employeeno = cust.emp_number
        joindate = cust.joindate
        amount = cust.salary
        
        print(email)
        print(employeeno)
       
        return JsonResponse({'email': email,'employeeno': employeeno,'joindate':joindate,'amount': amount},safe=False)   


def addemployeloan(request):
    if request.method=='POST':
        if 'login_id' in request.session:
            if request.session.has_key('login_id'):
                log_id = request.session['login_id']
            else:
                return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == "Company":
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            empid = request.POST['employee']
            print(empid)
            print('emploree')
            employee = payroll_employee.objects.get(id=empid)
            Loan_Amound = request.POST['Loan_Amount'] 
            loandate = request.POST['loandate'] 
            experydate = request.POST['experydate']
            cuttingPercentage = request.POST['cuttingPercentage']
            cuttinamount = request.POST['Cutingamount']
            duration = request.POST['loan_duration']
            cheque_id = request.POST['cheque_id']  
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
           
            
            try:
                file = request.FILES['file']
            except:
                file = '' 
            Note = request.POST['Note']
    

            data=EmployeeLoan(Employee=employee,LoanAmount=Loan_Amound,Loandate=loandate,Expiry_date=experydate,note=Note,file=file,company=dash_details,
            balance=Loan_Amound,upi_id=upi_id,cheque_number=cheque_id,bank_acc_number=bnk_id,payment_method=payment_method,login_details=log_details,duration=duration)
            

            if int(cuttingPercentage)==0 and int(cuttinamount)!=0:
                data.MonthlyCut_Amount=cuttinamount
                data.MonthlyCut_percentage=0
                data.Monthly_payment_type='No'         
            else: 
                data.MonthlyCut_percentage= cuttingPercentage  
                data.MonthlyCut_Amount = ((int(cuttingPercentage)/100)*int(Loan_Amound)) 
                data.Monthly_payment_type='Yes'   
            
            data.save()

            
            history=Employeeloan_history(company=dash_details,login_details=log_details, employeeloan=data, action='CREATED')
            history.save()
            EmployeeLoanRepayment.objects.create(
                emp=data,
                principal_amount = Loan_Amound,
                interest_amonut = 0,
                total_payment = 0,
                payment_date = loandate,
                balance = Loan_Amound,
                payment_method = payment_method,
                upi_id = upi_id,
                cheque_id = cheque_id,
                bank_id = bnk_id,
                particular = 'LOAN ISSUED',
                company=dash_details,
                logindetails=log_details,
                employee=employee
            )

        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details) 
            empid = request.POST['employee']
            print(empid)
            print('emploree')
            employee = payroll_employee.objects.get(id=empid,company=dash_details.company)
            Loan_Amound = request.POST['Loan_Amount'] 
            loandate = request.POST['loandate'] 
            experydate = request.POST['experydate']
            cuttingPercentage = request.POST['cuttingPercentage']
            cuttinamount = request.POST['Cutingamount']
            duration = request.POST['loan_duration']
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            
            try:
                file = request.FILES['file']
            except:
                file = '' 
            Note = request.POST['Note']
            
        

            data=EmployeeLoan(Employee=employee,LoanAmount=Loan_Amound,Loandate=loandate,Expiry_date=experydate,note=Note,file=file,company=dash_details.company,
            upi_id=upi_id,cheque_number=cheque_id,payment_method=payment_method,bank_acc_number=bnk_id,login_details=log_details,balance=Loan_Amound,duration=duration)
            
            if int(cuttingPercentage)==0 and int(cuttinamount)!=0:
                data.MonthlyCut_Amount=cuttinamount
                data.MonthlyCut_percentage=0
                data.Monthly_payment_type='No'         
            else: 
                data.MonthlyCut_percentage= cuttingPercentage  
                data.MonthlyCut_Amount = ((int(cuttingPercentage)/100)*int(Loan_Amound)) 
                data.Monthly_payment_type='Yes'
            
            data.save()
            
            history=Employeeloan_history(company=dash_details.company,login_details=log_details, employeeloan=data,action='CREATED')
            history.save()

            EmployeeLoanRepayment.objects.create(
                emp=data,
                principal_amount = Loan_Amound,
                interest_amonut = 0,
                total_payment = 0,
                payment_date = loandate,
                balance = Loan_Amound,
                payment_method = payment_method,
                upi_id = upi_id,
                cheque_id = cheque_id,
                bank_id = bnk_id,
                particular = 'LOAN ISSUED',
                company=dash_details.company,
                logindetails=log_details,
                employee=employee
            )

        return redirect('employee_listpage')

        
def createpayroll2(request):
    if request.method=='POST':
        print("hii")
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':    
            company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            title=request.POST['title']
            print(title)
            fname=request.POST['fname']
            print(fname)
            lname=request.POST['lname']
            print(lname)
            alias=request.POST['alias']
            print(alias)
            joindate=request.POST.get('joindate')
            print(joindate)
            salarydate=request.POST['salarydate']
            print(salarydate)

            saltype=request.POST['saltype']
            print(saltype)
            if (saltype == 'Fixed'):
                salary=request.POST['fsalary']
                print(salary)
            else:
                salary=request.POST['vsalary']
                print(salary)
            
            image=request.FILES.get('file')
            print(image)
            amountperhr=request.POST['amnts']
            print(amountperhr)
            workhr=request.POST['hours'] 
            print(workhr)
            empnum=request.POST['empnum']
            print(empnum)
            if payroll_employee.objects.filter(emp_number=empnum,company=company_details):
                messages.info(request,'employee number all ready exists')
                return redirect('employeeloan_create')
            designation = request.POST['designation']
            print(designation)
            location=request.POST['location']
            print(location)
            gender=request.POST['gender']
            print(gender)
            dob=request.POST['dob']
            print(dob)
            blood=request.POST['blood']
            print(blood)
            fmname=request.POST['fm_name']
            print(fmname)
            sname=request.POST['s_name']
            print(sname)        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            print(address)
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            print(paddress)
            phone=request.POST['phone']
            print(phone)
            ephone=request.POST['ephone']
            print(ephone)
        
            email=request.POST['email2']
            print(email)
            
            isdts=request.POST['tds']
            print(isdts)
            attach=request.FILES.get('attach')
            print(attach)
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']

            an=request.POST['an']
            print(itn)
            print(an)
           
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            print(uan)
            print(pfn)
           
            print(pran)
            
            print(age)
            
            print(bank)
            
            print(accno)
            print(ifsc)
            
            print(bname)
            
            print(branch)
            
            print(ttype)
           
           
            payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                            emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                            amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                            UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=company_details,login_details=log_details)
            print(payroll)
            payroll.save()
            
            history=employee_history(company=company_details,login_details=log_details, employee=payroll,Action='CREATED')
            history.save()
            messages.info(request,'employee created')
            
        if log_details.user_type == 'Staff':
            company_details = StaffDetails.objects.get(login_details=log_details)
            title=request.POST['title']
            print(title)
            fname=request.POST['fname']
            print(fname)
            lname=request.POST['lname']
            print(lname)
            alias=request.POST['alias']
            print(alias)
            joindate=request.POST.get('joindate')
            print(joindate)
            salarydate=request.POST['salarydate']
            print(salarydate)

            saltype=request.POST['saltype']
            print(saltype)
            if (saltype == 'Fixed'):
                salary=request.POST['fsalary']
                print(salary)
            else:
                salary=request.POST['vsalary']
                print(salary)
            
            image=request.FILES.get('file')
            print(image)
            amountperhr=request.POST['amnts']
            print(amountperhr)
            workhr=request.POST['hours'] 
            print(workhr)
            empnum=request.POST['empnum']
            print(empnum)
            if payroll_employee.objects.filter(emp_number=empnum,company=company_details.company):
                messages.info(request,'employee number all ready exists')
                return redirect('employeeloan_create')
            designation = request.POST['designation']
            print(designation)
            location=request.POST['location']
            print(location)
            gender=request.POST['gender']
            print(gender)
            dob=request.POST['dob']
            print(dob)
            blood=request.POST['blood']
            print(blood)
            fmname=request.POST['fm_name']
            print(fmname)
            sname=request.POST['s_name']
            print(sname)        
            add1=request.POST['address']
            add2=request.POST['address2']
            address=add1+" "+add2
            print(address)
            padd1=request.POST['paddress'] 
            padd2=request.POST['paddress2'] 
            paddress= padd1+padd2
            print(paddress)
            phone=request.POST['phone']
            print(phone)
            ephone=request.POST['ephone']
            print(ephone)
        
            email=request.POST['email2']
            print(email)
            
            isdts=request.POST['tds']
            print(isdts)
            attach=request.FILES.get('attach')
            print(attach)
            if isdts == '1':
                istdsval=request.POST['pora']
                if istdsval == 'Percentage':
                    tds=request.POST['pcnt']
                elif istdsval == 'Amount':
                    tds=request.POST['amnt']
            else:
                istdsval='No'
                tds = 0
            itn=request.POST['itn']

            an=request.POST['an']
            print(itn)
            print(an)
           
            uan=request.POST['uan'] 
            pfn=request.POST['pfn']
            pran=request.POST['pran']
            age=request.POST['age']
            bank=request.POST['bank']
            accno=request.POST['acc_no']       
            ifsc=request.POST['ifsc']       
            bname=request.POST['b_name']       
            branch=request.POST['branch']
            ttype=request.POST['ttype']
            print(uan)
            print(pfn)
           
            print(pran)
            
            print(age)
            
            print(bank)
            
            print(accno)
            print(ifsc)
            
            print(bname)
            
            print(branch)
            
            print(ttype)
           
           
            payroll= payroll_employee(title=title,first_name=fname,last_name=lname,alias=alias,image=image,joindate=joindate,salary_type=saltype,salary=salary,age=age,
                            emp_number=empnum,designation=designation,location=location, gender=gender,dob=dob,blood=blood,parent=fmname,spouse_name=sname,workhr=workhr,
                            amountperhr = amountperhr, address=address,permanent_address=paddress ,Phone=phone,emergency_phone=ephone, email=email,Income_tax_no=itn,Aadhar=an,
                            UAN=uan,PFN=pfn,PRAN=pran,uploaded_file=attach,isTDS=istdsval,TDS_percentage=tds,salaryrange = salarydate,acc_no=accno,IFSC=ifsc,bank_name=bname,branch=branch,transaction_type=ttype,company=company_details.company,login_details=log_details)
            print(payroll)
            payroll.save()
            
            history=employee_history(company=company_details.company,login_details=log_details, employee=payroll,Action='CREATED')
            history.save()
            messages.info(request,'employee created')
            
        return redirect('employeeloan_create')
    

def employeeloan_details(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type =='Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        employee_loan=EmployeeLoan.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        p=EmployeeLoan.objects.get(id=id)
        pay= payroll_employee.objects.filter(company=dash_details)
        comment_data=employeeloan_comments.objects.filter(employee=id)
        history=Employeeloan_history.objects.filter(employeeloan=id)
        his=Employeeloan_history.objects.filter(employeeloan=id,company=dash_details).last()
        name = his.login_details.first_name + ' ' + his.login_details.last_name 
        action = his.action
        his_date=his.Date
      
        repay=EmployeeLoanRepayment.objects.filter(emp=id)
        repayment_details=EmployeeLoanRepaymentHistory.objects.filter(repayment__in=repay)
        last_loan = EmployeeLoanRepayment.objects.filter(emp=id).last().balance
        loan_trans = EmployeeLoanRepayment.objects.filter(emp=id)
       
    if log_details.user_type =='Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        employee_loan=EmployeeLoan.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        p=EmployeeLoan.objects.get(id=id)
        pay= payroll_employee.objects.filter(company=dash_details.company)
        comment_data=employeeloan_comments.objects.filter(employee=id,company=dash_details.company)
        history=Employeeloan_history.objects.filter(employeeloan=id,company=dash_details.company)
        his=Employeeloan_history.objects.filter(employeeloan=id,company=dash_details.company).last()
        name = his.login_details.first_name + ' ' + his.login_details.last_name 
        action = his.action
        his_date=his.Date
        repay=EmployeeLoanRepayment.objects.filter(emp=id)
        repayment_details=EmployeeLoanRepaymentHistory.objects.filter(repayment__in=repay)
        last_loan = EmployeeLoanRepayment.objects.filter(emp=id).last().balance
        loan_trans = EmployeeLoanRepayment.objects.filter(emp=id)
       
    content = {
                'details': dash_details,
                'employee_loan':employee_loan,
                'p':p,
                'allmodules': allmodules,
                'comment':comment_data,
                'history':history,
                'log_id':log_details,
                'pay':pay,
                'his':his,
                'name':name,
                'action':action,
                'repayment_details':repayment_details,
                'his_date':his_date,
                'last_loan':last_loan,
                'repay':repay,
                'loan_trans':loan_trans,
                'state':'0'
                
        }
  
    return render(request,'zohomodules/employe_loan/employeeloan_overview.html',content)


def add_emploan_comment(request,id):                                                               

    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        if request.method=="POST":
                    
                    com=employeeloan_comments()
                    c = CompanyDetails.objects.get(login_details=company_id)
            
                    comment_comments=request.POST['comments']
                    com.company=c
                    com.logindetails=log_user
                    com.comments=comment_comments
                    empo=EmployeeLoan.objects.get(id=id)
                    com.employee=empo
                    
                    com.save()
                    return redirect('employeeloan_details',id)

    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            com=employeeloan_comments()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            
            comment_comments=request.POST['comments']
            com.company=c
            com.logindetails=log_user
            com.comments=comment_comments
            empo=EmployeeLoan.objects.get(id=id)
            com.employee=empo
                    
            com.save()
            return redirect('employeeloan_details',id)
    return redirect('employeeloan_details',id)


def delete_emploan_comment(request,ph,pr):                                                              
    empo=employeeloan_comments.objects.filter(id=ph)
    empo.delete()
    ac=EmployeeLoan.objects.get(id=pr)
    
    return redirect(employeeloan_details,ac.id)


def employeeloan_repayment_pageload(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        today = datetime.now().strftime('%Y-%m-%d')
        emp=EmployeeLoan.objects.filter(company=dash_details)
        employee=EmployeeLoan.objects.get(id=id)
        bank=Banking.objects.filter(company=dash_details)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        emp=EmployeeLoan.objects.filter(company=dash_details.company)
        
        employee=EmployeeLoan.objects.get(id=id)
        today = datetime.now().strftime('%Y-%m-%d')
        bank=Banking.objects.filter(company=dash_details.company)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
       
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    content = {
                'details': dash_details,
                'emp':emp,
                'allmodules': allmodules,
                'log_id':log_details,
                'employee':employee,
                'today':today,
                'bank':bank,
                

             
        }
    return render(request,'zohomodules/employe_loan/employee_loan_repayment.html',content)   


def add_repayment(request,id):
    if request.method=='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            pamnt=float(request.POST.get('principal'))
            interest=float(request.POST.get('interest'))
            pdate=request.POST.get('date')
            pmethod=request.POST.get('payment_method')
            upi_id=request.POST.get('upi_id')
            cheque_id=request.POST.get('cheque_id')
            bank_id=request.POST.get('bnk_id')
            total=float(request.POST.get('total'))
            employ = request.POST.get('emp')
            print(employ)
            employee = payroll_employee.objects.get(id=employ)

            repay = EmployeeLoanRepayment.objects.filter(emp=id).last()
            print(repay)
            balance = repay.balance
            
            if float(pamnt) > float(balance):
                messages.info(request, 'Paid Amount is Greater Than Balance!!!')
                return redirect('employeeloan_repayment_pageload',id)
            else:
                bal = float(balance) - float(pamnt)

            rep = EmployeeLoanRepayment(employee=employee,principal_amount=pamnt,interest_amonut=interest,payment_date=pdate,payment_method=pmethod,total_payment = total,
                                cheque_id=cheque_id,upi_id=upi_id,bank_id=bank_id,balance=bal,particular='EMI PAID',emp=repay.emp,logindetails=log_details,company=dash_details)
            rep.save()

            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details,
                    repayment=rep,
                    date=now().date(),
                    action='Created'
                )
            repayment_history.save()

            return redirect('employeeloan_trans',id)
            
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            pamnt=float(request.POST.get('principal'))
            interest=float(request.POST.get('interest'))
            pdate=request.POST.get('date')
            pmethod=request.POST.get('payment_method')
            upi_id=request.POST.get('upi_id')
            cheque_id=request.POST.get('cheque_id')
            bank_id=request.POST.get('bnk_id')
            total=float(request.POST.get('total'))
            employ = request.POST.get('emp')
            print(employ)
            employee = payroll_employee.objects.get(id=employ)

            repay = EmployeeLoanRepayment.objects.filter(emp=id).last()
            print(repay)
            balance = repay.balance
            
            if float(pamnt) > float(balance):
                messages.info(request, 'Paid Amount is Greater Than Balance!!!')
                return redirect('employeeloan_repayment_pageload',id)
            else:
                bal = float(balance) - float(pamnt)

            rep = EmployeeLoanRepayment(employee=employee,principal_amount=pamnt,interest_amonut=interest,payment_date=pdate,payment_method=pmethod,total_payment = total,
                                cheque_id=cheque_id,upi_id=upi_id,bank_id=bank_id,balance=bal,particular='EMI PAID',emp=repay.emp,logindetails=log_details,company=dash_details.company)
            rep.save()  
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details.company,
                    repayment=rep,
                
                    date=now().date(),
                    action='Created'
                )
            repayment_history.save()

            return redirect('employeeloan_trans',id)
                    
        
def add_newloan_pageload(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        today = datetime.now().strftime('%Y-%m-%d')
        emp=EmployeeLoan.objects.filter(company=dash_details)
        employee=EmployeeLoan.objects.get(id=id)
        bank=Banking.objects.filter(company=dash_details)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]

        repay = EmployeeLoanRepayment.objects.filter(emp=id).last()
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        emp=EmployeeLoan.objects.filter(company=dash_details.company)
        
        employee=EmployeeLoan.objects.get(id=id)
        today = datetime.now().strftime('%Y-%m-%d')
        bank=Banking.objects.filter(company=dash_details.company)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        repay = EmployeeLoanRepayment.objects.filter(emp=id).last()
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    content = {
                'details': dash_details,
                'emp':emp,
                'allmodules': allmodules,
                'log_id':log_details,
                'employee':employee,
                'today':today,
                'bank':bank,
                'repay':repay,
               
             
        }
    return render(request,'zohomodules/employe_loan/employee_loan_newloan.html',content)               

def add_newloan(request,id):
    if request.method == 'POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        employ = EmployeeLoan.objects.get(id=id)
        print(employ)
        em_id = employ.Employee.id
        employee = payroll_employee.objects.get(id=em_id)
    
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            principal = int(request.POST.get('remain_loan'))
            date = request.POST.get('adjdate')
            new_loan = request.POST.get('new')
            total = request.POST.get('amount')
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            
            rep = EmployeeLoanRepayment(employee=employee,principal_amount=principal,interest_amonut=0,payment_date=date,payment_method=payment_method,total_payment = new_loan,
                                cheque_id=cheque_id,upi_id=upi_id,bank_id=bnk_id,balance=total,particular='ADDITIONAL LOAN ISSUED',emp=employ,logindetails=log_details,company=dash_details)
            rep.save()
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details,
                    repayment=rep,
                    date=now().date(),
                    action='Created'
                )
            repayment_history.save()
            employ.balance = total
            print(employ.LoanAmount)
            res = employ.LoanAmount + int(new_loan)
            employ.LoanAmount = res
            print(total)
            print(principal)
            print(res)
            employ.save()
            
            return redirect('employeeloan_trans',id) 

        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            principal = int(request.POST.get('remain_loan'))
            date = request.POST.get('adjdate')
            new_loan = request.POST.get('new')
            total = request.POST.get('amount')
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            
            
            rep = EmployeeLoanRepayment(employee=employee,principal_amount=principal,interest_amonut=0,payment_date=date,payment_method=payment_method,total_payment = new_loan,
                                cheque_id=cheque_id,upi_id=upi_id,bank_id=bnk_id,balance=total,particular='ADDITIONAL LOAN ISSUED',emp=employ,logindetails=log_details,company=dash_details.company)
            rep.save()
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details.company,
                    repayment=rep,
                    date=now().date(),
                    action='Created'
                )
            repayment_history.save()
            employ.balance = total
            print(employ.LoanAmount)
            res = employ.LoanAmount + int(new_loan)
            employ.LoanAmount = res
            print(total)
            print(principal)
            print(res)
            employ.save()

            
            return redirect('employeeloan_trans',id)

                    
def delete_repayment(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        repay = EmployeeLoanRepayment.objects.get(id=id)
        loan_id = repay.emp.id
        id_to_delete = repay.id
        repay.delete()

        entry_list = []
        gt_entries = EmployeeLoanRepayment.objects.filter(id__gt=id_to_delete, emp=loan_id)
        lt_entrie = EmployeeLoanRepayment.objects.filter(id__lt=id_to_delete, emp=loan_id).last()

        if gt_entries:
            entry_list.append(lt_entrie)
            for g in gt_entries:
                entry_list.append(g)

            for i in range(1,len(entry_list)):
                if entry_list[i].particular == 'ADDITIONAL LOAN ISSUED':
                    entry_list[i].balance = float(entry_list[i-1].balance) + float(entry_list[i].principal_amount)
                else:
                    entry_list[i].balance = float(entry_list[i-1].balance) - float(entry_list[i].payment_made)
                entry_list[i].save()

        return redirect('employeeloan_trans',loan_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        repay = EmployeeLoanRepayment.objects.get(id=id)
        loan_id = repay.emp.id
        id_to_delete = repay.id
        repay.delete()

        entry_list = []
        gt_entries = EmployeeLoanRepayment.objects.filter(id__gt=id_to_delete, emp=loan_id)
        lt_entrie = EmployeeLoanRepayment.objects.filter(id__lt=id_to_delete, emp=loan_id).last()

        if gt_entries:
            entry_list.append(lt_entrie)
            for g in gt_entries:
                entry_list.append(g)

            for i in range(1,len(entry_list)):
                if entry_list[i].particular == 'ADDITIONAL LOAN ISSUED':
                    entry_list[i].balance = float(entry_list[i-1].balance) + float(entry_list[i].principal_amount)
                else:
                    entry_list[i].balance = float(entry_list[i-1].balance) - float(entry_list[i].principal_amount)
                entry_list[i].save()

        return redirect('employeeloan_trans',loan_id)
    

def edit_loanrepayment(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        repay = EmployeeLoanRepayment.objects.get(id=id)
        bank=Banking.objects.filter(company=dash_details)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
       
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        repay = EmployeeLoanRepayment.objects.get(id=id)
        bank=Banking.objects.filter(company=dash_details.company)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    context= {'repay':repay,'details':dash_details,'log_details':log_details,'allmodules':allmodules,'bank':bank}
    return render(request,'zohomodules/employe_loan/edit_repaymentloan.html',context)

def save_edit_loanrepayment(request,id):
    if request.method=='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            repay = EmployeeLoanRepayment.objects.get(id=id)
            repay.principal_amount = request.POST.get('principal')
            repay.interest_amonut=request.POST.get('interest')
            repay.payment_date=request.POST.get('date')
            repay.total_payment=request.POST.get('total')
            repay.payment_method=request.POST.get('payment_method')
            repay.upi_id=request.POST.get('upi_id')
            repay.cheque_id=request.POST.get('cheque_id')
            repay.bank_id=request.POST.get('bnk_id')
            gt_entries = EmployeeLoanRepayment.objects.filter(id__gt=repay.id, emp=repay.emp.id)
            lt_entrie = EmployeeLoanRepayment.objects.filter(id__lt=repay.id, emp=repay.emp.id).last()

            bal = float(lt_entrie.balance)- float(request.POST.get('principal'))
            repay.balance = bal
            repay.save()
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details,
                    repayment=repay,
                    date=now().date(),
                    action='edited'
                )
            repayment_history.save()

            for entry in gt_entries:
                if entry.particular == 'ADDITIONAL LOAN ISSUED':
                    entry.balance = bal + float(entry.principal_amount)
                else:
                    entry.balance = bal - float(entry.principal_amount)
                entry.save()
                bal = entry.balance
            return redirect('employeeloan_trans',repay.emp.id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            repay = EmployeeLoanRepayment.objects.get(id=id)
            repay.principal_amount = request.POST.get('principal')
            repay.interest_amonut=request.POST.get('interest')
            repay.payment_date=request.POST.get('date')
            repay.total_payment=request.POST.get('total')
            repay.payment_method=request.POST.get('payment_method')
            repay.upi_id=request.POST.get('upi_id')
            repay.cheque_id=request.POST.get('cheque_id')
            repay.bank_id=request.POST.get('bnk_id')

            gt_entries = EmployeeLoanRepayment.objects.filter(id__gt=repay.id, emp=repay.emp.id)
            lt_entrie = EmployeeLoanRepayment.objects.filter(id__lt=repay.id, emp=repay.emp.id).last()

            bal = float(lt_entrie.balance)- float(request.POST.get('principal'))
            repay.balance = bal
            repay.save()
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details.company,
                    repayment=repay,
                    date=now().date(),
                    action='edited'
                )
            repayment_history.save()

            for entry in gt_entries:
                if entry.particular == 'ADDITIONAL LOAN ISSUED':
                    entry.balance = bal + float(entry.principal_amount)
                else:
                    entry.balance = bal - float(entry.principal_amount)
                entry.save()
                bal = entry.balance
            return redirect('employeeloan_trans',repay.emp.id)


def edit_additionalloan_pageloage(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        repay = EmployeeLoanRepayment.objects.get(id=id)
        current_bal = float(repay.balance) - float(repay.principal_amount)
        bank=Banking.objects.filter(company=dash_details)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        repay = EmployeeLoanRepayment.objects.get(id=id)
        current_bal = float(repay.balance) - float(repay.principal_amount)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        bank=Banking.objects.filter(company=dash_details.company)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
    context= {'repay':repay,'details':dash_details,'log_details':log_details,'current_bal':current_bal,'allmodules':allmodules,'bank':bank}
    return render(request,'zohomodules/employe_loan/edit_additionalloan.html',context)


def save_edit_additionalloan(request,id):
    if request.method=='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            repay = EmployeeLoanRepayment.objects.get(id=id)
            repay.principal_amount = request.POST.get('new')
            repay.payment_date=request.POST.get('adjdate')
            repay.balance=request.POST.get('amount')
            repay.payment_method=request.POST.get('payment_method')
            repay.upi_id=request.POST.get('upi_id')
            repay.cheque_id=request.POST.get('cheque_id')
            repay.bank_id=request.POST.get('bnk_id')
            repay.total_payment=float(request.POST.get('remain_loan'))
            repay.save()
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details,
                    repayment=repay,
                    date=now().date(),
                    action='edited'
                )
            repayment_history.save()
            

            gt_entries = EmployeeLoanRepayment.objects.filter(id__gt=repay.id, emp=repay.emp.id)
            bal = float(repay.balance)
            for entry in gt_entries:
                if entry.particular == 'ADDITIONAL LOAN ISSUED':
                    entry.balance = bal + float(entry.principal_amount)
                else:
                    entry.balance = bal - float(entry.principal_amount)
                entry.save()
                bal = entry.balance
            return redirect('employeeloan_trans',repay.emp.id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            repay = EmployeeLoanRepayment.objects.get(id=id)
            repay.principal_amount = request.POST.get('new')
            repay.payment_date=request.POST.get('adjdate')
            repay.balance=request.POST.get('amount')
            repay.payment_method=request.POST.get('payment_method')
            repay.upi_id=request.POST.get('upi_id')
            repay.cheque_id=request.POST.get('cheque_id')
            repay.bank_id=request.POST.get('bnk_id')
            repay.total_payment=float(request.POST.get('remain_loan'))
            repay.save()
            repayment_history=EmployeeLoanRepaymentHistory.objects.create(
                    login_details=log_details,
                    company=dash_details.company,
                    repayment=repay,
                    date=now().date(),
                    action='edited'
                )
            repayment_history.save()

            gt_entries = EmployeeLoanRepayment.objects.filter(id__gt=repay.id, emp=repay.emp.id)
            bal = float(repay.balance)
            for entry in gt_entries:
                if entry.particular == 'ADDITIONAL LOAN ISSUED':
                    entry.balance = bal + float(entry.principal_amount)
                else:
                    entry.balance = bal - float(entry.principal_amount)
                entry.save()
                bal = entry.balance
            return redirect('employeeloan_trans',repay.emp.id)


def shareloanemail(request,pk):
  
    if request.method == 'POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

            emails_string = request.POST['email']
            fdate = request.POST['fdate']
            edate = request.POST['ldate']
            print(fdate)
            print(edate)

            print(emails_string)

        
            emails_list = [email.strip() for email in emails_string.split(',')]
                
            p=EmployeeLoan.objects.get(id=pk)
            loan_trans = EmployeeLoanRepayment.objects.filter(emp=pk)
            last_loan = EmployeeLoanRepayment.objects.filter(emp=pk).last().balance
            if fdate and edate:
                loan_trans = EmployeeLoanRepayment.objects.filter(payment_date__gte=fdate, payment_date__lte=edate)
                            

            context = {'p':p,'loan_trans':loan_trans,'details':dash_details,'log_details':log_details,'last_loan':last_loan}
            template_path = 'zohomodules/employe_loan/emploan_share.html'
            template = get_template(template_path)
            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
           
            filename = f'{p.Employee.first_name}details - {p.id}.pdf'
            
            subject = f"{p.Employee.first_name}{p.Employee.last_name}  - {p.id}-details"
            email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached employeeloan details - File-{p.Employee.first_name}{p.Employee.last_name} .\n--\nRegards,\n", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)
            
            return redirect('employeeloan_details',pk)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            emails_string = request.POST['email']
            print(emails_string)

        
            emails_list = [email.strip() for email in emails_string.split(',')]
                
            p=EmployeeLoan.objects.get(id=pk)
            loan_trans = EmployeeLoanRepayment.objects.filter(emp=pk)
            last_loan = EmployeeLoanRepayment.objects.filter(emp=pk).last().balance
            
                            
            context = {'p':p,'loan_trans':loan_trans,'details':dash_details,'log_details':log_details,'last_loan':last_loan}
            template_path = 'zohomodules/employe_loan/emploan_share.html'
            template = get_template(template_path)
            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
           
            filename = f'{p.Employee.first_name}details - {p.id}.pdf'
            
            subject = f"{p.Employee.first_name}{p.Employee.last_name}  - {p.id}-details"
            email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached employeeloan details - File-{p.Employee.first_name}{p.Employee.last_name} .\n--\nRegards,\n", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)
            
            return redirect('employeeloan_details',pk)

def active_loan(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        l = get_object_or_404(EmployeeLoan, id=id)

    # Activate the bank account
        l.active = True
        l.save()
        
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        l = get_object_or_404(EmployeeLoan, id=id)

    # Activate the bank account
        l.active = True
        l.save()

    return redirect('employeeloan_details',id)

def inactive_loan(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        l = get_object_or_404(EmployeeLoan, id=id)

    # Activate the bank account
        l.active = False
        l.save()
     
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        l = get_object_or_404(EmployeeLoan, id=id)

    # Activate the bank account
        l.active = False
        l.save()

    return redirect('employeeloan_details',id) 


def deleteloan(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        employee = EmployeeLoan.objects.get(id=id)
        employee.delete()
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        employee = EmployeeLoan.objects.get(id=id)
        employee.delete()
    return redirect('employee_listpage')


def create_loan_duration(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        days=request.POST['days']
        durs=request.POST['durs']
        LoanDuration.objects.create(day=days,duration=durs,logindetails=log_details,company=dash_details)
       
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        days=request.POST['days']
        durs=request.POST['durs']
        LoanDuration.objects.create(day=days,duration=durs,logindetails=log_details,company=dash_details.company) 
    return JsonResponse({'success': 'LoanDuration Saved'})

def loan_duration(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')

    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(
            login_details=log_details,
            superadmin_approval=1,
            Distributor_approval=1
        )
        data = {}
        dur_objects = LoanDuration.objects.filter(company=dash_details)

        for dur in dur_objects:
            duration = f"{dur.day} {dur.duration}"
        data[dur.id] = [duration, f"{duration}"]

        return JsonResponse(data)


    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details) 
        dur = LoanDuration.objects.filter(company=dash_details.company)
        data = {}
        dur_objects = LoanDuration.objects.filter(company=dash_details.company)

        for dur in dur_objects:
            duration = f"{dur.day} {dur.duration}"
        data[dur.id] = [duration, f"{duration}"]

        return JsonResponse(data)


def edit_loan(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    blood=Bloodgroup.objects.all()
    log_details= LoginDetails.objects.get(id=log_id)
  
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        pay = payroll_employee.objects.filter(company=dash_details,status='active')
        emp= EmployeeLoan.objects.filter(company=dash_details)
        p=EmployeeLoan.objects.get(id=id)
        dur =LoanDuration.objects.filter(company=dash_details)
        bank=Banking.objects.filter(company=dash_details)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        loan_trans=EmployeeLoanRepayment.objects.get(emp=p.id,particular='LOAN ISSUED',company=dash_details)
        
        
       


    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        pay = payroll_employee.objects.filter(company=dash_details.company,status='active')
        emp= EmployeeLoan.objects.filter(company=dash_details.company)
        p=EmployeeLoan.objects.get(id=id)
        dur =LoanDuration.objects.filter(company=dash_details.company)
        bank=Banking.objects.filter(company=dash_details.company)
        for i in bank:
            i.last_digit = str(i.bnk_acno)[-4:]
        loan_trans=EmployeeLoanRepayment.objects.get(emp=p.id,particular='LOAN ISSUED',company=dash_details.company)
    content = {
            'details': dash_details,
            'allmodules': allmodules,
            'log_id':log_details,
            'pay':pay,
            'dur':dur,
            'emp':emp,
            'p':p,
            'loan_trans':loan_trans,
            'blood':blood,
            'bank':bank,
            

            
    }

    return render(request,'zohomodules/employe_loan/edit_employeeloan.html',content)


def update_Employeeloan(request,id):
    if request.method=='POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type =='Company':
            company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            employ = EmployeeLoan.objects.get(id=id, company=company_details)

            Loan_Amount = request.POST.get('Loan_Amount')
            loandate = request.POST.get('loandate')
            experydate = request.POST.get('experydate')
            cuttingPercentage = request.POST.get('cuttingPercentage')
            cuttinamount = request.POST.get('Cutingamount')
            print(cuttingPercentage)
            Note = request.POST.get('Note')
            loan_duration= request.POST['loan_duration']
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            try:
                file = request.FILES['file']
            except:
                file = ''

            employ.Loandate = loandate
            employ.ExperyDate = experydate
            employ.note = Note
            employ.cheque_number = cheque_id
            employ.upi_id = upi_id
            employ.bank_acc_number=bnk_id
            employ.payment_method = payment_method
            employ.duration = loan_duration

            if int(cuttingPercentage) == 0 and int(cuttinamount) != 0:
                employ.MonthlyCut_Amount = cuttinamount
                employ.MonthlyCut_percentage =0
                employ.Monthly_payment_type = 'No'
            else:
                employ.MonthlyCut_percentage = cuttingPercentage
                employ.MonthlyCut_Amount = (int(cuttingPercentage) / 100) * int(Loan_Amount)
                employ.Monthly_payment_type = 'Yes'
            employ.LoanAmount = int(Loan_Amount)
            employ.balance = int(Loan_Amount)

            employ.save()

            repay = EmployeeLoanRepayment.objects.filter(emp=employ.id)

            bal = float(employ.LoanAmount)
            for r in repay:
                if r.particular == 'LOAN ISSUED':
                    r.principal_amount = bal
                    r.total_payment = bal
                    r.payment_date = loandate
                    r.payment_method = payment_method

                    r.cheque_id = cheque_id
                    r.upi_id = upi_id
                    r.bank_id = bnk_id
                    r.balance = bal
                    r.save()
                elif r.particular == 'ADDITIONAL LOAN ISSUED':
                    r.balance = bal + float(r.principal_amount)
                    bal = float(r.balance)
                    r.save()
                else :
                    r.balance = bal - float(r.principal_amount)
                    bal = float(r.balance)
                    r.save()
            
            history=Employeeloan_history(company=company_details,login_details=log_details, employeeloan=employ, action='EDITED')
            history.save()

            return redirect('employeeloan_details',id)
        if log_details.user_type == "Staff":
            company_details = StaffDetails.objects.get(login_details=log_details)   
            employ = EmployeeLoan.objects.get(id=id, company=company_details.company)
            
            Loan_Amount = request.POST.get('Loan_Amount')
            loandate = request.POST.get('loandate')
            experydate = request.POST.get('experydate')
            cuttingPercentage = request.POST.get('cuttingPercentage')
            cuttinamount = request.POST.get('Cutingamount')
            print(cuttingPercentage)
            Note = request.POST.get('Note')
            loan_duration= request.POST['loan_duration']
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            try:
                file = request.FILES['file']
            except:
                file = ''

            employ.Loandate = loandate
            employ.ExperyDate = experydate
            employ.note = Note
            employ.cheque_number = cheque_id
            employ.upi_id = upi_id
            employ.bank_acc_number=bnk_id
            employ.payment_method = payment_method
            employ.duration = loan_duration

            if int(cuttingPercentage) == 0 and int(cuttinamount) != 0:
                employ.MonthlyCut_Amount = cuttinamount
                employ.MonthlyCut_percentage =0
                employ.Monthly_payment_type = 'No'
            else:
                employ.MonthlyCut_percentage = cuttingPercentage
                employ.MonthlyCut_Amount = (int(cuttingPercentage) / 100) * int(Loan_Amount)
                employ.Monthly_payment_type = 'Yes'
            employ.LoanAmount = int(Loan_Amount)
            employ.balance = int(Loan_Amount)

            employ.save()

            repay = EmployeeLoanRepayment.objects.filter(emp=employ.id)

            bal = float(employ.LoanAmount)
            for r in repay:
                if r.particular == 'LOAN ISSUED':
                    r.principal_amount = bal
                    r.total_payment = bal
                    r.payment_date = loandate
                    r.payment_method = payment_method

                    r.cheque_id = cheque_id
                    r.upi_id = upi_id
                    r.bank_id = bnk_id
                    r.balance = bal
                    r.save()
                elif r.particular == 'ADDITIONAL LOAN ISSUED':
                    r.balance = bal + float(r.principal_amount)
                    bal = float(r.balance)
                    r.save()
                else :
                    r.balance = bal - float(r.principal_amount)
                    bal = float(r.balance)
                    r.save()
                
            history=Employeeloan_history(company=company_details.company,login_details=log_details, employeeloan=employ, action='EDITED')
            history.save()

            return redirect('employeeloan_details',id) 

    
def bankdata(request):
    if 'login_id' in request.session:
            log_id = request.session['login_id']
    if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
        
    if log_details.user_type =='Company':
        company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        bank_id = request.GET.get('id')
        term = Banking.objects.get(id=bank_id,company=company_details)
        data = {'bank': term.bnk_acno}
        return JsonResponse(data)  
    
    if log_details.user_type == "Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        bank_id = request.GET.get('id')
        term = Banking.objects.get(id=bank_id,company=company_details.company)
        data = {'bank': term.bnk_acno}
        return JsonResponse(data)


def bankdata1(request):
    if 'login_id' in request.session:
            log_id = request.session['login_id']
    if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
        
    if log_details.user_type =='Company':
        company_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        bank_id = request.GET.get('id')
        term = Banking.objects.get(bnk_name=bank_id,company=company_details)
        data = {'bank': term.bnk_acno}
        return JsonResponse(data)  
    
    if log_details.user_type == "Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        bank_id = request.GET.get('id')
        term = Banking.objects.get(bnk_name=bank_id,company=company_details.company)
        data = {'bank': term.bnk_acno}
        return JsonResponse(data)


def addloan_file(request,pk):
    if request.method == 'POST':
        data=request.FILES.get('file')
        emp=EmployeeLoan.objects.get(id=pk)
        if emp.file:
            try:
                                # Check if the file exists before removing it
                if os.path.exists(emp.file.path):
                    os.remove(emp.file.path)
            except Exception as e:
                messages.error(request,'file upload error')
                return redirect('employeeloan_details',pk)

                            # Assign the new file to payroll.image
            emp.file = data
            emp.save()
            messages.info(request,'file uploaded')
            return redirect('employeeloan_details',pk)
        else:
            emp.file = data
            emp.save()
        messages.info(request,'fil uploaded')
        return redirect('employeeloan_details',pk)


def import_employee_loan_details(request):
    if request.method == 'POST' and 'file' in request.FILES:
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)

            if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                    
            elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
            excel_file = request.FILES['file']
            print(excel_file)
            workbook = openpyxl.load_workbook(excel_file)
            sheet = workbook.active
            for row in sheet.iter_rows(min_row=2, values_only=True):
                empnumber,loanamount,loandate,duration,Expirydate,paymentmethod,chequeno,upi_id,bankid,Monthlypayment_type,MonthlyCutpercentage,MonthlyCutAmount,note = row
                
                    
                employees=payroll_employee.objects.filter(emp_number=empnumber)
                for employee in employees:
                    existing_loan = EmployeeLoan.objects.filter(Employee=employee).first()
                    
                    if existing_loan:
                        # Display an error message
                        messages.error(request, f"Loan for employee {empnumber} on {loandate} already exists.")
                    else:
                        # Create a new employee loan
                        emp = EmployeeLoan.objects.create(
                            Employee=employee,
                            Loandate=loandate,
                            LoanAmount=loanamount,
                            duration=duration,
                            Expiry_date=Expirydate,
                            payment_method=paymentmethod,
                            cheque_number=chequeno,
                            upi_id=upi_id,
                            bank_acc_number=bankid,
                            Monthly_payment_type=Monthlypayment_type,
                            MonthlyCut_percentage=MonthlyCutpercentage,
                            MonthlyCut_Amount=MonthlyCutAmount,
                            note=note,
                            balance=loanamount,
                            company=company,
                            login_details=log_details
                        )

                        Employeeloan_history.objects.create(
                            login_details=log_details,
                            employeeloan=emp,
                            company=company,
                            action='CREATED'
                        )
                        EmployeeLoanRepayment.objects.create(
                            emp=emp,
                            principal_amount=loanamount,
                            interest_amonut=0,
                            total_payment=0,
                            payment_date=loandate,
                            balance=loanamount,
                            payment_method=paymentmethod,
                            upi_id=upi_id,
                            cheque_id=chequeno,
                            bank_id=bankid,
                            particular='LOAN ISSUED',
                            company=company,
                            logindetails=log_details,
                            employee=employee
                        )
                        
                        # Display a success message
                        messages.success(request, "Employee loan successfully created.")
            
            return redirect('employee_listpage')
        
        messages.error(request, "No file uploaded or invalid request method")
        return redirect('employee_listpage')

#-------------------------employeeloan views end -------------#

#--------------Customer-----------------#
#-------------------Arya E.R----------------------#

def customer(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        
        comp_payment_terms=Company_Payment_Term.objects.filter(company=comp_details)
        price_lists=PriceList.objects.filter(company=comp_details,type='Sales',status='Active')

       
        return render(request,'zohomodules/customer/create_customer.html',{'details':dash_details,'allmodules': allmodules,'comp_payment_terms':comp_payment_terms,'log_details':log_details,'price_lists':price_lists}) 
    else:
        return redirect('/')  

def view_customer_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        data=Customer.objects.filter(company=comp_details)

        

        return render(request,'zohomodules/customer/customer_list.html',{'details':dash_details,'allmodules': allmodules,'data':data,'log_details':log_details}) 


    else:
        return redirect('/')
    

def add_customer(request):
   
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        

       
        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=log_details
            customer_data.company=comp_details
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type=op_type
            else:
                customer_data.opening_balance_type='Opening Balance not selected'
    
            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                 customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                 customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'
    



           
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=comp_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=comp_details
            rdata.customer=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = CustomerContactPersons.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=comp_details,customer=vendor)
                
        
            messages.success(request, 'Customer created successfully!')   

            return redirect('view_customer_list')
        
        else:
            messages.error(request, 'Some error occurred !')   

            return redirect('view_customer_list')


def check_customer_phonenumber_exist(request):
    if request.method == 'GET':
       mPhone = request.GET.get('m_Phone', None)

       if mPhone:
          
            exists = Customer.objects.filter(
                    customer_mobile=mPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False}) 

def check_customer_work_phone_exist(request):
    if request.method == 'GET':
       wPhone = request.GET.get('w_Phone', None)

       if wPhone:
          
            exists = Customer.objects.filter(
                    customer_phone=wPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})   

def check_customer_email_exist(request):
    if request.method == 'GET':
       vendoremail = request.GET.get('vendor_email', None)

       if vendoremail:
          
            exists = Customer.objects.filter(
                    customer_email=vendoremail
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False}) 

def customer_payment_terms_add(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
        if request.method == 'POST':
            terms = request.POST.get('name')
            day = request.POST.get('days')
            normalized_data = terms.replace(" ", "")
            pay_tm = add_space_before_first_digit(normalized_data)
            ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=dash_details)
            ptr.save()
            payterms_obj = Company_Payment_Term.objects.filter(company=comp_details).values('id', 'term_name')


            payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name']} for pay_terms in payterms_obj]
            response_data = {
            "message": "success",
            'payment_list':payment_list,
            }
            return JsonResponse(response_data)

        else:
            return JsonResponse({'error': 'Invalid request'}, status=400)   
            

def check_customer_term_exist(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   

    if request.method == 'GET':
       term_name = request.GET.get('term_name', None)
       if term_name:
            normalized_data = term_name.replace(" ", "")
            term_name_processed = add_space_before_first_digit(normalized_data)
            exists = Company_Payment_Term.objects.filter(
                    term_name=term_name_processed,
                    company=comp_details
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})    

def customer_check_pan(request):
    if request.method == 'POST':
        panNumber = request.POST.get('panNumber')
        pan_exists = Customer.objects.filter(PAN_number=panNumber).exists()

        if pan_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})  

def customer_check_gst(request):
    if request.method == 'POST':
        gstNumber = request.POST.get('gstNumber')
        gst_exists = Customer.objects.filter(GST_number=gstNumber).exists()
       
        if gst_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}) 

def sort_customer_by_name(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
  
        data=Customer.objects.filter(login_details=log_details).order_by('first_name')
        return render(request,'zohomodules/customer/customer_list.html',{'data':data,'dash_details':dash_details})
     else:
            return redirect('/')    

def sort_customer_by_amount(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        data=Customer.objects.filter(login_details=log_details).order_by('opening_balance')
        return render(request,'zohomodules/customer/customer_list.html',{'data':data,'dash_details':dash_details})
     else:
         return redirect('/')   


def view_customer_active(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        data=Customer.objects.filter(login_details=log_details,customer_status='Active').order_by('-id')
        return render(request,'zohomodules/customer/customer_list.html',{'data':data,'dash_details':dash_details})
     else:
         return redirect('/') 

    
    
def view_customer_inactive(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        data=Customer.objects.filter(login_details=log_details,customer_status='Inactive').order_by('-id')
        return render(request,'zohomodules/customer/customer_list.html',{'data':data,'dash_details':dash_details})
     else:
         return redirect('/') 


def import_customer_excel(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        if request.method == 'POST' :
       
            if 'empfile' in request.FILES:
                excel_bill = request.FILES['empfile']
                excel_b = load_workbook(excel_bill)
                eb = excel_b['Sheet1']
                for row_number1 in range(2, eb.max_row + 1):
                            
                    vendorsheet = [eb.cell(row=row_number1, column=col_num).value for col_num in range(1, eb.max_column + 1)]
                    comp_term=vendorsheet[18]
                    if comp_term:
                        normalized_data = comp_term.replace(" ", "")

                        pay_tm = add_space_before_first_digit(normalized_data)
                    else:
                        cpt =Company_Payment_Term.objects.filter(company=comp_details).first()
                        pay_tm = cpt.term_name
   
                    try:
                        com_term_obj=Company_Payment_Term.objects.get(company=comp_details,term_name=pay_tm)
                    except Company_Payment_Term.DoesNotExist:
                        com_term_obj= None
                    
                    opn_blc_str = vendorsheet[17]  # Assuming vendorsheet[15] is a string representing a decimal
                    if opn_blc_str:

                        opn_blc = float(opn_blc_str)
                    else:
                        opn_blc = 0.00    
                    

                    Vendor_object=Customer(customer_type=vendorsheet[0],title=vendorsheet[1],first_name=vendorsheet[2],last_name=vendorsheet[3],company_name=vendorsheet[4],customer_email=vendorsheet[5],customer_phone=vendorsheet[6],customer_mobile=vendorsheet[7],skype=vendorsheet[8],designation=vendorsheet[9],department=vendorsheet[10],website=vendorsheet[11],
                                         GST_treatement=vendorsheet[12],place_of_supply=vendorsheet[13],tax_preference=vendorsheet[14],currency=vendorsheet[15],opening_balance_type=vendorsheet[16],
                                         opening_balance=opn_blc,company_payment_terms=com_term_obj,billing_attention=vendorsheet[19],billing_country=vendorsheet[20],billing_address=vendorsheet[21],
                                         billing_city=vendorsheet[22],billing_state=vendorsheet[23],billing_pincode=vendorsheet[24],
                                         billing_mobile=vendorsheet[25],billing_fax=vendorsheet[26],shipping_attention=vendorsheet[27],shipping_country=vendorsheet[28],shipping_address=vendorsheet[29],shipping_city=vendorsheet[30],
                                         shipping_state=vendorsheet[31],shipping_pincode=vendorsheet[32],
                                         shipping_mobile=vendorsheet[33], shipping_fax=vendorsheet[34], remarks=vendorsheet[35],current_balance=opn_blc,customer_status="Active",company=comp_details,login_details=log_details)
                    Vendor_object.save()

    
                   
                messages.warning(request,'file imported')
                return redirect('view_customer_list')    

    
            messages.error(request,'File upload Failed!11')
            return redirect('view_customer_list')
        else:
            messages.error(request,'File upload Failed!11')
            return redirect('view_customer_list') 

def view_customer_details(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=='Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        cmp=CompanyDetails.objects.get(id=dash_details.company.id)

    else:    
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        cmp=CompanyDetails.objects.get(login_details=log_details)

        
    allmodules= ZohoModules.objects.get(company=cmp,status='New')


    vendor_obj=Customer.objects.get(id=pk)

    # Getting all vendor to disply on the left side of vendor_detailsnew page
    vendor_objs=Customer.objects.filter(company=cmp)

    vendor_comments=Customer_comments_table.objects.filter(customer=vendor_obj)
    vendor_history=CustomerHistory.objects.filter(customer=vendor_obj)


    customer_obj=Customer.objects.get(id=pk)
    ret_inv = RetainerInvoice.objects.filter(company=cmp)
    recurr_bill = Recurring_bills.objects.filter(company=cmp)

    transactions = list(
        invoiceitems.objects.filter(company=cmp,invoice__customer=customer_obj).annotate(object_type=Value("Invoice",output_field=CharField()),object_number=F('invoice__invoice_number'),object_date=F("invoice__date"),object_total=F('invoice__sub_total'),object_balance=F('invoice__balance'))
    )+list(
        SalesOrderItems.objects.filter(company=cmp,sales_order__customer=customer_obj).annotate(object_type=Value("Sales Order",output_field=CharField()),object_number=F('sales_order__sales_order_number'),object_date=F("sales_order__sales_order_date"),object_total=F('sales_order__grand_total'),object_balance=F('sales_order__balance'))
    )+list(
        Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__customer=customer_obj).annotate(object_type=Value("Recurring Invoice",output_field=CharField()),object_number=F('reccuring_invoice__rec_invoice_no'),object_date=F("reccuring_invoice__start_date"),object_total=F('reccuring_invoice__grandtotal'),object_balance=F('reccuring_invoice__balance'))
    )+list(
        Retaineritems.objects.filter(retainer__in=ret_inv,retainer__customer_name=customer_obj).annotate(object_type=Value("Retainer Invoice",output_field=CharField()),object_number=F('retainer__retainer_invoice_number'),object_date=F("retainer__retainer_invoice_date"),object_total=F('retainer__total_amount'),object_balance=F('retainer__balance'))
    )+list(
        Credit_Note_Items.objects.filter(company=cmp,credit_note__customer=customer_obj).annotate(object_type=Value("Credit Note",output_field=CharField()),object_number=F('credit_note__credit_note_number'),object_date=F("credit_note__credit_note_date"),object_total=F('credit_note__grand_total'),object_balance=F('credit_note__balance'))
    )+list(
        Delivery_challan_item.objects.filter(company=cmp,delivery_challan__customer=customer_obj).annotate(object_type=Value("Delivery Challan",output_field=CharField()),object_number=F('delivery_challan__challan_number'),object_date=F("delivery_challan__challan_date"),object_total=F('delivery_challan__grand_total'),object_balance=F('delivery_challan__balance'))
    )

    tot_balance = 0
    for i in transactions:
        tot_balance+=float(i.object_balance)
    
    print(float(vendor_obj.current_balance))
    print(float(tot_balance))
    tot_balance=float(vendor_obj.current_balance)-float(tot_balance)
    print(tot_balance)
    
    content = {
                'details': dash_details,
                'allmodules': allmodules,
                'vendor_obj':vendor_obj,
                'log_details':log_details,
                'vendor_objs':vendor_objs,
                'vendor_comments':vendor_comments,
                'vendor_history':vendor_history,
                'transactions':transactions,
                'tot_balance':tot_balance,
        }
    return render(request,'zohomodules/customer/customer_detailsnew.html',content)       

def sort_customer(request,selectId,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   

        vendor_obj = Customer.objects.get(id=pk)
        vendor_objs = Customer.objects.filter(company=comp_details)

        if selectId == 0:
            vendor_objs=Customer.objects.filter(company=comp_details)
        if selectId == 1:
            vendor_objs=Customer.objects.filter(company=comp_details).order_by('first_name')
        if selectId == 2:
            vendor_objs=Customer.objects.filter(company=comp_details).order_by('opening_balance')
           
        
        vendor_comments=Customer_comments_table.objects.filter(customer=vendor_obj)
        vendor_history=CustomerHistory.objects.filter(customer=vendor_obj)
    
        content = {
                'details': dash_details,
                'allmodules': allmodules,
                'vendor_obj':vendor_obj,
                'log_details':log_details,
                'vendor_objs':vendor_objs,
                'vendor_comments':vendor_comments,
                'vendor_history':vendor_history,
        }
    return render(request,'zohomodules/customer/customer_detailsnew.html',content) 

def customer_status_change(request,statusId,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
    

        vendor_obj = Customer.objects.get(id=pk)
        vendor_objs = Customer.objects.filter(company=comp_details)

        if statusId == 0:
            vendor_objs=Customer.objects.filter(company=comp_details)
        if statusId == 1:
            vendor_objs=Customer.objects.filter(company=comp_details,customer_status='Active').order_by('-id')
        if statusId == 2:
            vendor_objs=Customer.objects.filter(company=comp_details,customer_status='Inactive').order_by('-id')
           
        
        vendor_comments=Customer_comments_table.objects.filter(customer=vendor_obj)
        vendor_history=CustomerHistory.objects.filter(customer=vendor_obj)
    
        content = {
                'details': dash_details,
                'allmodules': allmodules,
                'vendor_obj':vendor_obj,
                'log_details':log_details,
                'vendor_objs':vendor_objs,
                'vendor_comments':vendor_comments,
                'vendor_history':vendor_history,
        }
    return render(request,'zohomodules/customer/customer_detailsnew.html',content)       

def delete_customers(request, pk):
    try:
        vendor_obj = Customer.objects.get(id=pk)

        vendor_obj.delete()
        return redirect('view_customer_list')  
    except Customer.DoesNotExist:
        return HttpResponseNotFound("Customer not found.")  

def customer_status(request,pk):
    vendor_obj = Customer.objects.get(id=pk)
    if vendor_obj.customer_status == 'Active':
        vendor_obj.customer_status ='Inactive'
    elif vendor_obj.customer_status == 'Inactive':
        vendor_obj.customer_status ='Active'
    vendor_obj.save()
    return redirect('view_customer_details',pk)         

def customer_add_comment(request,pk):
   if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        if request.method =='POST':
            comment_data=request.POST['comments']
       
            vendor_id= Customer.objects.get(id=pk) 
            vendor_obj=Customer_comments_table()
            vendor_obj.comment=comment_data
            vendor_obj.customer=vendor_id
            vendor_obj.company=comp_details
            vendor_obj.login_details= LoginDetails.objects.get(id=log_id)

            vendor_obj.save()
            return redirect('view_customer_details',pk)
   return redirect('view_customer_details',pk) 


def customer_delete_comment(request, pk):
    try:
        vendor_comment =Customer_comments_table.objects.get(id=pk)
        vendor_id=vendor_comment.customer.id
        vendor_comment.delete()
        return redirect('view_customer_details',vendor_id)  
    except Customer_comments_table.DoesNotExist:
        return HttpResponseNotFound("comments not found.") 

def add_customer_file(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   

        if request.method == 'POST':
            data=request.FILES.getlist('file')
            try:
                for doc in data:

                    vendor_obj=Customer_doc_upload_table()
                    
                    vendor_obj.document = doc
                    vendor_obj.login_details = log_details
                    vendor_obj.company = comp_details
                    vendor_obj.customer = Customer.objects.get(id=pk)
                    vendor_obj.save()
                
                messages.success(request,'File uploaded')
                return redirect('view_customer_details',pk) 
            except Customer_doc_upload_table.DoesNotExist:
                return redirect('view_customer_details',pk) 

def customer_shareemail(request,pk):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            cmp=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            cmp=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=cmp,status='New')
    
    
        vendor_obj=Customer.objects.get(id=pk)

        customer_obj=Customer.objects.get(id=pk)
        ret_inv = RetainerInvoice.objects.filter(company=cmp)
        recurr_bill = Recurring_bills.objects.filter(company=cmp)

        transactions = list(
            invoiceitems.objects.filter(company=cmp,invoice__customer=customer_obj).annotate(object_type=Value("Invoice",output_field=CharField()),object_number=F('invoice__invoice_number'),object_date=F("invoice__date"),object_total=F('invoice__sub_total'),object_balance=F('invoice__balance'))
        )+list(
            SalesOrderItems.objects.filter(company=cmp,sales_order__customer=customer_obj).annotate(object_type=Value("Sales Order",output_field=CharField()),object_number=F('sales_order__sales_order_number'),object_date=F("sales_order__sales_order_date"),object_total=F('sales_order__grand_total'),object_balance=F('sales_order__balance'))
        )+list(
            Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__customer=customer_obj).annotate(object_type=Value("Recurring Invoice",output_field=CharField()),object_number=F('reccuring_invoice__rec_invoice_no'),object_date=F("reccuring_invoice__start_date"),object_total=F('reccuring_invoice__grandtotal'),object_balance=F('reccuring_invoice__balance'))
        )+list(
            Retaineritems.objects.filter(retainer__in=ret_inv,retainer__customer_name=customer_obj).annotate(object_type=Value("Retainer Invoice",output_field=CharField()),object_number=F('retainer__retainer_invoice_number'),object_date=F("retainer__retainer_invoice_date"),object_total=F('retainer__total_amount'),object_balance=F('retainer__balance'))
        )+list(
            Credit_Note_Items.objects.filter(company=cmp,credit_note__customer=customer_obj).annotate(object_type=Value("Credit Note",output_field=CharField()),object_number=F('credit_note__credit_note_number'),object_date=F("credit_note__credit_note_date"),object_total=F('credit_note__grand_total'),object_balance=F('credit_note__balance'))
        )+list(
            Delivery_challan_item.objects.filter(company=cmp,delivery_challan__customer=customer_obj).annotate(object_type=Value("Delivery Challan",output_field=CharField()),object_number=F('delivery_challan__challan_number'),object_date=F("delivery_challan__challan_date"),object_total=F('delivery_challan__grand_total'),object_balance=F('delivery_challan__balance'))
        )

        tot_balance = 0
        for i in transactions:
            tot_balance+=float(i.object_balance)
        tot_balance=float(vendor_obj.current_balance)-float(tot_balance)

        context = {'vendor_obj':vendor_obj,'details':dash_details,'transactions':transactions,'tot_balance':tot_balance}
        if request.method == 'POST':
            try:
                emails_string = request.POST['email_ids']

                        # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                                                                                          
                template_path = 'zohomodules/customer/customermailoverview.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                subject = f"Transaction Details"
                email = f"Hi,\nPlease find the attached transaction details {vendor_obj.first_name} {vendor_obj.last_name}.\n"
                email_from = settings.EMAIL_HOST_USER

        
                msg = EmailMultiAlternatives(subject, email, email_from, emails_list)
                msg.attach(f'{vendor_obj.first_name}_{vendor_obj.last_name}_Transactions.pdf', pdf, "application/pdf")
                
                # Send the email
                msg.send()

                messages.success(request, 'Transaction has been shared via email successfully..!')
                return redirect('view_customer_details',pk)

            except Exception as e:
                print(f"Error sending email: {e}")
                messages.error(request, 'An error occurred while sending the email. Please try again later.')
                return redirect('view_customer_details',pk)  


def Customer_edit(request,pk):
   
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        customer_obj=Customer.objects.get(id=pk)

        customer_contact_obj=CustomerContactPersons.objects.filter(customer=customer_obj)  
        comp_payment_terms=Company_Payment_Term.objects.filter(company=comp_details)
        price_lists=PriceList.objects.filter(company=comp_details,type='Sales',status='Active')
    
        content = {
                'details': dash_details,
                'allmodules': allmodules,
                'customer_obj':customer_obj,
                'log_details':log_details,
                'customer_contact_obj':customer_contact_obj,
                'comp_payment_terms':comp_payment_terms,
                'price_lists': price_lists,
        }
    

        return render(request,'zohomodules/customer/edit_customer.html',content)
     else:
            return redirect('/')

def do_customer_edit(request,pk):
         
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
        if request.method=="POST":
            customer_data=Customer.objects.get(id=pk)
            customer_data.login_details=log_details
            customer_data.company=comp_details
            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            
            cob=float(request.POST['opening_bal'])
            oc=float(customer_data.current_balance) 
            ob=float(customer_data.opening_balance) 


            if cob > ob:
                diffadd=cob-ob
                oc=oc + diffadd
                customer_data.current_balance=oc
                customer_data.opening_balance=cob
            elif cob < ob:
                diffadd=ob-cob
                oc=oc-diffadd
                customer_data.current_balance=oc
                customer_data.opening_balance=cob

            else:
                customer_data.current_balance=request.POST['opening_bal']   
       
            

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type=op_type
            else:
                customer_data.opening_balance_type='Opening Balance not selected'
            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            plst=request.POST.get('plst')
            if plst!=0:

                 customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'


            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                 customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'
            
           
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()


              # ................ Adding to History table...........................
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=comp_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Edited'
            vendor_history_obj.save()
    # .......................................................adding to remaks table.....................
            vdata=Customer.objects.get(id=customer_data.id)
            try:

                rdata=Customer_remarks_table.objects.get(customer=vdata)
                rdata.remarks=request.POST['remark']
                rdata.company=comp_details
                rdata.customer=vdata
                rdata.save()
            except Customer_remarks_table.DoesNotExist:
                remarks_obj= Customer_remarks_table()   
                remarks_obj.remarks=request.POST['remark']
                remarks_obj.company=comp_details
                remarks_obj.customer=vdata
                remarks_obj.save()


    #  ...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            person = request.POST.getlist('contact_person_id[]')
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department)==len(person):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department,person)
                    mapped2=list(mapped2)
                    for ele in mapped2:
                       
                        existing_instance = CustomerContactPersons.objects.filter(id=ele[9], company=comp_details, customer=vendor).first()
                        if existing_instance:
                            # Update the existing instance
                            existing_instance.title = ele[0]
                            existing_instance.first_name = ele[1]
                            existing_instance.last_name = ele[2]
                            existing_instance.email = ele[3]
                            existing_instance.work_phone  = ele[4]
                            existing_instance.mobile = ele[5]
                            existing_instance.skype = ele[6]
                            existing_instance.designation = ele[7]
                            existing_instance.department = ele[8]

                            # Update other fields

                            existing_instance.save()
                        else:
                            # Create a new instance
                            new_instance = CustomerContactPersons.objects.create(
                                title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=comp_details,customer=vendor
                            )
            return redirect('view_customer_details',pk)  

#------------------------------------End----------------------------------------------#

#### Kesia  ####
def loan_listing(request):
  if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            
            
            loan_details = loan_account.objects.filter(company=company)

            # Calculate balance for each loan account
            for loan in loan_details:
                total_emis_paid = LoanRepayemnt.objects.filter(loan=loan, type='EMI paid').aggregate(total=Sum('principal_amount'))['total'] or 0
                total_additional_loan = LoanRepayemnt.objects.filter(loan=loan, type='Additional Loan').aggregate(total=Sum('principal_amount'))['total'] or 0
                loan.balance = loan.loan_amount - total_emis_paid + total_additional_loan
            
            context = {
                'details': dash_details,
                'allmodules': allmodules,
                'loan_details': loan_details,
                'log_details':log_details
                
            }
  return render(request,'zohomodules/loan_account/loan_listing.html',context)

def get_account_number(request, account_id):
    try:
        bank_account = BankAccount.objects.get(id=account_id,)
        account_number = bank_account.account_number
        return JsonResponse({'account_number': account_number})
    except BankAccount.DoesNotExist:
        return JsonResponse({'error': 'Bank account not found'}, status=404)
    
def full_account_number(request, bank_id):
    try:
        print('bank')
        # bank_id = request.GET.get('bank_id')
        # print(bank_id)
        # acc = Banking.objects.get(bnk_name=bank_id)
        acc = Banking.objects.get(pk=bank_id)
        data = {'bank':acc.bnk_acno}
        print(data)
        return JsonResponse(data)
    except Banking.DoesNotExist:
        return JsonResponse({'error': 'Banking record not found'}, status=404)

def add_loan(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                # Fetch company details
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                # Fetch staff details
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            banks = Banking.objects.values('id','bnk_name','bnk_acno','bnk_ifsc','status').filter(company=company)
            today_date=date.today()
            bank_objects = Banking.objects.filter(company=company)
            loaned_bank_account_ids = loan_account.objects.values_list('bank_holder_id', flat=True)
            context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'bank_holder': BankAccount.objects.filter(company=company),
                    'loan_details': loan_account.objects.filter(company=company),
                    'banks': banks,
                    'today_date':today_date,
                    'log_details':log_details,
                    'bankobjects':bank_objects,

                }
            

            if request.method == 'POST':
                # account_name = request.POST.get('customer_name')
                # customer_name = BankAccount.objects.get(id=account_name)
                account_name = request.POST.get('account_name')
                account_number = request.POST.get('account_number')
                loan_amount = request.POST.get('loan_amount')
                balance=request.POST.get('loan_amount')
                lender_bank = request.POST.get('lender_bank')
                loan_date = request.POST.get('loan_date')
                payment_method = request.POST.get('payment_method')
                if payment_method is not None and payment_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=payment_method)
                    payment_method = acc.bnk_name
                # else:
                #     print("payment_method is not a number")
                upi_id=request.POST.get('upi_id')
                cheque=request.POST.get('cheque_number')
                payment_accountnumber=request.POST.get('laccount_number')
                processing_method = request.POST.get('processing_method')
                if processing_method is not None and processing_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=processing_method)
                    processing_method = acc.bnk_name
                processing_upi=request.POST.get('pupi_id')
                processing_cheque=request.POST.get('pcheque_number')
                processing_acc=request.POST.get('paccount_number')
                interest = request.POST.get('interest')
                processing_fee = request.POST.get('processing_fee')
                description = request.POST.get('description')
                term=request.POST.get('terms')
                
                interest = float(interest) if interest else 0
                processing_fee = float(processing_fee) if processing_fee else 0
                loaned_bank_account_ids = loan_account.objects.values_list('bank_holder_id', flat=True)
                loan = loan_account(
                    company=company,
                    logindetails=log_details,
                    bank_holder_id=account_name,
                   
                    account_number=account_number,
                    loan_amount=loan_amount,
                    balance=balance,
                    lender_bank=lender_bank,
                    loan_date=loan_date,
                    payment_method=payment_method,
                    upi_id=upi_id,
                    cheque=cheque,
                    payment_accountnumber=payment_accountnumber,
                    processing_method=processing_method,
                    processing_upi=processing_upi,
                    processing_cheque=processing_cheque,
                    processing_acc=processing_acc,
                    interest=interest,
                    processing_fee=processing_fee,
                    description=description,

                    term=term
                )
                loan.save()
                
                history=LoanAccountHistory.objects.create(
                    login_details=log_details,
                    company=company,
                    loan=loan,
                    date=now().date(),
                    action='Created'
                )
                history.save()
                
                context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'bank_holder': BankAccount.objects.filter(company=company).exclude(id__in=loaned_bank_account_ids),
                    'loan_details': loan_account.objects.filter(company=company),
                    'banks':banks,
                    'today_date':today_date,
                    'selected_account_name': account_name,
                    'loan': loan,
                    'log_details':log_details
                }

                
                
                return redirect('loan_listing')
            else:
               
                return render(request, 'zohomodules/loan_account/add_loan.html', context)
        else:
            
            return HttpResponse("Unauthorized access")
    else:
        return redirect('/')
    

def save_account_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
                
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        if request.method == 'POST':
            bank_objects = Banking.objects.filter(company=comp)

        
            # Extracting form data from POST request
            name = request.POST.get('name')
            alias = request.POST.get('alias')
            phone = request.POST.get('phone_number')
            email = request.POST.get('email')
            account = request.POST.get('account')
            bank_id = request.POST.get('bank_name')
            
            bank_instance=Banking.objects.get(id=bank_id,company=comp)
            
            baan=bank_instance.bnk_name
            print(baan)
            
            b_accountno = request.POST['account_number']
            # if BankAccount.objects.filter(account_number=accnumber,company=comp):
            #     messages.info(request,'Account number already exists ')
            #     return redirect('createholder')
            
            b_accountno = request.POST.get('account_number')
            b_ifsccode = request.POST.get('ifsc_code')
            b_swift = request.POST.get('swift_code')
            b_branch = request.POST.get('branch_name', '')
            c_range = request.POST.get('set_cheque_book_range')
            c_print = request.POST.get('enable_cheque_printing')
            c_print_config = request.POST.get('set_cheque_printing_configuration')
            pan = request.POST.get('pan_it_number')
            reg_type = request.POST.get('registration_type')
            gstin_un = request.POST.get('gstin_un')
            alter_gst = request.POST.get('gstno')
            m_name = request.POST.get('mailing_name')
            m_address = request.POST.get('address')
            m_country = request.POST.get('country')
            m_state = request.POST.get('state')
            m_pin = request.POST.get('pin')
            date = request.POST.get('date')
            t_amount = request.POST.get('retype')
            amount = request.POST.get('amount')

        # Print retrieved data for debugging
            print(f"Name: {name}")
            

            account_create = BankAccount(
                    customer_name=name,
                    alias=alias,
                    phone_number=phone,
                    email=email,
                    account_type=account,
                    bankname=baan,
                    account_number=b_accountno,
                    ifsc_code=b_ifsccode,
                    swift_code=b_swift,
                    branch_name=b_branch,
                    cheque_book_range=c_range,
                    enable_cheque_printing=c_print,
                    cheque_printing_configuration=c_print_config,
                    mailing_name=m_name,
                    address=m_address,
                    country=m_country,
                    state=m_state,
                    pin=m_pin,
                    pan_number=pan,
                    registration_type=reg_type,
                    gst_num=gstin_un,
                    alter_gst_details=alter_gst,
                    date=date,
                    amount_type=t_amount,
                    amount=amount,
                    bank=bank_instance,
                    company=comp,
                    login_details=log_details
                )
            account_create.save()
            holder_history=BankAccountHistory.objects.create(
                            logindetails=log_details,
                            company=comp,
                            bank_holder=account_create,
                            date=now().date(),
                            action='Created'
                        )
            holder_history.save()
            return JsonResponse({'status': True})
            
            
        
        return redirect('add_loan')
    
    
def holder_dropdown(request):
    print("start fuction")
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules =ZohoModules.objects.get(company=dash_details.company, status='New')

            loaned_bank_account_ids = loan_account.objects.values_list('bank_holder_id', flat=True)    
            print("inside holder")
            options = {}
            option_objects = BankAccount.objects.filter(company=company).exclude(id__in=loaned_bank_account_ids)
            for option in option_objects:
                options[option.id] = option.customer_name
                print(option.customer_name)
            return JsonResponse(options)

   
def overview(request,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                
            else: 
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            
            today=date.today()
            today_date = today.strftime("%Y-%m-%d")

            # loan_info = get_object_or_404(loan_account, id=account_id, company=company)
            # account = loan_info.bank_holder
            account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.filter(bank_holder=account,company=company).first()
            repayment_details = LoanRepayemnt.objects.filter(loan=loan_info,company=company)
            repayment_history = LoanRepaymentHistory.objects.filter(repayment__in=repayment_details,company=company)
            # repayment_history = LoanRepaymentHistory.objects.filter(repayment='3')
            
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)

            current_balance = loan_info.loan_amount  
            balances = [] 
            loan_side = loan_account.objects.filter(company=company) 
            for loan in loan_side:
                total_emis_paid = LoanRepayemnt.objects.filter(company=company,loan=loan, type='EMI paid').aggregate(total=Sum('principal_amount'))['total'] or 0
                total_additional_loan = LoanRepayemnt.objects.filter(company=company,loan=loan, type='Additional Loan').aggregate(total=Sum('principal_amount'))['total'] or 0
                loan.balance = loan.loan_amount - total_emis_paid + total_additional_loan 

            for repayment in repayment_details:
                if repayment.type == 'EMI paid':
                    current_balance -= repayment.principal_amount
                elif repayment.type == 'Additional Loan':
                    current_balance += repayment.principal_amount     
                balances.append(current_balance)

            overall_balance = current_balance
            repayment_details_with_balances = zip(repayment_details, balances)
            total_amount= loan_info.loan_amount + loan_info.interest


            history=LoanAccountHistory.objects.filter(loan=loan_info,company=company)
            comment=Comments.objects.filter(loan=loan_info,company=company)

            context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'log_id':log_details,
                    'account':account,
                    'loan_info':loan_info,
                    'repayment_details': repayment_details,
                    'repayment_details_with_balances': repayment_details_with_balances,
                    'overall_balance': overall_balance, 
                    'total_amount':total_amount,
                    'history':history,
                    'loan_side':loan_side,
                    'today_date':today_date,
                    'repayment_history':repayment_history,
                    'comment':comment,
                    'banks':banks,
                    
                    'account_id':account_id,
                    'loanpage':'0'
                    
                    
                     }          
    
            return render(request,'zohomodules/loan_account/overview.html',context)
        


def update_status(request, account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                
            else: 
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
        try:
            bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan = loan_account.objects.get(bank_holder=bank_account,company=company)     
            if loan.status == 'Active':
               loan.status = 'Inactive'
            else:
              loan.status = 'Active'   
            loan.save()       
            return redirect('overview',account_id=account_id)
        except loan_account.DoesNotExist:
         return render(request, 'zohomodules/loan_account/overview.html', {'message': 'Loan account does not exist'})



def repayment_due_form(request, account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
                
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)
            account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.filter(bank_holder=account,company=company).first()
            repayment_details = LoanRepayemnt.objects.filter(loan=loan_info,company=company).last()
            current_balance = repayment_details.balance
            
            
            if request.method == 'POST':
                principal_amount = request.POST.get('principal_amount')
                interest_amount = request.POST.get('interest_amount')
                payment_method=request.POST.get('payment_method')
                if payment_method is not None and payment_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=payment_method)
                    payment_method = acc.bnk_name
                upi_id=request.POST.get('upi_id')
                cheque=request.POST.get('cheque_number')
                account_number=request.POST.get('acc_no')
                date = request.POST.get('date')
                principal_amount = float(principal_amount) if principal_amount else 0
                interest_amount = float(interest_amount) if interest_amount else 0
                
                total_amount = principal_amount + interest_amount
                balance =current_balance - principal_amount
                # total_amount = float(principal_amount) + float(interest_amount)
                type = 'EMI paid'
                print(payment_method)
                
                repayment = LoanRepayemnt(
                    login_details=login_details,
                    company=company,
                    principal_amount=principal_amount,
                    interest_amount=interest_amount,
                    payment_method=payment_method,
                    upi_id=upi_id,
                    cheque=cheque,
                    account_number=account_number,
                    payment_date=date,
                    total_amount=total_amount,
                    balance =balance,
                    type = type
                )
                
                
                bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
                loan = loan_account.objects.get(bank_holder=bank_account,company=company)
                
                repayment.loan = loan
                repayment.save()
                repayment_history=LoanRepaymentHistory.objects.create(
                    login_details=login_details,
                    company=company,
                    repayment=repayment,
                    date=now().date(),
                    action='Created'
                )
                repayment_history.save()
                # url = reverse('overview', kwargs={'account_id': account_id}) + '?Transaction=True'
                # return redirect(url)
                return redirect('transactoverview', account_id=account_id)
            else:
                today_date = dt.today()
                
                
                return render(request, 'zohomodules/loan_account/overview.html', { 'details': dash_details, 'allmodules': allmodules,  'today_date': today_date,'account_id': account_id,'banks':banks,'repayment_history':repayment_history,'login_details':login_details})
    return redirect('/')

def new_loan(request,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
                
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)

            today_date = dt.today()
            if request.method == 'POST':
                balance = float(request.POST.get('balance', 0))
                principal_amount = float(request.POST.get('principal_amount', 0)) 
                interest_amount = request.POST.get('interest_amount')
                payment_method=request.POST.get('payment_method')
                if payment_method is not None and payment_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=payment_method)
                    payment_method = acc.bnk_name
                upi_id=request.POST.get('upi_id')
                cheque=request.POST.get('cheque_number')
                account_number=request.POST.get('acc_num')
                date = request.POST.get('date')
                principal_amount = float(principal_amount) if principal_amount else 0
                interest_amount = float(interest_amount) if interest_amount else 0
                
                # total_amount = principal_amount + interest_amount
                total_amount = request.POST.get('total_amount')
                balance_amount = balance + principal_amount
                  
                type = 'Additional Loan'
                
                repayment = LoanRepayemnt(
                    login_details=login_details,
                    company=company,
                    principal_amount=principal_amount,
                    interest_amount=interest_amount,
                    payment_method=payment_method,
                    upi_id=upi_id,
                    cheque=cheque,
                    account_number=account_number,
                    payment_date=date,
                    total_amount=total_amount,
                    balance=balance_amount,
                    type = type
                )
                bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
                loan = loan_account.objects.get(bank_holder=bank_account,company=company)
               
                repayment.loan = loan
                repayment.save()

                repayment_history=LoanRepaymentHistory.objects.create(
                    login_details=login_details,
                    company=company,
                    repayment=repayment,
                    date=now().date(),
                    action='Created'
                )
                repayment_history.save()
                
                return redirect('transactoverview', account_id=account_id)    

            context={
                'allmodules':allmodules,
                'details': dash_details,
                'today_date': today_date,
                'account_id': account_id,
                'banks':banks,
                'repayment_history':repayment_history,
                'login_details': login_details
                
            }
            return render(request, 'zohomodules/loan_account/overview.html',context)
    return redirect('/')

def edit_loanaccount(request, account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')

            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)
            bank_holder=BankAccount.objects.filter(company=company)

            bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan = loan_account.objects.get(bank_holder=bank_account,company=company)


            return render(request, 'zohomodules/loan_account/edit_loan.html', {'account': loan, 'details':dash_details,'bank_holder':bank_holder, 'user_type': user_type, 'allmodules': allmodules,'banks':banks,'login_details':login_details})

    

def edit_loantable(request, account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')

            bank_account = BankAccount.objects.get(id=account_id,company=company)
            loan = loan_account.objects.get(bank_holder=bank_account,company=company)
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)

            if request.method == 'POST':
                
                loan.bank_holder.customer_name = request.POST.get('account_name')
                loan.loan_amount = request.POST.get('loan_amount')
                loan.lender_bank = request.POST.get('lender_bank')
                loan.loan_date = request.POST.get('loan_date')
                loan.payment_method = request.POST.get('payment_method')
                if loan.payment_method is not None and loan.payment_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=loan.payment_method)
                    loan.payment_method = acc.bnk_name
                loan.upi_id = request.POST.get('upi_id')
                loan.cheque = request.POST.get('cheque_number')
                loan.payment_accountnumber = request.POST.get('account_number')
                loan.term = request.POST.get('terms')
                loan.processing_method = request.POST.get('processing_method')
                if loan.processing_method is not None and loan.processing_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=loan.processing_method)
                    loan.processing_method = acc.bnk_name
                loan.processing_upi = request.POST.get('p_upi_id')
                loan.processing_cheque = request.POST.get('p_cheque_number')
                loan.processing_acc = request.POST.get('p_account_number')
                # loan.interest = request.POST.get('interest')
                # loan.processing_fee = request.POST.get('processing_fee')
                loan.description = request.POST.get('description')
                interest = request.POST.get('interest')
                processing_fee = request.POST.get('processing_fee')
                interest = float(interest) if interest else 0
                processing_fee = float(processing_fee) if processing_fee else 0

                loan.interest = interest
                loan.processing_fee = processing_fee
                loan.save()

                history=LoanAccountHistory.objects.create(
                    login_details=login_details,
                    company=company,
                    loan=loan,
                    date=now().date(),
                    action='Edited'
                )
                history.save()
                
               
                return redirect('overview', account_id=account_id)  

        return render(request, 'zohomodules/loan_account/edit_loan.html', {'loan': loan, 'details': dash_details, 'allmodules': allmodules,'history':history,'banks':banks,'account_id':account_id})



def calculate_overall_balance(request,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.filter(bank_holder=account,company=company).first()
            repayment_details = LoanRepayemnt.objects.filter(loan=loan_info,company=company)
            current_balance = loan_info.loan_amount
            balances = [] 
            loan_side = loan_account.objects.all() 
            for loan in loan_side:
              total_emis_paid = LoanRepayemnt.objects.filter(company=company,loan=loan, type='EMI paid').aggregate(total=Sum('total_amount'))['total'] or 0
              total_additional_loan = LoanRepayemnt.objects.filter(company=company,loan=loan, type='Additional Loan').aggregate(total=Sum('total_amount'))['total'] or 0
              loan.balance = loan.loan_amount - total_emis_paid + total_additional_loan 

            for repayment in repayment_details:
                if repayment.type == 'EMI paid':
                    current_balance -= repayment.total_amount
                elif repayment.type == 'Additional Loan':
                    current_balance += repayment.total_amount     
                balances.append(current_balance)

            overall_balance = current_balance
            return overall_balance

def edit_repayment(request, repayment_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            repayment = get_object_or_404(LoanRepayemnt, id=repayment_id,company=company)
            account_id = repayment.loan.bank_holder_id 
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)
            
           
            if request.method == 'POST':
                principal_amount = request.POST.get('principal_amount')
                interest_amount = request.POST.get('interest_amount')
                payment_method = request.POST.get('payment_method')
                if payment_method is not None and payment_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=payment_method)
                    payment_method = acc.bnk_name
                upi_id = request.POST.get('upi_id')
                cheque = request.POST.get('cheque_number')
                account_number=request.POST.get('acc_no')
                payment_date = request.POST.get('date')
                principal_amount = float(principal_amount) if principal_amount else 0
                interest_amount = float(interest_amount) if interest_amount else 0
                
                # total_amount = principal_amount + interest_amount
                total_amount = request.POST.get('total_amount')
                type = 'EMI paid' 
                print(repayment.payment_method)
                repayment.principal_amount = principal_amount
                repayment.interest_amount = interest_amount
                repayment.payment_method = payment_method
                repayment.upi_id = upi_id
                repayment.cheque = cheque
                repayment.account_number=account_number
                repayment.payment_date = payment_date
                repayment.total_amount = total_amount
                repayment.type = type
        
                repayment.save()
                
                return redirect('transactoverview' ,account_id=account_id)
            else:
                repayment_history=LoanRepaymentHistory.objects.create(
                    login_details=login_details,
                    company=company,
                    repayment=repayment,
                    date=now().date(),
                    action='Edited'
                )
                repayment_history.save()
                
                
                return render(request, 'zohomodules/loan_account/edit_repayment.html', {'repayment': repayment,'details': dash_details,  'allmodules': allmodules, 'repayment_history':repayment_history,'banks':banks,'login_details':login_details})


def edit_additional_loan(request, repayment_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            repayment = get_object_or_404(LoanRepayemnt, id=repayment_id,company=company)
            account_id = repayment.loan.bank_holder_id 
            current_balance=calculate_overall_balance(request,account_id)
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)
    
            if request.method == 'POST':
                principal_amount = request.POST.get('principal_amount')
                interest_amount = request.POST.get('interest_amount')
                payment_method = request.POST.get('payment_method')
                if payment_method is not None and payment_method.isdigit():
                    print("payment_method is a number")
                    acc = Banking.objects.get(pk=payment_method)
                    payment_method = acc.bnk_name
                upi_id = request.POST.get('upi_id')
                cheque = request.POST.get('cheque_number')
                account_number=request.POST.get('acc_num')
                payment_date = request.POST.get('date')
                principal_amount = float(principal_amount) if principal_amount else 0
                interest_amount = float(interest_amount) if interest_amount else 0
                
                total_amount = principal_amount + interest_amount
                # total_amount = request.POST.get('total_amount')
                type = 'Additional Loan'
        
                repayment.principal_amount = principal_amount
                repayment.interest_amount = interest_amount
                repayment.payment_method = payment_method
                repayment.upi_id = upi_id
                repayment.cheque = cheque
                repayment.account_number=account_number
                repayment.payment_date = payment_date
                repayment.total_amount = total_amount
                repayment.type = type
        
                repayment.save()
                
                return redirect('transactoverview',account_id=account_id)
            else:
                hist=LoanRepaymentHistory.objects.create(
                    login_details=login_details,
                    company=company,
                    repayment=repayment,
                    date=now().date(),
                    action='Edited'
                )
                hist.save()
                return render(request, 'zohomodules/loan_account/edit_additional_loan.html', {'repayment': repayment,'details': dash_details,  'allmodules': allmodules,'overall_balance':current_balance,'hist':hist,'banks':banks,'login_details':login_details})            
            
from django.template.loader import render_to_string

def share_email(request, account_id):
    try:
        if request.method == 'POST':
            emails_string = request.POST['email']
            emails_list = [email.strip() for email in emails_string.split(',')]
            if 'login_id' in request.session:
                log_id = request.session['login_id']
                if 'login_id' not in request.session:
                    return redirect('/')
        
            login_details = LoginDetails.objects.get(id=log_id)
            user_type = login_details.user_type

            if user_type in ['Company', 'Staff']:
                if user_type == 'Company':
                    dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                    company=dash_details
                    allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                else:
                    dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                    company=dash_details.company
                    allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')


                emails_string = request.POST['email']
                emails_list = [email.strip() for email in emails_string.split(',')]
                bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
                loan_info = loan_account.objects.get(bank_holder=bank_account,company=company)

                repayment_details = LoanRepayemnt.objects.filter(loan=loan_info,company=company)
                current_balance = loan_info.loan_amount  
                balances = [] 
                for repayment in repayment_details:
                  if repayment.type == 'EMI paid':
                      current_balance -= repayment.total_amount
                  elif repayment.type == 'Additional Loan':
                      current_balance += repayment.total_amount     
                      balances.append(current_balance)
                overall_balance = current_balance
                total_amount= loan_info.loan_amount + loan_info.interest

                context = {
                'loan_info': loan_info,
                'repayment_details': repayment_details,
                'repayment_details_with_balances': zip(repayment_details, balances),
                'overall_balance': overall_balance, 
                'total_amount': total_amount,
                'details': dash_details,  
                'allmodules': allmodules,
                'login_details':login_details
               }
                template_path = 'zohomodules/loan_account/mailoverview.html'
                template = get_template(template_path)
                html  = template.render(context)
                # html_content = render_to_string('zohomodules/loan_account/mailoverview.html', context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()

                filename = f'{loan_info.bank_holder.customer_name}-statement - {loan_info.id}.pdf'
                subject = f"{loan_info.bank_holder.customer_name} - {loan_info.id}- statement"
                email=EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached statement - File-{loan_info.bank_holder.customer_name}  .\n--\nRegards,\n",from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf") 
                email.send(fail_silently=False)

                messages.success(request, 'Loan Statement has been shared successfully..!')
                return redirect('statementoverview', account_id)
    except Exception as e:
        print(e)
        messages.error(request, f'{e}')
        return redirect('statementoverview', account_id) 
    

def adding_comment(request, account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')

            bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.get(bank_holder=bank_account,company=company)
            if request.method == 'POST':

                comment = request.POST.get('comments')

                comm=Comments.objects.create(
                    login_details=login_details,
                    loan=loan_info,
                    company=company,
                    comment=comment
                )
                comm.save()
                context={'details': dash_details,  'allmodules': allmodules}
                return redirect('overview',account_id=account_id)

        return render(request, 'zohomodules/loan_account/overview.html', context) 
    
def delete_comment(request, comment_id,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')   
              
            comment = get_object_or_404(Comments, id=comment_id,company=company)
            comment.delete()

            context={'details': dash_details,  'allmodules': allmodules,'account_id':account_id}

            return redirect('overview',account_id=account_id)
        return render(request, 'zohomodules/loan_account/overview.html',context) 
    

def delete_repaymenttable(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')

            repayment = get_object_or_404(LoanRepayemnt, id=id,company=company)
            repayment.delete()
            account_id = repayment.loan.bank_holder_id
            context={'details': dash_details,  'allmodules': allmodules}

            return redirect('transactoverview',account_id=account_id)
        return render(request, 'zohomodules/loan_account/overview.html',context)
    
def delete_loan(request,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        login_details = LoginDetails.objects.get(id=log_id)
        user_type = login_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=login_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            else:
                dash_details = StaffDetails.objects.get(login_details=login_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')

            bank_account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.get(bank_holder=bank_account,company=company)
            transactions = LoanRepayemnt.objects.filter(loan=loan_info,company=company)
           
            context={'details': dash_details,  'allmodules': allmodules,'loanaccount': loan_info}
            if transactions.exists():
                 messages.error(request, 'This account can be deleted as it has done some transactions !!')
                 return redirect('transactoverview', account_id=account_id)
            else:
                loan_info.delete()
                return redirect('loan_listing')
        return render(request, 'zohomodules/loan_account/overview.html',context)
#End

def employeeloan_trans(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type =='Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
        employee_loan=EmployeeLoan.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        p=EmployeeLoan.objects.get(id=id)
        pay= payroll_employee.objects.filter(company=dash_details)
        comment_data=employeeloan_comments.objects.filter(employee=id)
        history=Employeeloan_history.objects.filter(employeeloan=id)
        his=Employeeloan_history.objects.filter(employeeloan=id,company=dash_details).last()
        name = his.login_details.first_name + ' ' + his.login_details.last_name 
        action = his.action
        his_date=his.Date
        repay=EmployeeLoanRepayment.objects.filter(emp=id)
        last_loan = EmployeeLoanRepayment.objects.filter(emp=id).last().balance
        loan_trans = EmployeeLoanRepayment.objects.filter(emp=id)
       
    if log_details.user_type =='Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        employee_loan=EmployeeLoan.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        p=EmployeeLoan.objects.get(id=id)
        pay= payroll_employee.objects.filter(company=dash_details.company)
        comment_data=employeeloan_comments.objects.filter(employee=id,company=dash_details.company)
        history=Employeeloan_history.objects.filter(employeeloan=id,company=dash_details.company)
        his=Employeeloan_history.objects.filter(employeeloan=id,company=dash_details.company).last()
        name = his.login_details.first_name + ' ' + his.login_details.last_name 
        action = his.action
        his_date=his.Date
        repay=EmployeeLoanRepayment.objects.filter(emp=id)
        last_loan = EmployeeLoanRepayment.objects.filter(emp=id).last().balance
        loan_trans = EmployeeLoanRepayment.objects.filter(emp=id)
       
    content = {
                'details': dash_details,
                'employee_loan':employee_loan,
                'p':p,
                'allmodules': allmodules,
                'comment':comment_data,
                'history':history,
                'log_id':log_details,
                'pay':pay,
                'his':his,
                'name':name,
                'action':action,
                'his_date':his_date,
                'last_loan':last_loan,
                'repay':repay,
                'loan_trans':loan_trans,
                'state':'1'
                
        }
  
    return render(request,'zohomodules/employe_loan/employeeloan_overview.html',content)
    
def transactoverview(request,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                
            else: 
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            
            today=date.today()
            today_date = today.strftime("%Y-%m-%d")

            # loan_info = get_object_or_404(loan_account, id=account_id, company=company)
            # account = loan_info.bank_holder
            account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.filter(bank_holder=account,company=company).first()
            repayment_details = LoanRepayemnt.objects.filter(loan=loan_info,company=company)
            repayment_history = LoanRepaymentHistory.objects.filter(repayment__in=repayment_details,company=company)
            # repayment_history = LoanRepaymentHistory.objects.filter(repayment='3')
            
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)

            current_balance = loan_info.loan_amount  
            balances = [] 
            loan_side = loan_account.objects.filter(company=company) 
            for loan in loan_side:
                total_emis_paid = LoanRepayemnt.objects.filter(company=company,loan=loan, type='EMI paid').aggregate(total=Sum('principal_amount'))['total'] or 0
                total_additional_loan = LoanRepayemnt.objects.filter(company=company,loan=loan, type='Additional Loan').aggregate(total=Sum('principal_amount'))['total'] or 0
                loan.balance = loan.loan_amount - total_emis_paid + total_additional_loan 

            for repayment in repayment_details:
                if repayment.type == 'EMI paid':
                    current_balance -= repayment.principal_amount
                elif repayment.type == 'Additional Loan':
                    current_balance += repayment.principal_amount     
                balances.append(current_balance)

            overall_balance = current_balance
            repayment_details_with_balances = zip(repayment_details, balances)
            total_amount= loan_info.loan_amount + loan_info.interest


            history=LoanAccountHistory.objects.filter(loan=loan_info,company=company)
            comment=Comments.objects.filter(loan=loan_info,company=company)

            context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'log_id':log_details,
                    'account':account,
                    'loan_info':loan_info,
                    'repayment_details': repayment_details,
                    'repayment_details_with_balances': repayment_details_with_balances,
                    'overall_balance': overall_balance, 
                    'total_amount':total_amount,
                    'history':history,
                    'loan_side':loan_side,
                    'today_date':today_date,
                    'repayment_history':repayment_history,
                    'comment':comment,
                    'banks':banks,
                    
                    'account_id':account_id,
                    'loanpage':'1'
                    
                    
                     }          
    
            return render(request,'zohomodules/loan_account/overview.html',context)
            
def statementoverview(request,account_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        user_type = log_details.user_type

        if user_type in ['Company', 'Staff']:
            if user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                company=dash_details
                allmodules = ZohoModules.objects.get(company=dash_details, status='New')
                
            else: 
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                company=dash_details.company
                allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            
            today=date.today()
            today_date = today.strftime("%Y-%m-%d")

            # loan_info = get_object_or_404(loan_account, id=account_id, company=company)
            # account = loan_info.bank_holder
            account = get_object_or_404(BankAccount, id=account_id,company=company)
            loan_info = loan_account.objects.filter(bank_holder=account,company=company).first()
            repayment_details = LoanRepayemnt.objects.filter(loan=loan_info,company=company)
            repayment_history = LoanRepaymentHistory.objects.filter(repayment__in=repayment_details,company=company)
            # repayment_history = LoanRepaymentHistory.objects.filter(repayment='3')
            
            banks = Banking.objects.values('id','bnk_name','bnk_acno','status').filter(company=company)

            current_balance = loan_info.loan_amount  
            balances = [] 
            loan_side = loan_account.objects.filter(company=company) 
            for loan in loan_side:
                total_emis_paid = LoanRepayemnt.objects.filter(company=company,loan=loan, type='EMI paid').aggregate(total=Sum('principal_amount'))['total'] or 0
                total_additional_loan = LoanRepayemnt.objects.filter(company=company,loan=loan, type='Additional Loan').aggregate(total=Sum('principal_amount'))['total'] or 0
                loan.balance = loan.loan_amount - total_emis_paid + total_additional_loan 

            for repayment in repayment_details:
                if repayment.type == 'EMI paid':
                    current_balance -= repayment.principal_amount
                elif repayment.type == 'Additional Loan':
                    current_balance += repayment.principal_amount     
                balances.append(current_balance)

            overall_balance = current_balance
            repayment_details_with_balances = zip(repayment_details, balances)
            total_amount= loan_info.loan_amount + loan_info.interest


            history=LoanAccountHistory.objects.filter(loan=loan_info,company=company)
            comment=Comments.objects.filter(loan=loan_info,company=company)

            context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'log_id':log_details,
                    'account':account,
                    'loan_info':loan_info,
                    'repayment_details': repayment_details,
                    'repayment_details_with_balances': repayment_details_with_balances,
                    'overall_balance': overall_balance, 
                    'total_amount':total_amount,
                    'history':history,
                    'loan_side':loan_side,
                    'today_date':today_date,
                    'repayment_history':repayment_history,
                    'comment':comment,
                    'banks':banks,
                    
                    'account_id':account_id,
                    'loanpage':'2'
                    
                    
                     }          
    
            return render(request,'zohomodules/loan_account/overview.html',context)
            
def list_godown(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            godown_obj = Godown.objects.filter(company = dash_details)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'allmodules':allmodules,
            'dash_details':dash_details,
            'godown_obj':godown_obj
            }
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            godown_obj = Godown.objects.filter(company = dash_details.company)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            context = {
            'details': dash_details,
            'log_details':log_details,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'godown_obj':godown_obj
            }

        return render(request, 'zohomodules/godown/godown_list.html', context)
    
def add_godown(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            item_obj = Items.objects.filter(company = dash_details)
            godown_obj = Godown.objects.filter(company=dash_details)
            godown_data = serializers.serialize('json', godown_obj)
            units = Unit.objects.filter(company = dash_details)
            accounts = Chart_of_Accounts.objects.filter(company=dash_details)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'item_obj':item_obj,
            'godown_data':godown_data,
            'units':units,
            'accounts':accounts
            }
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            item_obj = Items.objects.filter(company = dash_details.company)
            units = Unit.objects.filter(company = dash_details.company)
            godown_obj = Godown.objects.filter(company=dash_details.company)
            godown_data = serializers.serialize('json', godown_obj)
            accounts = Chart_of_Accounts.objects.filter(company=dash_details.company)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'item_obj':item_obj,
            'godown_data':godown_data,
            'units':units,
            'accounts':accounts
            }

        return render(request, 'zohomodules/godown/add_godown.html', context)
    
def add_godown_func(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            if request.method == 'POST':
                date = request.POST.get('Date')
                item = request.POST.get('Item')
                gname = request.POST.get('Gname')
                gaddress = request.POST.get('Gaddress')
                stock = request.POST.get('Stock')
                distance = request.POST.get('Distance')
                item_obj = Items.objects.get(id=item)
                action = request.POST.get('save')
                godown = Godown(date=date,
                                item=item_obj,
                                stock_keeping=stock,
                                godown_name=gname,
                                godown_address=gaddress,
                                distance=distance,
                                stock_in_hand = item_obj.current_stock,
                                hsn = item_obj.hsn_code,
                                login_details=log_details,
                                company = company,
                                action = action)
                godown.save()

                godown_history = GodownHistory(company = company,
                                               login_details=log_details,
                                               godown=godown,
                                               date=date,
                                               action='Created')
                godown_history.save()


        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method == 'POST':
                date = request.POST.get('Date')
                item = request.POST.get('Item')
                gname = request.POST.get('Gname')
                gaddress = request.POST.get('Gaddress')
                stock = request.POST.get('Stock')
                distance = request.POST.get('Distance')
                item_obj = Items.objects.get(id=item)
                action = request.POST.get('save')
                godown = Godown(date=date,
                                item=item_obj,
                                stock_keeping=stock,
                                godown_name=gname,
                                godown_address=gaddress,
                                distance=distance,
                                stock_in_hand = item_obj.current_stock,
                                hsn = item_obj.hsn_code,
                                login_details=log_details,
                                company = company,
                                action = action)
                godown.save()

                godown_history = GodownHistory(company = company,
                                               login_details=log_details,
                                               godown=godown,
                                               date=date,
                                               action='Created')
                godown_history.save()

        
        # messages.success(request,'Added Successfully')
        return redirect('list_godown')
    
def overview_page(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            godown_obj = Godown.objects.filter(company = dash_details)
            p = Godown.objects.get(id = pk)
            h = GodownHistory.objects.filter(godown=p).last()
            godown_history = GodownHistory.objects.filter(godown=p)
            comment = GodownComments.objects.filter(godown=p)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'godown_obj':godown_obj,
            'p':p,
            'h':h,
            'godown_history':godown_history,
            'comment':comment
            }
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            godown_obj = Godown.objects.filter(company = dash_details.company)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            p = Godown.objects.get(id = pk)
            h = GodownHistory.objects.filter(godown=p).last()
            godown_history = GodownHistory.objects.filter(godown=p)
            comment = GodownComments.objects.filter(godown=p)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'allmodules':allmodules,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'godown_obj':godown_obj,
            'p':p,
            'h':h,
            'godown_history':godown_history,
            'comment':comment
            }

        return render(request, 'zohomodules/godown/overview_page.html', context)

def edit_godown(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            item_obj = Items.objects.filter(company = dash_details)
            units = Unit.objects.filter(company = dash_details)
            godown_ob = Godown.objects.filter(company=dash_details)
            godown_data = serializers.serialize('json', godown_ob)
            godown_obj = Godown.objects.get(id=pk)
            accounts = Chart_of_Accounts.objects.filter(company=dash_details)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'item_obj':item_obj,
            'units':units,
            'godown_data':godown_data,
            'accounts':accounts,
            'godown_obj':godown_obj
            }
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            item_obj = Items.objects.filter(company = dash_details.company)
            units = Unit.objects.filter(company = dash_details.company)
            godown_ob = Godown.objects.filter(company=dash_details.company)
            godown_data = serializers.serialize('json', godown_ob)
            godown_obj = Godown.objects.get(id=pk)
            accounts = Chart_of_Accounts.objects.filter(company=dash_details.company)
            context = {
            'details': dash_details,
            'log_details':log_details,
            'dash_details':dash_details,
            'allmodules':allmodules,
            'item_obj':item_obj,
            'godown_data':godown_data,
            'units':units,
            'accounts':accounts,
            'godown_obj':godown_obj
            }

        return render(request, 'zohomodules/godown/edit_godown.html', context)
    
def edit_godown_func(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            if request.method == 'POST':
                godown_id = request.POST.get('godown_id')
                date = request.POST.get('Date')
                item = request.POST.get('Item')
                gname = request.POST.get('Gname')
                gaddress = request.POST.get('Gaddress')
                stock = request.POST.get('Stock')
                distance = request.POST.get('Distance')
                item_obj = Items.objects.get(id=item)
                godown = Godown.objects.get(id=godown_id)
                godown.date=date
                godown.item=item_obj
                godown.stock_keeping=stock
                godown.godown_name=gname
                godown.godown_address=gaddress
                godown.distance=distance
                godown.stock_in_hand = item_obj.current_stock
                godown.hsn = item_obj.hsn_code
                godown.login_details=log_details
                godown.company = company

                godown.save()

                godown_history = GodownHistory(company = company,
                                               login_details=log_details,
                                               godown=godown,
                                               date=datetime.now().date(),
                                               action='Edited')
                godown_history.save()

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method == 'POST':
                godown_id = request.POST.get('godown_id')
                date = request.POST.get('Date')
                item = request.POST.get('Item')
                gname = request.POST.get('Gname')
                gaddress = request.POST.get('Gaddress')
                stock = request.POST.get('Stock')
                distance = request.POST.get('Distance')
                item_obj = Items.objects.get(id=item)
                godown = Godown.objects.get(id=godown_id)
                godown.date=date
                godown.item=item_obj
                godown.stock_keeping=stock
                godown.godown_name=gname
                godown.godown_address=gaddress
                godown.distance=distance
                godown.stock_in_hand = item_obj.current_stock
                godown.hsn = item_obj.hsn_code
                godown.login_details=log_details
                godown.company = company

                godown.save()

                godown_history = GodownHistory(company = company,
                                               login_details=log_details,
                                               godown=godown,
                                               date=datetime.now().date(),
                                               action='Edited')
                godown_history.save()
        
        # messages.success(request,'Edited Successfully')
        return redirect('list_godown')
    
def newitem(request):

    return render(request,'godown/try.html')


def change_status(request, pk):

    godown_obj = Godown.objects.get(id=pk)
    if godown_obj.status == 'Active':
        godown_obj.status='Inactive'
    else:
        godown_obj.status='Active'
    godown_obj.save()
    return redirect('overview_page',pk=pk)

def change_action(request, pk):

    godown_obj = Godown.objects.get(id=pk)
    godown_obj.action='Adjusted'
    godown_obj.save()
    return redirect('overview_page',pk=pk)

def AddComment(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        godown = Godown.objects.get(id=pk)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            
            if request.method == 'POST':
                comments = request.POST.get('comments')
                comment = GodownComments(
                                login_details=log_details,
                                company = company,
                                godown = godown,
                                comment = comments)
                comment.save()


        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method == 'POST':
                comments = request.POST.get('comments')
                comment = GodownComments(
                                login_details=log_details,
                                company = company,
                                godown = godown,
                                comment = comments)
                comment.save()
        
        # messages.success(request,'Added Comment Successfully')
        return redirect('overview_page',pk=pk)
    
def AddFile(request, pk):

    godown_obj = Godown.objects.get(id=pk)
    if request.method == 'POST':
        file = request.FILES.get('file')
        godown_obj.file=file
        godown_obj.save()
    # messages.success(request,'Added File Successfully')
    return redirect('overview_page',pk=pk)

def file_download(request,pk):
    godown_obj= Godown.objects.get(id=pk)
    file = godown_obj.file
    response = FileResponse(file)
    response['Content-Disposition'] = f'attachment; filename="{file.name}"'
    return response

def ShareEmail(request, pk):
    try:
        if request.method == 'POST':
            # Retrieve email addresses from POST data
            emails_string = request.POST['email']
            emails_list = [email.strip() for email in emails_string.split(',')]

            # Retrieve Godown object based on pk
            p = Godown.objects.get(id=pk)

            # Render HTML template for overview page
            context = {'p': p}
            template_path = 'zohomodules/godown/overview_page.html'
            template = get_template(template_path)
            html = template.render(context)

            # Convert HTML to PDF
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()

            # Construct email message
            filename = f'{p.godown_name}details - {p.id}.pdf'
            subject = f"{p.godown_name}{p.godown_address}  - {p.id}-details"

            # Initialize EmailMessage instance with 'subject' and 'body' as required parameters
            email = EmailMessage(subject, f"Hi,\nPlease find the attached godown details - File-{p.godown_name}{p.godown_address} .\n--\nRegards,\n", to=emails_list)

            # Set the sender
            email.from_email = settings.EMAIL_HOST_USER
            
            # Attach PDF
            email.attach(filename, pdf, "application/pdf")

            # Send email
            email.send(fail_silently=False)

            # Redirect with success message
            messages.success(request, 'overview page has been shared via email successfully..!')
            return redirect('overview_page', pk=pk)
    except Exception as e:
        # Catch and handle exceptions
        print(e)
        messages.error(request, f'{e}')
    # Redirect with error message
    return redirect('overview_page', pk=pk)
    
    
def DeleteComment(request,pk):
        
    comment = GodownComments.objects.get(id=pk)
    comment.delete()

    messages.success(request,'Deleted Comment Successfully')
    return redirect('overview_page',pk=pk)

def Add_Item(request):                                                                #new by tinto mt
    
    login_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.Date=date.today()
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            uid=Unit.objects.get(id=unit_id)
            # unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = uid
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track = request.POST.get("trackState",None)
            track_state_value = request.POST.get("trackstate", None)

# Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0

            
            minstock=request.POST.get("minimum_stock",None)
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            a.activation_tag = 'Active'
            a.type = 'Opening Stock'
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
            a.opening_stock_per_unit = request.POST.get("rate",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if Items.objects.filter(item_name=item_name, company=c).exists():
                error='yes'
                # messages.error(request,'Item with same name exsits !!!')
                return redirect('add_godown')
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                # messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('add_godown')
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                # messages.success(request,'Item Added Successfully !!!')
                return redirect('add_godown')
    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = unit_instance
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track_state_value = request.POST.get("trackState", None)

            track_state_value = request.POST.get("trackstate", None)

            # Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0
            minstock=request.POST.get("minimum_stock",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            # a.activation_tag = request.POST.get("status",None)
            a.activation_tag = 'Active'
            a.type = 'Opening Stock'
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
            a.opening_stock_per_unit = request.POST.get("rate",None)
        
        

        
            if Items.objects.filter(item_name=item_name,company=c).exists():
                error='yes'
                # messages.error(request,'Item with same name exsits !!!')
                return redirect('add_godown')
                
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                # messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('add_godown')
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                # messages.success(request,'Item Added Successfully !!!')
                return redirect('add_godown')
    return redirect('add_godown')

def godownmodal_unit(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            if request.method=='POST':
                units =request.POST.get('unit')
                unit_obj = Unit(unit_name=units,
                        company=company)
                unit_obj.save()
                id = unit_obj.id
                return JsonResponse({'status': 'success', 'message': 'Unit added successfully', 'id':id})

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method=='POST':
                units =request.POST.get('unit')
            
                unit_obj = Unit(unit_name=units,
                        company=company)
                unit_obj.save()
                id = unit_obj.id
                
                return JsonResponse({'status': 'success', 'message': 'Unit added successfully', 'id':id})

def godownunit_dropdown(request):

    options = {}
    option_objects = Unit.objects.all()
    for option in option_objects:
        options[option.id] = [option.unit_name,option.id]
    print(options)
    return JsonResponse(options)
    
def AddAccount(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            if request.method=='POST':
                account_type =request.POST.get('acctype')
                account_name =request.POST.get('accName')
                account_code =request.POST.get('accCode')
                
                description =request.POST.get('desc')
            
                accounts = Chart_of_Accounts(account_type=account_type,
                                             account_name=account_name,
                                             description=description,
                                             
                                             account_code=account_code,
                                             company=company,
                                             login_details=log_details)
                accounts.save()
                id = accounts.id
              
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method=='POST':
                account_type =request.POST.get('acctype')
                account_name =request.POST.get('accName')
                account_code =request.POST.get('accCode')
                
                description =request.POST.get('desc')
            
                accounts = Chart_of_Accounts(account_type=account_type,
                                             account_name=account_name,
                                             description=description,
                                             
                                             account_code=account_code,
                                             company=company,
                                             login_details=log_details)
                accounts.save()
                id = accounts.id
             
        return JsonResponse({'status': 'success', 'message': 'Unit added successfully', 'id':id})
    

def Add_Item_Edit(request,pk):                                                                #new by tinto mt
    
    login_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.Date=date.today()
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            uid=Unit.objects.get(id=unit_id)
            # unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = uid
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track = request.POST.get("trackState",None)
            track_state_value = request.POST.get("trackstate", None)

# Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0

            
            minstock=request.POST.get("minimum_stock",None)
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            a.activation_tag = 'Active'
            a.type = 'Opening Stock'
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
            a.opening_stock_per_unit = request.POST.get("rate",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if Items.objects.filter(item_name=item_name, company=c).exists():
                error='yes'
                # messages.error(request,'Item with same name exsits !!!')
                return redirect('edit_godown',pk=pk)
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                # messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('edit_godown',pk=pk)
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                # messages.success(request,'Item Added Successfully !!!')
                return redirect('edit_godown',pk=pk)
    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = unit_instance
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track_state_value = request.POST.get("trackState", None)

            track_state_value = request.POST.get("trackstate", None)

            # Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0
            minstock=request.POST.get("minimum_stock",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            # a.activation_tag = request.POST.get("status",None)
            a.activation_tag = 'Active'
            a.type = 'Opening Stock'
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
            a.opening_stock_per_unit = request.POST.get("rate",None)
        
        

        
            if Items.objects.filter(item_name=item_name,company=c).exists():
                error='yes'
                # messages.error(request,'Item with same name exsits !!!')
                return redirect('edit_godown',pk=pk)
                
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                # messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('edit_godown',pk=pk)
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                # messages.success(request,'Item Added Successfully !!!')
                return redirect('edit_godown',pk=pk)
    return redirect('edit_godown',pk=pk)

def godownmodal_unit_edit(request,pk):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            if request.method=='POST':
                units =request.POST.get('unit_name')
            
                unit_obj = Unit(unit_name=units,
                            company=company)
                unit_obj.save()
                

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method=='POST':
                units =request.POST.get('unit_name')
                
        
                unit_obj = Unit(unit_name=units,
                        company=company)
                unit_obj.save()
               
        return redirect('edit_godown',pk)
    
    
def Add_Account_Edit(request,pk):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
            if request.method=='POST':
                account_type =request.POST.get('acctype')
                account_name =request.POST.get('accName')
                account_code =request.POST.get('accCode')
                
                description =request.POST.get('desc')
            
                accounts = Chart_of_Accounts(account_type=account_type,
                                             account_name=account_name,
                                             description=description,
                                             
                                             account_code=account_code,
                                             company=company,
                                             login_details=log_details)
                accounts.save()
                id = accounts.id

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            if request.method=='POST':
                account_type =request.POST.get('acctype')
                account_name =request.POST.get('accName')
                account_code =request.POST.get('accCode')
                
                description =request.POST.get('desc')
            
                accounts = Chart_of_Accounts(account_type=account_type,
                                             account_name=account_name,
                                             description=description,
                                             
                                             account_code=account_code,
                                             company=company,
                                             login_details=log_details)
                accounts.save()
                id = accounts.id
             
        return JsonResponse({'status': 'success', 'message': 'Unit added successfully', 'id':id})


def delete_godown(request,pk):

    godown = Godown.objects.get(id=pk)
    godown.delete()
    messages.success(request,'Deleted Successfully')
    return redirect('list_godown')
    
    
# ------------------------------------bankholder----------------------------sruthi------------------------

def list_bankholder(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            company=dash_details
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            account_holder = BankAccount.objects.filter(company=company)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            company=dash_details.company
            allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            account_holder = BankAccount.objects.filter(company=company)
            
        

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': account_holder,
            'log_details':log_details
                
            }
        return render(request,'zohomodules/bankholder/list_bankholder.html',context)
    

def createholder(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        allmodules  = ZohoModules.objects.get(status='New',company=comp)
        bank_objects = Banking.objects.filter(company=comp)
        print(bank_objects)
        context = {
                'details': dash_details,
                'allmodules': allmodules,
                'bankobjects':bank_objects, 
                'log_details':log_details
                }
        return render(request,'zohomodules/bankholder/create_bankholder.html',context)
    else:
         return redirect('/')
    
def bankholder_checkbank(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company
        id = request.GET.get('id',None)
        print('done')
        data = {
            'is_tak': BankAccount.objects.filter(bank=id).exists()
        }
        if data['is_tak']:
            data['error_message'] = 'BankAccount Already Taken.'
        return JsonResponse(data)
    

def bankholder_listbank(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        id = request.POST.get('id')
        bank = Banking.objects.get(id = id,company=comp)
        bank_acno = bank.bnk_acno
        bank_ifsc = bank.bnk_ifsc
        bank_branch = bank.bnk_branch
        return JsonResponse({'bnk_acno': bank_acno,'bnk_ifsc': bank_ifsc,'bnk_branch':bank_branch },safe=False)

    
def bankholder_addbank(request):
    if request.method=='POST':
        print('hiii')
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                comp=dash_details
            
            else:
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                comp=dash_details.company

            
            bdate=request.POST['bdate']
            print(bdate)
            bankName=request.POST['bankName']
            print(bankName)
            accnumber=request.POST['accnumber']
            print(accnumber)
            
            bal_type=request.POST['bal_type']
            print(bal_type)
            opn_bal=request.POST['opn_bal']
            print(opn_bal)
            if_code=request.POST['if_code']
            print(if_code)
            brh_name=request.POST.get('brh_name')
            print(brh_name)
            if Banking.objects.filter(bnk_acno=accnumber).exists():
                return JsonResponse({'error': 'Account number already exists'}, status=400)
            else:
                
                banks = Banking(bnk_name=bankName,bnk_acno=accnumber,bnk_bal_type=bal_type,bnk_opnbal=opn_bal,bnk_ifsc=if_code,bnk_branch=brh_name,company=comp,login_details=log_details)
            
                print(banks)
                banks.save()
                
                history=BankingHistory(company=comp,login_details=log_details, banking=banks,hist_action='created')
                history.save()
                return JsonResponse({'success': 'Bank created successfully'})

        return JsonResponse({'error': 'Invalid request method'}, status=405)
    
def addbnk_refresh(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        comp=dash_details
            
    else:
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        comp=dash_details.company
    data = {}
    bank_objects = Banking.objects.filter(company=comp)

    for bank in bank_objects:
        banks = f"{bank.bnk_name} {bank.bnk_acno[-4:]}"
    data[bank.id] = [banks, f"{banks}"]
    print (data)

    return JsonResponse(data)

        
def bankholder_checkname(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        comp=dash_details
            
    else:
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        comp=dash_details.company

    if request.method == 'POST':
        customerName = request.POST.get('customerName')
        name_exists = BankAccount.objects.filter(customer_name=customerName,company=comp).exists()

        if name_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})
    
def bankholder_checkacno(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company
        acno = request.GET.get('acno', None)
        data = {
            'is_taken': Banking.objects.filter(bnk_acno=acno).exists()
        }
        if data['is_taken']:
            data['error_message'] = 'Account number already exists.'
        return JsonResponse(data)
    else:
        return JsonResponse({'error': 'Invalid session'}, status=400)


def create_bankholder(request):
    if request.method == 'POST':
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
                comp=dash_details
                
            else:
                dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
                comp=dash_details.company

            
            bank_objects = Banking.objects.filter(company=comp)

        
            # Extracting form data from POST request
            name = request.POST['customer_name']
            alias = request.POST['alias']
            phone = request.POST['phone_number']
            email = request.POST['email']
            account = request.POST['account_type']
            bank_id = request.POST['bank_name']
            print('bank')
            bank_instance=Banking.objects.get(id=bank_id,company=comp)
            
            baan=bank_instance.bnk_name
            print(baan)
            
            b_accountno = request.POST['accountNumber']
            # if BankAccount.objects.filter(account_number=accnumber,company=comp):
            #     messages.info(request,'Account number already exists ')
            #     return redirect('createholder')
            
            b_ifsccode = request.POST['ifscCode']
            b_swift = request.POST['swiftCode']
            b_branch = request.POST['branch_name']
            c_range = request.POST['c_range']
            c_print = request.POST['c_print']
            c_print_config = request.POST['c_print_confg']
            pan = request.POST['pan']
            reg_type = request.POST['id_registration_type']
            gstin_un = request.POST['id_gstin_un']
            alter_gst = request.POST["alt_gst"]
            m_name = request.POST['m_name']
            m_address = request.POST['m_address']
            m_country = request.POST['m_country']
            m_state = request.POST['m_state']
            m_pin = request.POST['m_pin']
            date = request.POST['date']
            t_amount = request.POST['tamt']
            amount = request.POST['amount']

            print(f"Name: {request.POST['customer_name']}")
            print(f"Alias: {request.POST['alias']}")

            account_create = BankAccount(
                    customer_name=name,
                    alias=alias,
                    phone_number=phone,
                    email=email,
                    account_type=account,
                    bankname=baan,
                    account_number=b_accountno,
                    ifsc_code=b_ifsccode,
                    swift_code=b_swift,
                    branch_name=b_branch,
                    cheque_book_range=c_range,
                    enable_cheque_printing=c_print,
                    cheque_printing_configuration=c_print_config,
                    mailing_name=m_name,
                    address=m_address,
                    country=m_country,
                    state=m_state,
                    pin=m_pin,
                    pan_number=pan,
                    registration_type=reg_type,
                    gst_num=gstin_un,
                    alter_gst_details=alter_gst,
                    date=date,
                    amount_type=t_amount,
                    amount=amount,
                    bank=bank_instance,
                    company=comp,
                    login_details=log_details
                )
            account_create.save()
            holder_history=BankAccountHistory.objects.create(
                            logindetails=log_details,
                            company=comp,
                            bank_holder=account_create,
                            date=now().date(),
                            action='Created'
                        )
            holder_history.save()

            return redirect('list_bankholder')
            
        return redirect('createholder')

            
def overview_bankholder(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            account_holder = BankAccount.objects.filter(company=comp)
            allmodules  = ZohoModules.objects.get(status='New',company=comp)
            account = BankAccount.objects.filter(id=pk)
            history = BankAccountHistory.objects.filter(bank_holder=pk)
    elif log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company
            account_holder = BankAccount.objects.filter(company=comp)
            allmodules  = ZohoModules.objects.get(status='New',company=comp)
            account = BankAccount.objects.filter(id=pk)
            history = BankAccountHistory.objects.filter(bank_holder=pk)
    context = {
            'details': dash_details,
            'account_holder': account_holder,
            'allmodules': allmodules,
            'history': history,
            'account': account,
            'log_details':log_details
        }

    return render(request,'zohomodules/bankholder/overview_bankholder.html',context)

def edit_bankholder(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        allmodules  = ZohoModules.objects.get(status='New',company=comp)
        bank_objects = Banking.objects.filter(company=comp)
        bankholder_data=BankAccount.objects.get(id=pk)
        dtoday=date.today
        print(bank_objects)
        context = {
                'details': dash_details,
                'allmodules': allmodules,
                'bankobjects':bank_objects, 
                'log_details':log_details,
                'bankholder' :bankholder_data,
                'dot': dtoday
                }
        return render(request,'zohomodules/bankholder/edit_bankholder.html',context)
    else:
        return redirect('/')
    
    
def do_bankholder_edit(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        bankholder=BankAccount.objects.get(id=pk)
    
        if request.method=="POST":
            bankholder_data=BankAccount.objects.get(id=pk)
            bankholder_data.login_details=log_details
            bankholder_data.company=comp
            bankholder_data.customer_name = request.POST.get('customer_name')
            bankholder_data.alias=request.POST.get('alias')
            bankholder_data.phone_number=request.POST.get('phone_number')
            bankholder_data.email=request.POST.get('email')
            bankholder_data.account_type=request.POST.get('account_type')
            
            
            bank_id = request.POST['bank_name']  # This line retrieves the selected bank ID from the form
            print('bank_id')
            bank_instance = Banking.objects.get(id=bank_id, company=comp)
            
            baan=bank_instance.bnk_name
            print(baan)
            bankholder_data.bankname=baan
            bankholder_data.bank=bank_instance
            bankholder_data.account_number=request.POST.get('accountNumber')
            bankholder_data.ifsc_code=request.POST.get('ifscCode')
            bankholder_data.swift_code=request.POST.get('swiftCode')
            bankholder_data.branch_name=request.POST.get('branch_name')
            bankholder_data.cheque_book_range=request.POST.get('c_range')
            bankholder_data.enable_cheque_printing=request.POST.get('c_print')
            bankholder_data.cheque_printing_configuration=request.POST.get('c_print_confg')
            bankholder_data.mailing_name=request.POST.get('m_name')
            bankholder_data.address=request.POST.get('m_address')
            bankholder_data.country=request.POST.get('m_country')
            bankholder_data.state=request.POST.get('m_state')
            bankholder_data.pin=request.POST.get('m_pin')
            bankholder_data.pan_number=request.POST.get('pan')
            bankholder_data.registration_type=request.POST.get('id_registration_type')
            x = request.POST['id_registration_type']
            if x == "consumer" or x == "unregistered ":
                bankholder_data.gst_num=''
            elif x == 'regular' or x == 'composition' :
                bankholder_data.gst_num=request.POST.get('id_gstin_un')

            bankholder_data.alter_gst_details=request.POST.get('alt_gst')
            bankholder_data.date=request.POST.get('date')
            bankholder_data.amount_type=request.POST.get('tamt')
            bankholder_data.amount=request.POST.get('amount')
            

            bankholder_data.save()


            
            holderhistory=BankAccountHistory()
            holderhistory.company=comp
            holderhistory.logindetails=log_details
            holderhistory.bank_holder=bankholder
            holderhistory.date=date.today()
            holderhistory.action='Edited'

            holderhistory.save()
 
        return redirect('overview_bankholder',pk)

def bankholder_status(request,pk):
    data=BankAccount.objects.get(id=pk)
    if data.status == 'Active':
        data.status ='Inactive'
    elif data.status == 'Inactive':
        data.status ='Active'
    data.save()
    return redirect('overview_bankholder',pk)

def delete_bankholder(request,pk):
    data=BankAccount.objects.get(id=pk)
    data.delete()
    return redirect('list_bankholder')
    
     
def import_bankholder_excel(request):
    print(1)
    print('hello')
    if request.method == 'POST' :
        if 'login_id' in request.session:
            log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            if 'empfile' in request.FILES:
                excel_bill = request.FILES['empfile']
                excel_b = load_workbook(excel_bill)
                eb = excel_b['Sheet']
                for row_number1 in range(2, eb.max_row + 1):
                    billsheet = [eb.cell(row=row_number1, column=col_num).value for col_num in range(1, eb.max_column + 1)]
                    bankholder=BankAccount(customer_name=billsheet[0],alias=billsheet[1],phone_number=billsheet[2],email=billsheet[3],
                                        account_type=billsheet[4],bankname=billsheet[5],account_number=billsheet[6],ifsc_code=billsheet[7],
                                        swift_code=billsheet[8], branch_name=billsheet[9],cheque_book_range=billsheet[10],enable_cheque_printing=billsheet[11],
                                        cheque_printing_configuration=billsheet[12],mailing_name=billsheet[13],address = billsheet[14], country=billsheet[15],
                                        state=billsheet[16],pin=billsheet[17],pan_number=billsheet[18],registration_type=billsheet[19],gst_num=billsheet[20],
                                        alter_gst_details=billsheet[21],date=datetime.date(billsheet[22]),amount_type=billsheet[23],amount=billsheet[24],
                                        company=dash_details,login_details=log_details)
                    bankholder.save()
                    history=BankAccountHistory(company=dash_details.company,logindetails=log_details, bank_holder=bankholder,action='imported')
                    history.save()
                    messages.warning(request,'file imported')
                    return redirect('list_bankholder')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            if 'empfile' in request.FILES:
                excel_bill = request.FILES['empfile']
                excel_b = load_workbook(excel_bill)
                eb = excel_b['Sheet1'] 
                for row_number1 in range(2, eb.max_row + 1):
                    billsheet = [eb.cell(row=row_number1, column=col_num).value for col_num in range(1, eb.max_column + 1)]
                    bankholder=BankAccount(customer_name=billsheet[0],alias=billsheet[1],phone_number=billsheet[2],email=billsheet[3],
                                        account_type=billsheet[4],bankname=billsheet[5],account_number=billsheet[6],ifsc_code=billsheet[7],
                                        swift_code=billsheet[8], branch_name=billsheet[9],cheque_book_range=billsheet[10],enable_cheque_printing=billsheet[11],
                                        cheque_printing_configuration=billsheet[12],mailing_name=billsheet[13],address = billsheet[14], country=billsheet[15],
                                        state=billsheet[16],pin=billsheet[17],pan_number=billsheet[18],registration_type=billsheet[19],gst_num=billsheet[20],
                                        alter_gst_details=billsheet[21],date=datetime.date(billsheet[22]),amount_type=billsheet[23],amount=billsheet[24],
                                        company=dash_details,login_details=log_details)
                    bankholder.save()
                    history=BankAccountHistory(company=dash_details,logindetails=log_details, bank_holder=bankholder,action='imported')
                    history.save()
                    messages.warning(request,'file imported')
                    return redirect('list_bankholder')
    messages.error(request,'File upload Failed!11')
    return redirect('list_bankholder')
    
#End

#company holiday
    
def company_holiday(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']

        login_d = LoginDetails.objects.get(id=log_id)
        if login_d.user_type == 'Company':
            company_id = CompanyDetails.objects.get(login_details=login_d)
            dash_details = CompanyDetails.objects.get(login_details=login_d,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            

            month_list = []
            year_list = []
            date_list = []

            holiday_list = Holiday.objects.filter(company=company_id)

            # making list of all dates which are hoidays
            for d in holiday_list:
                current_date = d.start_date
                while current_date <= d.end_date:
                    if current_date not in date_list:
                        date_list.append(current_date)
                    current_date += timedelta(days=1)



            for  d in date_list:
                if d.strftime("%B") not in month_list:
                    month_list.append(d.strftime("%B"))

                if d.year not in year_list:
                    year_list.append(d.year)

            # year_list.sort()

            month30 = ["April", "June", "September", "November"]
            month31 = ["January", "March", "May", "July", "August", "October", "December"]

            holiday_table = {}
            
            i = 1
            for y in year_list:
                for m in month_list:
                    holiday_c = 0
                    st = 0
                    for h in date_list:
                        if m == h.strftime("%B") and y == h.year:
                            holiday_c = holiday_c + 1
                            st = 1

                    if st == 1:
                    
                        if m in month31:
                            working_days = 31 - holiday_c
                        elif m in month30:
                            working_days = 30 - holiday_c
                        else:
                            if calendar.isleap(y):
                                working_days = 29 - holiday_c

                            else:
                                working_days = 28 - holiday_c

                        holiday_table[i] = [i, m, y, holiday_c, working_days]
                        i = i + 1
                        st = 0

            dash_status = 0

            context = {
                'holiday_table':holiday_table,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }


                
            return render(request,'company/company_holiday.html', context)
        
        if login_d.user_type == 'Staff':
            staff_d = StaffDetails.objects.get(login_details=login_d)
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            

            month_list = []
            year_list = []
            date_list = []

            holiday_list = Holiday.objects.filter(company=staff_d.company)

            # making list of all dates which are hoidays
            for d in holiday_list:
                current_date = d.start_date
                while current_date <= d.end_date:
                    if current_date not in date_list:
                        date_list.append(current_date)
                    current_date += timedelta(days=1)



            for  d in date_list:
                if d.strftime("%B") not in month_list:
                    month_list.append(d.strftime("%B"))

                if d.year not in year_list:
                    year_list.append(d.year)

            # year_list.sort()

            month30 = ["April", "June", "September", "November"]
            month31 = ["January", "March", "May", "July", "August", "October", "December"]

            holiday_table = {}
            
            i = 1
            for y in year_list:
                for m in month_list:
                    holiday_c = 0
                    st = 0
                    for h in date_list:
                        if m == h.strftime("%B") and y == h.year:
                            holiday_c = holiday_c + 1
                            st = 1

                    if st == 1:
                    
                        if m in month31:
                            working_days = 31 - holiday_c
                        elif m in month30:
                            working_days = 30 - holiday_c
                        else:
                            if calendar.isleap(y):
                                working_days = 29 - holiday_c

                            else:
                                working_days = 28 - holiday_c

                        holiday_table[i] = [i, m, y, holiday_c, working_days]
                        i = i + 1
                        st = 0
            dash_status = 1

            context = {
                'holiday_table':holiday_table,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }

                
            return render(request,'company/company_holiday.html', context)
        

    
    else:
        return redirect('/')


def company_holiday_new(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
    
        
        login_d = LoginDetails.objects.get(id=log_id)
        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

            # value of n deside holiday page or overview page after holiday addition
            n = request.GET.get('n')

            dash_status = 0
            context = {
                'n':n,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }
            return render(request,'company/company_holiday_new.html', context)
        
        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')

            # value of n deside holiday page or overview page after holiday addition
            n = request.GET.get('n')

            dash_status = 1
            context = {
                'n':n,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,

            }
            return render(request,'company/company_holiday_new.html', context)
    
    else:
        return redirect('/')

def company_holiday_new_add(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        
        login_d = LoginDetails.objects.get(id=log_id)
        if login_d.user_type == 'Company':
            company_id = CompanyDetails.objects.get(login_details=login_d)
            if request.method=="POST":
                dest=request.POST['destination']
                title=request.POST['title']
                s_date=request.POST['sdate']
                e_date=request.POST['edate']

                if e_date < s_date:
                    messages.info(request, "End date cannot be earlier than start date")
                    return redirect(reverse('company_holiday_new') + f'?n={dest}')

                if Holiday.objects.filter(start_date=s_date,end_date=e_date,holiday_name=title,company=company_id).exists():
                    messages.info(request, 'This holiday already exists')
                    return redirect(reverse('company_holiday_new') + f'?n={dest}')

                holiday_d = Holiday(start_date=s_date,end_date=e_date,holiday_name=title,user=login_d,company=company_id)
                holiday_d.save()

                today_date = date.today()
                action_h = "Created"

                history = Holiday_history(company=company_id,user=login_d,holiday=holiday_d,date=today_date,action=action_h)
                history.save()

                dest1 = int(dest)

                # to overview page
                if dest1 == 1:
                    return redirect('company_holiday_overview')
                
                #to holiday page
                else:
                    return redirect('company_holiday')
            
            return redirect('company_holiday_new')
        
        
        

        if login_d.user_type == 'Staff':
            staff_id = StaffDetails.objects.get(login_details=login_d)
            if request.method=="POST":
                dest=request.POST['destination']
                title=request.POST['title']
                s_date=request.POST['sdate']
                e_date=request.POST['edate']

                if e_date < s_date:
                    messages.info(request, "End date cannot be earlier than start date")
                    return redirect(reverse('company_holiday_new') + f'?n={dest}')

                if Holiday.objects.filter(start_date=s_date,end_date=e_date,holiday_name=title,company=staff_id.company).exists():
                    messages.info(request, 'This holiday already exists')
                    return redirect(reverse('company_holiday_new') + f'?n={dest}')

                holiday_d = Holiday(start_date=s_date,end_date=e_date,holiday_name=title,user=login_d,company=staff_id.company)
                holiday_d.save()

                today_date = date.today()
                action_h = "Created"

                history = Holiday_history(company=staff_id.company,user=login_d,holiday=holiday_d,date=today_date,action=action_h)
                history.save()


                dest1 = int(dest)

                # to overview page
                if dest1 == 1:
                    return redirect('company_holiday_overview')
                
                #to holiday page
                else:
                    return redirect('company_holiday')
            
            return redirect('company_holiday_new')
        
        
    
    else:
        return redirect('/')

def company_holiday_import_sample_download(request):
     # Path to the sample Excel file
    file_path = os.path.join(settings.BASE_DIR, 'static', 'holiday_sample_files', 'sample.xlsx')
    print(file_path)
    try:
        # Open the file
        with open(file_path, 'rb') as excel_file:
            # Return the file as response
            response = HttpResponse(excel_file.read(), content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            response['Content-Disposition'] = 'attachment; filename="sample.xlsx"'
            return response
    except FileNotFoundError:
        # Handle file not found error
        return HttpResponse("File not found", status=404)
    except Exception as e:
        # Handle other exceptions
        return HttpResponse("An error occurred", status=500)
        
def company_holiday_import_operation(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        

        login_d = LoginDetails.objects.get(id=log_id)
        if login_d.user_type == 'Company':
            company_id = CompanyDetails.objects.get(login_details=login_d)
            if request.method == 'POST' and request.FILES['file']:
                excel_file = request.FILES['file']

                # Check if the uploaded file is an Excel file
                if excel_file.name.endswith('.xls') or excel_file.name.endswith('.xlsx'):
                    # Load Excel file into pandas DataFrame
                    df = pd.read_excel(excel_file)

                    # Iterate through rows and save data to database
                    for index, row in df.iterrows():
                        # Create a new object of YourModel and populate fields
                        if Holiday.objects.filter(start_date=row['s_date'],end_date=row['e_date'],holiday_name=row['title'],user=login_d,company=company_id).exists():
                            continue
                        if row['s_date'] > row['e_date']:
                            continue
                        
                        h1 = Holiday(
                            holiday_name=row['title'],
                            start_date=row['s_date'],
                            end_date=row['e_date'],
                            user=login_d,
                            company=company_id,
                        )
                        h1.save()

                        today_date = date.today()
                        action_h = "Created"

                        history = Holiday_history(company=company_id,user=login_d,holiday=h1,date=today_date,action=action_h)
                        history.save()

                    # Redirect to a success page or render a success message
                    return redirect('company_holiday')

            # Render the upload form
            return redirect('company_holiday_import')
        
        if login_d.user_type == 'Staff':
            staff_id = StaffDetails.objects.get(login_details=login_d)
            if request.method == 'POST' and request.FILES['file']:
                excel_file = request.FILES['file']

                # Check if the uploaded file is an Excel file
                if excel_file.name.endswith('.xls') or excel_file.name.endswith('.xlsx'):
                    # Load Excel file into pandas DataFrame
                    df = pd.read_excel(excel_file)

                    # Iterate through rows and save data to database
                    for index, row in df.iterrows():
                        # Create a new object of YourModel and populate fields
                        if Holiday.objects.filter(start_date=row['s_date'],end_date=row['e_date'],holiday_name=row['title'],user=login_d,company=staff_id.company).exists():
                            continue
                        if row['s_date'] > row['e_date']:
                            continue
                        
                        h1 = Holiday(
                            holiday_name=row['title'],
                            start_date=row['s_date'],
                            end_date=row['e_date'],
                            user=login_d,
                            company=staff_id.company,
                        )
                        h1.save()

                        today_date = date.today()
                        action_h = "Created"

                        history = Holiday_history(company=staff_id.company,user=login_d,holiday=h1,date=today_date,action=action_h)
                        history.save()

                    # Redirect to a success page or render a success message
                    return redirect('company_holiday')

            # Render the upload form
            return redirect('company_holiday_import')
    
    else:
        return redirect('/')

def company_holiday_overview(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']

        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':

            company_id = CompanyDetails.objects.get(login_details=login_d)
            comment = Comment_holiday.objects.filter(company=company_id)
            holiday_history = Holiday_history.objects.filter(company=company_id)
            dash_details = CompanyDetails.objects.get(login_details=login_d,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

            mn = request.GET.get('month')
            yr = request.GET.get('year')

            #default view of tab view depend on togd, 1-list, else-calendar
            togd = request.GET.get('togd')

            holiday2 = Holiday.objects.filter(company=company_id)

            for h3 in holiday2:
                mn2 = h3.start_date.strftime("%B")
                yr2 = h3.start_date.year
                break
            

            if mn is None:
                mn = mn2
            if yr is None:
                yr = yr2
                
            try:
                month = datetime.strptime(mn, '%B').month
            except:
                month = mn

            year = int(yr)

            events = Holiday.objects.filter(Q(start_date__month=month, start_date__year=year, company=company_id) | Q(end_date__month=month, end_date__year=year, company=company_id))

            event_list = {}

            k = 1
            for e1 in events:
                current_date = e1.start_date
                while current_date <= e1.end_date:
                    event_list[k] = [k, e1.holiday_name, current_date ]
                    k = k + 1
                    current_date += timedelta(days=1)
                


            event_table = {}
            j = 1

            for h in events:
                event_table[j] = [j, h.holiday_name, h.start_date, h.end_date, h.id]
                j = j + 1

            month_list = []
            year_list = []
            date_list = []
            holiday_list = Holiday.objects.filter(company=company_id)
            for d in holiday_list:
                current_date = d.start_date
                while current_date <= d.end_date:
                    if current_date not in date_list:
                        date_list.append(current_date)
                    current_date += timedelta(days=1)



            for  d in date_list:
                if d.strftime("%B") not in month_list:
                    month_list.append(d.strftime("%B"))

                if d.year not in year_list:
                    year_list.append(d.year)


            holiday_table = {}
            
            i = 1
            for y in year_list:
                for m in month_list:
                    holiday_c = 0
                    st = 0
                    for h in date_list:
                        if m == h.strftime("%B") and y == h.year:
                            holiday_c = holiday_c + 1
                            st = 1

                    if st == 1:
                    

                        holiday_table[i] = [i, m, y, holiday_c]
                        i = i + 1
                        st = 0


            month_name = datetime.strptime(str(month), '%m').strftime('%B')

            
            dash_status = 0
            

            context = {
                'holiday_table':holiday_table,
                'events':events,
                'event_list':event_list,
                'event_table':event_table,
                'month_name':month_name,
                'month':month,
                'year':year,
                'comments':comment,
                'holiday_history':holiday_history,
                'togd':togd,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }

            return render(request, 'company/company_holiday_overview.html',context)
        
        if login_d.user_type == 'Staff':
            staff_id = StaffDetails.objects.get(login_details=login_d)
            comment = Comment_holiday.objects.filter(company=staff_id.company)
            holiday_history = Holiday_history.objects.filter(company=staff_id.company)
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=staff_id.company,status='New')

            mn = request.GET.get('month')
            yr = request.GET.get('year')

            #default view of tab view depend on togd, 1-list, else-calendar
            togd = request.GET.get('togd')

            holiday2 = Holiday.objects.filter(company=staff_id.company)

            for h3 in holiday2:
                mn2 = h3.start_date.strftime("%B")
                yr2 = h3.start_date.year
                break
            

            if mn is None:
                mn = mn2
            if yr is None:
                yr = yr2
                
            try:
                month = datetime.strptime(mn, '%B').month
            except:
                month = mn

            year = int(yr)

            events = Holiday.objects.filter(Q(start_date__month=month, start_date__year=year, company=staff_id.company) | Q(end_date__month=month, end_date__year=year, company=staff_id.company))

            event_list = {}

            k = 1
            for e1 in events:
                current_date = e1.start_date
                while current_date <= e1.end_date:
                    event_list[k] = [k, e1.holiday_name, current_date ]
                    k = k + 1
                    current_date += timedelta(days=1)
                


            event_table = {}
            j = 1

            for h in events:
                event_table[j] = [j, h.holiday_name, h.start_date, h.end_date, h.id]
                j = j + 1

            month_list = []
            year_list = []
            date_list = []
            holiday_list = Holiday.objects.filter(company=staff_id.company)
            for d in holiday_list:
                current_date = d.start_date
                while current_date <= d.end_date:
                    if current_date not in date_list:
                        date_list.append(current_date)
                    current_date += timedelta(days=1)



            for  d in date_list:
                if d.strftime("%B") not in month_list:
                    month_list.append(d.strftime("%B"))

                if d.year not in year_list:
                    year_list.append(d.year)


            holiday_table = {}
            
            i = 1
            for y in year_list:
                for m in month_list:
                    holiday_c = 0
                    st = 0
                    for h in date_list:
                        if m == h.strftime("%B") and y == h.year:
                            holiday_c = holiday_c + 1
                            st = 1

                    if st == 1:
                    

                        holiday_table[i] = [i, m, y, holiday_c]
                        i = i + 1
                        st = 0


            month_name = datetime.strptime(str(month), '%m').strftime('%B')

            
            dash_status = 1
            

            context = {
                'holiday_table':holiday_table,
                'events':events,
                'event_list':event_list,
                'event_table':event_table,
                'month_name':month_name,
                'month':month,
                'year':year,
                'comments':comment,
                'holiday_history':holiday_history,
                'togd':togd,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }

            return render(request, 'company/company_holiday_overview.html',context)
    
    else:
        return redirect('/')


def company_holiday_overview_delete(request,pk):

    h1 = Holiday.objects.get(id=pk)
    history_h = Holiday_history.objects.filter(holiday=pk)

    year1 = request.GET.get('year')
    month1 = request.GET.get('month')

    h1.delete()
    for h in history_h:
        h.delete()

    togd=1
    
    return redirect(reverse('company_holiday_overview') + f'?month={month1}&year={year1}&togd={togd}')


def company_holiday_overview_edit(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

            year = request.GET.get('year')
            month = request.GET.get('month')

            h1 = Holiday.objects.get(id=pk)

            dash_status = 0

            context = {
                'id':pk,
                'holiday':h1,
                'month':month,
                'year':year,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }
            return render(request, 'company/company_holiday_overview_edit.html',context)
        
        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')

            year = request.GET.get('year')
            month = request.GET.get('month')

            h1 = Holiday.objects.get(id=pk)

            dash_status = 1
            context = {
                'id':pk,
                'holiday':h1,
                'month':month,
                'year':year,
                'details': dash_details,
                'allmodules': allmodules,
                'dash_status':dash_status,
            }
            return render(request, 'company/company_holiday_overview_edit.html',context)
    else:
        return redirect('/')

def company_holiday_overview_edit_op(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']

        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
        
            company_id = CompanyDetails.objects.get(login_details=login_d)

            year = request.GET.get('year')
            month = request.GET.get('month')


            if request.method=="POST":
                title=request.POST['title']
                s_date=request.POST['sdate']
                e_date=request.POST['edate']

                if s_date > e_date:
                    messages.info(request, "End date cannot be earlier than start date")
                    return redirect(reverse('company_holiday_overview_edit', kwargs={'pk': pk}) + f'?month={month}&year={year}')


                holiday_d = Holiday.objects.get(id=pk)

                togd = 1

                st_date = datetime.strptime(s_date, '%Y-%m-%d').date()
                et_date = datetime.strptime(e_date, '%Y-%m-%d').date()

                if holiday_d.holiday_name == title and holiday_d.start_date == st_date and holiday_d.end_date == et_date:
                    return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')

                holiday_d.holiday_name = title
                holiday_d.start_date = s_date
                holiday_d.end_date = e_date

                today_date = date.today()
                action_h = "Edited"

                history_h = Holiday_history(company=company_id,user=login_d,holiday=holiday_d,date=today_date,action=action_h)
                


                holiday_d.save()
                history_h.save()
                
                togd = 1

                
                return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
            
        if login_d.user_type == 'Staff':
    
            staff_id = StaffDetails.objects.get(login_details=login_d)

            year = request.GET.get('year')
            month = request.GET.get('month')


            if request.method=="POST":
                title=request.POST['title']
                s_date=request.POST['sdate']
                e_date=request.POST['edate']

                if s_date > e_date:
                    messages.info(request, "End date cannot be earlier than start date")
                    return redirect(reverse('company_holiday_overview_edit', kwargs={'pk': pk}) + f'?month={month}&year={year}')


                holiday_d = Holiday.objects.get(id=pk)

                togd = 1


                st_date = datetime.strptime(s_date, '%Y-%m-%d').date()
                et_date = datetime.strptime(e_date, '%Y-%m-%d').date()

                if holiday_d.holiday_name == title and holiday_d.start_date == st_date and holiday_d.end_date == et_date:
                    return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')


                holiday_d.holiday_name = title
                holiday_d.start_date = s_date
                holiday_d.end_date = e_date

                today_date = date.today()
                action_h = "Edited"

                history_h = Holiday_history(company=staff_id.company,user=login_d,holiday=holiday_d,date=today_date,action=action_h)
                


                holiday_d.save()
                history_h.save()
                togd = 1

                
                return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
            
        else:
            return redirect('/')

    
    return redirect('company_holiday_overview_edit')

def company_holiday_overview_comment(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']


        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            company_id = CompanyDetails.objects.get(login_details=login_d)

            month = request.GET.get('month')
            year = request.GET.get('year')

            togd = 1

            if request.method=='POST':
                comment=request.POST['comment']

                holiday = Holiday.objects.get(id=pk)

                c1 = Comment_holiday(holiday_details=holiday, comment=comment, user=login_d, company=company_id)
                c1.save()

                return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
            
            return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
        
        if login_d.user_type == 'Staff':
            staff_id = StaffDetails.objects.get(login_details=login_d)

            month = request.GET.get('month')
            year = request.GET.get('year')

            togd = 1

            if request.method=='POST':
                comment=request.POST['comment']

                holiday = Holiday.objects.get(id=pk)

                c1 = Comment_holiday(holiday_details=holiday, comment=comment, user=login_d, company=staff_id.company)
                c1.save()

                return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
            
            return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
    else:
        return redirect('/')


def company_holiday_overview_comment_delete(request,pk):
    month = request.GET.get('month')
    year = request.GET.get('year')
    c1 = Comment_holiday.objects.get(id=pk)
    c1.delete()
    togd = 1

    return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')

def company_holiday_overview_email_send(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']


        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':


            company_id = CompanyDetails.objects.get(login_details=login_d)
            month = request.GET.get('mn')
            year = request.GET.get('yr')
            month_name = calendar.month_name[int(month)]
            eaddress = request.POST.get('email')  # Get email address from POST request

            if request.method=="POST":

                h1 = Holiday.objects.filter(Q(start_date__month=month, start_date__year=year, company=company_id) | Q(end_date__month=month, end_date__year=year, company=company_id))
                holiday_d = {}
                j = 1

                for h in h1:
                    holiday_d[j] = [h.holiday_name, h.start_date, h.end_date]
                    j += 1

                # Create a PDF document
                pdf_buffer = io.BytesIO()
                doc = SimpleDocTemplate(pdf_buffer, pagesize=letter)

                # Create a heading
                heading_text = f"<b>{month_name} {year}</b>"
                heading_style = ParagraphStyle(name='Heading1', alignment=1, fontSize=20)
                heading = Paragraph(heading_text, heading_style)

                # Create a list to hold all the data rows
                table_data = []

                # Add header row
                headers = ['Sl No', 'Holiday Name', 'Start Date', 'End Date']
                table_data.append(headers)

                # Extract keys and values from the dictionary
                keys = list(holiday_d.keys())
                values = list(holiday_d.values())

                # Add keys as the first column
                keys_column = [[str(key)] for key in keys]

                # Combine keys column with values
                for i in range(len(values)):
                    row = keys_column[i] + values[i]
                    table_data.append(row)

                # Create a table from the data
                table = Table(table_data)

                # Style the table
                style = TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('FONTSIZE', (0, 0), (-1, -1), 12)  # Increase font size for table data
                ])
                table.setStyle(style)

                # Add space before the table
                spacer = Spacer(1, 20)  # Add 20 points of space before the table

                # Build the PDF document
                elements = [heading, spacer, table]
                doc.build(elements)

                pdf_buffer.seek(0)

                # Send the email with the PDF attachment
                subject = "Holiday List"
                message = "Please find the attached holiday list."
                recipient = eaddress

                msg = EmailMultiAlternatives(subject, message, settings.EMAIL_HOST_USER, [recipient])
                msg.attach("holiday_list.pdf", pdf_buffer.read(), 'application/pdf')
                msg.send()

                togd = 1
                return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
            
        if login_d.user_type == 'Staff':


            staff_id = StaffDetails.objects.get(login_details=login_d)
            month = request.GET.get('mn')
            year = request.GET.get('yr')
            month_name = calendar.month_name[int(month)]
            eaddress = request.POST.get('email')  # Get email address from POST request

            if request.method=="POST":

                h1 = Holiday.objects.filter(Q(start_date__month=month, start_date__year=year, company=staff_id.company) | Q(end_date__month=month, end_date__year=year, company=staff_id.company))
                holiday_d = {}
                j = 1

                for h in h1:
                    holiday_d[j] = [h.holiday_name, h.start_date, h.end_date]
                    j += 1

                # Create a PDF document
                pdf_buffer = io.BytesIO()
                doc = SimpleDocTemplate(pdf_buffer, pagesize=letter)

                # Create a heading
                heading_text = f"<b>{month_name} {year}</b>"
                heading_style = ParagraphStyle(name='Heading1', alignment=1, fontSize=20)
                heading = Paragraph(heading_text, heading_style)

                # Create a list to hold all the data rows
                table_data = []

                # Add header row
                headers = ['Sl No', 'Holiday Name', 'Start Date', 'End Date']
                table_data.append(headers)

                # Extract keys and values from the dictionary
                keys = list(holiday_d.keys())
                values = list(holiday_d.values())

                # Add keys as the first column
                keys_column = [[str(key)] for key in keys]

                # Combine keys column with values
                for i in range(len(values)):
                    row = keys_column[i] + values[i]
                    table_data.append(row)

                # Create a table from the data
                table = Table(table_data)

                # Style the table
                style = TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('FONTSIZE', (0, 0), (-1, -1), 12)  # Increase font size for table data
                ])
                table.setStyle(style)

                # Add space before the table
                spacer = Spacer(1, 20)  # Add 20 points of space before the table

                # Build the PDF document
                elements = [heading, spacer, table]
                doc.build(elements)

                pdf_buffer.seek(0)

                # Send the email with the PDF attachment
                subject = "Holiday List"
                message = "Please find the attached holiday list."
                recipient = eaddress

                msg = EmailMultiAlternatives(subject, message, settings.EMAIL_HOST_USER, [recipient])
                msg.attach("holiday_list.pdf", pdf_buffer.read(), 'application/pdf')
                msg.send()

                togd = 1
                return redirect(reverse('company_holiday_overview') + f'?month={month}&year={year}&togd={togd}')
            

        else:
            return redirect('/')
        
#End


def bankholder_checkphone(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        comp=dash_details
            
    else:
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        comp=dash_details.company
    if request.method == 'POST':
        phoneNumber = request.POST.get('phoneNumber')
        phone_exists = BankAccount.objects.filter(phone_number=phoneNumber, company=comp).exists()

        if phone_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}) 
        
        
def bankholder_checkemail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        comp=dash_details
            
    else:
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        comp=dash_details.company
    if request.method == 'POST':
        email = request.POST.get('email')
        email_exists = BankAccount.objects.filter(email=email,company=comp).exists()

        if email_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})  
        
        
def bankholder_checkpan(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        comp=dash_details
            
    else:
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        comp=dash_details.company
    if request.method == 'POST':
        panNumber = request.POST.get('panNumber')
        pan_exists = BankAccount.objects.filter(pan_number=panNumber,company=comp).exists()

        if pan_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}) 
        
        
def bankholder_checkgst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
    else:
        return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        comp=dash_details
            
    else:
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        comp=dash_details.company
    if request.method == 'POST':
        gstNumber = request.POST.get('gstNumber')
        gst_exists = BankAccount.objects.filter(gst_num=gstNumber,company=comp).exists()

        if gst_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}) 
        
        
#===================================MANUAL JOURNAL==============================================

def manual_journal(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    print("hi")
    print(log_details)
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        print('hi')
        print(dash_details)
        journal = Journal.objects.filter(company=dash_details)
        print('cat')
        #print(journal)
        journal_entries = JournalEntry.objects.filter(journal__in=journal,company=dash_details)
        print(journal_entries)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        print('dog')
        print(allmodules)
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'journal_no':
            journal = journal.order_by('journal_no')
        elif sort_option == 'total_debit':
            journal = journal.order_by('total_debit')

        if filter_option == 'save':
            journal = journal.filter(status='save')
        elif filter_option == 'draft':
            journal = journal.filter(status='draft')
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'journal_entries':journal_entries,
            'sort_option': sort_option,
            'filter_option': filter_option,
        }
        
        return render(request,'zohomodules/manual_journal/manual_journal.html',context)
    
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        print('lilly')
        print(dash_details)
        journal = Journal.objects.filter(staff=dash_details)
        print('lotus')
        #print(journal)
        journal_entries = JournalEntry.objects.filter(journal__in=journal,staff=dash_details)
        print(journal_entries)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        print('rose')
        print(allmodules)
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'journal_nojournal_no':
            journal = journal.order_by('journal_no')
        elif sort_option == 'total_debit':
            journal = journal.order_by('total_debit')

        if filter_option == 'save':
            journal = journal.filter(status='save')
        elif filter_option == 'draft':
            journal = journal.filter(status='draft')
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'journal_entries':journal_entries,
            'sort_option': sort_option,
            'filter_option': filter_option,
        }
        
        return render(request,'zohomodules/manual_journal/manual_journal.html',context)

def import_journal_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)

        if request.method == 'POST' and request.FILES.get('journalfile') and request.FILES.get('accountfile'):
            journalfile = request.FILES['journalfile']
            accountfile = request.FILES['accountfile']

            try:
                # Read Journal Excel file(journalfile)
                journal_df = pd.read_excel(journalfile)

                # Create PriceList and PriceListItem instances
                for index, row in journal_df.iterrows():

                    new_journal = Journal.objects.create(
                        journal_no=row['JOURNAL_NO'],
                        reference_no=row['REFERENCE_NO'],
                        notes=row['NOTES'], 
                        currency=row['CURRENCY'],
                        journal_type=row['JOURNAL_TYPE'],
                        total_debit=row['TOTAL_DEBIT'],
                        total_credit=row['TOTAL_CREDIT'],
                        debit_difference=row['DEBIT_DIFFERENCE'],
                        credit_difference=row['CREDIT_DIFFERENCE'],
                        status=row['STATUS'],
                        company=dash_details, 
                        login_details=log_details,
                    )
                    
                    JournalTransactionHistory.objects.create(
                        company=dash_details,
                        login_details=log_details,
                        journal=new_journal,
                        action='Created',
                    )

                    # Read account Excel file(account_file) for each Journal
                    account_df = pd.read_excel(accountfile)
                    for account_index, account_row in account_df.iterrows():     
                        JournalEntry.objects.create(
                            company=dash_details,
                            journal=new_journal,
                            account=account_row['ACCOUNT'],
                            description=account_row['DESCRIPTION'],
                            contact=account_row['CONTACT'],
                            debits=account_row['DEBITS'],
                            credits=account_row['CREDITS'],
                        )

                messages.success(request, 'Journal data imported successfully.')
                return redirect('manual_journal')

            except Exception as e:
                messages.error(request, f'Error importing data: {str(e)}')

    
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)

        if request.method == 'POST' and request.FILES.get('journalfile') and request.FILES.get('accountfile'):
            journalfile = request.FILES['journalfile']
            accountfile = request.FILES['accountfile']

            try:
                # Read Journal Excel file(journalfile)
                journal_df = pd.read_excel(journalfile)

                # Create PriceList and PriceListItem instances
                for index, row in journal_df.iterrows():

                    new_journal = Journal.objects.create(
                        journal_no=row['JOURNAL_NO'],
                        reference_no=row['REFERENCE_NO'],
                        notes=row['NOTES'], 
                        currency=row['CURRENCY'],
                        journal_type=row['JOURNAL_TYPE'],
                        total_debit=row['TOTAL_DEBIT'],
                        total_credit=row['TOTAL_CREDIT'],
                        debit_difference=row['DEBIT_DIFFERENCE'],
                        credit_difference=row['CREDIT_DIFFERENCE'],
                        status=row['STATUS'],
                        staff=dash_details, 
                        login_details=log_details,
                    )
                    
                    JournalTransactionHistory.objects.create(
                        staff=dash_details,
                        login_details=log_details,
                        journal=new_journal,
                        action='Created',
                    )

                    # Read account Excel file(account_file) for each Journal
                    account_df = pd.read_excel(accountfile)
                    for account_index, account_row in account_df.iterrows():     
                        JournalEntry.objects.create(
                            staff=dash_details,
                            journal=new_journal,
                            account=account_row['ACCOUNT'],
                            description=account_row['DESCRIPTION'],
                            contact=account_row['CONTACT'],
                            debits=account_row['DEBITS'],
                            credits=account_row['CREDITS'],
                        )

                messages.success(request, 'Journal data imported successfully.')
                return redirect('manual_journal')

            except Exception as e:
                messages.error(request, f'Error importing data: {str(e)}')

    else:
        return redirect('manual_journal')

    return redirect('manual_journal')


def check_journal_num_valid(request):
    journals = JournalRecievedIdModel.objects.filter(pattern__startswith=str(request.user.id))
    journal_recieved_number = request.POST.get('journal_no')
    print(f'================== journal_recieved_number = {journal_recieved_number}==================')
    if journals.exists():
        last = journals.last()
        last_id = last.jn_rec_number
        print(f'================== last_id = {last_id}==================')
        if journal_recieved_number == last_id:
            return True
        else:
            return False
    else:
        # if payments_recieved_number != 'PRN-01':
        #     return HttpResponse("<span class='text-danger'>Payment Recieved Number is not Continues</span>")
        # else:
        #     return HttpResponse("")
        return True

def journal(request):
    return render(request,'zohomodules/manual_journal/add_journal.html')

def add_journal(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
        log_details = LoginDetails.objects.get(id=log_id)
        print("hloo")
        print(log_details)

        if log_details.user_type == "Company":
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            print("a")
            print(dash_details)
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            print("b")
            print(allmodules)
            accounts = Chart_of_Accounts.objects.filter(company=dash_details)
            print("c")
            print(accounts)
            customer = Customer.objects.filter(company=dash_details)
            employee=payroll_employee.objects.filter(company=dash_details)
            vendor=Vendor.objects.filter(company=dash_details)
            journal_no = request.POST.get('journal_no')
            reference_no = ''
            jon = JournalRecievedIdModel.objects.filter(company=dash_details)
            last = ''
            if jon.exists():
                last = jon.last()


            if request.method == 'POST':
                
                user = request.user
                date = request.POST.get('date')
                journal_no = request.POST.get('journal_no')
                reference_no=request.POST.get('reference_no')

                notes = request.POST.get('notes')
                currency = request.POST.get('currency')
                cash_journal = request.POST.get('cash_journal') == 'True'

                attachment = request.FILES.get('attachment')
                print("o")
                print(attachment)
                status = ""  # Default value for status
                if 'Draft' in request.POST:
                    status="draft"
                if "Save" in request.POST:
                    status="save"  

                journal = Journal(
                    date=date,
                    journal_no=journal_no,
                    reference_no=reference_no,
                    notes=notes,
                    currency=currency,
                    journal_type=cash_journal,
                    attachment=attachment,
                    status=status,
                    company=dash_details if log_details.user_type == "Company" else None   
                )
                if attachment:
                    # File was uploaded, proceed with saving it
                    journal.attachment = attachment
                journal.save()
                
                JournalTransactionHistory.objects.create(
                    company=dash_details  if log_details.user_type == "Company" else None,
                    login_details=log_details,
                    journal=journal,
                    action='Created',
                )

                account_list = request.POST.getlist('account')
                description_list = request.POST.getlist('description')
                contact_list = request.POST.getlist('contact')
                debits_list = request.POST.getlist('debits')
                credits_list = request.POST.getlist('credits')

                total_debit = 0
                total_credit = 0

                for i in range(len(account_list)):
                    account = account_list[i]
                    description = description_list[i]
                    contact = contact_list[i]
                    debits = debits_list[i]
                    credits = credits_list[i]

                    journal_entry = JournalEntry(
                        journal=journal,
                        account=account,
                        description=description,
                        contact=contact,
                        debits=debits,
                        credits=credits
                    )
                    journal_entry.save()

                    total_debit += float(debits) if debits else 0
                    total_credit += float(credits) if credits else 0

                debit_difference = total_debit - total_credit
                credit_difference = total_credit - total_debit

                journal.total_debit = total_debit
                journal.total_credit = total_credit
                journal.debit_difference = debit_difference
                journal.credit_difference=credit_difference
                journal_no = request.POST.get('journal_no')    
                reference_no = request.POST.get('reference_no')
                journal.reference_no=reference_no
                print(reference_no)
                journal.save()
        
                is_valid = check_journal_num_valid(request)
                print("good")
                print(is_valid)
                if not is_valid:
                    messages.error(request, 'Invalid journal number. Please enter a valid and continuous numeric sequence.')

                if JournalRecievedIdModel.objects.filter(company=dash_details).exists():
                    jn = JournalRecievedIdModel.objects.filter(company=dash_details)
                    jn_id = jn.last()
                    jn_id1 = jn.last()

                    # Check if there is a second last journal record
                    if jn.exclude(id=jn_id.id).last():
                        jn_id_second_last = jn.exclude(id=jn_id.id).last()
                        pattern = jn_id_second_last.pattern
                    else:
                        jn_id_second_last = jn.first()
                        pattern = jn_id_second_last.pattern

                    if journal_no != jn_id.jn_rec_number and journal_no != '':
                        # Creating a new JournalRecievedIdModel instance
                        jn_id = JournalRecievedIdModel(company=dash_details)
                        count_for_ref_no = JournalRecievedIdModel.objects.filter(company=dash_details.id).count()
                        jn_id.pattern = pattern
                        jn_id.save()

                        # Using count_for_ref_no + 1 as the reference number
                        ref_num = int(count_for_ref_no) + 2
                        jn_id.ref_number = f'{ref_num:02}'

                        jn_id.jn_rec_number = jn_id1.jn_rec_number
                        jn_id.save()
                    else:
                        # Creating a new JournalRecievedIdModel instance
                        jn_id = JournalRecievedIdModel(company=dash_details)
                        count_for_ref_no = JournalRecievedIdModel.objects.filter(company=dash_details.id).count()
                        jn_id.pattern = pattern
                        jn_id.save()

                        # Using count_for_ref_no + 1 as the reference number
                        ref_num = int(count_for_ref_no) + 2
                        jn_id.ref_number = f'{ref_num:02}'

                        # Incrementing the jn_rec_number
                        jn_rec_num = ''.join(i for i in jn_id1.jn_rec_number if i.isdigit())
                        jn_rec_num = int(jn_rec_num)+1
                        print("#################################")
                        print(f"-----------------{jn_id1}-----------------")
                        jn_id.jn_rec_number = f'{pattern}{jn_rec_num:02}'
                        print(jn_id.jn_rec_number)
                        jn_id.save()
                        
                else:
                    # Creating a new JournalRecievedIdModel instance
                    jn_id = JournalRecievedIdModel(company=dash_details)
                    jn_id.save()

                    # Setting initial values for ref_number, pattern, and jn_rec_number
                    jn_id.ref_number = f'{2:02}'

                    pattern = ''.join(i for i in journal_no if not i.isdigit())
                    jn_id.pattern = pattern
                    jn_id.jn_rec_number = f'{pattern}{2:02}'
                    jn_id.save()

                jn_id.user = request.session['login_id']
                jn_id.save()
            
                if not is_valid:
                    return redirect('add_journal')
                else:
                    return redirect('manual_journal')
            context = {
                 'log_id':log_id,
                 'log_details':log_details,
                'details': dash_details,
                'allmodules': allmodules,
                'reference_no': reference_no,
                 'last':last,
                 'accounts':accounts,
                 'customers':customer,
                 'employees':employee,
                 'vendors':vendor,
            }
            return render(request, 'zohomodules/manual_journal/add_journal.html',context)

        elif log_details.user_type == 'Staff':
            company_details = StaffDetails.objects.get(login_details=log_details)
            print("c")
            print(company_details)
            comp=CompanyDetails.objects.get(id=company_details.company.id)
            print("d")
            print(comp)
            allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
            print("e")
            print(allmodules)
            jour = JournalRecievedIdModel.objects.filter(staff=company_details)
            accounts = Chart_of_Accounts.objects.filter(company=company_details.company)
            customer = Customer.objects.filter(company=company_details.company)
            employee=payroll_employee.objects.filter(company=company_details.company)
            vendor=Vendor.objects.filter(company=company_details.company)
        
            journal_no = request.POST.get('journal_no')
            reference_no = ''
            jon = JournalRecievedIdModel.objects.filter(staff=company_details)
            last = ''
            if jon.exists():
                last = jon.last()


            if request.method == 'POST':
                
                user = request.user
                date = request.POST.get('date')
                journal_no = request.POST.get('journal_no')
                reference_no=request.POST.get('reference_no')
                notes = request.POST.get('notes')
                currency = request.POST.get('currency')
                cash_journal = request.POST.get('cash_journal') == 'True'

                attachment = request.FILES.get('attachment')
                print("o")
                print(attachment)
                
                status = ""  # Default value for status
             
                if 'Draft' in request.POST:
                    status="draft"
                if "Save" in request.POST:
                    status="save"
                journal = Journal(
                    #jour=jour,
                    date=date,
                    journal_no=journal_no,
                    reference_no=reference_no,
                    notes=notes,
                    currency=currency,
                    journal_type=cash_journal,
                    attachment=attachment, 
                    status=status,
                    staff=company_details if log_details.user_type == 'Staff' else None 
                )
                if attachment:
                    # File was uploaded, proceed with saving it
                    journal.attachment = attachment
                journal.save()
                
                JournalTransactionHistory.objects.create(
                    staff=company_details if log_details.user_type == 'Staff' else None,
                    login_details=log_details,
                    journal=journal,
                    action='Created',
                )
            
                
                account_list = request.POST.getlist('account')
                description_list = request.POST.getlist('description')
                contact_list = request.POST.getlist('contact')
                debits_list = request.POST.getlist('debits')
                credits_list = request.POST.getlist('credits')

                total_debit = 0
                total_credit = 0

                for i in range(len(account_list)):
                    account = account_list[i]
                    description = description_list[i]
                    contact = contact_list[i]
                    debits = debits_list[i]
                    credits = credits_list[i]

                    journal_entry = JournalEntry(
                        journal=journal,
                        account=account,
                        description=description,
                        contact=contact,
                        debits=debits,
                        credits=credits
                    )
                    journal_entry.save()

                    total_debit += float(debits) if debits else 0
                    total_credit += float(credits) if credits else 0

                debit_difference = total_debit - total_credit
                credit_difference = total_credit - total_debit

                journal.total_debit = total_debit
                journal.total_credit = total_credit
                journal.debit_difference = debit_difference
                journal.credit_difference=credit_difference
                journal_no = request.POST.get('journal_no')    
                reference_no = request.POST.get('reference_no')
                journal.reference_no=reference_no
                print(reference_no)
                journal.save()
        
                is_valid = check_journal_num_valid(request)
                print(is_valid)
                if not is_valid:
                    messages.error(request, 'Invalid journal number. Please enter a valid and continuous numeric sequence.')

                if JournalRecievedIdModel.objects.filter(staff=company_details).exists():
                    jn = JournalRecievedIdModel.objects.filter(staff=company_details)
                    jn_id = jn.last()
                    jn_id1 = jn.last()

                    # Check if there is a second last journal record
                    if jn.exclude(id=jn_id.id).last():
                        jn_id_second_last = jn.exclude(id=jn_id.id).last()
                        pattern = jn_id_second_last.pattern
                    else:
                        jn_id_second_last = jn.first()
                        pattern = jn_id_second_last.pattern

                    if journal_no != jn_id.jn_rec_number and journal_no != '':
                        # Creating a new JournalRecievedIdModel instance
                        jn_id = JournalRecievedIdModel(staff=company_details)
                        count_for_ref_no = JournalRecievedIdModel.objects.filter(staff=company_details.id).count()
                        jn_id.pattern = pattern
                        jn_id.save()

                        # Using count_for_ref_no + 1 as the reference number
                        ref_num = int(count_for_ref_no) + 2
                        jn_id.ref_number = f'{ref_num:02}'

                        jn_id.jn_rec_number = jn_id1.jn_rec_number
                        jn_id.save()
                    else:
                        # Creating a new JournalRecievedIdModel instance
                        jn_id = JournalRecievedIdModel(staff=company_details)
                        count_for_ref_no = JournalRecievedIdModel.objects.filter(staff=company_details.id).count()
                        jn_id.pattern = pattern
                        jn_id.save()

                        # Using count_for_ref_no + 1 as the reference number
                        ref_num = int(count_for_ref_no) + 2
                        jn_id.ref_number = f'{ref_num:02}'

                        # Incrementing the jn_rec_number
                        jn_rec_num = ''.join(i for i in jn_id1.jn_rec_number if i.isdigit())
                        jn_rec_num = int(jn_rec_num)+1
                        print("#################################")
                        print(f"-----------------{jn_id1}-----------------")
                        jn_id.jn_rec_number = f'{pattern}{jn_rec_num:02}'
                        print(jn_id.jn_rec_number)
                        jn_id.save()
                        
                else:
                    # Creating a new JournalRecievedIdModel instance
                    jn_id = JournalRecievedIdModel(staff=company_details)
                    jn_id.save()

                    # Setting initial values for ref_number, pattern, and jn_rec_number
                    jn_id.ref_number = f'{2:02}'

                    pattern = ''.join(i for i in journal_no if not i.isdigit())
                    jn_id.pattern = pattern
                    jn_id.jn_rec_number = f'{pattern}{2:02}'
                    jn_id.save()
                
                jn_id.user = request.session['login_id']
                jn_id.save()
            
                if not is_valid:
                    return redirect('add_journal')
                else:
                    return redirect('manual_journal')
                
            context = {
                 'log_id':log_id,
                 'log_details':log_details,
                'details':company_details,
                'allmodules': allmodules,
                'reference_no': reference_no,
                 'last':last,
                 'jour':jour,
                 'accounts':accounts,
                 'customers':customer,
                 'employees':employee,
                 'vendors':vendor,
                 'company':comp,
            }

    return render(request, 'zohomodules/manual_journal/add_journal.html',context)


def journal_overview(request, journal_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        journal = Journal.objects.filter(company=dash_details)
        jour = get_object_or_404(Journal, id=journal_id)
        #journal_entries = JournalEntry.objects.filter(journal__in=journal,company=dash_details)
        journal_entries = JournalEntry.objects.filter(journal=jour)
        
        comments = JournalComment.objects.filter(journal=jour)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'journal_no':
            journal = journal.order_by('journal_no')
        elif sort_option == 'total_debit':
            journal = journal.order_by('total_debit')

        if filter_option == 'save':
            journal = journal.filter(status='save')
        elif filter_option == 'draft':
            journal = journal.filter(status='draft')
        transaction_history = JournalTransactionHistory.objects.filter(journal=jour)
        #items = PriceListItem.objects.filter(company=dash_details, price_list=price_list)
        latest_transaction =JournalTransactionHistory.objects.filter(journal=jour)

        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'jour': jour,
            'journal_entries':journal_entries,
            'comments': comments,
            'sort_option': sort_option,
            'filter_option': filter_option,
            'latest_transaction': latest_transaction,
            'transaction_history': transaction_history,
            #'items':items,
        }
        return render(request,'zohomodules/manual_journal/journal_list.html',context)
    
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        journal = Journal.objects.filter(staff=dash_details)
        jour = get_object_or_404(Journal, id=journal_id)
        journal_entries = JournalEntry.objects.filter(journal=jour)
        comments = JournalComment.objects.filter(journal=jour)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        sort_option = request.GET.get('sort', 'all')  
        filter_option = request.GET.get('filter', 'all')
        if sort_option == 'journal_no':
            journal = journal.order_by('journal_no')
        elif sort_option == 'total_debit':
            journal = journal.order_by('total_debit')

        if filter_option == 'save':
            journal = journal.filter(status='save')
        elif filter_option == 'draft':
            journal = journal.filter(status='draft')
        transaction_history = JournalTransactionHistory.objects.filter(journal=jour)
        #items = PriceListItem.objects.filter(company=dash_details.company, price_list=price_list)
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'comments': comments,
            'jour': jour,
            'journal_entries':journal_entries,
            'sort_option': sort_option,
            'filter_option': filter_option,
            'transaction_history': transaction_history,
            #'items':items,
        }
        return render(request,'zohomodules/manual_journal/journal_list.html',context)
    
    
def update_journal_status(request,id):
    jo=Journal.objects.get(id=id)
    jo.status = "save"
    jo.save()
    return redirect('journal_overview', id)


def delete_journal(request, journal_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        
        journal = Journal.objects.filter(company=dash_details)
        jour = get_object_or_404(Journal, id=journal_id)
        journal_entries = JournalEntry.objects.filter(journal=jour)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        jour.delete()
        context={
            'details':dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'jour': jour,
            'journal_entries':journal_entries,
        }
        return render(request,'zohomodules/manual_journal/manual_journal.html',context)
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        journal = Journal.objects.filter(staff=dash_details)
        jour = get_object_or_404(Journal, id=journal_id)
        journal_entries = JournalEntry.objects.filter(journal=jour)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        jour.delete()
        context={
            'details':dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'jour': jour,
            'journal_entries':journal_entries,
        }
        return render(request,'zohomodules/manual_journal/manual_journal.html',context)
    

def add_journal_comment(request, journal_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        journal = get_object_or_404(Journal, id=journal_id, company=dash_details)
        if request.method == 'POST':
            comment = request.POST.get('comment_text')
            JournalComment.objects.create(
                company=dash_details,
                login_details=log_details,
                journal=journal,
                comment=comment
            )
            
        return redirect('journal_overview', journal_id=journal_id)
    if log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        journal = get_object_or_404(Journal, id=journal_id, staff=dash_details)
        if request.method == 'POST':
            comment = request.POST.get('comment_text')
            JournalComment.objects.create(
                staff=dash_details,
                login_details=log_details,
                journal=journal,
                comment=comment
            )
        return redirect('journal_overview', journal_id=journal_id)


def delete_journal_comment(request, id):
    if 'login_id' not in request.session:
        return redirect('/')
    cmt = JournalComment.objects.get(id=id)
    jnId = cmt.journal.id  # Corrected from cmt.invoice.id to cmt.journal.id
    cmt.delete()
    return redirect('journal_overview', journal_id=jnId)  # Corrected from jnId to journal_id=jnId

def create_account_jour(request):                                                                #new by tinto mt
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            account=Chart_of_Accounts.objects.all()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.logindetails=log_user
            b.action="Created"
            b.Date=date.today()
            a.login_details=log_user
            a.company=c
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number2",None)
            a.account_description = request.POST['description']
            if a.account_type=="Other Current Assets":

                a.sub_account = request.POST.get("sub_account",None)
                a.parent_account = request.POST.get("parent_account",None)
               

            if a.account_type=="Cash":
             
                a.sub_account = request.POST.get("sub_account22",None)
                a.parent_account = request.POST.get("parent_account22",None)
               

            if a.account_type=="Fixed Assets":
            
                a.sub_account = request.POST.get("sub_account33",None)
                a.parent_account = request.POST.get("parent_account33",None)
               
            
            if a.account_type=="Stock":
               
                a.sub_account = request.POST.get("sub_account44",None)
                a.parent_account = request.POST.get("parent_account44",None)
             
            
            if a.account_type=="Other Current Liability":
             
                a.sub_account = request.POST.get("sub_account55",None)
                a.parent_account = request.POST.get("parent_account55",None)
               
            if a.account_type=="Long Term Liability":
            
                a.sub_account = request.POST.get("sub_account66",None)
                a.parent_account = request.POST.get("parent_account66",None)
              
            
            if a.account_type=="Other Liability":
              
                a.sub_account = request.POST.get("sub_account77",None)
                a.parent_account = request.POST.get("parent_account77",None)
              
            if a.account_type=="Equity":
            
                a.sub_account = request.POST.get("sub_account88",None)
                a.parent_account = request.POST.get("parent_account88",None)
            
            
            if a.account_type=="Income":
             
                a.sub_account = request.POST.get("sub_account99",None)
                a.parent_account = request.POST.get("parent_account99",None)
              
            
            if a.account_type=="Expense":
             
                a.sub_account = request.POST.get("sub_account100",None)
                a.parent_account = request.POST.get("parent_account100",None)
              
            if a.account_type=="Cost Of Goods Sold":
              
                a.sub_account = request.POST.get("sub_account111",None)
                a.parent_account = request.POST.get("parent_account111",None)
             
            if a.account_type=="Other Expense":
             
                a.sub_account = request.POST.get("sub_account222",None)
                a.parent_account = request.POST.get("parent_account222",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
       

            
    
            a.Create_status="active"
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=c).exists():
                error='yes'
                messages.error(request,'Account with same name exsits !!!')
                return redirect('add_journal')
            else:
                a.save()
                t=Chart_of_Accounts.objects.get(id=a.id)
                b.chart_of_accounts=t
                b.save()
                return redirect('add_journal')
    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number2",None)
            a.account_description = request.POST['description']
            account_type=request.POST.get("account_type",None)
            if a.account_type=="Other Current Assets":

                a.sub_account = request.POST.get("sub_account",None)
                a.parent_account = request.POST.get("parent_account",None)
               

            if a.account_type=="Cash":
             
                a.sub_account = request.POST.get("sub_account22",None)
                a.parent_account = request.POST.get("parent_account22",None)
               

            if a.account_type=="Fixed Assets":
            
                a.sub_account = request.POST.get("sub_account33",None)
                a.parent_account = request.POST.get("parent_account33",None)
               
            
            if a.account_type=="Stock":
               
                a.sub_account = request.POST.get("sub_account44",None)
                a.parent_account = request.POST.get("parent_account44",None)
             
            
            if a.account_type=="Other Current Liability":
             
                a.sub_account = request.POST.get("sub_account55",None)
                a.parent_account = request.POST.get("parent_account55",None)
               
            if a.account_type=="Long Term Liability":
            
                a.sub_account = request.POST.get("sub_account66",None)
                a.parent_account = request.POST.get("parent_account66",None)
              
            
            if a.account_type=="Other Liability":
              
                a.sub_account = request.POST.get("sub_account77",None)
                a.parent_account = request.POST.get("parent_account77",None)
              
            if a.account_type=="Equity":
            
                a.sub_account = request.POST.get("sub_account88",None)
                a.parent_account = request.POST.get("parent_account88",None)
            
            
            if a.account_type=="Income":
             
                a.sub_account = request.POST.get("sub_account99",None)
                a.parent_account = request.POST.get("parent_account99",None)
              
            
            if a.account_type=="Expense":
             
                a.sub_account = request.POST.get("sub_account100",None)
                a.parent_account = request.POST.get("parent_account100",None)
              
            if a.account_type=="Cost Of Goods Sold":
              
                a.sub_account = request.POST.get("sub_account111",None)
                a.parent_account = request.POST.get("parent_account111",None)
             
            if a.account_type=="Other Expense":
             
                a.sub_account = request.POST.get("sub_account222",None)
                a.parent_account = request.POST.get("parent_account222",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
       
    
            a.Create_status="active"
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=c).exists():
                error='yes'
                messages.error(request,'Account with same name exsits')
                return redirect('add_journal')
            else:
                a.save()
                t=Chart_of_Accounts.objects.get(id=a.id)
                b.chart_of_accounts=t
                b.save()
                return redirect('add_journal')

    return redirect('add_journal')

def edit_journal(request, journal_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        allmodules = ZohoModules.objects.get(company=dash_details, status='New')
        journal = Journal.objects.filter(company=dash_details, id=journal_id).first()
        journal_entries = JournalEntry.objects.filter(journal=journal)
        employee = payroll_employee.objects.filter(company=dash_details)
        customer = Customer.objects.filter(company=dash_details)
        vendor= Vendor.objects.filter(company=dash_details)
        account = Chart_of_Accounts.objects.filter(company=dash_details)

        if request.method == 'POST':
            date = request.POST.get('date')
            journal_no = request.POST.get('journal_no')
            notes = request.POST.get('notes')
            currency = request.POST.get('currency')
            cash_journal = request.POST.get('cash_journal') == 'True'

            journal.date = date
            journal.journal_no = journal_no
            journal.notes = notes
            journal.currency = currency
            journal.cash_journal = cash_journal

            # Handle attachment
            new_attachment = request.FILES.get('attachment')
            if new_attachment:
                journal.attachment = new_attachment

            journal.save()

            # Clear existing entries and add new ones
            JournalEntry.objects.filter(journal=journal).delete()

            account_list = request.POST.getlist('account')
            description_list = request.POST.getlist('description')
            contact_list = request.POST.getlist('contact')
            debits_list = request.POST.getlist('debits')
            credits_list = request.POST.getlist('credits')

            total_debit = 0
            total_credit = 0

            for i in range(len(account_list)):
                account = account_list[i]
                description = description_list[i]
                contact = contact_list[i]
                debits = debits_list[i]
                credits = credits_list[i]

                journal_entry = JournalEntry(
                    journal=journal,
                    account=account,
                    description=description,
                    contact=contact,
                    debits=debits,
                    credits=credits
                )
                journal_entry.save()

                total_debit += float(debits) if debits else 0
                total_credit += float(credits) if credits else 0

            difference = total_debit - total_credit

            journal.total_debit = total_debit
            journal.total_credit = total_credit
            journal.difference = difference
            journal.save()

            # Create transaction history
            JournalTransactionHistory.objects.create(
                company=dash_details,
                login_details=log_details,
                journal=journal,
                action='Edited',
            )

            return redirect('journal_overview', journal_id=journal_id)

        context = {
            'log_details': log_details,
            'details': dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'journal_entries': journal_entries,
            'accounts': account,
            'employees': employee,
            'customers': customer,
            'vendors':vendor,
        }
        return render(request, 'zohomodules/manual_journal/edit_journal.html', context)
    elif log_details.user_type == "Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
        journal = Journal.objects.filter(staff=dash_details, id=journal_id).first()
        journal_entries = JournalEntry.objects.filter(journal=journal)
        accounts = Chart_of_Accounts.objects.filter(company=dash_details.company)
        customer = Customer.objects.filter(company=dash_details.company)
        employee = payroll_employee.objects.filter(company=dash_details.company)
        vendor = Vendor.objects.filter(company=dash_details.company)

        if request.method == 'POST':
            date = request.POST.get('date')
            journal_no = request.POST.get('journal_no')
            notes = request.POST.get('notes')
            currency = request.POST.get('currency')
            cash_journal = request.POST.get('cash_journal') == 'True'

            journal.date = date
            journal.journal_no = journal_no
            journal.notes = notes
            journal.currency = currency
            journal.journal_type = cash_journal

            new_attachment = request.FILES.get('attachment')
            if new_attachment:
                journal.attachment = new_attachment

            journal.save()

            # Clear existing entries and add new ones
            JournalEntry.objects.filter(journal=journal).delete()

            account_list = request.POST.getlist('account')
            description_list = request.POST.getlist('description')
            contact_list = request.POST.getlist('contact')
            debits_list = request.POST.getlist('debits')
            credits_list = request.POST.getlist('credits')

            total_debit = 0
            total_credit = 0

            for i in range(len(account_list)):
                account = account_list[i]
                description = description_list[i]
                contact = contact_list[i]
                debits = debits_list[i]
                credits = credits_list[i]

                journal_entry = JournalEntry(
                    journal=journal,
                    account=account,
                    description=description,
                    contact=contact,
                    debits=debits,
                    credits=credits
                )
                journal_entry.save()

                total_debit += float(debits) if debits else 0
                total_credit += float(credits) if credits else 0

            debit_difference = total_debit - total_credit
            credit_difference = total_credit - total_debit

            journal.total_debit = total_debit
            journal.total_credit = total_credit
            journal.debit_difference = debit_difference
            journal.credit_difference = credit_difference

            journal.save()

            # Create transaction history
            JournalTransactionHistory.objects.create(
                staff=dash_details,
                login_details=log_details,
                journal=journal,
                action='Edited',
            )

            return redirect('journal_overview', journal_id=journal_id)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'journal': journal,
            'journal_entries': journal_entries,
            'accounts': accounts,
            'customers': customer,
            'employees': employee,
            'vendors':vendor,
        }
        return render(request, 'zohomodules/manual_journal/edit_journal.html', context)

def email_journal(request,journal_id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        journal = Journal.objects.get(id=journal_id)
        journal_entry = JournalEntry.objects.filter( journal=journal)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'journal':journal, 'journal_entry':journal_entry,'cmp':com}
                template_path = 'zohomodules/manual_journal/pdf_journal.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Journal_{journal.journal_no}'
                subject = f"Journal_{journal.journal_no}"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Journal . JOURNAL-{journal.journal_no}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Journal details has been shared via email successfully..!')
                return redirect(journal_overview,journal_id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(journal_overview,journal_id)

def journal_pdf(request, journal_id):
    try:
        journal = Journal.objects.get(id=journal_id)
        journal_entry = JournalEntry.objects.filter(journal=journal)

        context = {
            'journal': journal,
            'journal_entry': journal_entry
        }

        template_path = 'zohomodules/manual_journal/pdf_journal.html'
        template = get_template(template_path)
        html = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
        pdf = result.getvalue()
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="{journal}_Details.pdf"'
        response.write(pdf)
        return response
    except Exception as e:
        print(e)
        messages.error(request, f'{e}')
        return redirect('manual_journal')

def downloadJournalSampleImportFile(request):                                                                  
    estimate_table_data = [['JOURNAL_NO','REFERENCE_NO','NOTES','CURRENCY','JOURNAL_TYPE','TOTAL_DEBIT','TOTAL_CREDIT','DEBIT_DIFFERENCE','CREDIT_DIFFERENCE','STATUS']]      
    wb = Workbook()
    sheet1 = wb.active
    sheet1.title = 'Sheet1'
    

    # Populate the sheets with data
    for row in estimate_table_data:
        sheet1.append(row)  
    
    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=journal_sample_file.xlsx'
     # Save the workbook to the response
    wb.save(response)
    return response

def downloadAccountSampleImportFile(request):                                                                  
    estimate_table_data = [['ACCOUNT','DESCRIPTION','CONTACT','DEBITS','CREDITS']]      
    wb = Workbook()
    sheet1 = wb.active
    sheet1.title = 'Sheet1'
    

    # Populate the sheets with data
    for row in estimate_table_data:
        sheet1.append(row)  
    
    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=journalaccount_sample_file.xlsx'
     # Save the workbook to the response
    wb.save(response)
    return response
    
#End

# staff invoice section
def invoice_list_out(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
       

        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)


        return render(request,'staff/invoicelist.html',{'allmodules':allmodules,'data':log_details,'details':dash_details,'invoices':invoices})
    else:
       return redirect('/')
   
def view(request,pk):
       if 'login_id' in request.session:
           log_id = request.session['login_id']
           if 'login_id' not in request.session:
               return redirect('/')
           log_details= LoginDetails.objects.get(id=log_id)
          
           
   
           if log_details.user_type == 'Staff':
                   staff = StaffDetails.objects.get(login_details=log_details)
                   company = staff.company
                   allmodules=ZohoModules.objects.get(company=staff.company)
                   dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                       
           elif log_details.user_type == 'Company':
                   company = CompanyDetails.objects.get(login_details=log_details)
                   dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
   
                   allmodules= ZohoModules.objects.get(company=company,status='New')
           invoices = invoice.objects.filter(company = company)
   
      
           inv = invoice.objects.get(id = pk)
           cmt = invoicecomments.objects.filter(invoice = inv)
           hist =invoiceHistory.objects.filter( invoice = inv).last()
           histo =invoiceHistory.objects.filter( invoice = inv)
   
           invItems = invoiceitems.objects.filter( invoice = inv)
           created = invoiceHistory.objects.filter( invoice = inv,  action = 'Created')
           price_lists=PriceList.objects.filter(company=company,status='Active')
   
           
           return render(request,'staff/invoice.html',{'allmodules':allmodules,'com':company,'cmp':company, 'data':log_details, 'details': dash_details,'invoice':inv,'invoices':invoices,'invItems':invItems, 'comments':cmt,'history':hist,'historys':histo,  'created':created,'price_lists':price_lists})
       else:
          return redirect('/')

def convertInvoice(request,id):
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Staff':
                    staff = StaffDetails.objects.get(login_details=log_details)
                    company = staff.company
                    allmodules=ZohoModules.objects.get(company=staff.company)
                    dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                        
            elif log_details.user_type == 'Company':
                    company = CompanyDetails.objects.get(login_details=log_details)
                    dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)
    
                    allmodules= ZohoModules.objects.get(company=company,status='New')
            invoices = invoice.objects.filter(company = company)
    
    
    
            inv = invoice.objects.get(id = id)
            inv.status = 'Saved'
            inv.save()
            return redirect(view,id)
    
def add_attach(request,id):
    if request.method == 'POST' and request.FILES.get('file'):
        inv = invoice.objects.get(id=id)
        inv.document = request.FILES['file']
        print("success")

        inv.save()

        
        return redirect(view, id)
    
def invoicePdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)


        
        inv = invoice.objects.get(id = id)
        itms = invoiceitems.objects.filter(invoice = inv)
    
        context = {'invoice':inv, 'invItems':itms,'cmp':company}
        
        template_path = 'staff/invoice_Pdf.html'
        fname = 'Invoice_'+inv.invoice_number
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('view')
    
def InvoiceHistory(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)

        inv = invoice.objects.get(id = id)
        his = invoiceHistory.objects.filter(invoice = inv)
       
        
        return render(request,'staff/invoice_History.html',{'allmodules':allmodules,'com':company,'data':log_details,'history':his, 'invoice':inv})
    else:
       return redirect('/')
       
def deleteInvoice(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)

        inv = invoice.objects.get( id = id)


  

        for i in invoiceitems.objects.filter(invoice = inv):
            item = Items.objects.get(id = i.Items.id)
            print(item)
            item.current_stock += i.quantity
            item.save()
        
        invoiceitems.objects.filter(invoice = inv).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if invoiceReference.objects.filter(company = company).exists():
            deleted = invoiceReference.objects.get(company = company)
            if int(inv.reference_number) > int(deleted.reference_number):
                deleted.reference_number = inv.reference_number
                deleted.save()
        else:
            invoiceReference.objects.create(company = company, reference_number = inv.reference_number)
        
        inv.delete()
        return redirect(invoice_list_out)
        
def editInvoice(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        invoices = invoice.objects.get(id = id)
        invItems = invoiceitems.objects.filter(invoice = invoices)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'units': units,'accounts':accounts, 'invoice':invoices, 'invItems': invItems,
        }
    
        
        return render(request,'staff/edit_invoice.html',context)
    else:
       return redirect('/')
       
def updateInvoice(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        inv = invoice.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if inv.invoice_number != invNum and invoice.objects.filter(company = com, invoice_number__iexact = invNum).exists():

                res = f'<script>alert(" Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv.customer = Customer.objects.get(id = request.POST['customerId'])
            inv.customer_email = request.POST['customer_email']
            inv.customer_billingaddress = request.POST['bill_address']
            inv.customer_GSTtype = request.POST['customer_gst_type']
            y=request.POST['customer_gst_type']
            print(y)
            inv.customer_GSTnumber = request.POST['customer_gstin']
            inv.customer_place_of_supply = request.POST['place_of_supply']
            x=request.POST['place_of_supply']
            print(x)
           
            inv.reference_number = request.POST['reference_number']
            inv.invoice_number = invNum
            inv.payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term'])
            inv.date = request.POST['start_date']
            inv.expiration_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date()
            # inv.order_no = request.POST['order_number']
            inv.price_list_applied = True if 'priceList' in request.POST else False
            inv.price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id'])
            # inv.repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every'])
            inv.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            inv.cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            inv.UPI_number = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            inv.bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            inv.sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            inv.IGST = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            inv.CGST = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            inv.SGST = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            inv.grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            inv.advanced_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            inv.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            inv.description = request.POST['note']
            inv.terms_and_condition = request.POST['terms']

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()


            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            inv_items = invoiceitems.objects.filter(invoice = inv)
            object_ids = [obj.id for obj in inv_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
            for itmId in ids_to_delete:
                invItem = invoiceitems.objects.get(id = itmId)
                item = Items.objects.get(id = invItem.item.id)
                item.current_stock += invItem.quantity
                item.save()

            invoiceitems.objects.filter(id__in=ids_to_delete).delete()
            
            count = invoiceitems.objects.filter(invoice = inv).count()

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total,invItem_ids)
                mapped = list(mapped)
                for ele in mapped:
                    if int(len(itemId))>int(count):
                        if ele[8] == 0:
                            itm = Items.objects.get(id = int(ele[0]))
                            invoiceitems.objects.create(company = com, logindetails = com.login_details, invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                            itm.current_stock -= int(ele[3])
                            itm.save()
                        else:
                            itm = Items.objects.get(id = int(ele[0]))
                            inItm = invoiceitems.objects.get(id = int(ele[8]))
                            crQty = int(inItm.quantity)
                            
                            invoiceitems.objects.filter( id = int(ele[8])).update(invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                            if crQty < int(ele[3]):
                                itm.current_stock -=  abs(crQty - int(ele[3]))
                            elif crQty > int(ele[3]):
                                itm.current_stock += abs(crQty - int(ele[3]))
                            itm.save()
                    else:
                        itm = Items.objects.get(id = int(ele[0]))
                        inItm = invoiceitems.objects.get(id = int(ele[8]))
                        crQty = int(inItm.quantity)

                        invoiceitems.objects.filter( id = int(ele[8])).update(invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                        if crQty < int(ele[3]):
                            itm.current_stock -=  abs(crQty - int(ele[3]))
                        elif crQty > int(ele[3]):
                            itm.current_stock += abs(crQty - int(ele[3]))
                        itm.save()
            
            # Save transaction
                    
            invoiceHistory.objects.create(
                company = com,
                login_details = com.login_details,
                invoice = inv,
                action = 'Edited'
            )

            return redirect(view, id)
        else:
            return redirect(editInvoice, id)
    else:
       return redirect('/')
       
def filter_invoice_name(request, pk):
    if 'login_id' not in request.session:
                return redirect('/')
    log_id = request.session['login_id']

    log_details= LoginDetails.objects.get(id=log_id)
    dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
    allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)
    cmp =dash_details.company


    if log_details.user_type == 'Staff':
        staff = StaffDetails.objects.get(login_details=log_details)
        company = staff.company
    elif log_details.user_type == 'Company':
        company = CompanyDetails.objects.get(login_details=log_details)
    
    try:
        invoic = invoice.objects.get(id=pk)
        item = invoiceitems.objects.filter(invoice=pk)
        customers = Customer.objects.filter(company_id=company, customer_status='Active')
        print(customers)
        cmt = invoicecomments.objects.filter(invoice = invoic)
        hist =invoiceHistory.objects.filter( invoice = invoic).last()
        histo =invoiceHistory.objects.filter( invoice = invoic)

        invItems = invoiceitems.objects.filter( invoice = invoic)
        created = invoiceHistory.objects.filter( invoice = invoic,  action = 'Created')


        for r in customers:
            vn = r.first_name.split()[1:]
            r.cust_name = " ".join(vn)

        sorted_customers = sorted(customers, key=lambda r: r.cust_name)
        print(sorted_customers)
        for customer in sorted_customers:
            print(customer.first_name)  # Assuming you have a field named 'cust_name'


        context = {
            'allmodules':allmodules,
            'com':company,
            'data':log_details, 
            'details': dash_details,
            'invoices': sorted_customers,
            'invoice': invoic,
            'invItems': invItems,
            'company': company,
            'comments':cmt,
            'history':hist,
            'historys':histo, 
            'created':created,
            'cmp':cmp
        }
        return render(request, 'staff/invoice.html', context)
    
    except invoice.DoesNotExist:
        return redirect('/')
        
def filter_invoice_number(request, pk):
    if 'login_id' not in request.session:
        return redirect('/')
    log_id = request.session['login_id']

    log_details= LoginDetails.objects.get(id=log_id)
    dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
    allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == 'Staff':
        staff = StaffDetails.objects.get(login_details=log_details)
        company = staff.company
    elif log_details.user_type == 'Company':
        company = CompanyDetails.objects.get(login_details=log_details)
    
    try:
        invoic = invoice.objects.get(id=pk)
        item = invoiceitems.objects.filter(invoice=pk)
        invoices = invoice.objects.filter(company=company)
        
        for r in invoices:
            vn = r.invoice_number.split()[1:]  # accessing attributes using dot notation
            r.cust_no = " ".join(vn)

        sorted_invoices = sorted(invoices, key=lambda r: r.cust_no)
        for customer in sorted_invoices:
            print(customer.invoice_number) 
        

        context = {
             'allmodules':allmodules,
            'com':company,
            'data':log_details, 
            'details': dash_details,
            'invoices': sorted_invoices,
            'invoice': invoic,
            'item': item,
            'company': company,
        }
        return render(request, 'staff/invoice.html', context)
    
    except invoice.DoesNotExist:
        return redirect('/')  
        
def addInvoiceComment(request, id):
    if 'login_id' not in request.session:
        return redirect('/')
    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
            com = CompanyDetails.objects.get(login_details=log_details)
    else:
            cmp = StaffDetails.objects.get(login_details=log_details)
            com = cmp.company

            

    inv = invoice.objects.get(id = id)
    if request.method == "POST":
            cmt = request.POST['comment'].strip()

            invoicecomments.objects.create(company = com, invoice = inv, comments = cmt)
            return redirect(view, id)
    return redirect(view, id)
    
def deleteInvoiceComment(request,id):
    if 'login_id' not in request.session:
        return redirect('/')
    print(id)
    cmt = invoicecomments.objects.get(id = id)
    invId = cmt.invoice.id
    cmt.delete()

    return redirect(view,invId)

def shareInvoiceToEmail(request,id):
    if 'login_id' not in request.session:
        return redirect('/')
    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == 'Staff':
        staff = StaffDetails.objects.get(login_details=log_details)
        company = staff.company
    elif log_details.user_type == 'Company':
        company = CompanyDetails.objects.get(login_details=log_details)
        
    inv = invoice.objects.get(id = id)
    itms = invoiceitems.objects.filter(invoice = inv)
    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            
        
            context = {'invoice':inv, 'invItems':itms,'cmp':company}
            template_path = 'staff/invoice_pdf.html'
            template = get_template(template_path)

            

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Invoice_{inv.invoice_number}'
            subject = f"Invoice_{inv.invoice_number}"

            email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached Invoice for - INVOICE-{inv.invoice_number}. \n{email_message}\n\n--\nRegards,\n{company.company_name}\n{company.address}\n{company.state} - {company.country}\n{company.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Invoice details has been shared via email successfully..!')
            return redirect(view,id)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(view, id)
            
def filter_invoice_draft(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)
        invo=invoice.objects.filter(status='draft',company = company)
        invoic=invoice.objects.get(id=pk)
        item=invoiceitems.objects.filter(invoice=pk)

        context={'invoices':invo,'invoice':invoic,'item':item}
        return render(request,'staff/invoice.html',context)
    
    
def filter_invoice_sent(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)
        invo=invoice.objects.filter(status='saved',company = company)
        invoic=invoice.objects.get(id=pk)
        item=invoiceitems.objects.filter(invoice=pk)

        context={'invoices':invo,'invoice':invoic,'item':item}
        return render(request,'staff/invoice.html',context)  
    
def invoice_create(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)
        customers=Customer.objects.all()
        item=Items.objects.all()
        payments=Company_Payment_Term.objects.all()
        i = invoice.objects.all()
        acc = Chart_of_Accounts.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold')).order_by('account_name')


        if invoice.objects.all().exists():
            invoice_count = invoice.objects.last().id
            count = invoice_count
        else:
            count = 1



       
        context={
            'details':dash_details,
            'allmodules': allmodules,
            'customers':customers,
            'item':item,
            'payments':payments,
            'count': count,
            'i':i,
            'accounts':acc,
            'company':company,
            


            
        }
        return render(request,'staff/invoice.html',context)   
    
def invoice_createpage(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = invoice.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_number) + 1 if latest_inv else 1

        if invoiceReference.objects.filter(company = cmp).exists():
            deleted = invoiceReference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = invoice.objects.filter(company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.invoice_number)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            padding_length = len(num) - 1

                    
            nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
        else:
            nxtInv = 'in-01'
        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'invNo':nxtInv, 'ref_no':new_number,'units': units,'accounts':accounts,
        }
    
        return render(request,'staff/createinvoice.html',context)
    
def viewInvoice(request):
  
    customer_id = request.GET.get('cust')
    cust = Customer.objects.get(id=customer_id)

    try:
        id = request.GET.get('id')

        try:
            item = Items.objects.get(item_name=id)
            name = item.item_name
            rate = item.selling_price
            hsn = item.hsn_code
            avl=item.current_stock
            # Assuming `company_name` is a field in the `company_details` model
            place = cust.place_of_supply
            return JsonResponse({"status": "not", 'place': place, 'rate': rate, 'avl':avl ,'hsn': hsn})
        except Items.DoesNotExist:
            return JsonResponse({"status": "error", 'message': "Item not found"})
    except Exception as e:
        return JsonResponse({"status": "error", 'message': str(e)})
        
def customerdata(request):
    customer_id = request.GET.get('id')
    print(customer_id)
    cust = Customer.objects.get(id=customer_id)
    data7 = {'email': cust.customer_email,'gst':cust.GST_treatement,'gstin':cust.GST_number}
    
    return JsonResponse(data7)
    
def getinvItemDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
        priceListId = request.GET['listId']
        item = Items.objects.filter(company = cmp, item_name = itemName).first()

        if priceListId != "":
            priceList = PriceList.objects.get(id = int(priceListId))

            if priceList.item_rate_type == 'Each Item':
                try:
                    priceListPrice = float(PriceListItem.objects.get(company = cmp, price_list = priceList, item = item).custom_rate)
                except:
                    priceListPrice = item.selling_price
            else:
                mark = priceList.percentage_type
                percentage = float(priceList.percentage_value)
                roundOff = priceList.round_off

                if mark == 'Markup':
                    price = float(item.selling_price) + float((item.selling_price) * (percentage/100))
                else:
                    price = float(item.selling_price) - float((item.selling_price) * (percentage/100))

                if priceList.round_off != 'Never Mind':
                    if roundOff == 'Nearest Whole Number':
                        finalPrice = round(price)
                    else:
                        finalPrice = int(price) + float(roundOff)
                else:
                    finalPrice = price

                priceListPrice = finalPrice
        else:
            priceListPrice = None

        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,
            'PLPrice':priceListPrice,

        }
        return JsonResponse(context)
    else:
       return redirect('/')
        
def getBankAccount(request):
  
        
       bankId = request.GET['id']
       bnk = Banking.objects.get(id = bankId)

       if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
       else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
            
def createInvoice(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if invoice.objects.filter(company = com, invoice_number__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = invoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                customer_billingaddress = request.POST['bill_address'],
                customer_GSTtype = request.POST['customer_gst_type'],
                customer_GSTnumber = request.POST['customer_gstin'],
                customer_place_of_supply = request.POST['place_of_supply'],
               
                reference_number = request.POST['reference_number'],
                invoice_number = invNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                date = request.POST['start_date'],
                expiration_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                # Order_number = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                UPI_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                IGST = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                CGST = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                SGST = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advanced_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_condition = request.POST['terms']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    invoiceitems.objects.create(company = com, logindetails = com.login_details, invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            invoiceHistory.objects.create(
                company = com,
                login_details = com.login_details,
                invoice = inv,
                action = 'Created'
            )

            return redirect(invoice_list_out)
        else:
            return redirect(createInvoice)
    else:
       return redirect('/')
   
def invoice_import(request):
    if request.method == 'POST' and 'file' in request.FILES:
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)

            if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                    
            elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)

            excel_file = request.FILES['file']
            workbook = load_workbook(excel_file)
            
            sheet1 = workbook['Sheet1']
            sheet2 = workbook['Sheet2']
            
            invoices = []  # List to store created invoices

            for row in sheet1.iter_rows(min_row=2, values_only=True):
                try:
                    customer = Customer.objects.get(first_name=row[1],customer_email=row[2],company=company)
                    payment_terms1 = Company_Payment_Term.objects.get(term_name=row[9], company=company)
                    print(payment_terms1)
                except ObjectDoesNotExist:
                    print(f"Customer with name or email '{row[1]}' or Payment term with term name '{row[9]}' does not exist in the database.")
                    continue
                
                # Create and save the invoice object
                latest_inv = invoice.objects.filter(company_id = company).order_by('-id').first()

                new_number = int(latest_inv.reference_number) + 1 if latest_inv else 1

                if invoiceReference.objects.filter(company_id = company).exists():
                    deleted = invoiceReference.objects.get(company_id = company)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                created_invoice = invoice(
                    company=company,
                    login_details=log_details,
                    customer=customer,
                    payment_terms=payment_terms1,
                    customer_email=row[2],
                    customer_billingaddress=row[3],
                    customer_GSTtype=row[4],
                    customer_GSTnumber=row[5],
                    customer_place_of_supply=row[6],
                    invoice_number=row[0],
                    date=row[8],
                    expiration_date=row[10],
                    payment_method=row[12],
                    cheque_number=row[13],
                    UPI_number=row[14],
                    bank_account_number=row[15],
                    sub_total=row[19],
                    CGST=row[20],
                    SGST=row[21],
                    IGST=row[29],

                    
                    tax_amount=row[22],
                    shipping_charge=row[23],
                    grand_total=row[25],
                    advanced_paid=row[26],
                    balance=row[27],
                    description=row[16],
                    status=row[28],
                    reference_number=new_number

                )
               
                created_invoice.save()
                invoices.append(created_invoice)
                
                # Save invoice history
                invoiceHistory.objects.create(
                    company=company,
                    login_details=log_details,
                    invoice=created_invoice,
                    date=datetime.now(),
                    action='Created'
                )
        
            for row in sheet2.iter_rows(min_row=2, values_only=True):
                try:
                    item = Items.objects.get(item_name=row[1],company=company)
                except ObjectDoesNotExist:
                    print(f"Item with name '{row[1]}' does not exist in the database.")
                    continue
                
                matching_invoices = [inv for inv in invoices if inv.invoice_number == row[0]]
                if not matching_invoices:
                    print(f"No invoice found for row with invoice number '{row[0]}'")
                    continue

                # Assuming there's only one matching invoice
                invoice1 = matching_invoices[0]

                # Create and save the invoice item object
                invoice_item = invoiceitems(
                    invoice=invoice1,
                    company=company,
                    Items=item,
                    logindetails=log_details,
                    hsn=row[2],
                    quantity=row[3],
                    price=row[4],
                    tax_rate=row[5],
                    discount=row[6],
                    total=row[7],
                )
                invoice_item.save()
                
                # Update current stock for the item
                item.current_stock -= int(row[3])
                item.save()

            return redirect('invoice_list_out')

    return HttpResponse("No file uploaded or invalid request method")

def checkInvoiceNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = invoice.objects.filter(company = com).last()

        if lastInv:
            inv_no = str(lastInv.invoice_number)

            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j            


            inv_num = int(num)+1
           

            
            padding_length = len(num) - 1

                    
            nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
            print(nxtInv)
            

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j
            print("patern")
            print(pattern)


        # pattern_exists = checkRecInvNumberPattern(pattern)

        # if pattern !="" and pattern_exists:
        #     return JsonResponse({'status':False, 'message':'Rec. Invoice No. Pattern already Exists.!'})
        if invoice.objects.filter(company = com, invoice_number__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Invoice No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')
    

def getInvoiceCustomerData(request):
   
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            
                list = False
                listId = None
                listName = None
                context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
                }
                return JsonResponse(context)
                
def invoiceoverview(request):
    if request.method == 'POST' and 'file' in request.FILES:
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)
        customers=Customer.objects.all()
        item=Items.objects.all()
        payments=Company_Payment_Term.objects.all()
        i = invoice.objects.all()

            



        
        context={
                'details':dash_details,
                'allmodules': allmodules,
                'customers':customers,
                'item':item,
                'payments':payments,
                'i':i


                
            }
        return render(request,'staff/invoice.html',context)

       
def itemdata(request):
    cur_user = request.user.id
    user = User.objects.get(id=cur_user)
    print(user)

    company = CompanyDetails.objects.get(user = user)
    print(company.state)
    id = request.GET.get('id')
    cust = request.GET.get('cust')
   
        
    item = Items.objects.get(item_name=id)
    cus=Customer.objects.get(first_name=cust)
    rate = item.selling_price
    place=company.state
    gst = item.intrastate_tax
    igst = item.interstate_tax
    desc=item.sales_description
    print(place)
    mail=cus.customer_email
    
    placeof_supply = Customer.objects.get(id=cust).place_of_supply
    print(placeof_supply)
    return JsonResponse({"status":" not",'mail':mail,'desc':desc,'place':place,'rate':rate,'pos':placeof_supply,'gst':gst,'igst':igst})
    return redirect('/')
    
def checkCustomerName(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)
        fName = request.POST['first_name']
        lName = request.POST['last_name']

        if Customer.objects.filter(company = company, first_name__iexact = fName, last_name__iexact = lName).exists():
            msg = f'{fName} {lName} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
        
def checkCustomerGSTIN(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        invoices = invoice.objects.filter(company = company)
        gstIn = request.POST['gstin']

        if Customer.objects.filter(company = company, GST_number__iexact = gstIn).exists():
            msg = f'{gstIn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
        
def checkCustomerPAN(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details)
        pan = request.POST['pan']

        if Customer.objects.filter(company = com, PAN_number__iexact = pan).exists():
            msg = f'{pan} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
        
def checkCustomerPhone(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
               
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details)
        phn = request.POST['phone']

        if Customer.objects.filter(company = com,customer_phone__iexact = phn).exists():
            msg = f'{phn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
        
def checkCustomerEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
         
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details)
        email = request.POST['email']

        if Customer.objects.filter(company = com, customer_email__iexact = email).exists():
            msg = f'{email} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
        
def newCustomerPaymentTerm(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
           
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details)
        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')

def createInvoiceCustomer(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'




            
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.remarks=request.POST['remark']

            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            # vdata=Customer.objects.get(id=customer_data.id)
            # rdata=Customer_remarks_table()
            # rdata.remarks=request.POST['remark']
            # rdata.company=com
            # rdata.customer=vdata
            # rdata.save()

        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})
        
def getCustomers(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
        
def saveItemUnit(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
           
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details) 
        if request.method == "POST":
            name = request.POST['units'].upper()
            print(name)

            if not Unit.objects.filter(company = com, unit_name__iexact = name).exists():
                unit = Unit(
                    company = com,
                    unit_name = name
                )
                unit.save()
                return JsonResponse({'status':True})
            else:
                return JsonResponse({'status':False, 'message':'Unit already exists.!'})
                
def show_unit_dropdown(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)


def show_item_dropdown(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
            
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details) 

        options = {}
        option_objects = Items.objects.filter(user = request.user)
        for option in option_objects:
            options[option.id] = [option.Name,option.id]

        return JsonResponse(options)
        
def invoice_item(request):   

    if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details= LoginDetails.objects.get(id=log_id)
                
            if log_details.user_type == 'Staff':
                    staff = StaffDetails.objects.get(login_details=log_details)
                    com = staff.company
                        
            elif log_details.user_type == 'Company':
                    com = CompanyDetails.objects.get(login_details=log_details) 
            if request.method=='POST':
                
                type=request.POST.get('type')
                
                name=request.POST.get('name')

                ut=request.POST.get('unit')
                inter=request.POST.get('inter')
                intra=request.POST.get('intra')
                sell_price=request.POST.get('sell_price')
                sell_acc=request.POST.get('sell_acc')
                sell_desc=request.POST.get('sell_desc')
                cost_price=request.POST.get('cost_price')
                cost_acc=request.POST.get('cost_acc')      
                cost_desc=request.POST.get('cost_desc')
                hsn_number = request.POST.get('hsn_number')
                stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
                stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
                print(stock)

                print(stockUnitRate)

                

                
                
                units=Unit.objects.get(id=ut)
                

                if Items.objects.filter(company=com, item_name__iexact=name).exists():
                    res = f"{name} already exists, try another!"
                    return JsonResponse({'status': False, 'message':res})
                elif Items.objects.filter(company = com, hsn_code__iexact = hsn_number).exists():
                    res = f"HSN - {hsn_number} already exists, try another.!"
                    return JsonResponse({'status': False, 'message':res})
                else:


                    item=Items(company = com,
                        login_details = log_details,
                        item_name = name,
                        item_type = type,
                        unit = units,
                        hsn_code = hsn_number,
                        intrastate_tax = intra,
                        interstate_tax = inter,
                        sales_account = sell_acc,
                        selling_price = sell_price,
                        sales_description = sell_desc,
                        purchase_account = cost_acc,
                        purchase_price = cost_price,
                        purchase_description = cost_desc,
                        # date = createdDate,
                        # inventory_account = inventory,
                        opening_stock = stock,
                        current_stock = stock,
                        
                        opening_stock_per_unit = stockUnitRate,
                        activation_tag = 'active'
        )

                item.save()
                Item_Transaction_History.objects.create(
                company = com,
                logindetails = log_details,
                items = item,
                action = 'Created'
            )
            

                return HttpResponse({"message": "success"})
    
    return HttpResponse("Invalid request method.")
    
def createInvoiceItem(request):

    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag = 'active',
                type = 'Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = com.login_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
        return redirect('/')

def getItems(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')
        
def checkAccounts(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
            
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details)

        if Chart_of_Accounts.objects.filter(company = com, account_type = request.GET['type']).exists():
            list= []
            account_objects = Chart_of_Accounts.objects.filter(company = com, account_type = request.GET['type'])

            for account in account_objects:
                accounts = {
                    'name': account.account_name,
                }
                list.append(accounts)

            return JsonResponse({'status':True,'accounts':list},safe=False)
        else:
            return JsonResponse({'status':False})
    
            
def createNewAccountFromItems(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')
#End

def check_journal_num_valid2(request):
    print(request.session['login_id'])
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
            journals = JournalRecievedIdModel.objects.filter(user=log_id)
            if not journals:
                journals = JournalRecievedIdModel.objects.filter(user=log_id)
    journal_recieved_number = request.GET['jurnal_val']  
    print(f'================== journal_recieved_number = {journal_recieved_number}  ==================')
    if journals.exists():
        last = journals.last()
        last_id = last.jn_rec_number
        print(f'================== last_id = {last_id}==================')
        if journal_recieved_number == last_id:
            data = {"valid":"valid"}
            return JsonResponse(data)
        else:
            data = {"valid":"invalid"}
            return JsonResponse(data)
    else:
        print('doesnt exist')
        data = {"valid":"valid"}
        return JsonResponse(data)
        
        
def get_loanrepayment_data(request):                                                                
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if  log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        id = request.GET.get('repaymentId2')
        print('repay')
        print(id)
            # com = Fin_Company_Details.objects.get(Login_Id = sid)
        options = {}
        option_objects = EmployeeLoanRepaymentHistory.objects.filter(repayment=id)
        print(1111)
            # for i in option_objects:
            #     print(i.action)
            #     print("s1")
        for option in option_objects:
            date=option.date
            action=option.action
            print(option.action)
            first_name=option.login_details.first_name
            last_name=option.login_details.last_name
            options[option.id] = [date,action,first_name,last_name,f"{date}"]
        return JsonResponse(options)
    elif log_details.user_type == 'Staff':
            id = request.GET.get('repaymentId2')
            # staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = EmployeeLoanRepaymentHistory.objects.filter(repayment=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.first_name
                last_name=option.login_details.last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
            return JsonResponse(options)
            
            
def get_loanaddition_data(request):                                                                 #new by tinto mt (item)
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if  log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        id = request.GET.get('additionalId2')
            # com = Fin_Company_Details.objects.get(Login_Id = sid)
        options = {}
        option_objects = EmployeeLoanRepaymentHistory.objects.filter(repayment=id)
        print(1111)
        for option in option_objects:
            date=option.date
            action=option.action
            first_name=option.login_details.first_name
            last_name=option.login_details.last_name
            options[option.id] = [date,action,first_name,last_name,f"{date}"]
        return JsonResponse(options)
    elif log_details.user_type == 'Staff':
            id = request.GET.get('additionalId2')
            # staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = EmployeeLoanRepaymentHistory.objects.filter(repayment=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.first_name
                last_name=option.login_details.last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
            
            
def add_customer_invoice(request):
   
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        

       
        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=log_details
            customer_data.company=comp_details
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type=op_type
            else:
                customer_data.opening_balance_type='Opening Balance not selected'
    
            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                 customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                 customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'
    



           
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=comp_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            # vdata=Customer.objects.get(id=customer_data.id)
            # vendor=vdata
            # rdata=Customer_remarks_table()
            # rdata.remarks=request.POST['remark']
            # rdata.company=comp_details
            # rdata.customer=vdata
            # rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = CustomerContactPersons.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=comp_details,customer=vendor)
                
        
            messages.success(request, 'Customer created successfully!')   

            return redirect('invoice_createpage')
        
        else:
            messages.error(request, 'Some error occurred !')   

            return redirect('invoice_createpage')
            
            
def create_item_invoice(request):                                                                #
    
    login_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_user = LoginDetails.objects.get(id=login_id)
    if log_user.user_type == 'Company':
        company_id = request.session['login_id']
        
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            c = CompanyDetails.objects.get(login_details=company_id)
            b.company=c
            b.Date=date.today()
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            uid=Unit.objects.get(id=unit_id)
            # unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = uid
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track = request.POST.get("trackState",None)
            track_state_value = request.POST.get("trackstate", None)

# Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0

            
            minstock=request.POST.get("minimum_stock",None)
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            a.activation_tag = 'Active'
            a.type = 'Opening Stock'
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
            a.opening_stock_per_unit = request.POST.get("rate",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if Items.objects.filter(item_name=item_name, company=c).exists():
                error='yes'
                messages.error(request,'Item with same name exsits !!!')
                return redirect('new_items')
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('new_items')
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                return redirect('invoice_createpage')
    elif log_user.user_type == 'Staff':
        staff_id = request.session['login_id']
        if request.method=='POST':
            a=Items()
            b=Item_Transaction_History()
            staff = LoginDetails.objects.get(id=staff_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c=sf.company
            b.Date=date.today()
            b.company=c
            b.logindetails=log_user
            a.login_details=log_user
            a.company=c
            a.item_type = request.POST.get("type",None)
            a.item_name = request.POST.get("name",None)
            unit_id = request.POST.get("unit")
            unit_instance = get_object_or_404(Unit, id=unit_id)
            a.unit = unit_instance
            a.hsn_code = request.POST.get("hsn",None)
            a.tax_reference = request.POST.get("radio",None)
            a.intrastate_tax = request.POST.get("intra",None)
            a.interstate_tax= request.POST.get("inter",None)
            a.selling_price = request.POST.get("sel_price",None)
            a.sales_account = request.POST.get("sel_acc",None)
            a.sales_description = request.POST.get("sel_desc",None)
            a.purchase_price = request.POST.get("cost_price",None)
            a.purchase_account = request.POST.get("cost_acc",None)
            a.purchase_description = request.POST.get("pur_desc",None)
            # track_state_value = request.POST.get("trackState", None)

            track_state_value = request.POST.get("trackstate", None)

            # Check if the checkbox is checked
            if track_state_value == "on":
                a.track_inventory = 1
            else:
                a.track_inventory = 0
            minstock=request.POST.get("minimum_stock",None)
            item_name= request.POST.get("name",None)
            hsncode=request.POST.get("hsn",None)
            
            if minstock != "":
                a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
            else:
                a.minimum_stock_to_maintain = 0
            # a.activation_tag = request.POST.get("status",None)
            a.inventory_account = request.POST.get("invacc",None)
            a.opening_stock = request.POST.get("openstock",None)
            a.current_stock=request.POST.get("openstock",None)
        
        

        
            if Items.objects.filter(item_name=item_name,company=c).exists():
                error='yes'
                messages.error(request,'Item with same name exsits !!!')
                return redirect('new_items')
            elif Items.objects.filter(hsn_code=hsncode, company=c).exists():
                error='yes'
                messages.error(request,'Item with same  hsn code exsits !!!')
                return redirect('new_items')
            else:
                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()
                return redirect('invoice_createpage')
    return redirect('invoice_createpage')
    
    
def getAllAccounts(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')
        
        
def getinvCustomerDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')
       
       
def getinvBankAccountNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        bankId = request.GET['id']
        bnk = Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')
       
       
def newinvPaymentTerm(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')
        
        
def addinv_unit(request):                                                               
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    elif log_user.user_type == 'Staff':
        if request.method == 'POST':
            staff = LoginDetails.objects.get(id=login_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c = sf.company
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    return JsonResponse({"message": "success"})
# create unit


def showinvunit_dropdown(request):                                                               
   if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)
            
            
def createNewIteminv(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag ='active',
                type ='Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = com.login_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')
       
       
def getAllItemsinv(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')
        
        
# < ------------- Shemeem -------- > Recurring Invoice < ------------------------------- >

def recurringInvoice(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        context = {
            'invoices': rec, 'allmodules':allmodules, 'details':dash_details
        }
        return render(request, 'zohomodules/recurring_invoice/recurring_invoice.html', context)
    else:
        return redirect('/')

def addRecurringInvoice(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = RecurringInvoice.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Reccurring_Invoice_Reference.objects.filter(company = cmp).exists():
            deleted = Reccurring_Invoice_Reference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = RecurringInvoice.objects.filter(company=cmp).last()

        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        else:
            nxtInv = 'RI001'
        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'invNo':nxtInv, 'ref_no':new_number,'units': units,'accounts':accounts,
        }
        return render(request, 'zohomodules/recurring_invoice/add_recurring_invoice.html', context)
    else:
        return redirect('/')

def getCustomerDetailsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None or cust.GST_number == 'null' else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def getBankAccountNumberAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        bankId = request.GET['id']
        bnk = Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def getItemDetailsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
        priceListId = request.GET['listId']
        item = Items.objects.filter(company = cmp, item_name = itemName).first()

        if priceListId != "":
            priceList = PriceList.objects.get(id = int(priceListId))

            if priceList.item_rate_type == 'Each Item':
                try:
                    priceListPrice = float(PriceListItem.objects.get(company = cmp, price_list = priceList, item = item).custom_rate)
                except:
                    priceListPrice = item.selling_price
            else:
                mark = priceList.percentage_type
                percentage = float(priceList.percentage_value)
                roundOff = priceList.round_off

                if mark == 'Markup':
                    price = float(item.selling_price) + float((item.selling_price) * (percentage/100))
                else:
                    price = float(item.selling_price) - float((item.selling_price) * (percentage/100))

                if priceList.round_off != 'Never Mind':
                    if roundOff == 'Nearest Whole Number':
                        finalPrice = round(price)
                    else:
                        finalPrice = int(price) + float(roundOff)
                else:
                    finalPrice = price

                priceListPrice = finalPrice
        else:
            priceListPrice = None

        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,
            'PLPrice':priceListPrice,

        }
        return JsonResponse(context)
    else:
       return redirect('/')

def createRecurringInvoice(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkRecInvNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Rec. Invoice No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = RecurringInvoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['customer_gst_type'],
                gstin = request.POST['customer_gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_conditions = request.POST['terms']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            RecurringInvoiceHistory.objects.create(
                company = com,
                login_details = log_details,
                recurring_invoice = inv,
                action = 'Created'
            )

            return redirect(recurringInvoice)
        else:
            return redirect(addRecurringInvoice)
    else:
       return redirect('/')

def newPaymentTermAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')

def newRepeatEveryTypeAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        dur = int(request.POST['duration'])
        type = request.POST['type']

        d = 30 if type == 'Month' else 360
        dys = dur * d
        print(dur,d,dys)
        rep_every = str(dur)+" "+type

        if not CompanyRepeatEvery.objects.filter(company = com, repeat_every__iexact = rep_every).exists():
            CompanyRepeatEvery.objects.create(company = com, repeat_every = rep_every, repeat_type = type, duration = dur, days = dys)
            
            list= []
            rep = CompanyRepeatEvery.objects.filter(company = com)

            for r in rep:
                repDict = {
                    'repeat_every': r.repeat_every,
                    'id': r.id
                }
                list.append(repDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{rep_every} already exists, try another.!'})

    else:
        return redirect('/')

def checkRecurringInvoiceNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = RecurringInvoice.objects.filter(company = com).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtInv = 'RI01'

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkRecInvNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. Pattern already Exists.!'})
        elif RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkRecInvNumberPattern(pattern):
    models = [invoice, Bill, Journal, Delivery_challan, RetainerInvoice, SaleOrder]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def newSalesCustomerAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if Customer.objects.filter(company = com, GST_number=request.POST['gst_number']).exists():
            return JsonResponse({'status':False, 'message':'GSTIN already exists'})
        elif Customer.objects.filter(company = com, PAN_number=request.POST['pan_number']).exists():
            return JsonResponse({'status':False, 'message':'PAN No. already exists'})
        elif Customer.objects.filter(company = com, customer_email=request.POST['vendor_email']).exists():
            return JsonResponse({'status':False, 'message':'Email already exists'})
        elif Customer.objects.filter(company = com, customer_phone=request.POST['w_phone']).exists():
            return JsonResponse({'status':False, 'message':'Work Phone no. already exists'})
        elif Customer.objects.filter(company = com, customer_mobile=request.POST['m_phone']).exists():
            return JsonResponse({'status':False, 'message':'Mobile No. already exists'})

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'




            
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            vdata=Customer.objects.get(id=customer_data.id)
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=com
            rdata.customer=vdata
            rdata.save()

        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})

def getCustomersAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]
        print(option_objects)
        return JsonResponse(options)
    else:
        return redirect('/')

def getUnitsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)

def createNewItemAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = 0 if request.POST['pcost'] == "" else request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = 0 if request.POST['salesprice'] == "" else request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = 0 if request.POST['min_stock'] == "" else request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag = 'active',
                type = 'Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = log_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def getAllItemsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')

def createNewAccountAjax(request):                                                                #new by tinto mt
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')


def getAllAccountsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')

def editRecurringInvoice(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        invoice = RecurringInvoice.objects.get(id = id)
        invItems = Reccurring_Invoice_item.objects.filter(reccuring_invoice = invoice)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'units': units,'accounts':accounts, 'invoice':invoice, 'invItems': invItems,
        }
        return render(request, 'zohomodules/recurring_invoice/edit_recurring_invoice.html', context)
    else:
        return redirect('/')

def viewRecurringInvoice(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        invoice = RecurringInvoice.objects.get(id = id)
        invItems = Reccurring_Invoice_item.objects.filter(reccuring_invoice = invoice)
        recInv = RecurringInvoice.objects.filter(company = cmp)
        cmts = Recurring_Invoice_Comments.objects.filter(recurring_invoice = invoice)
        hist = RecurringInvoiceHistory.objects.filter(recurring_invoice = invoice)
        last_history = RecurringInvoiceHistory.objects.filter(recurring_invoice = invoice).last()
        created = RecurringInvoiceHistory.objects.get(recurring_invoice = invoice, action = 'Created')

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'invoice':invoice, 'invItems': invItems, 'allInvoices':recInv, 'comments':cmts, 'history':hist, 'last_history':last_history, 'created':created,
        }
        return render(request, 'zohomodules/recurring_invoice/view_recurring_invoice.html', context)
    else:
        return redirect('/')

def updateRecurringInvoice(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = RecurringInvoice.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkRecInvNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Rec. Invoice No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if rec_inv.rec_invoice_no != invNum and RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Recurring Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            rec_inv.customer = Customer.objects.get(id = request.POST['customerId'])
            rec_inv.customer_email = request.POST['customer_email']
            rec_inv.billing_address = request.POST['bill_address']
            rec_inv.gst_type = request.POST['customer_gst_type']
            rec_inv.gstin = request.POST['customer_gstin']
            rec_inv.place_of_supply = request.POST['place_of_supply']
            rec_inv.profile_name = request.POST['profile_name']
            rec_inv.entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type']
            rec_inv.reference_no = request.POST['reference_number']
            rec_inv.rec_invoice_no = invNum
            rec_inv.payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term'])
            rec_inv.start_date = request.POST['start_date']
            rec_inv.end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date()
            rec_inv.salesOrder_no = request.POST['order_number']
            rec_inv.price_list_applied = True if 'priceList' in request.POST else False
            rec_inv.price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id'])
            rec_inv.repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every'])
            rec_inv.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            rec_inv.cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            rec_inv.upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            rec_inv.bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            rec_inv.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            rec_inv.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            rec_inv.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            rec_inv.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            rec_inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            rec_inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            rec_inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            rec_inv.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            rec_inv.advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            rec_inv.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            rec_inv.description = request.POST['note']
            rec_inv.terms_and_conditions = request.POST['terms']

            if len(request.FILES) != 0:
                rec_inv.document=request.FILES.get('file')
            rec_inv.save()


            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            inv_items = Reccurring_Invoice_item.objects.filter(reccuring_invoice = rec_inv)
            object_ids = [obj.id for obj in inv_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
            for itmId in ids_to_delete:
                invItem = Reccurring_Invoice_item.objects.get(id = itmId)
                item = Items.objects.get(id = invItem.item.id)
                item.current_stock += invItem.quantity
                item.save()

            Reccurring_Invoice_item.objects.filter(id__in=ids_to_delete).delete()
            
            count = Reccurring_Invoice_item.objects.filter(reccuring_invoice = rec_inv).count()

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total,invItem_ids)
                mapped = list(mapped)
                for ele in mapped:
                    if int(len(itemId))>int(count):
                        if ele[8] == 0:
                            itm = Items.objects.get(id = int(ele[0]))
                            Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                            itm.current_stock -= int(ele[3])
                            itm.save()
                        else:
                            itm = Items.objects.get(id = int(ele[0]))
                            inItm = Reccurring_Invoice_item.objects.get(id = int(ele[8]))
                            crQty = int(inItm.quantity)
                            
                            Reccurring_Invoice_item.objects.filter( id = int(ele[8])).update(reccuring_invoice = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                            if crQty < int(ele[3]):
                                itm.current_stock -=  abs(crQty - int(ele[3]))
                            elif crQty > int(ele[3]):
                                itm.current_stock += abs(crQty - int(ele[3]))
                            itm.save()
                    else:
                        itm = Items.objects.get(id = int(ele[0]))
                        inItm = Reccurring_Invoice_item.objects.get(id = int(ele[8]))
                        crQty = int(inItm.quantity)

                        Reccurring_Invoice_item.objects.filter( id = int(ele[8])).update(reccuring_invoice = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                        if crQty < int(ele[3]):
                            itm.current_stock -=  abs(crQty - int(ele[3]))
                        elif crQty > int(ele[3]):
                            itm.current_stock += abs(crQty - int(ele[3]))
                        itm.save()
            
            # Save transaction
                    
            RecurringInvoiceHistory.objects.create(
                company = com,
                login_details = log_details,
                recurring_invoice = rec_inv,
                action = 'Edited'
            )

            return redirect(viewRecurringInvoice, id)
        else:
            return redirect(editRecurringInvoice, id)
    else:
       return redirect('/')
       
       
def convertRecurringInvoice(request,id):
    if 'login_id' in request.session:
        rec_inv = RecurringInvoice.objects.get(id = id)
        rec_inv.status = 'Saved'
        rec_inv.save()
        return redirect(viewRecurringInvoice, id)
    else:
        return redirect('/')


def addRecurringInvoiceComment(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = RecurringInvoice.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Recurring_Invoice_Comments.objects.create(company = com, recurring_invoice = rec_inv, comments = cmt)
            return redirect(viewRecurringInvoice, id)
        return redirect(viewRecurringInvoice, id)
    return redirect('/')

def deleteRecurringInvoiceComment(request,id):
    if 'login_id' in request.session:
        cmt = Recurring_Invoice_Comments.objects.get(id = id)
        recInvId = cmt.recurring_invoice.id
        cmt.delete()
        return redirect(viewRecurringInvoice, recInvId)
    else:
        return redirect('/')

def deleteRecurringInvoice(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        recInv = RecurringInvoice.objects.get( id = id)
        for i in Reccurring_Invoice_item.objects.filter(reccuring_invoice = recInv):
            item = Items.objects.get(id = i.item.id)
            item.current_stock += i.quantity
            item.save()
        
        Reccurring_Invoice_item.objects.filter(reccuring_invoice = recInv).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Reccurring_Invoice_Reference.objects.filter(company = com).exists():
            deleted = Reccurring_Invoice_Reference.objects.get(company = com)
            if int(recInv.reference_no) > int(deleted.reference_number):
                deleted.reference_number = recInv.reference_no
                deleted.save()
        else:
            Reccurring_Invoice_Reference.objects.create(company = com, login_details = com.login_details, reference_number = recInv.reference_no)
        
        recInv.delete()
        return redirect(recurringInvoice)

def attachRecurringInvoiceFile(request, id):
    if 'login_id' in request.session:
        inv = RecurringInvoice.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            inv.document = request.FILES.get('file')
            inv.save()

        return redirect(viewRecurringInvoice, id)
    else:
        return redirect('/')

def recurringInvoicePdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = RecurringInvoice.objects.get(id = id)
        itms = Reccurring_Invoice_item.objects.filter(reccuring_invoice = inv)
    
        context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
        
        template_path = 'zohomodules/recurring_invoice/recurring_invoice_pdf.html'
        fname = 'Recurring_Invoice_'+inv.rec_invoice_no
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def shareRecurringInvoiceToEmail(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = RecurringInvoice.objects.get(id = id)
        itms = Reccurring_Invoice_item.objects.filter(reccuring_invoice = inv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
                template_path = 'zohomodules/recurring_invoice/recurring_invoice_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Recurring Invoice_{inv.rec_invoice_no}'
                subject = f"Recurring_Invoice_{inv.rec_invoice_no}"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Recurring Invoice for - REC. INVOICE-{inv.rec_invoice_no}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Rec. Invoice details has been shared via email successfully..!')
                return redirect(viewRecurringInvoice,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(viewRecurringInvoice, id)

def downloadRecurringInvoiceSampleImportFile(request):
    recInv_table_data = [['SLNO','CUSTOMER','DATE','PLACE OF SUPPLY','PROFILE NAME','ENTRY TYPE','RI NO','TERMS','REPEAT EVERY','PRICE LIST','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE'],['1', 'Kevin Debryne', '2024-03-20', '[KL]-Kerala', 'Kevin Debryne','Invoice','RI100','NET 30','3 Months','','','1000','0','25','25','50','0','0','1050','1000']]
    items_table_data = [['RI NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL'], ['1', 'Test Item 1','789987','1','1000','5','0','1000']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'recurring_invoice'
    sheet2 = wb.create_sheet(title='items')

    # Populate the sheets with data
    for row in recInv_table_data:
        sheet1.append(row)

    for row in items_table_data:
        sheet2.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=recurring_invoice_sample_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response

def importRecurringInvoiceFromExcel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["recurring_invoice"]
            except:
                print('sheet not found')
                messages.error(request,'`recurring_invoice` sheet not found.! Please check.')
                return redirect(recurringInvoice)

            try:
                ws = wb["items"]
            except:
                print('sheet not found')
                messages.error(request,'`items` sheet not found.! Please check.')
                return redirect(recurringInvoice)
            
            ws = wb["recurring_invoice"]
            rec_inv_columns = ['SLNO','CUSTOMER','DATE','PLACE OF SUPPLY','PROFILE NAME','ENTRY TYPE','RI NO','TERMS','REPEAT EVERY','PRICE LIST','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE']
            rec_inv_sheet = [cell.value for cell in ws[1]]
            if rec_inv_sheet != rec_inv_columns:
                print('invalid sheet')
                messages.error(request,'`recurring_invoice` sheet column names or order is not in the required formate.! Please check.')
                return redirect(recurringInvoice)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,date,place_of_supply, profile_name, entry_type, rec_inv_no, terms, repeat, price_list, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                if slno is None  or customer is None  or date is None or place_of_supply is None  or rec_inv_no is None  or terms is None  or repeat is None  or subtotal is None or taxamount is None or grandtotal is None:
                    print('recurringInvoice == invalid data')
                    messages.error(request,'`recurring_invoice` sheet entries missing required fields.! Please check.')
                    return redirect(recurringInvoice)
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns = ['RI NO','PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL']
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`items` sheet column names or order is not in the required formate.! Please check.')
                return redirect(recurringInvoice)

            for row in ws.iter_rows(min_row=2, values_only=True):
                ri_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                if ri_no is None or name is None or quantity is None or tax_percentage is None or total is None:
                    print('items == invalid data')
                    messages.error(request,'`items` sheet entries missing required fields.! Please check.')
                    return redirect(recurringInvoice)
            
            # getting data from rec_invoice sheet and create rec_invoice.
            incorrect_data = []
            existing_pattern = []
            ws = wb['recurring_invoice']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,startdate,place_of_supply, profile_name, entry_type, rec_inv_no, terms, repeat, price_list, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                recInvNo = slno
                if slno is None:
                    continue
                # Fetching last rec_inv and assigning upcoming rec_inv no as current + 1
                # Also check for if any rec_inv is deleted and rec_inv no is continuos w r t the deleted rec_inv
                latest_inv = RecurringInvoice.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

                if Reccurring_Invoice_Reference.objects.filter(company = com).exists():
                    deleted = Reccurring_Invoice_Reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                
                cust = customer.split(' ')
            
                if len(cust) > 2:
                    cust[1] = cust[1] + ' ' + ' '.join(cust[2:])
                    cust = cust[:2]
                    fName = cust[0]
                    lName = cust[1]
                else:
                    fName = cust[0]
                    lName = cust[1]
                print(cust,fName,lName)

                if lName == "":  
                    if not Customer.objects.filter(company = com, first_name = fName).exists():
                        print('No Customer1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if fName != "" and lName != "":  
                    if not Customer.objects.filter(company = com, first_name = fName, last_name = lName).exists():
                        print('No Customer2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName, last_name = lName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if startdate is None:
                    startdate = dateToday
                else:
                    startdate = datetime.strptime(startdate, '%Y-%m-%d').date()

                PatternStr = []
                for word in rec_inv_no:
                    if word.isdigit():
                        pass
                    else:
                        PatternStr.append(word)
                
                pattern = ''
                for j in PatternStr:
                    pattern += j

                pattern_exists = checkRecInvNumberPattern(pattern)

                if pattern !="" and pattern_exists:
                    existing_pattern.append(slno)
                    continue

                while RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = rec_inv_no).exists():
                    rec_inv_no = getNextRINumber(rec_inv_no)

                try:
                    trm = Company_Payment_Term.objects.get(company = com, term_name = terms)
                    endDate = startdate+timedelta(days = trm.days)
                except:
                    trm = None
                    endDate = None
                try:
                    priceList = PriceList.objects.get(company = com, name = price_list)
                except:
                    priceList = None

                try:
                    rpt = CompanyRepeatEvery.objects.get(company = com, repeat_every = repeat)
                except:
                    rpt = None

                recInv = RecurringInvoice(
                    company = com,
                    login_details = com.login_details,
                    customer = None if c is None else c,
                    customer_email = email,
                    billing_address = adrs,
                    gst_type = gstType,
                    gstin = gstIn,
                    place_of_supply = place_of_supply,
                    profile_name = profile_name,
                    entry_type = None if entry_type == "" else entry_type,
                    reference_no = new_number,
                    rec_invoice_no = rec_inv_no,
                    payment_terms = trm,
                    start_date = startdate,
                    end_date = endDate,
                    salesOrder_no = None,
                    price_list_applied = True if priceList is not None else False,
                    price_list = priceList,
                    repeat_every = rpt,
                    payment_method = None,
                    cheque_number = None,
                    upi_number = None,
                    bank_account_number = None,
                    subtotal = 0.0 if subtotal == "" else float(subtotal),
                    igst = 0.0 if igst == "" else float(igst),
                    cgst = 0.0 if cgst == "" else float(cgst),
                    sgst = 0.0 if sgst == "" else float(sgst),
                    tax_amount = 0.0 if taxamount == "" else float(taxamount),
                    adjustment = 0.0 if adjustment == "" else float(adjustment),
                    shipping_charge = 0.0 if shipping == "" else float(shipping),
                    grandtotal = 0.0 if grandtotal == "" else float(grandtotal),
                    advance_paid = 0.0 if advance == "" else float(advance),
                    balance = float(grandtotal) - float(advance),
                    description = description,
                    status = "Draft"
                )
                recInv.save()

                # Transaction history
                history = RecurringInvoiceHistory(
                    company = com,
                    login_details = log_details,
                    recurring_invoice = recInv,
                    action = 'Created'
                )
                history.save()

                # Items for the estimate
                ws = wb['items']
                for row in ws.iter_rows(min_row=2, values_only=True):
                    rec_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                    if int(rec_no) == int(recInvNo):
                        print(row)
                        if discount is None:
                            discount=0
                        if price is None:
                            price=0
                        if quantity is None:
                            quantity=0
                        if not Items.objects.filter(company = com, item_name = name).exists():
                            print('No Item')
                            incorrect_data.append(rec_no)
                            continue
                        try:
                            itm = Items.objects.filter(company = com, item_name = name).first()
                        except:
                            pass

                        Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = recInv, item = itm, hsn = hsn, quantity = quantity, price = price, tax_rate = tax_percentage, discount = discount, total = total)
                        itm.current_stock -= int(quantity)
                        itm.save()

            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect(recurringInvoice)
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to RI No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect(recurringInvoice)
        else:
            return redirect(recurringInvoice)
    else:
        return redirect('/')

def getNextRINumber(recInv):
    ri_no = recInv
    numbers = []
    stri = []
    for word in ri_no:
        if word.isdigit():
            numbers.append(word)
        else:
            stri.append(word)
    
    num = ''.join(numbers)
    st = ''.join(stri)

    inv_num = int(num) + 1
    if num[0] == 0:
        nxtRecInv = st + num.zfill(len(num)) 
    else:
        nxtRecInv = st + str(inv_num).zfill(len(num))

    return nxtRecInv


# < -------------------- > Recurring Invoice - End < ------------------------------- >


#---------------- Zoho Final Sales order - Ginto Shaji - Start--------------------

def salesorder(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = comp_details)
        customer = Customer.objects.filter(company = comp_details, customer_status = 'Active')
        comp_payment_terms = Company_Payment_Term.objects.filter(company = comp_details)
        repeat = CompanyRepeatEvery.objects.filter(company = comp_details)
        bnk = Banking.objects.filter(company = comp_details)
        price_lists = PriceList.objects.filter(company = comp_details, status = 'Active')
        item = Items.objects.filter(company = comp_details, activation_tag = 'active')
        
        units = Unit.objects.filter(company=comp_details)
        accounts=Chart_of_Accounts.objects.filter(company=comp_details)

        latest_sel = SaleOrder.objects.filter(company = comp_details).order_by('-id').first()

        new_number = int(latest_sel.reference_number) + 1 if latest_sel else 1

        if SalesOrderReference.objects.filter(company = comp_details).exists():
            deleted = SalesOrderReference.objects.get(company = comp_details)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1



        nxtSel = ""
        lastSel = SaleOrder.objects.filter(company = comp_details).last()
        if lastSel:
            sel_no = str(lastSel.sales_order_number)
            numbers = []
            stri = []
            for word in sel_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            sel_num = int(num)+1

            padding_length = len(num) - 1

                    
            nxtSel = f"{st}{num[0]}{sel_num:0{padding_length}d}"
        else:
            nxtSel = 'SO-01'

        context = {
            'comp_details':comp_details,
            'allmodules': allmodules,
            'details':dash_details, 
            'customer':customer,
            'comp_payment_terms':comp_payment_terms,
            'repeat':repeat, 
            'banks':bnk, 
            'price_lists':price_lists,
            'item':item,
            'selNo':nxtSel,
            'ref_no':new_number,
            'units': units,
            'accounts':accounts,
            'log_details':log_details,
        }
    
        return render(request,'zohomodules/sales_order/add_salesorder.html',context)

def checksalesorderNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
        
        RecSelNo = request.GET['RecSelNum']

        nxtSel = ""
        lastSel = SaleOrder.objects.filter(company = comp_details).last()

        if lastSel:
            sel_no = str(lastSel.sales_order_number)

            numbers = []
            stri = []
            for word in sel_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j            

            sel_num = int(num)+1
        
            padding_length = len(num) - 1
   
            nxtSel = f"{st}{num[0]}{sel_num:0{padding_length}d}"
            print(nxtSel)
            

        PatternStr = []
        for word in RecSelNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j
            print("patern")
            print(pattern)

        if SaleOrder.objects.filter(company = comp_details, sales_order_number__iexact = RecSelNo).exists():
            return JsonResponse({'status':False, 'message':'Salesorder No. already Exists.!'})
        elif nxtSel != "" and RecSelNo != nxtSel:
            return JsonResponse({'status':False, 'message':'Salesorder No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def salesorder_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']   
        else:
           return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        data=Customer.objects.filter(company=comp_details)
    else:
        return redirect('/')
    
    sale = SaleOrder.objects.filter(company=comp_details)
    return render(request,'zohomodules/sales_order/salesorder_list.html',{'sale': sale,'details':dash_details,'allmodules': allmodules,'data':data,'log_details':log_details})
        
    
def add_salesorder(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            selNum = request.POST['sales_order_number']
            if SaleOrder.objects.filter(company = comp_details, sales_order_number__iexact = selNum).exists():
                res = f'<script>alert("Salesorder Number `{selNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            sale = SaleOrder(
                company=comp_details,
                login_details=log_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                customer_billing_address = request.POST['customer_billing_address'],
                customer_gst_type = request.POST['customer_gst_type'],
                customer_gst_number = request.POST['customer_gst_number'],
                customer_place_of_supply = request.POST['customer_place_of_supply'],
               
                reference_number = request.POST['reference_number'],
                sales_order_number =selNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_terms']),
                sales_order_date = request.POST['sales_order_date'],
                expiration_date = datetime.strptime(request.POST['expiration_date'], '%d-%m-%Y').date(),
                # expiration_date = request.POST['expiration_date'],

                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_number'] == "" else request.POST['cheque_number'],
                upi_number = None if request.POST['upi_number'] == "" else request.POST['upi_number'],
                bank_account_number = None if request.POST['bank_account_number'] == "" else request.POST['bank_account_number'],


                sub_total = 0.0 if request.POST['sub_total'] == "" else float(request.POST['sub_total']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['tax_amount'] == "" else float(request.POST['tax_amount']),
                adjustment = 0.0 if request.POST['adjustment'] == "" else float(request.POST['adjustment']),
                shipping_charge = 0.0 if request.POST['shipping_charge'] == "" else float(request.POST['shipping_charge']),
                grand_total = 0.0 if request.POST['grand_total'] == "" else float(request.POST['grand_total']),
                advanced_paid = 0.0 if request.POST['advanced_paid'] == "" else float(request.POST['advanced_paid']),
                balance = request.POST['grand_total'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['description'],
                terms_and_condition = request.POST['terms_and_condition']
            )

            sale.save()

            if len(request.FILES) != 0:
                sale.document=request.FILES.get('file')
            sale.save()

            if 'save_as_draft' in request.POST:
                sale.status = "Draft"
            elif "save" in request.POST:
                sale.status = "Save" 
            sale.save()

            
            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['customer_place_of_supply'] == comp_details.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    SalesOrderItems.objects.create(company=comp_details, login_details=log_details, sales_order=sale, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            

            # Save transaction
                 
            SalesOrderHistory.objects.create(
                company=comp_details,
                login_details=log_details,
                sales_order=sale,
                date=sale.sales_order_date,
                current_date=date.today(),
                action='Created'
            )
    
            # messages.success(request, 'Sales Order created successfully!')
            return redirect(salesorder_list)
        else:
            return redirect(salesorder_list)
    else:
       return redirect('/')


def sort_customer_name(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details) 
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
  
        sale = SaleOrder.objects.filter(company=comp_details).order_by('customer__first_name')
        return render(request,'zohomodules/sales_order/salesorder_list.html',{'sale':sale,'allmodules':allmodules, 'dash_details':dash_details,'log_details':log_details})
     else:
            return redirect('/') 


def sort_sales_order(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details) 
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
  
        sale=SaleOrder.objects.filter(company=comp_details).order_by('sales_order_number')
        return render(request,'zohomodules/sales_order/salesorder_list.html',{'sale':sale,'allmodules':allmodules, 'dash_details':dash_details,'log_details':log_details})
     else:
            return redirect('/') 
        
                    
def view_salesorder_save(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id'] 
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)
  
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        
        sale=SaleOrder.objects.filter(company=comp_details,status='Save').order_by('-id')
        return render(request,'zohomodules/sales_order/salesorder_list.html',{'sale':sale,'allmodules':allmodules, 'dash_details':dash_details,'log_details':log_details})
     else:
        return redirect('/')
    
    
def view_salesorder_draft(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id'] 
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)
  
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        
        sale=SaleOrder.objects.filter(company=comp_details,status='Draft').order_by('-id')
        return render(request,'zohomodules/sales_order/salesorder_list.html',{'sale':sale,'allmodules':allmodules, 'dash_details':dash_details,'log_details':log_details})
     else:
        return redirect('/') 
    
    
def view_salesorder_details(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)
              
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        sale=SaleOrder.objects.get(id=pk)

        # Getting all vendor to disply on the left side of vendor_detailsnew page
        vendor_objs=Customer.objects.filter(company=comp_details)
        sales_objs=SaleOrder.objects.filter(company=comp_details)
        items = SalesOrderItems.objects.filter(sales_order=sale)
        sales_history=SalesOrderHistory.objects.filter(sales_order=sale)
        comments = Salesorder_comments_table.objects.filter(sales_order=sale)
        hist =SalesOrderHistory.objects.filter( sales_order = sale).last()

    content = {
                'details': dash_details,
                'allmodules': allmodules,
                'log_details':log_details,
                'sale':sale,
                'items':items,
                'sales_objs':sales_objs,
                'vendor_objs':vendor_objs,
                'sales_history':sales_history,
                'comments': comments,
                'history':hist,
        }
    return render(request,'zohomodules/sales_order/salesorder_details.html',content)     


def all_salesorder(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details) 
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
  
        sales_objs=SaleOrder.objects.filter(company=comp_details)
        return render(request,'zohomodules/sales_order/salesorder_details.html',{'sales_objs':sales_objs,'allmodules':allmodules, 'dash_details':dash_details,'log_details':log_details})
     else:
            return redirect('/')  

 
def sort_salesorder(request,selectId,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)
  
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        sale = SaleOrder.objects.get(id=pk)
        sales_objs = SaleOrder.objects.filter(company=comp_details)

        if selectId == 0:
            sales_objs=SaleOrder.objects.filter(company=comp_details)
        if selectId == 1:
            sales_objs=SaleOrder.objects.filter(company=comp_details).order_by('customer__first_name')
        if selectId == 2:
            sales_objs=SaleOrder.objects.filter(company=comp_details).order_by('sales_order_number')
           
        comments=Salesorder_comments_table.objects.filter(sales_order=sale)
        sales_history=SalesOrderHistory.objects.filter(sales_order=sale)
        hist =SalesOrderHistory.objects.filter( sales_order = sale).last()
    
        content = {
                'details': dash_details,
                'allmodules': allmodules,
                'sale':sale,
                'log_details':log_details,
                'sales_objs':sales_objs,
                'comments':comments,
                'sales_history':sales_history,
                'history':hist,
        }
    return render(request,'zohomodules/sales_order/salesorder_details.html',content) 


def salesorder_status_change(request,statusId,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)
  
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        sale = SaleOrder.objects.get(id=pk)
        sales_objs = SaleOrder.objects.filter(company=comp_details)

        if statusId == 0:
            sales_objs=SaleOrder.objects.filter(company=comp_details)
        if statusId == 1:
            sales_objs=SaleOrder.objects.filter(company=comp_details,status='Draft').order_by('-id')
        if statusId == 2:
            sales_objs=SaleOrder.objects.filter(company=comp_details,status='Save').order_by('-id')
           
        comments=Salesorder_comments_table.objects.filter(sales_order=sale)
        sales_history=SalesOrderHistory.objects.filter(sales_order=sale)
        hist =SalesOrderHistory.objects.filter( sales_order = sale).last()
    
        content = {
            'details': dash_details,
            'allmodules': allmodules,
            'sale':sale,
            'log_details':log_details,
            'sales_objs':sales_objs,
            'comments':comments,
            'sales_history':sales_history,
            'history':hist,
    }
    return render(request,'zohomodules/sales_order/salesorder_details.html',content)
    
    
def delete_salesorder(request, pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company               
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
       
            sel = SaleOrder.objects.get( id = pk)
                                        
            if SalesOrderReference.objects.filter(company = company).exists():
                deleted = SalesOrderReference.objects.get(company = company)
                if int(sel.reference_number) > int(deleted.reference_number):
                    deleted.reference_number = sel.reference_number
                    deleted.save()
            else:
                SalesOrderReference.objects.create(company = company, reference_number = sel.reference_number)  
            sel.delete()
            return redirect(salesorder_list) 
    
def salesorder_status(request,pk):
    sale = SaleOrder.objects.get(id=pk)
    if sale.status == 'Save':
        sale.status ='Draft'
    elif sale.status == 'Draft':
        sale.status ='Save'
    sale.save()
    return redirect('view_salesorder_details',pk) 

        
def edit_salesorder_page(request, pk):
    if 'login_id' in request.session:
        log_id = request.session.get('login_id')
        if not log_id:
            return redirect('/')
        try:
            log_details = LoginDetails.objects.get(id=log_id)
        except LoginDetails.DoesNotExist:
            return redirect('/')
        if log_details.user_type == 'Staff':
            try:
                dash_details = StaffDetails.objects.get(login_details=log_details)
                comp_details = dash_details.company
            except StaffDetails.DoesNotExist:
                return redirect('/')
        else:
            try:
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                comp_details = dash_details
            except CompanyDetails.DoesNotExist:
                return redirect('/')  
        try:
            allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        except ZohoModules.DoesNotExist:
            allmodules = None
   
        sale = get_object_or_404(SaleOrder, id=pk)

        customer_objs = Customer.objects.filter(company=comp_details)
        sale_items = SalesOrderItems.objects.filter(sales_order=sale)
        sales_history = SalesOrderHistory.objects.filter(sales_order=sale)
        comp_payment_terms=Company_Payment_Term.objects.filter(company=comp_details)
        item=Items.objects.filter(company=comp_details)
        units = Unit.objects.filter(company=comp_details)
        accounts=Chart_of_Accounts.objects.filter(company=comp_details)
        bnk = Banking.objects.filter(company = comp_details)
        
        
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'log_details': log_details,
            'sale': sale,
            'units': units,
            'sale_items': sale_items,
            'item':item,
            'customer_objs': customer_objs,
            'sales_history': sales_history,
            'comp_payment_terms':comp_payment_terms,
            'comp_details':comp_details,
            'accounts':accounts,
            'banks':bnk,
        }
        return render(request, 'zohomodules/sales_order/edit_salesorder.html', context)
    else:
        return redirect('/')
        

def edit_salesorder(request, pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company

        allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        data = Customer.objects.filter(company=comp_details)
    else:
        return redirect('/')

    if request.method == "POST":

        sale = SaleOrder.objects.get(id=pk)

        sale.customer_id = request.POST['customerId']
        sale.customer_email = request.POST['customer_email']
        sale.customer_billing_address = request.POST['customer_billing_address']
        sale.customer_gst_type = request.POST['customer_gst_type']
        sale.customer_gst_number = request.POST['customer_gst_number']
        sale.customer_place_of_supply = request.POST['customer_place_of_supply']

        sale.reference_number = request.POST['reference_number']
        sale.sales_order_number = request.POST['sales_order_number']
        sale.payment_terms_id = request.POST['payment_term']
        
        sale.sales_order_date = datetime.strptime(request.POST.get('sales_order_date'), '%Y-%m-%d') if request.POST.get('sales_order_date') else None
        sale.expiration_date = datetime.strptime(request.POST.get('expiration_date'), '%d-%m-%Y') if request.POST.get('expiration_date') else None
       
        sale.payment_method = request.POST['payment_method']
        sale.cheque_number = request.POST.get('cheque_number', '')
        sale.upi_number = request.POST.get('upi_number', '')
        sale.bank_account_number = request.POST.get('bank_account_number', '')    
        sale.sub_total = request.POST['sub_total']
        sale.igst = request.POST['igst']
        sale.cgst = request.POST['cgst']
        sale.sgst = request.POST['sgst']
        sale.tax_amount = request.POST['tax_amount']
        sale.shipping_charge = request.POST['shipping_charge']
        sale.adjustment = request.POST['adjustment']
        sale.grand_total = request.POST['grand_total']
        sale.advanced_paid = request.POST['advanced_paid']
        sale.balance = request.POST['balance']
        sale.description = request.POST['description']
        sale.terms_and_condition = request.POST['terms_and_condition']

        if len(request.FILES) != 0:
            sale.document=request.FILES.get('file')
        
        sale.save()
        
        
        itemId = request.POST.getlist("item_id[]")
        itemName = request.POST.getlist("item_name[]")
        hsn  = request.POST.getlist("hsn[]")
        qty = request.POST.getlist("qty[]")
        price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
        tax = request.POST.getlist("taxGST[]") if request.POST['customer_place_of_supply'] == comp_details.state else request.POST.getlist("taxIGST[]")
        discount = request.POST.getlist("discount[]")
        total = request.POST.getlist("total[]")
        inv_item_ids = request.POST.getlist("id[]")
        invItem_ids = [int(id) for id in inv_item_ids]

        inv_items = SalesOrderItems.objects.filter(sales_order=sale)
        object_ids = [obj.id for obj in inv_items]

        ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
        for itmId in ids_to_delete:
            invItem = SalesOrderItems.objects.get(id = itmId)
            item = Items.objects.get(id = invItem.item.id)
            item.current_stock += invItem.quantity
            item.save()

        SalesOrderItems.objects.filter(id__in=ids_to_delete).delete()
            
        count = SalesOrderItems.objects.filter(sales_order=sale).count()

        if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and hsn and qty and price and tax and discount and total:
            mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total,invItem_ids)
            mapped = list(mapped)
            for ele in mapped:
                if int(len(itemId))>int(count):
                    if ele[8] == 0:
                        itm = Items.objects.get(id = int(ele[0]))
                        SalesOrderItems.objects.create(company=comp_details, login_details = log_details, sales_order=sale, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                        itm.current_stock -= int(ele[3])
                        itm.save()
                    else:
                        itm = Items.objects.get(id = int(ele[0]))
                        inItm = SalesOrderItems.objects.get(id = int(ele[8]))
                        crQty = int(inItm.quantity)
                            
                        SalesOrderItems.objects.filter( id = int(ele[8])).update(sales_order=sale, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                        if crQty < int(ele[3]):
                            itm.current_stock -=  abs(crQty - int(ele[3]))
                        elif crQty > int(ele[3]):
                            itm.current_stock += abs(crQty - int(ele[3]))
                        itm.save()
                else:
                    itm = Items.objects.get(id = int(ele[0]))
                    inItm = SalesOrderItems.objects.get(id = int(ele[8]))
                    crQty = int(inItm.quantity)

                    SalesOrderItems.objects.filter( id = int(ele[8])).update(sales_order=sale, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                    if crQty < int(ele[3]):
                        itm.current_stock -=  abs(crQty - int(ele[3]))
                    elif crQty > int(ele[3]):
                        itm.current_stock += abs(crQty - int(ele[3]))
                    itm.save()

        sales_history_obj = SalesOrderHistory()
        sales_history_obj.company = comp_details
        sales_history_obj.login_details = log_details
        sales_history_obj.sales_order = sale
        sales_history_obj.date = sale.sales_order_date
        sales_history_obj.current_date = date.today()
        sales_history_obj.action = 'Edited'
        sales_history_obj.save()
        
        # messages.success(request, 'Sales Order edited successfully!')
        return redirect('view_salesorder_details',pk)
    else:
        return redirect('/')

        
def salesorder_shareemail(request,pk):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    
        sale=SaleOrder.objects.get(id=pk)

        context = {'sale':sale,'details':dash_details}
        if request.method == 'POST':
            try:
                emails_string = request.POST['email_ids']

                        # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                                                                                          
                template_path = 'zohomodules/sales_order/salesordermailoverview.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                subject = f"Transaction Details"
                email = f"Hi,\nPlease find the attached transaction details {sale.customer.first_name} {sale.customer.last_name}.\n"
                email_from = settings.EMAIL_HOST_USER

        
                msg = EmailMultiAlternatives(subject, email, email_from, emails_list)
                msg.attach(f'{sale.customer.first_name}_{sale.customer.last_name}_Transactions.pdf', pdf, "application/pdf")
                
                # Send the email
                msg.send()

                messages.success(request, 'Transaction has been shared via email successfully..!')
                return redirect('view_salesorder_details',pk)

            except Exception as e:
                print(f"Error sending email: {e}")
                messages.error(request, 'An error occurred while sending the email. Please try again later.')
                return redirect('view_salesorder_details',pk)
            
    
def salesorder_add_comment(request, pk):
    if 'login_id' in request.session:  
        log_id = request.session.get('login_id')  
        if log_id is not None:
            log_details = get_object_or_404(LoginDetails, id=log_id)
            if log_details.user_type == 'Staff':
                dash_details = get_object_or_404(StaffDetails, login_details=log_details)
                comp_details = get_object_or_404(CompanyDetails, id=dash_details.company.id)
            else:
                dash_details = get_object_or_404(CompanyDetails, login_details=log_details)
                comp_details = get_object_or_404(CompanyDetails, login_details=log_details)
    
            if request.method == 'POST':
                comment_data = request.POST.get('comments', '')  
                
                sales_id = get_object_or_404(SaleOrder, id=pk)  
                sale = Salesorder_comments_table(comment=comment_data,
                                                  sales_order=sales_id,
                                                  company=comp_details,
                                                  login_details=log_details)
                sale.save() 
                
                return redirect('view_salesorder_details', pk=pk)  
                
    return redirect('view_salesorder_details', pk=pk)  


def salesorder_delete_comment(request, pk):
    try:
        comment = Salesorder_comments_table.objects.get(id=pk)
        sales_id = comment.sales_order.id
        comment.delete()
        return redirect('view_salesorder_details', sales_id)
    except Salesorder_comments_table.DoesNotExist:
        return HttpResponseNotFound("Comment not found.")

def add_salesorder_file(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)  
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
        if request.method == 'POST':
            data=request.FILES.getlist('file')
            try:
                for doc in data:
                    sale=Salesorder_doc_upload_table()
                    
                    sale.document = doc
                    sale.login_details = log_details
                    sale.company = comp_details
                    # sales_obj.customer = Customer.objects.get(id=pk)
                    sale.sales_order=SaleOrder.objects.get(id=pk) 
                    sale.save()
                
                messages.success(request,'File uploaded')
                return redirect('view_salesorder_details',pk) 
            except Salesorder_doc_upload_table.DoesNotExist:
                return redirect('view_salesorder_details',pk) 

def import_salesorder_excel(request):
    if 'login_id' in request.session:
        log_id = request.session.get('login_id')
        if not log_id:
            return redirect('/')
        try:
            log_details = LoginDetails.objects.get(id=log_id)
        except LoginDetails.DoesNotExist:
            return redirect('/')
        
        if log_details.user_type == 'Staff':
            try:
                dash_details = StaffDetails.objects.get(login_details=log_details)
                comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
            except (StaffDetails.DoesNotExist, CompanyDetails.DoesNotExist):
                return redirect('/')
        else:
            try:
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                comp_details = dash_details
            except CompanyDetails.DoesNotExist:
                return redirect('/') 
        try:
            allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        except ZohoModules.DoesNotExist:
            return redirect('/')

        if request.method == 'POST':
            if 'empfile' in request.FILES:
                excel_file = request.FILES['empfile']
                try:
                    excel_data = load_workbook(excel_file)
                    sheet = excel_data['Sheet1']
                except Exception as e:
                    messages.error(request, f'Failed to load Excel file: {e}')
                    return redirect('salesorder_list')
                
                for row_number in range(2, sheet.max_row + 1):
                    row_data = [sheet.cell(row=row_number, column=col_num).value for col_num in range(1, 30)]  
                    
                    customer_id = row_data[0]  
                    try:
                        customer = Customer.objects.get(id=customer_id)
                    except Customer.DoesNotExist:
                        messages.warning(request, f'Customer with ID {customer_id} does not exist')
                        continue  
                    
                    Vendor_object = SaleOrder(
                        customer=customer,company=comp_details,login_details=log_details,customer_email=row_data[1],customer_billing_address=row_data[2],
                        customer_gst_type=row_data[3],customer_gst_number=row_data[4],customer_place_of_supply=row_data[5],sales_order_date=row_data[6],
                        expiration_date=row_data[8],reference_number=row_data[9],sales_order_number=row_data[10],payment_method=row_data[11],cheque_number=row_data[12],
                        upi_number=row_data[13],bank_account_number=row_data[14],description=row_data[15],terms_and_condition=row_data[17],
                        document=row_data[18],sub_total=row_data[19],cgst=row_data[20],sgst=row_data[21],tax_amount_igst=row_data[22],
                        shipping_charge=row_data[23],adjustment=row_data[24],grand_total=row_data[25],advanced_paid=row_data[26],balance=row_data[27],
                        status=row_data[28]
                    )
                    Vendor_object.save()

                messages.success(request, 'File imported successfully')
                return redirect('salesorder_list')
            
            messages.error(request, 'File upload failed!')
            return redirect('salesorder_list')
        
    messages.error(request, 'Authentication failed!')
    return redirect('/')
            
            
def getselCustomerDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)
        
      
        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None or cust.GST_number == "null" else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')
   
   
def getselBankAccountNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        bankId = request.GET['id']
        bnk = Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')
   
   
def newselPaymentTerm(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')
    
       
def createsalesCustomer(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'

            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'

            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.remarks=request.POST['remark']

            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})
        
def getsalesCustomers(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
    

def getselItemDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
        
        item_name = request.GET.get('item', '')
        item = Items.objects.filter(company=cmp, item_name=item_name).first()

        if item:
            context = {
                'status': True,
                'id': item.id,
                'hsn': item.hsn_code,
                'sales_rate': item.selling_price,
                'purchase_rate': item.purchase_price,
                'avl': item.current_stock,
                'tax': True if item.tax_reference == 'taxable' else False,
                'gst': item.intrastate_tax,
                'igst': item.interstate_tax,
                'PLPrice': None,  # Since priceListId related content is removed, set to None
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status': False, 'message': 'Item not found'})
    else:
        return redirect('/')
  
  
  
def addsel_unit(request):                                                               
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})
  
    
def show_unit_dropdownsel(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)

def createNewItemsel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag ='active',
                type ='Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = com.login_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')


def getAllItemssel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')

def getAllselAccounts(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')


def createNewselAccountFromItems(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/') 
        
def convert_invoice_page(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        comp_payment_terms=Company_Payment_Term.objects.filter(company=cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, status = 'Active')
        item = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)
        
        sale = get_object_or_404(SaleOrder, id=id)
        sale_items = SalesOrderItems.objects.filter(sales_order=sale)

        # invoices = invoice.objects.get(id=id)
        # invItems = invoiceitems.objects.filter(invoice = invoices)
        
        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = invoice.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_number) + 1 if latest_inv else 1

        if invoiceReference.objects.filter(company = cmp).exists():
            deleted = invoiceReference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = invoice.objects.filter(company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.invoice_number)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            padding_length = len(num) - 1

                    
            nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
        else:
            nxtInv = 'in-01'

        context = {
              'sale':sale,
              'sale_items': sale_items,
              'cmp':cmp,
              'allmodules':allmodules, 
              'details':dash_details, 
              'customer': cust,
              'comp_payment_terms':comp_payment_terms,
              'repeat':repeat, 
              'banks':bnk, 
              'priceListItems':priceList, 
              'item':item,
              'units': units,
              'accounts':accounts, 
              'invNo':nxtInv, 
              'ref_no':new_number,
    
        }
    
        return render(request,'zohomodules/sales_order/convert_invoice.html',context)
    else:
       return redirect('/')
       
       
def ConvertInvoice(request, id):
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details = log_details)
            else:
                com = StaffDetails.objects.get(login_details = log_details).company
     
            if request.method == 'POST':
                invNum = request.POST['rec_invoice_no']
                if invoice.objects.filter(company = com, invoice_number__iexact = invNum).exists():
                    res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                    return HttpResponse(res)
    
                inv = invoice(
                    company = com,
                    login_details = com.login_details,
                    customer = Customer.objects.get(id = request.POST['customerId']),
                    customer_email = request.POST['customer_email'],
                    customer_billingaddress = request.POST['bill_address'],
                    customer_GSTtype = request.POST['customer_gst_type'],
                    customer_GSTnumber = request.POST['customer_gstin'],
                    customer_place_of_supply = request.POST['place_of_supply'],
                   
                    reference_number = request.POST['reference_number'],
                    invoice_number = invNum,
                    payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                    date = request.POST['start_date'],
                    expiration_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                    # Order_number = request.POST['order_number'],
                    price_list_applied = True if 'priceList' in request.POST else False,
                    price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                    payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                    cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                    UPI_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                    bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                    sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                    IGST = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                    CGST = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                    SGST = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                    tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                    adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                    shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                    grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                    advanced_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                    balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                    description = request.POST['note'],
                    terms_and_condition = request.POST['terms']
                    
                )
    
                inv.save()
    
                if len(request.FILES) != 0:
                    inv.document=request.FILES.get('file')
                inv.save()
    
                if 'Draft' in request.POST:
                    inv.status = "Draft"
                elif "Saved" in request.POST:
                    inv.status = "Saved" 
                inv.save()
    
                # Save rec_invoice items.
    
                itemId = request.POST.getlist("item_id[]")
                itemName = request.POST.getlist("item_name[]")
                hsn  = request.POST.getlist("hsn[]")
                qty = request.POST.getlist("qty[]")
                price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
                tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
                discount = request.POST.getlist("discount[]")
                total = request.POST.getlist("total[]")
    
                if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                    mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                    mapped = list(mapped)
                    for ele in mapped:
                        itm = Items.objects.get(id = int(ele[0]))
                        invoiceitems.objects.create(company = com, logindetails = com.login_details, invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                        itm.current_stock -= int(ele[3])
                        itm.save()
    
                # Save transaction
                        
                invoiceHistory.objects.create(
                    company = com,
                    login_details = com.login_details,
                    invoice = inv,
                    action = 'Created'
                )
                sale=SaleOrder.objects.get(id=id)
                sale.convert_to_invoice=inv
                sale.save()
    
                return redirect(invoice_list_out)
            else:
                return redirect(createInvoice)
        else:
            return redirect('/')

def convert_recurringinvoice_page(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        comp_payment_terms=Company_Payment_Term.objects.filter(company=cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        item = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        sale = get_object_or_404(SaleOrder, id=id)
        sale_items = SalesOrderItems.objects.filter(sales_order=sale)
        
        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = RecurringInvoice.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Reccurring_Invoice_Reference.objects.filter(company = cmp).exists():
            deleted = Reccurring_Invoice_Reference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = RecurringInvoice.objects.filter(company=cmp).last()

        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        else:
            nxtInv = 'RI001'

        context = {
            'sale':sale,
            'sale_items': sale_items,
            'cmp':cmp,
            'allmodules':allmodules, 
            'details':dash_details, 
            'customer': cust,
            'comp_payment_terms':comp_payment_terms,
            'repeat':repeat, 
            'banks':bnk, 
            'priceListItems':priceList,
            'item':item,
            'units': units,
            'accounts':accounts, 
            'invNo':nxtInv, 
            'ref_no':new_number,
            
        }
        return render(request, 'zohomodules/sales_order/convert_recurring_invoice.html', context)
    else:
        return redirect('/')
        
        
def ConvertRecurringInvoice(request, id):
            if 'login_id' in request.session:
               log_id = request.session['login_id']
               log_details= LoginDetails.objects.get(id=log_id)
               if log_details.user_type == 'Company':
                   com = CompanyDetails.objects.get(login_details = log_details)
               else:
                   com = StaffDetails.objects.get(login_details = log_details).company
       
               if request.method == 'POST':
                   invNum = request.POST['rec_invoice_no']
       
                   PatternStr = []
                   for word in invNum:
                       if word.isdigit():
                           pass
                       else:
                           PatternStr.append(word)
                   
                   pattern = ''
                   for j in PatternStr:
                       pattern += j
       
                   pattern_exists = checkRecInvNumberPattern(pattern)
       
                   if pattern !="" and pattern_exists:
                       res = f'<script>alert("Rec. Invoice No. Pattern already Exists.! Try another!");window.history.back();</script>'
                       return HttpResponse(res)
       
                   if RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = invNum).exists():
                       res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                       return HttpResponse(res)
       
                   inv = RecurringInvoice(
                       company = com,
                       login_details = com.login_details,
                       customer = Customer.objects.get(id = request.POST['customerId']),
                       customer_email = request.POST['customer_email'],
                       billing_address = request.POST['bill_address'],
                       gst_type = request.POST['customer_gst_type'],
                       gstin = request.POST['customer_gstin'],
                       place_of_supply = request.POST['place_of_supply'],
                       profile_name = request.POST['profile_name'],
                       entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                       reference_no = request.POST['reference_number'],
                       rec_invoice_no = invNum,
                       payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                       start_date = request.POST['start_date'],
                       end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                       salesOrder_no = request.POST['order_number'],
                       price_list_applied = True if 'priceList' in request.POST else False,
                       price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                       repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                       payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                       cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                       upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                       bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                       subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                       igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                       cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                       sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                       tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                       adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                       shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                       grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                       advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                       balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                       description = request.POST['note'],
                       terms_and_conditions = request.POST['terms']
                   )
       
                   inv.save()
       
                   if len(request.FILES) != 0:
                       inv.document=request.FILES.get('file')
                   inv.save()
       
                   if 'Draft' in request.POST:
                       inv.status = "Draft"
                   elif "Saved" in request.POST:
                       inv.status = "Saved" 
                   inv.save()
       
                   # Save rec_invoice items.
       
                   itemId = request.POST.getlist("item_id[]")
                   itemName = request.POST.getlist("item_name[]")
                   hsn  = request.POST.getlist("hsn[]")
                   qty = request.POST.getlist("qty[]")
                   price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
                   tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
                   discount = request.POST.getlist("discount[]")
                   total = request.POST.getlist("total[]")
       
                   if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                       mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                       mapped = list(mapped)
                       for ele in mapped:
                           itm = Items.objects.get(id = int(ele[0]))
                           Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                           itm.current_stock -= int(ele[3])
                           itm.save()
       
                   # Save transaction
                           
                   RecurringInvoiceHistory.objects.create(
                       company = com,
                       login_details = log_details,
                       recurring_invoice = inv,
                       action = 'Created'
                   )
                   
                   sale=SaleOrder.objects.get(id=id)
                   sale.convert_to_recurringinvoice=inv
                   sale.save()
       
                   return redirect(recurringInvoice)
               else:
                   return redirect(addRecurringInvoice)
            else:
              return redirect('/')

#---------------- Zoho Final sales order - Ginto Shaji - End--------------------

# --------------------------------------   ashikhvu   (start)   -----------------------------------------------
    
def recurring_bill_listout(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            recurr_bills=Recurring_bills.objects.filter(company=dash_details.company)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            recurr_bills=Recurring_bills.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        context = {
                'details': dash_details,
                'recurr_bills': recurr_bills,
                'allmodules': allmodules,
        }
        return render(request,'zohomodules/recurring_bill/recurring_bill_listout.html',context)
    else:
        return redirect('/')


def recurring_bill_create(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details

        item=Items.objects.filter(company=company)
        allmodules= ZohoModules.objects.get(company=company,status='New')
        banks = Banking.objects.filter(company=company)
        vendors = Vendor.objects.filter(company=company)
        customers = Customer.objects.filter(company=company)
        pricelist = PriceList.objects.filter(company=company,status='Active',type='Purchase')
        items = Items.objects.filter(company=company)
        credits = RecurringCreditPeriod.objects.filter(company=company)
        repeat_list = RecurringRepeatEvery.objects.filter(company=company)
        payments=Company_Payment_Term.objects.filter(company_id = company)
        recc_bill_no = RecurringRecievedId.objects.filter(company=company).last()
        units = Unit.objects.filter(company=company)
        accounts=Chart_of_Accounts.objects.filter(company=company)

        context = {
                'details': dash_details,
                'item': item,
                'allmodules': allmodules,
                'banks':banks,
                'vendors':vendors,
                "customers":customers,
                'items':items,
                'pricelist':pricelist,
                'credits':credits,
                'repeat_list':repeat_list,
                'payments':payments,
                'recc_bill_no':recc_bill_no,
                'units':units,
                'accounts':accounts,
                'company':company,
        }
        return render(request,'zohomodules/recurring_bill/recurring_bill_create.html',context)
    else:
        return redirect('/')


def get_vendors_details_for_recurr(request,pk):
    vendor_data = Vendor.objects.get(id=pk)
    data = {
        'vendor_email':vendor_data.vendor_email,
        'vendor_gst_treat':vendor_data.gst_treatment,
        'vendor_gstin': vendor_data.gst_number,
        'vendor_address': vendor_data.billing_address,
        'billing_city': vendor_data.billing_city,
        'billing_state': vendor_data.billing_state,
        'billing_country': vendor_data.billing_country,
        'billing_pin_code': vendor_data.billing_pin_code,
        'vendor_source_of_suppy': vendor_data.source_of_supply,
    }
    print(vendor_data.source_of_supply)
    print('SUCCESS')
    return JsonResponse(data)

def get_customer_details_for_recurr(request,pk):
    customer_data = Customer.objects.get(id=pk)
    data = {
        'customer_first_name':customer_data.first_name,
        'customer_email':customer_data.customer_email,
        'customer_gst_treat':customer_data.GST_treatement,
        'customer_gstin': customer_data.GST_number,
        'customer_address': customer_data.billing_address,
        'customer_place_of_supply': customer_data.place_of_supply,
    }
    print('SUCCESS')
    return JsonResponse(data)   

def createReccuringBill(request):
    if request.method == "POST":
        vendor_id = request.POST.get('vendor_id')
    return redirect('recurring_bill_listout')

def create_repeat_every(request):
    repeat_type = request.POST['repeat_type']
    repeat_duration = request.POST.get('repeat_duration')
    print(repeat_type)
    print(repeat_duration)
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        if RecurringRepeatEvery.objects.filter(repeat_type=repeat_type,company=company).exists() and RecurringRepeatEvery.objects.filter(repeat_duration=repeat_duration,company=company).exists():
            error_response = {
                'error':'An error occured',
                'message':"Day's already exist",
            }
            print('both exist')
            messages.info(request,'Repeat Type with Duration already exist')
            data={
                'error':'error',
            }
            return JsonResponse(error_response,status =400)
        else:
            repeat = RecurringRepeatEvery(
                login_details=log_details,
                company=company,
                repeat_duration=repeat_duration,
                repeat_type=repeat_type,)
            repeat.save()
            print('REPEAT ADDED SUCCESSFULL')
            data={
                'success':'success',
            }
            return JsonResponse(data)

def add_new_creadit_period(request):
    credit_name = request.POST['term_name']
    credit_days = request.POST.get('term_days')
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        if not RecurringCreditPeriod.objects.filter(credit_name=credit_name,company=company).exists():
            if not RecurringCreditPeriod.objects.filter(days=credit_days,company=company).exists():
                credit = RecurringCreditPeriod(
                            login_details=log_details,
                            company=company,
                            credit_name=credit_name,
                            days=credit_days,)
                credit.save()
                print('CREDIT ADDED SUCCESSFULL')
                data={
                    'success':'success',
                }
                return JsonResponse(data)
            else:
                print('days exiost')
                error_response = {
                    'error':'An error occured',
                    'message':"Day's already exist",
                }
                messages.info(request,'Credit period with this day already exist')
                return JsonResponse(error_response,status =400)
        else:
            error_response = {
                'error':'An error occured',
                'message':"Day's already exist",
            }
            print('name exist')
            messages.info(request,'Credit period with this name already exist')
            data={
                'error':'error',
            }
            return JsonResponse(error_response,status =400)
        

def check_vendor_work_phone_exist(request):
    if request.method == 'GET':
        vendorwPhone = request.GET.get('vendorw_Phone', None)

        if vendorwPhone is not None:  # Ensure the parameter is provided
            exists = Vendor.objects.filter(phone=vendorwPhone).exists()
            return JsonResponse({'exists': exists})
        else:
            return JsonResponse({'exists': False})  # Return False if parameter is not provided
    else:
        return JsonResponse({'exists': False})  # Return False for non-GET requests

def check_vendor_phonenumber_exist(request):
    if request.method == 'GET':
       vendormPhone = request.GET.get('vendorm_Phone', None)

       if vendormPhone:
          
            exists = Vendor.objects.filter(
                    mobile=vendormPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})


def recurr_vendor_create(request):
   
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        

       
        if request.method=="POST":
            vendor_data=Vendor()
            vendor_data.login_details=log_details
            vendor_data.company=dash_details
            vendor_data.title = request.POST.get('salutation')
            vendor_data.first_name=request.POST['first_name']
            vendor_data.last_name=request.POST['last_name']
            vendor_data.company_name=request.POST['company_name']
            vendor_data.vendor_display_name=request.POST['v_display_name']
            vendor_data.vendor_email=request.POST['vendor_email']
            vendor_data.phone=request.POST['w_phone']
            vendor_data.mobile=request.POST['m_phone']
            vendor_data.skype_name_number=request.POST['skype_number']
            vendor_data.designation=request.POST['designation']
            vendor_data.department=request.POST['department']
            vendor_data.website=request.POST['website']
            vendor_data.gst_treatment=request.POST['gst']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remark']
            vendor_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_number']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_number']
                vendor_data.pan_number=request.POST['pan_number']

            vendor_data.source_of_supply=request.POST['source_supply']
            vendor_data.currency=request.POST['currency']
            print(vendor_data.currency)
            op_type=request.POST.get('op_type')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
    
            vendor_data.opening_balance=request.POST['opening_bal']
            vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])

           
            vendor_data.billing_attention=request.POST['battention']
            vendor_data.billing_country=request.POST['bcountry']
            vendor_data.billing_address=request.POST['baddress']
            vendor_data.billing_city=request.POST['bcity']
            vendor_data.billing_state=request.POST['bstate']
            vendor_data.billing_pin_code=request.POST['bzip']
            vendor_data.billing_phone=request.POST['bphone']
            vendor_data.billing_fax=request.POST['bfax']
            vendor_data.shipping_attention=request.POST['sattention']
            vendor_data.shipping_country=request.POST['s_country']
            vendor_data.shipping_address=request.POST['saddress']
            vendor_data.shipping_city=request.POST['scity']
            vendor_data.shipping_state=request.POST['sstate']
            vendor_data.shipping_pin_code=request.POST['szip']
            vendor_data.shipping_phone=request.POST['sphone']
            vendor_data.shipping_fax=request.POST['sfax']
            vendor_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=dash_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            rdata=Vendor_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=dash_details
            rdata.vendor=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = VendorContactPerson.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                        work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=dash_details,vendor=vendor)
                
        
            messages.success(request, 'Data saved successfully!')   

            data = {
                'vendor_first_name':vendor_data.first_name,
                'vendor_id':vendor_data.id,
            }
        
            return redirect('recurring_bill_create')
        
        else:
            messages.error(request, 'Some error occurred !')   

            error = {
                'error':'error',
            }

            return redirect('recurring_bill_create')


def recurr_customer_create(request):
   
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        

       
        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=log_details
            customer_data.company=comp_details
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['cust_gstin']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type=op_type
            else:
                customer_data.opening_balance_type='Opening Balance not selected'
    
            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                 customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                 customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'
    



           
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=comp_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=comp_details
            rdata.customer=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = CustomerContactPersons.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=comp_details,customer=vendor)
                
        
            messages.success(request, 'Customer created successfully!')   
            print('CREATE CUSTOMER SUCCESS')
            data = {
                'customer_fname':customer_data.first_name,
                'customer_id':customer_data.id,
            }
            return JsonResponse(data)
        
        else:
            messages.error(request, 'Some error occurred !')   
            print('CREATE CUSTOMER ERROR')
            error={
                'error':'error',
            }
            return JsonResponse(error,status=400)


def add_new_recrring_bill(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

        recurring_bill_data = Recurring_bills()
        recurring_bill_data.login_details = log_details
        recurring_bill_data.company = comp_details
        recurring_bill_data.vendor_details = Vendor.objects.get(id=request.POST.get('vendor_id')) 
        recurring_bill_data.vend_name = request.POST.get('vendor_name')
        recurring_bill_data.vend_mail = request.POST.get('vendorEmail')
        recurring_bill_data.vend_gst_treat = request.POST.get('gst_type')
        recurring_bill_data.vend_gst_no = request.POST.get('gstin')
        recurring_bill_data.vend_source_of_supply = request.POST.get('vendor_source_of_suppy')
        recurring_bill_data.vend_billing_address = request.POST.get('vendor_bill_address')
        recurring_bill_data.recc_bill_no = request.POST.get('bill_number')
        recurring_bill_data.recc_ref_no = request.POST.get('reference_number')
        recurring_bill_data.profile_name = request.POST.get('profile_name')
        recurring_bill_data.purchase_order_no = request.POST.get('order_number')

        repeat_every = request.POST.get('repeat_every_recurr')
        if repeat_every == '3 month':
            recurring_bill_data.repeat_every_duration = 3
            recurring_bill_data.repeat_every_type = 'month'
        elif repeat_every == '6 month':
            recurring_bill_data.repeat_every_duration = 6
            recurring_bill_data.repeat_every_type = 'month'
        elif repeat_every == '1 year':
            recurring_bill_data.repeat_every_duration = 1
            recurring_bill_data.repeat_every_type = 'year'
        else:
            recurring_bill_data.repeat_every_id = RecurringRepeatEvery.objects.get(company=comp_details,id=request.POST.get('repeat_every_recurr'))
        
        unformated_date = request.POST.get('rec_bil_Date')
        formatted_date = datetime.strptime(unformated_date,'%Y-%m-%d').date()
        recurring_bill_data.rec_bill_date = formatted_date
        recurring_bill_data.expiry_date = request.POST.get('due_date')

        credit_period = request.POST.get('credit_period')
        print('*')
        print(credit_period)
        print('*')
        if credit_period == '0':
            recurring_bill_data.credit_period_termname = 'Due on Reciept'
            recurring_bill_data.credit_period_days = 0
        elif credit_period == '30':
            recurring_bill_data.credit_period_termname = 'NET 30'
            recurring_bill_data.credit_period_days = 30
        elif credit_period == '60':
            recurring_bill_data.credit_period_termname = 'NET 60'
            recurring_bill_data.credit_period_days = 60
        else:
            print('=================================================')
            print(request.POST.get('credit_period'))
            recurring_bill_data.credit_period_id = RecurringCreditPeriod.objects.get(company=comp_details,days=request.POST.get('credit_period'))
            print('=================================================')
            print(recurring_bill_data.credit_period_id.id)
            print('=================================================')


        if request.POST.get('account_id'):
            recurring_bill_data.customer_details = Customer.objects.get(id=request.POST.get('account_id')) 
            recurring_bill_data.cust_name = request.POST.get('customer_name')
            recurring_bill_data.cust_mail = request.POST.get('customerEmail')
            recurring_bill_data.cust_gst_treat = request.POST.get('cust_gst_type')
            recurring_bill_data.cust_gst_no = request.POST.get('cust_gstin')
            recurring_bill_data.cust_billing_address = request.POST.get('cust_bill_address')
            print('--------------------------------------------------')
            print(request.POST.get('cust_bill_address'))
            print('--------------------------------------------------')
            recurring_bill_data.cust_place_of_supply = request.POST.get('place_of_supply')
        
        recurring_bill_data.payment_type = request.POST.get('payment_method')
        if request.POST.get('cheque_id'):
            recurring_bill_data.cheque_no = request.POST.get('cheque_id')
        if request.POST.get('upi_id'):
            recurring_bill_data.upi_id = request.POST.get('upi_id')
        if request.POST.get('bnk_id'):
            print('////////////////////////////////////////')
            print(request.POST.get('bnk_id'))
            print('////////////////////////////////////////')
            if Banking.objects.filter(company=comp_details,bnk_acno=request.POST.get('bnk_id')).exists():
                bank = Banking.objects.filter(company=comp_details,bnk_acno=request.POST.get('bnk_id')).first() 
                recurring_bill_data.bank_id = bank
                recurring_bill_data.bank_name = bank.bnk_name
                recurring_bill_data.bank_acc_no = bank.bnk_acno

        if request.POST.get('name_latest1'):
            recurring_bill_data.price_list = PriceList.objects.get(company=comp_details,id=request.POST.get('name_latest1'))

        recurring_bill_data.sub_total = request.POST.get('subtotal')
        recurring_bill_data.igst = request.POST.get('igst')
        recurring_bill_data.cgst = request.POST.get('cgst')
        recurring_bill_data.sgst = request.POST.get('sgst')
        recurring_bill_data.tax_amount = request.POST.get('taxamount')
        recurring_bill_data.shipping_charge = request.POST.get('ship')
        recurring_bill_data.adjustment = request.POST.get('adj')
        recurring_bill_data.total = request.POST.get('grandtotal')
        recurring_bill_data.paid = request.POST.get('advance')
        recurring_bill_data.bal = request.POST.get('balance')
        if 'Draft' in request.POST:
            recurring_bill_data.status = 'Draft'
        elif 'Save' in request.POST:
            recurring_bill_data.status = 'Save'
        recurring_bill_data.note = request.POST.get('note')
        recurring_bill_data.document = request.POST.get('file')

        recurring_bill_data.save()

        item_id = request.POST.getlist('item_id[]')
        item_name = request.POST.getlist('item_name[]')
        hsn = request.POST.getlist('hsn[]')
        qty = request.POST.getlist('qty[]')
        price = request.POST.getlist('price[]')
        taxGST = request.POST.getlist('taxGST[]')
        taxIGST = request.POST.getlist('taxIGST[]')
        discount = request.POST.getlist('discount[]')
        total = request.POST.getlist('total[]')

        for i in range(len(item_name)) :
            item=Items.objects.get(id=item_id[i])

            recurr_item = RecurrItemsList(
                item_id=item,
                item_name=item_name[i],
                item_hsn=hsn[i],
                total_qty=item.current_stock,
                qty=qty[i],
                bal_qty=int(item.current_stock)+int(qty[i]),
                price=price[i],
                taxGST=taxGST[i],
                taxIGST=taxIGST[i],
                discount=discount[i],
                total=total[i],
                recurr_bill_id =recurring_bill_data,
            )
            recurr_item.save()

            item.current_stock = int(item.current_stock)+int(qty[i])
            item.save()


        rec_bill_number = request.POST.get('bill_number')
        if RecurringRecievedId.objects.filter(company=comp_details).exists():
            recc = RecurringRecievedId.objects.filter(company=comp_details)
            recc_id = recc.last()
            recc_id1 = recc.last()

            # Check if there is a second last journal record
            if recc.exclude(id=recc_id.id).last():
                recc_id_second_last = recc.exclude(id=recc_id.id).last()
                pattern = recc_id_second_last.pattern
            else:
                recc_id_second_last = recc.first()
                pattern = recc_id_second_last.pattern

            if rec_bill_number != recc_id.recc_rec_number and rec_bill_number != '':
                # Creating a new RecurringRecievedId instance
                recc_id = RecurringRecievedId(company=comp_details)
                count_for_ref_no = RecurringRecievedId.objects.filter(company=comp_details.id).count()
                recc_id.pattern = pattern
                recc_id.save()

                # Using count_for_ref_no + 1 as the reference number
                ref_num = int(count_for_ref_no) + 2
                recc_id.ref_number = f'{ref_num:02}'

                recc_id.recc_rec_number = recc_id1.recc_rec_number
                recc_id.save()
            else:
                # Creating a new RecurringRecievedId instance
                recc_id = RecurringRecievedId(company=comp_details)
                count_for_ref_no = RecurringRecievedId.objects.filter(company=comp_details.id).count()
                recc_id.pattern = pattern
                recc_id.save()

                # Using count_for_ref_no + 1 as the reference number
                ref_num = int(count_for_ref_no) + 2
                recc_id.ref_number = f'{ref_num:02}'

                # Incrementing the recc_rec_number
                recc_rec_num = ''.join(i for i in recc_id1.recc_rec_number if i.isdigit())
                recc_rec_num = int(recc_rec_num)+1
                print("#################################")
                print(f"-----------------{recc_id1}-----------------")
                recc_id.recc_rec_number = f'{pattern}{recc_rec_num:02}'
                print(recc_id.recc_rec_number)
                recc_id.save()
                
        else:
            # Creating a new RecurringRecievedId instance
            recc_id = RecurringRecievedId(company=comp_details)
            recc_id.save()

            # Setting initial values for ref_number, pattern, and recc_rec_number
            recc_id.ref_number = f'{2:02}'

            pattern = ''.join(i for i in rec_bill_number if not i.isdigit())
            recc_id.pattern = pattern
            recc_id.recc_rec_number = f'{pattern}{2:02}'
            recc_id.save()

        # history creation
        recurr_history = Recurr_history()
        recurr_history.company = comp_details
        recurr_history.login_details = log_details
        recurr_history.Recurr = recurring_bill_data
        recurr_history.action = 'Created'
        recurr_history.save()

        print('RECURRING BILL CREATED SUCCESS FULL')

    return redirect('recurring_bill_listout') 
    

def check_rec_bill_no_valid(request):
    login_id = request.session['login_id']
    if 'login_id' not in request.session:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=login_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        company = dash_details.company
    elif log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        company = dash_details
    recurr = RecurringRecievedId.objects.filter(company=company)
    recurr_bill_number = request.POST.get('bill_no')  
    print(f'================== recurr_bill_number = {recurr_bill_number}  ==================')
    if recurr.exists():
        last = recurr.last()
        last_id = last.recc_rec_number
        print(f'================== last_id = {last_id}==================')
        if recurr_bill_number == last_id:
            data = {"valid":"valid"}
            return JsonResponse(data)
        else:
            data = {"error":"error"}
            return JsonResponse(data,status=400)
    else:
        print('doesnt exist')
        data = {"valid":"valid"}
        return JsonResponse(data)

def get_price_list_percentage(request,pk):
    try:
        price_list = PriceList.objects.get(id=pk)
        price_list_percentage =  price_list.percentage_value
        percentage_type = price_list.percentage_type
        data = {
            'price_list_percentage':price_list_percentage,
            'percentage_type':percentage_type,
        }
        return JsonResponse(data)
    except:
        error = {
            'error':'error'
        }
        return JsonResponse(error,status=400)

def recurr_overview(request,pk):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        allmodules= ZohoModules.objects.get(company=company,status='New')
        recurr_bill = Recurring_bills.objects.get(id=pk)
        recurr_lists = Recurring_bills.objects.filter(company=company)
        last_history = Recurr_history.objects.filter(Recurr=recurr_bill.id).last()
        history = Recurr_history.objects.filter(Recurr=recurr_bill.id)
        recurr_items = RecurrItemsList.objects.filter(recurr_bill_id=recurr_bill.id)
        recurr_comment = recurr_comments.objects.filter(recurr=recurr_bill)
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'recurr_bill': recurr_bill,
            'recurr_lists':recurr_lists,
            'recurr_items':recurr_items,
            'last_history':last_history,
            'recurr_comment':recurr_comment,
            'history':history,
            'company':company,
        }
        return render(request, 'zohomodules/recurring_bill/recurr_overview.html',context)

def delete_recurr_bill(request,pk):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
    recurr_bill = Recurring_bills.objects.get(id=pk)
    recurr_bill.delete()
    if Recurring_bills.objects.filter(company=company).exists():
        first = Recurring_bills.objects.filter(company=company).first()
        return redirect('recurr_overview',pk=first.id)
    else:
        return redirect('recurring_bill_listout')

def recurr_add_item_unit(request):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            company = StaffDetails.objects.get(login_details=log_details).company
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)

        if request.method == "POST":
            name = request.POST['name'].upper()
            print('==========================================')
            print(name)
            print('==========================================')

            if not Unit.objects.filter(company = company, unit_name__iexact = name).exists():
                unit = Unit(
                    company = company,
                    unit_name = name
                )
                unit.save()

                return JsonResponse({'status':True,'unit_name':name,'unit_id':unit.id})
            else:
                return JsonResponse({'status':False, 'message':'Unit already exists.!'})

def recurr_add_item_account(request):                                                                   #new by tinto mt
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')

def recurr_item_creation(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = 0 if request.POST['pcost'] == "" else request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = 0 if request.POST['salesprice'] == "" else request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = 0 if request.POST['min_stock'] == "" else request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag = 'active',
                type = 'Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = log_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def add_document_recurr(request,pk):
    if request.method == "POST":
        document = request.FILES['file']
        recurr = Recurring_bills.objects.get(id=pk)
        recurr.document = document
        recurr.save()
    return redirect('recurr_overview',pk=pk)

def add_comments_recurr(request,pk):
    if request.method == "POST":
        comment = request.POST.get('comment')
        recurr = Recurring_bills.objects.get(id=pk)
        recurr_comment = recurr_comments.objects.get_or_create(recurr=recurr,comment=comment)
        recurr.save()
    return redirect('recurr_overview',pk=pk)

def delete_comment_recurr(request,pk,recurr_id):
    try:
        recurr_comment = recurr_comments.objects.get(id=pk)
        recurr_comment.delete()
    except:
        pass
    return redirect('recurr_overview',pk=recurr_id)


def share_email_recurr(request,pk):
    try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                

                if 'login_id' not in request.session:
                    return redirect('/')
                else:
                    login_id = request.session['login_id']
                    if 'login_id' not in request.session:
                        return redirect('/')
                    log_details= LoginDetails.objects.get(id=login_id)
                    if log_details.user_type == 'Staff':
                        dash_details = StaffDetails.objects.get(login_details=log_details)
                        company = dash_details.company
                    elif log_details.user_type == 'Company':
                        dash_details = CompanyDetails.objects.get(login_details=log_details)
                        company = dash_details
                emails_list = [email.strip() for email in emails_string.split(',')]
                allmodules= ZohoModules.objects.get(company=company,status='New')
                recurr_bill = Recurring_bills.objects.get(id=pk)
                recurr_lists = Recurring_bills.objects.filter(company=company)
                last_history = Recurr_history.objects.filter(Recurr=recurr_bill.id).last()
                history = Recurr_history.objects.filter(Recurr=recurr_bill.id)
                recurr_items = RecurrItemsList.objects.filter(recurr_bill_id=recurr_bill.id)
                recurr_comment = recurr_comments.objects.filter(recurr=recurr_bill)
                context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'recurr_bill': recurr_bill,
                    'recurr_lists':recurr_lists,
                    'recurr_items':recurr_items,
                    'last_history':last_history,
                    'recurr_comment':recurr_comment,
                    'history':history,
                }
                template_path = 'zohomodules/recurring_bill/recurr_template1.html'
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'{recurr_bill.recc_bill_no}details - {recurr_bill.id}.pdf'
                subject = f"{recurr_bill.profile_name}{recurr_bill.recc_bill_no}  - {recurr_bill.id}-details"
                body="hi, here is your recurring bill "
                email = EmailMessage(
                    subject,
                    body,
                    settings.EMAIL_HOST_USER,
                    ["vuashikh16@gmail.com"],
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                # subject = 'Subject of the Email'
                # body = 'Message Body'
                # filename = 'attachment.pdf' 
                # pdf = open('/home/user/altos_technologies/ALTOS_LIVE_PROJECT/23-03-2024(zoho_book_final_reccuring_bill)/Zoho/Zoho_Project/media/docs/download_da8ctzY.pdf', 'rb').read()  # Replace '/path/to/attachment.pdf' with the path to your attachment

                # email = EmailMessage(
                #     subject=subject,
                #     body=body,
                #     from_email="vuashikh16@gmail.com",
                #     to=["vuashikh16@gmail.com"],
                # )
                # email.attach(filename, pdf, "application/pdf")
                # email.send()
                # messages.success(request, 'over view page has been shared via email successfully..!')
                # return redirect('recurr_overview',pk)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect('recurr_overview',pk)
    
def recurr_bill_edit(request,pk):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        allmodules= ZohoModules.objects.get(company=company,status='New')
        recurr_bill = Recurring_bills.objects.get(id=pk)
        recurr_lists = Recurring_bills.objects.filter(company=company)
        last_history = Recurr_history.objects.filter(Recurr=recurr_bill.id).last()
        history = Recurr_history.objects.filter(Recurr=recurr_bill.id)
        recurr_items = RecurrItemsList.objects.filter(recurr_bill_id=recurr_bill.id)
        recurr_comment = recurr_comments.objects.filter(recurr=recurr_bill)

        item=Items.objects.filter(company=company)
        banks = Banking.objects.filter(company=company)
        vendors = Vendor.objects.filter(company=company)
        customers = Customer.objects.filter(company=company)
        pricelist = PriceList.objects.filter(company=company,status='Active',type='Purchase')
        items = Items.objects.filter(company=company)
        credits = RecurringCreditPeriod.objects.filter(company=company)
        repeat_list = RecurringRepeatEvery.objects.filter(company=company)
        payments=Company_Payment_Term.objects.filter(company_id = company)
        recc_bill_no = RecurringRecievedId.objects.filter(company=company).last()
        units = Unit.objects.filter(company=company)
        accounts=Chart_of_Accounts.objects.filter(company=company)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'recurr_bill': recurr_bill,
            'recurr_lists':recurr_lists,
            'recurr_items':recurr_items,
            'last_history':last_history,
            'recurr_comment':recurr_comment,
            'history':history,
            'item':item,
            'banks':banks,
            'vendors':vendors,
            "customers":customers,
            'items':items,
            'pricelist':pricelist,
            'credits':credits,
            'repeat_list':repeat_list,
            'payments':payments,
            'recc_bill_no':recc_bill_no,
            'units':units,
            'accounts':accounts,
            'company':company,
        }
    return render(request,'zohomodules/recurring_bill/recurring_bill_edit.html',context)


def recurr_bill_update(request,pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)
            
        recurring_bill_data = Recurring_bills.objects.get(id=pk)
        recurring_bill_data.login_details = log_details
        recurring_bill_data.company = comp_details
        if request.POST.get('vendor_id'):
            recurring_bill_data.vendor_details = Vendor.objects.get(id=request.POST.get('vendor_id')) 
        recurring_bill_data.vend_name = request.POST.get('vendor_name')
        recurring_bill_data.vend_mail = request.POST.get('vendorEmail')
        recurring_bill_data.vend_gst_treat = request.POST.get('gst_type')
        recurring_bill_data.vend_gst_no = request.POST.get('gstin')
        recurring_bill_data.vend_source_of_supply = request.POST.get('vendor_source_of_suppy')
        recurring_bill_data.vend_billing_address = request.POST.get('vendor_bill_address')
        recurring_bill_data.recc_bill_no = request.POST.get('bill_number')
        recurring_bill_data.recc_ref_no = request.POST.get('reference_number')
        recurring_bill_data.profile_name = request.POST.get('profile_name')
        recurring_bill_data.purchase_order_no = request.POST.get('order_number')

        repeat_every = request.POST.get('repeat_every_recurr')
        if repeat_every == '3 month':
            recurring_bill_data.repeat_every_duration = 3
            recurring_bill_data.repeat_every_type = 'month'
        elif repeat_every == '6 month':
            recurring_bill_data.repeat_every_duration = 6
            recurring_bill_data.repeat_every_type = 'month'
        elif repeat_every == '1 year':
            recurring_bill_data.repeat_every_duration = 1
            recurring_bill_data.repeat_every_type = 'year'
        else:
            recurring_bill_data.repeat_every_id = RecurringRepeatEvery.objects.get(company=comp_details,id=request.POST.get('repeat_every_recurr'))
        
        unformated_date = request.POST.get('rec_bil_Date')
        formatted_date = datetime.strptime(unformated_date,'%Y-%m-%d').date()
        recurring_bill_data.rec_bill_date = formatted_date
        recurring_bill_data.expiry_date = request.POST.get('due_date')

        credit_period = request.POST.get('credit_period')
        if credit_period == '0':
            recurring_bill_data.credit_period_termname = 'Due on Reciept'
            recurring_bill_data.credit_period_days = 0
        elif credit_period == '30':
            recurring_bill_data.credit_period_termname = 'NET 30'
            recurring_bill_data.credit_period_days = 30
        elif credit_period == '60':
            recurring_bill_data.credit_period_termname = 'NET 60'
            recurring_bill_data.credit_period_days = 60
        else:
            recurring_bill_data.credit_period_id = RecurringCreditPeriod.objects.get(company=comp_details,days=request.POST.get('credit_period'))

        if request.POST.get('account_id'):
            recurring_bill_data.customer_details = Customer.objects.get(id=request.POST.get('account_id')) 
            recurring_bill_data.cust_name = request.POST.get('customer_name')
            recurring_bill_data.cust_mail = request.POST.get('customerEmail')
            recurring_bill_data.cust_gst_treat = request.POST.get('cust_gst_type')
            recurring_bill_data.cust_gst_no = request.POST.get('cust_gstin')
            recurring_bill_data.cust_billing_address = request.POST.get('cust_bill_address')
            recurring_bill_data.cust_place_of_supply = request.POST.get('place_of_supply')
        
        recurring_bill_data.payment_type = request.POST.get('payment_method')

        if request.POST.get('payment_method') == 'Cash':
            recurring_bill_data.cheque_no = None
            recurring_bill_data.upi_id = None
            recurring_bill_data.bank_id = None
        elif request.POST.get('payment_method') == 'Cheque':
            recurring_bill_data.upi_id = None
            recurring_bill_data.bank_id = None
        elif request.POST.get('payment_method') == 'UPI':
            recurring_bill_data.bank_id = None
            recurring_bill_data.cheque_no = None
        else:
            recurring_bill_data.cheque_no = None
            recurring_bill_data.upi_id = None

        if request.POST.get('cheque_id'):
            recurring_bill_data.cheque_no = request.POST.get('cheque_id')
        elif request.POST.get('upi_id'):
            recurring_bill_data.upi_id = request.POST.get('upi_id')
        elif request.POST.get('bnk_id'):
            recurring_bill_data.bank_id = Banking.objects.get(id=request.POST.get('payment_method'))

            
        if 'price_enable' not in request.POST:
            recurring_bill_data.price_list = None
        else:
            if request.POST.get('name_latest1'):
                recurring_bill_data.price_list = PriceList.objects.get(id=request.POST.get('name_latest1'))
            else:
                recurring_bill_data.price_list = None

        recurring_bill_data.sub_total = request.POST.get('subtotal')
        recurring_bill_data.igst = request.POST.get('igst')
        recurring_bill_data.cgst = request.POST.get('cgst')
        recurring_bill_data.sgst = request.POST.get('sgst')
        recurring_bill_data.tax_amount = request.POST.get('taxamount')
        recurring_bill_data.shipping_charge = request.POST.get('ship')
        recurring_bill_data.adjustment = request.POST.get('adj')
        recurring_bill_data.total = request.POST.get('grandtotal')
        recurring_bill_data.paid = request.POST.get('advance')
        recurring_bill_data.bal = request.POST.get('balance')
        if 'Draft' in request.POST:
            recurring_bill_data.status = 'Draft'
        elif 'Save' in request.POST:
            recurring_bill_data.status = 'Save'
        recurring_bill_data.note = request.POST.get('note')
        recurring_bill_data.document = request.POST.get('file')

        recurring_bill_data.save()

        item_id = request.POST.getlist('item_id[]')
        item_name = request.POST.getlist('item_name[]')
        hsn = request.POST.getlist('hsn[]')
        qty = request.POST.getlist('qty[]')
        price = request.POST.getlist('price[]')
        taxGST = request.POST.getlist('taxGST[]')
        taxIGST = request.POST.getlist('taxIGST[]')
        discount = request.POST.getlist('discount[]')
        total = request.POST.getlist('total[]')

        # stock reset and  delete item list
        recurr_item_list = RecurrItemsList.objects.filter(recurr_bill_id=pk,item_id__isnull=False)
        
        for i in recurr_item_list:
            # check if item excist 
            try:
                item = Items.objects.get(id=i.item_id.id)
                item.current_stock = int(item.current_stock)-int(i.qty)
                item.save()
            except:
                pass
 
        recurr_item_list.delete()

        # re-create item list
        for i in range(len(item_name)) :
            try:
                item=Items.objects.get(id=item_id[i])

                recurr_item = RecurrItemsList(
                    item_id=item,
                    item_name=item_name[i],
                    item_hsn=hsn[i],
                    total_qty=item.current_stock,
                    qty=qty[i],
                    bal_qty=int(item.current_stock)-int(qty[i]),
                    price=price[i],
                    taxGST=taxGST[i],
                    taxIGST=taxIGST[i],
                    discount=discount[i],
                    total=total[i],
                    recurr_bill_id =recurring_bill_data,
                )
                recurr_item.save()

                item.current_stock = int(item.current_stock)-int(qty[i])
                item.save()
            except:
                pass
        

        # history creation
        recurr_history = Recurr_history()
        recurr_history.company = comp_details
        recurr_history.login_details = log_details
        recurr_history.Recurr = recurring_bill_data
        recurr_history.action = 'Edited'
        recurr_history.save()

        print('RECURRING BILL Edited SUCCESS FULL')

    return redirect('recurr_overview',pk=pk)

def downloadRecurringBillSampleImportFile(request):
    recInv_table_data = [['SLNO','Vendor Name','Email','GST Treatment','GSTIN','Billing Address','Source of supply','RB NO','Reference Number','Profile Name','Purchase Order Number','Repeat Every','Reccuring Bill Date','Expiry Date','Credit Period','Credit days','Customer Name','Email','GST Type','GSTIN','Billing Address','Place of supply','Payment Type','cheque_no','upi_id','bank_name','bank_acc_no','Price list','Note','Sub Total','IGST','CGST','SGST','Tax Amount','Adjustment','Shipping Charge','Grand Total','Paid','Balance'],
                         ['1', 'Kevin Debryne', 'kevin@gmail.com','Registered Business-Regular Business that is registered under GST','45AAAAA0000A1Z5','ekm', '[KL]-Kerala', 'rec_bill-01', '', 'profile name1', '12', '3 month', '2024-04-01', '2024-06-08', 'NET 60','60', 'vinu das', 'vinudas@gmail.com', 'Unregistered Business-not Registered under GST', '', 'kozhikkod', '[OT]-Other Territory', 'Cheque','265489','','','', 'price list1', 'Example Note', 1000, 50, 50, 50, 150, 10, 20, 30, 90, 60]]
    items_table_data = [['RI NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL'], 
                        ['1', 'Test Item 1','789987','1','1000','5','0','1000']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'recurring_bill'
    sheet2 = wb.create_sheet(title='items')

    # Populate the sheets with data
    for row in recInv_table_data:
        sheet1.append(row)

    for row in items_table_data:
        sheet2.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=recurring_invoice_sample_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response

def importRecurringBillFromExcel(request):
    print('ENTERED')
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["recurring_bill"]
            except:
                print('sheet not found')
                messages.error(request,'`recurring_invoice` sheet not found.! Please check.')
                return redirect('recurring_bill_listout')

            try:
                ws = wb["items"]
            except:
                print('sheet not found')
                messages.error(request,'`items` sheet not found.! Please check.')
                return redirect('recurring_bill_listout')
            
            ws = wb["recurring_bill"]
            rec_inv_columns = ['SLNO','Vendor Name','Email','GST Treatment','GSTIN','Billing Address','Source of supply','RB NO','Reference Number','Profile Name','Purchase Order Number','Repeat Every','Reccuring Bill Date','Expiry Date','Credit Period','Credit days','Customer Name','Email','GST Type','GSTIN','Billing Address','Place of supply','Payment Type','cheque_no','upi_id','bank_name','bank_acc_no','Price list','Note','Sub Total','IGST','CGST','SGST','Tax Amount','Adjustment','Shipping Charge','Grand Total','Paid','Balance']
            rec_inv_sheet = [cell.value for cell in ws[1]]
            if rec_inv_sheet != rec_inv_columns:
                print('invalid sheet')
                messages.error(request,'`recurring_bill` sheet column names or order is not in the required formate.! Please check.')
                return redirect('recurring_bill_listout')

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, vendor_name,vend_mail,vend_gst_type, vend_gstin, vend_address, vend_supply, rb_no, rb_ref_no, rec_prof_name, purchase_order_no, repeat_every, rec_bill_date, exp_date, credit_period, credit_days,cust_name, cust_mail, cust_gst_type, cust_gstin, cust_address, cust_supply, pay_type, cheque_no,upi_id,bank_name,bank_acc_no, price_list, note, subtotal,igst,cgst,sgst,tax_amnt,adj,ship_charge,gtnt_total, paid,bal = row
                if any(i is None or i == '' for i in (slno, vendor_name, vend_mail, vend_gst_type, vend_address, vend_supply, repeat_every, rec_bill_date, exp_date, credit_period, credit_days,cust_name, cust_mail, cust_gst_type, cust_address, cust_supply, pay_type, subtotal, igst, cgst, sgst, tax_amnt, adj, ship_charge, gtnt_total, paid, bal)):
                    print('recurringInvoice == invalid data')
                    messages.error(request,'`recurring_invoice` sheet entries missing required fields.! Please check.')
                    return redirect('recurring_bill_listout')
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns = ['RI NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL']
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`items` sheet column names or order is not in the required formate.! Please check.')
                return redirect('recurring_bill_listout')

            for row in ws.iter_rows(min_row=2, values_only=True):
                rb_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                if rb_no is None or name is None or quantity is None or tax_percentage is None or total is None:
                    print('items == invalid data')
                    messages.error(request,'`items` sheet entries missing required fields.! Please check.')
                    return redirect('recurring_bill_listout')
            
            # getting data from rec_invoice sheet and create rec_invoice.
            incorrect_data = []
            existing_pattern = []
            ws = wb['recurring_bill']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, vendor_name,vend_mail,vend_gst_type, vend_gstin, vend_address, vend_supply, rb_bill_no, rb_ref_no, rec_prof_name, purchase_order_no, repeat_every, rec_bill_date, exp_date, credit_period, credit_days,cust_name, cust_mail, cust_gst_type, cust_gstin, cust_address, cust_supply, pay_type, cheque_no,upi_id,bank_name,bank_acc_no, price_list, note, subtotal,igst,cgst,sgst,tax_amnt,adj,ship_charge,gtnt_total, paid,bal = row
                recInvNo = slno
                if slno is None:
                    continue
                recurring_bill_data = Recurring_bills()
                recurring_bill_data.login_details = log_details
                recurring_bill_data.company = comp_details
                recurring_bill_data.vendor_details = None
                recurring_bill_data.vend_name = vendor_name
                recurring_bill_data.vend_mail = vend_mail
                recurring_bill_data.vend_gst_treat = vend_gst_type
                recurring_bill_data.vend_gst_no = vend_gstin
                recurring_bill_data.vend_source_of_supply = vend_supply
                recurring_bill_data.vend_billing_address = vend_address
                recurring_bill_data.profile_name = rec_prof_name
                recurring_bill_data.purchase_order_no = purchase_order_no

                repeat_every = repeat_every
                if repeat_every == '3 month':
                    recurring_bill_data.repeat_every_duration = 3
                    recurring_bill_data.repeat_every_type = 'month'
                elif repeat_every == '6 month':
                    recurring_bill_data.repeat_every_duration = 6
                    recurring_bill_data.repeat_every_type = 'month'
                elif repeat_every == '1 year':
                    recurring_bill_data.repeat_every_duration = 1
                    recurring_bill_data.repeat_every_type = 'year'
                else:
                    recurring_bill_data.repeat_every_duration = int(repeat_every.split()[0])
                    recurring_bill_data.repeat_every_type = str(repeat_every.split()[1])
                
                unformated_date = rec_bill_date
                formatted_date = datetime.strptime(unformated_date,'%Y-%m-%d').date()
                recurring_bill_data.rec_bill_date = formatted_date
                recurring_bill_data.expiry_date = exp_date

                credit_period = credit_period
                print('*************************************************')
                print(credit_period)
                print('*************************************************')
                if credit_period == '0':
                    recurring_bill_data.credit_period_termname = 'Due on Reciept'
                    recurring_bill_data.credit_period_days = 0
                elif credit_period == '30':
                    recurring_bill_data.credit_period_termname = 'NET 30'
                    recurring_bill_data.credit_period_days = 30
                elif credit_period == '60':
                    recurring_bill_data.credit_period_termname = 'NET 60'
                    recurring_bill_data.credit_period_days = 60
                else:
                    print('=================================================')
                    print(request.POST.get('credit_period'))
                    if RecurringCreditPeriod.objects.filter(company=comp_details,days=credit_days,credit_name=credit_period).exists():
                        credit_data = RecurringCreditPeriod.objects.filter(company=comp_details,days=credit_days,credit_name=credit_period).first()
                        recurring_bill_data.credit_period_id = credit_data
                        recurring_bill_data.credit_period_termname = credit_data.credit_name
                        recurring_bill_data.credit_period_days = credit_data.days
                    else:
                        recurring_bill_data.credit_period_id = None
                        recurring_bill_data.credit_period_termname = credit_period
                        recurring_bill_data.credit_period_days = credit_days
                    print('=================================================')
                    # print(recurring_bill_data.credit_period_id.id)
                    print('=================================================')

                recurring_bill_data.customer_details = None
                recurring_bill_data.cust_name = cust_name
                recurring_bill_data.cust_mail = cust_mail
                recurring_bill_data.cust_gst_treat = cust_gst_type
                recurring_bill_data.cust_gst_no = cust_gstin
                recurring_bill_data.cust_billing_address = cust_address
                recurring_bill_data.cust_place_of_supply = cust_supply
                
                recurring_bill_data.payment_type = pay_type

                if request.POST.get('payment_method') == 'Cash':
                    recurring_bill_data.cheque_no = None
                    recurring_bill_data.upi_id = None
                    recurring_bill_data.bank_id = None
                elif request.POST.get('payment_method') == 'Cheque':
                    recurring_bill_data.upi_id = None
                    recurring_bill_data.bank_id = None
                    recurring_bill_data.cheque_no = cheque_no
                elif request.POST.get('payment_method') == 'UPI':
                    recurring_bill_data.bank_id = None
                    recurring_bill_data.cheque_no = None
                    recurring_bill_data.upi_id = upi_id
                else:
                    recurring_bill_data.cheque_no = None
                    recurring_bill_data.upi_id = None
                    if Banking.objects.filter(company=comp_details,bnk_acno=bank_acc_no).exists():
                        bank_id = Banking.objects.filter(company=comp_details,bnk_acno=bank_acc_no).first()
                        recurring_bill_data.bank_id = bank_id
                        recurring_bill_data.bank_name = bank_id.bank_id
                        recurring_bill_data.bank_acc_no =  bank_id.bnk_acno
                    else:
                        recurring_bill_data.bank_name = bank_name
                        recurring_bill_data.bank_acc_no =  bank_acc_no

                if price_list != '' or price_list != None :
                    if PriceList.objects.filter(company=comp_details,name=price_list).exists():
                        recurring_bill_data.price_list = PriceList.objects.filter(company=comp_details,name=price_list).first()
                    else:
                        recurring_bill_data.price_list_name = price_list

                recurring_bill_data.sub_total = subtotal
                recurring_bill_data.igst = igst
                recurring_bill_data.cgst = cgst
                recurring_bill_data.sgst = sgst
                recurring_bill_data.tax_amount = tax_amnt
                recurring_bill_data.shipping_charge = adj
                recurring_bill_data.adjustment = ship_charge
                recurring_bill_data.total = gtnt_total
                recurring_bill_data.paid = paid
                recurring_bill_data.bal = bal
                # if 'Draft' in request.POST:
                #     recurring_bill_data.status = 'Draft'
                # elif 'Save' in request.POST:
                recurring_bill_data.status = 'Save'
                recurring_bill_data.note = note
                recurring_bill_data.document = None

                rec_bill_number = rb_bill_no

                if rec_bill_number == '' or rec_bill_number == None:
                    print('entered first if')
                    recurring_bill_data.recc_bill_no = RecurringRecievedId.objects.filter(company=comp_details).last().recc_rec_number
                else:
                    print('entered second if')
                    recurring_bill_data.recc_bill_no = rec_bill_number
                    print(rec_bill_number)
                    print(recurring_bill_data.recc_bill_no)
                recurring_bill_data.recc_ref_no = RecurringRecievedId.objects.filter(company=comp_details).last().ref_number

                recurring_bill_data.save()

                if RecurringRecievedId.objects.filter(company=dash_details).exists():
                    recc = RecurringRecievedId.objects.filter(company=dash_details)
                    recc_id = recc.last()
                    recc_id1 = recc.last()

                    # Check if there is a second last journal record
                    if recc.exclude(id=recc_id.id).last():
                        recc_id_second_last = recc.exclude(id=recc_id.id).last()
                        pattern = recc_id_second_last.pattern
                    else:
                        recc_id_second_last = recc.first()
                        pattern = recc_id_second_last.pattern

                    if rec_bill_number != recc_id.recc_rec_number and rec_bill_number != '':
                        # Creating a new RecurringRecievedId instance
                        recc_id = RecurringRecievedId(company=dash_details)
                        count_for_ref_no = RecurringRecievedId.objects.filter(company=dash_details.id).count()
                        recc_id.pattern = pattern
                        recc_id.save()

                        # Using count_for_ref_no + 1 as the reference number
                        ref_num = int(count_for_ref_no) + 2
                        recc_id.ref_number = f'{ref_num:02}'

                        recc_id.recc_rec_number = recc_id1.recc_rec_number
                        recc_id.save()
                    else:
                        # Creating a new RecurringRecievedId instance
                        recc_id = RecurringRecievedId(company=dash_details)
                        count_for_ref_no = RecurringRecievedId.objects.filter(company=dash_details.id).count()
                        recc_id.pattern = pattern
                        recc_id.save()

                        # Using count_for_ref_no + 1 as the reference number
                        ref_num = int(count_for_ref_no) + 2
                        recc_id.ref_number = f'{ref_num:02}'

                        # Incrementing the recc_rec_number
                        recc_rec_num = ''.join(i for i in recc_id1.recc_rec_number if i.isdigit())
                        recc_rec_num = int(recc_rec_num)+1
                        print("#################################")
                        print(f"-----------------{recc_id1}-----------------")
                        recc_id.recc_rec_number = f'{pattern}{recc_rec_num:02}'
                        print(recc_id.recc_rec_number)
                        recc_id.save()
                        
                else:
                    # Creating a new RecurringRecievedId instance
                    recc_id = RecurringRecievedId(company=dash_details)
                    recc_id.save()

                    # Setting initial values for ref_number, pattern, and recc_rec_number
                    recc_id.ref_number = f'{2:02}'

                    pattern = ''.join(i for i in rec_bill_number if not i.isdigit())
                    recc_id.pattern = pattern
                    recc_id.recc_rec_number = f'{pattern}{2:02}'
                    recc_id.save()

                # history creation
                recurr_history = Recurr_history()
                recurr_history.company = comp_details
                recurr_history.login_details = log_details
                recurr_history.Recurr = recurring_bill_data
                recurr_history.action = 'Created'
                recurr_history.save()

                ws = wb["items"]

                for row in ws.iter_rows(min_row=2, values_only=True):
                    rb_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                    if int(rb_no) == int(recInvNo):
                        # try:
                        #     rb_no, name, hsn, quantity, price, tax_percentage, discount, total = row
                        # except ValueError:
                        #     continue
                        if rb_no is None or name is None or hsn is None or quantity is None or price is None or tax_percentage is None or total is None:
                            messages.success(request, 'item data entry missing.!')
                            return redirect('recurring_bill_listout')
                        else:

                            if Items.objects.filter(company=comp_details,item_name=name).exists():
                                item_id = Items.objects.filter(company=comp_details,item_name=name).first()
                                item_name = item_id.item_name
                                item_hsn = item_id.hsn_code
                                total_qty = item_id.current_stock
                            else:
                                item_id = None
                                item_name = name
                                item_hsn = hsn
                                total_qty = 0

                            if vend_supply == cust_supply:
                                taxGST = tax_percentage
                                taxIGST = 0
                            else:
                                taxIGST = tax_percentage
                                taxGST = 0

                            bal_qty = int(total_qty)-int(quantity)

                            if bal_qty < 0:
                                bal_qty = 0

                            recurr_item = RecurrItemsList(
                                item_id=item_id,
                                item_name=item_name,
                                item_hsn=item_hsn,
                                total_qty=total_qty,
                                qty=quantity,
                                bal_qty= bal_qty,
                                price=price,
                                taxGST=taxGST,
                                taxIGST=taxIGST,
                                discount=discount,
                                total=total,
                                recurr_bill_id =recurring_bill_data,
                            )
                            recurr_item.save()

                print('RECURRING BILL CREATED SUCCESS FULL')
            
            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect('recurring_bill_listout')
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to RI No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect('recurring_bill_listout')
        else:
            return redirect('recurring_bill_listout')
    else:
        return redirect('/')
        
def getRecurr_bill_ItemDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = StaffDetails.objects.get(login_details = log_details).company 
        itemName = request.GET['item']
        item = Items.objects.get( item_name = itemName,company_id=comp_details.id)

        context = {
            'status':True,
            'id':item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,

        }
        print('++++++++++++++++++++++++++++++')
        print(item.current_stock)
        print('++++++++++++++++++++++++++++++')
        return JsonResponse(context)
    else:
        return redirect('/')
# --------------------------------------   ashikhvu   (end)   -----------------------------------------------
#  -------------------- Credit Note - start - harikrishnan  ------------------------------- 

def creditlistout(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                item=Items.objects.filter(company=dash_details.company)
                allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
                credit = Credit_Note.objects.filter(company=dash_details.company)
                context = {
                        'details': dash_details,
                        'item': item,
                        'allmodules': allmodules,
                        'credit': credit
                }
                return render(request,'zohomodules/creditnote/listout.html',context)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            item=Items.objects.filter(company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            credit = Credit_Note.objects.filter(company=dash_details)
            context = {
                    'details': dash_details,
                    'item': item,
                    'allmodules': allmodules,
                    'credit': credit    
            }
        return render(request,'zohomodules/creditnote/listout.html',context)

def new_creditnote(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        cdn_num = Credit_Note_Reference.objects.filter(company = cmp).last()
        if cdn_num is None:
            latestNum =  1
        else:
            latestNum = int(cdn_num.reference_number) + 1

        

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtCdn = ""
        lastCdn = Credit_Note.objects.filter(company = cmp).last()
        if lastCdn:
            cdn_no = str(lastCdn.credit_note_number)
            prefix = ''.join(filter(str.isalpha, cdn_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, cdn_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtCdn = prefix + padded_rb_num
            
        else:
            nxtCdn = 'CN01'

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'invNo':nxtCdn, 'ref_no':latestNum,'units': units,'accounts':accounts,
        }
        return render(request,'zohomodules/creditnote/new_creditnote.html',context)
    else:
        return redirect('/')

def save_creditnote(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            CnNum = request.POST['credit_note']

            cdn_no0 = str(CnNum)
            prefix = ''.join(filter(str.isalpha, cdn_no0)) 
            
            pattern_exists = checkCreditNotePattern(prefix)

            if prefix !="" and pattern_exists:
                res = f'<script>alert("Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if Credit_Note.objects.filter(company = com, credit_note_number__iexact = CnNum).exists():
                res = f'<script>alert("Credit Note Number `{CnNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            
            if request.POST['place_of_supply'] == '[KL]-Kerala' and com.state == '[KL]-Kerala':
                cgst1 = float(request.POST['cgst'])
                sgst1 = float(request.POST['sgst'])
                taxAmount = float(request.POST['taxamount'])
            else:
                cgst1 = 0
                sgst1 = 0
                taxAmount = float(request.POST['amount_igst'])

            invoic = ''
            rinvoic = ''
            if request.POST['invoiceNum'] == "":
                inv_type = ''
                inv_num = ''
            else :
                if request.POST['InvoiceType'] == 'Invoice':
                    invoic = request.POST['invoiceNum']
                    inn = invoice.objects.get(id=invoic)
                    inv_type = request.POST['InvoiceType']
                    inv_num = inn.invoice_number
                else:
                    rinvoic = request.POST['invoiceNum']
                    inn = RecurringInvoice.objects.get(id=rinvoic)
                    inv_type = request.POST['InvoiceType']
                    inv_num = inn.rec_invoice_no



            credit = Credit_Note(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                customer_billing_address = request.POST['bill_address'],
                customer_gst_type = request.POST['customer_gst_type'],
                customer_gst_number = request.POST['customer_gstin'],                
                customer_place_of_supply = request.POST['place_of_supply'],  
                terms_and_condition = request.POST['termsCondition'], 
                recurring_invoice_id = rinvoic,             
                invoice_id = invoic,
                invoice_type = inv_type,
                invoice_number = inv_num,
                reference_number = request.POST['reference_number'],
                credit_note_date = request.POST['start_date'],
                credit_note_number = request.POST['credit_note'].upper(),
                
                taxAmount_igst = taxAmount,
                
                payment_method = '' if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = '' if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = '' if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = '' if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                
                
                cgst = cgst1,
                sgst = sgst1,
                
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                
            )
        
            credit.save()

            if len(request.FILES) != 0:
                credit.document=request.FILES.get('file')
            credit.save()

            if 'Draft' in request.POST:
                credit.status = "Draft"
            elif "Saved" in request.POST:
                credit.status = "Saved" 
            credit.save()

            # Save items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Credit_Note_Items.objects.create(company = com, login_details = com.login_details, credit_note = credit, items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            Credit_Note_History.objects.create(
                company = com,
                login_details = log_details,
                credit_note = credit,
                action = 'Created',
                date = date.today(),
                reference_number = request.POST['reference_number']
            )

            # reference numebr

            Credit_Note_Reference.objects.create(
                company = com,
                login_details = log_details,
                reference_number = request.POST['reference_number']
            )

            return redirect(creditlistout)
        else:
            return redirect(new_creditnote)
    else:
       return redirect('/')

def editpage_creditnote(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        
        creditNote = Credit_Note.objects.get(id=pk)
        ccnote = Credit_Note.objects.filter(company=cmp).exclude(id=pk)
        crdnote = ccnote.values('invoice', 'recurring_invoice')
        invCus = invoice.objects.filter(customer_id = creditNote.customer_id)
        invv = []
        for i in invCus:
            flagh = False
            for j in crdnote:
                if i.id == j['invoice']:
                    flagh = True
            if flagh == False:
                invv.append((i.id, i.invoice_number,'Invoice'))
            
        rinv = RecurringInvoice.objects.filter(customer_id = creditNote.customer_id)
        for i in rinv:
            flagt = False
            for j in crdnote:
                if i.id == j['recurring_invoice']:
                    flagt = True
            if flagt == False:
                invv.append((i.id, i.rec_invoice_no,'Recurring Invoice'))
        
        itemTable = Credit_Note_Items.objects.filter(credit_note_id = pk)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 
            'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 
            'items':itms,'units': units,'accounts':accounts,'priceListItems':priceList,
            'creditnote':creditNote,'invoi':invv,'itemTable':itemTable,

        }
        return render(request,'zohomodules/creditnote/editpage_creditnote.html',context)
    else:
        return redirect('/')

def overview_creditnote(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        credit = Credit_Note.objects.get(id = id)
        invItems = Credit_Note_Items.objects.filter(credit_note = credit)
        recCrd = Credit_Note.objects.filter(company = cmp)
        # cmts = Recurring_Invoice_Comments.objects.filter(recurring_invoice = invoice)
        cmts = Credit_Note_Comments.objects.filter(credit_note = credit)
        hist = Credit_Note_History.objects.filter(credit_note = credit)
        last_history = Credit_Note_History.objects.filter(credit_note = credit).last()
        created = Credit_Note_History.objects.get(credit_note = credit, action = 'Created')

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'credit':credit, 'crdItems': invItems, 'allCredits':recCrd, 'comments':cmts, 'history':hist, 'last_history':last_history, 'created':created,
        }
        return render(request, 'zohomodules/creditnote/overview_creditnote.html', context)
    else:
        return redirect('/')

def getCustomerDetailsAjax2(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        crdnote = Credit_Note.objects.filter(company=com).values('invoice', 'recurring_invoice')
        print(crdnote,'0000000000000000')
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)
        invCus = invoice.objects.filter(customer_id = custId,company=com)
        invv = []
        for i in invCus:
            flagh = False
            for j in crdnote:
                if i.id == j['invoice']:
                    flagh = True
            if flagh == False:
                invv.append((i.id, i.invoice_number,'Invoice'))

        rinv = RecurringInvoice.objects.filter(customer_id = custId,company=com)
        for ir in rinv:
            flagt = False
            for j in crdnote:
                if ir.id == j['recurring_invoice']:
                    flagt = True
            if flagt == False:
                invv.append((ir.id, ir.rec_invoice_no,'Recurring Invoice'))        
                
        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None or cust.GST_number == 'null' else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode,'invoice':invv
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def getInvoiceDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        itemm = Items.objects.filter(company=com)
        itemm_data = list(itemm.values('id','item_name','current_stock'))

        invtype = request.GET['invTyp']
        invid = request.GET['idd']
        
        if invtype == 'Invoice':
            inn = invoice.objects.get(id = invid,company=com)
            invvv = invoiceitems.objects.filter(invoice=inn,company=com)
            invvv_data = list(invvv.values('hsn','quantity','price','tax_rate','discount','total','Items'))
        elif invtype == 'Recurring Invoice':
            inn = RecurringInvoice.objects.get(id = invid,company=com)
            invvv = Reccurring_Invoice_item.objects.filter(reccuring_invoice=inn,company=com)
            invvv_data = list(invvv.values('hsn','quantity','price','tax_rate','discount','total','item'))

        context = {
            'invvv': invvv_data,
            'inTy':invtype,
            'itemm':itemm_data,
            'paid': inn.advanced_paid,
            'shipping': inn.shipping_charge,
            'adjustment': inn.adjustment
        }
    return JsonResponse(context)
    
def checkCreditNoteNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum'].upper() 
        cdn_no0 = str(RecInvNo)
        prefix = ''.join(filter(str.isalpha, cdn_no0))       
        
        nxtCdn = ""
        lastCdn = Credit_Note.objects.filter(company = com).last()
        if lastCdn:
            cdn_no = str(lastCdn.credit_note_number)
            prefix1 = ''.join(filter(str.isalpha, cdn_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, cdn_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtCdn = prefix1 + padded_rb_num        

        pattern_exists = checkCreditNotePattern(prefix)

        if prefix !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Pattern already Exists.!'})
        elif Credit_Note.objects.filter(company = com, credit_note_number__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Credit Note No. already Exists.!'})
        elif nxtCdn != "" and RecInvNo != nxtCdn:
            return JsonResponse({'status':False, 'message':'Credit Note No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkCreditNotePattern(prefix):
    print(prefix,'39439095')
    models = [invoice, Bill, Journal, Delivery_challan, RetainerInvoice, SaleOrder]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": prefix}).exists():
            return True
    return False

def delete_creditnote(request,pk):
    if 'login_id' in request.session:
        cn = Credit_Note.objects.get(id=pk)
        cn.delete()
        return redirect(creditlistout)
    else:
        return redirect('/')

def convert_creditnote(request,pk):
    if 'login_id' in request.session:
        cn = Credit_Note.objects.get(id=pk)
        cn.status = 'Saved'
        cn.save()
        return redirect(overview_creditnote, pk)
    else:
        return redirect('/')

def pdf_creditnote(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        cn = Credit_Note.objects.get(id = pk)
        itms = Credit_Note_Items.objects.filter(credit_note = cn)
    
        context = {'creditNote':cn, 'creditNoteItems':itms,'cmp':com}
        
        template_path = 'zohomodules/creditnote/creditnote_pdf.html'
        fname = 'Credit_Note_'+cn.credit_note_number
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def comment_creditnote(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        credit_not = Credit_Note.objects.get(id = pk)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Credit_Note_Comments.objects.create(company = com, credit_note = credit_not, comment = cmt,login_details = log_details)
            return redirect(overview_creditnote, pk)
        return redirect(overview_creditnote, pk)
    return redirect('/')

def deleteComment_creditnote(request,pk,id):
    delte = Credit_Note_Comments.objects.get(id=pk)
    delte.delete()
    return redirect(overview_creditnote, id)

def attachDocument_creditnote(request, pk):
    if 'login_id' in request.session:
        cdn = Credit_Note.objects.get(id = pk)

        if request.method == 'POST' and len(request.FILES) != 0:
            cdn.document = request.FILES.get('file')
            cdn.save()

        return redirect(overview_creditnote, pk)
    else:
        return redirect('/')

def sendEmail_creditnote(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = Credit_Note.objects.get(id = id)
        itms = Credit_Note_Items.objects.filter(credit_note = inv) 
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'creditNote':inv, 'creditNoteItems':itms,'cmp':com}
                template_path = 'zohomodules/creditnote/creditnote_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Credit_Note_{inv.credit_note_number}'
                subject = f"Credit_Note_{inv.credit_note_number}"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Credit Note for - Credit note No. -{inv.credit_note_number}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Credit Note details has been shared via email successfully..!')
                return redirect(overview_creditnote,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(overview_creditnote, id)

def update_creditnote(request, pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        creditNum = Credit_Note.objects.get(id=pk)
        creditEx = Credit_Note.objects.filter(company=com).exclude(id=pk)

        if request.method == 'POST':
            CnNum = request.POST['credit_note']

            cdn_no0 = str(CnNum)
            prefix = ''.join(filter(str.isalpha, cdn_no0)) 
            
            pattern_exists = checkCreditNotePattern(prefix)

            if prefix !="" and pattern_exists:
                res = f'<script>alert("Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if creditEx.filter(credit_note_number__iexact = CnNum).exists():
                res = f'<script>alert("Credit Note Number `{CnNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            
            if request.POST['place_of_supply'] == '[KL]-Kerala' and com.state == '[KL]-Kerala':
                cgst1 = float(request.POST['cgst'])
                sgst1 = float(request.POST['sgst'])
                taxAmount = float(request.POST['taxamount'])
            else:
                cgst1 = 0
                sgst1 = 0
                taxAmount = float(request.POST['amount_igst'])

            invoic = ''
            rinvoic = ''
            if request.POST['invoiceNum'] == "":
                inv_type = ''
                inv_num = ''
            else :
                if request.POST['InvoiceType'] == 'Invoice':
                    invoic = request.POST['invoiceNum']
                    inn = invoice.objects.get(id=invoic)
                    inv_type = request.POST['InvoiceType']
                    inv_num = inn.invoice_number
                else:
                    rinvoic = request.POST['invoiceNum']
                    inn = RecurringInvoice.objects.get(id=rinvoic)
                    inv_type = request.POST['InvoiceType']
                    inv_num = inn.rec_invoice_no


            
                
            creditNum.customer_id = request.POST['customerId']
            creditNum.customer_email = request.POST['customer_email']
            creditNum.customer_billing_address = request.POST['bill_address']
            creditNum.customer_gst_type = request.POST['customer_gst_type']
            creditNum.customer_gst_number = request.POST['customer_gstin']             
            creditNum.customer_place_of_supply = request.POST['place_of_supply']                
            creditNum.invoice_id = invoic
            creditNum.recurring_invoice_id = rinvoic
            creditNum.invoice_type = inv_type
            creditNum.invoice_number = inv_num
            creditNum.credit_note_number = request.POST['credit_note'].upper()
            
            creditNum.taxAmount_igst = taxAmount
            
            creditNum.payment_method = '' if request.POST['payment_method'] == "" else request.POST['payment_method']
            creditNum.cheque_number = '' if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            creditNum.upi_number = '' if request.POST['upi_id'] == "" else request.POST['upi_id']
            creditNum.bank_account_number = '' if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            creditNum.sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            
            
            creditNum.cgst = cgst1
            creditNum.sgst = sgst1
            
            creditNum.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            creditNum.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            creditNum.grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            creditNum.advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            creditNum.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            creditNum.description = request.POST['note']
            creditNum.terms_and_condition = request.POST['termsCondition']

            creditNum.save()

            if len(request.FILES) != 0:
                creditNum.document=request.FILES.get('file')
            creditNum.save()            

            # Save items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                creditItems = Credit_Note_Items.objects.filter(credit_note = creditNum)
                creditItems.delete()
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Credit_Note_Items.objects.create(company = com, login_details = com.login_details, credit_note = creditNum, items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    

            # Save transaction
                    
            Credit_Note_History.objects.create(
                company = com,
                login_details = log_details,
                credit_note = creditNum,
                action = 'Edited',
                date = date.today(),
                reference_number = request.POST['reference_number']
            )

                        

            return redirect(overview_creditnote,pk)
        else:
            return redirect(new_creditnote)
    else:
       return redirect('/')

def downloadSampleImportFile_creditnote(request):
    creditnote_table_data = [['SLNO','CUSTOMER NAME','CUSTOMER NUMBER','DATE','PLACE OF SUPPLY','CREDIT NOTE NO.','INVOICE TYPE','INVOICE NO.','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE','BALANCE','PAYMENT METHOD','CHEQUE^','UPI^','BANK^'],['3', 'amal k','9875433231' ,'2024-03-20', '[KL]-Kerala','CN100', '','','HERE IS A DESCRIPTION','3000','300','0','0','300','12','250','3562','162',"3400",'Cash','','','']]
    items_table_data = [['SL NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL'], ['3', 'candy','123341','145','12','5','0','1740']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'credit_note'
    sheet2 = wb.create_sheet(title='items')

    # Populate the sheets with data
    for row in creditnote_table_data:
        sheet1.append(row)

    for row in items_table_data:
        sheet2.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=credit_note_sample_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response

def importExcel_creditnote(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        com = CompanyDetails.objects.get(login_details = log_details)
    else:
        com = StaffDetails.objects.get(login_details = log_details).company
    
    cdn_num = Credit_Note_Reference.objects.filter(company = com).last()
    if cdn_num is None:
        latestNum =  1
    else:
        latestNum = int(cdn_num.reference_number) + 1

    if request.method == 'POST' and request.FILES['excel_file']:
        excel_file = request.FILES['excel_file']

        # Check if the uploaded file is an Excel file
        if not excel_file.name.endswith('.xlsx'):
            return HttpResponse("Please upload a valid Excel file.")

        # Load the Excel file
        wb = load_workbook(excel_file, data_only=True)

        # Process first sheet
        first_sheet = wb.sheetnames[0]
        sheet1 = wb[first_sheet]
        data1 = pd.DataFrame(sheet1.values)

        # Process second sheet
        second_sheet = wb.sheetnames[1]
        sheet2 = wb[second_sheet]
        data2 = pd.DataFrame(sheet2.values)
        
        rowNo = 0
        for index, row in data1.iloc[1:].iterrows():
            rowNo += 1
            name = row[1]
            fullname = name.split()
            first_name = fullname[0]
            last_name = ' '.join(fullname[1:]) if len(fullname) > 1 else ''

            cus = Customer.objects.filter(company=com,customer_phone=row[2])
            
            if cus.exists():
                cuss = Customer.objects.get(company=com,customer_phone=row[2])
                pass
            else:
                messages.success(request, f'Customer in Row No.{rowNo} doesnt exists.')
                return redirect('creditlistout')  

            
            if row[7] is None:
                invoic = ''
                rinvoic = ''
                inv_typ = ''
                inv_num = ''
            else :
                if row[6].lower() == 'invoice':
                    if invoice.objects.filter(company=com,invoice_number=row[7],customer=cuss).exists():
                        invoic = invoice.objects.get(company=com,invoice_number=row[7],customer=cuss)
                        rinvoic = ''
                        inv_typ = row[6]
                        inv_num = row[7]
                    else:
                        messages.success(request, f'Invoice in Row No.{rowNo} doesnt exists.')
                        return redirect('creditlistout')                   
                else:
                    if RecurringInvoice.objects.filter(company=com,rec_invoice_no=row[7],customer=cuss).exists():
                        invoic = ''
                        rinvoic = RecurringInvoice.objects.get(company=com,rec_invoice_no=row[7],customer=cuss)
                        inv_typ = row[6]
                        inv_num =row[7]
                    else:
                        messages.success(request, f'Recurring Invoice in Row No.{rowNo} doesnt exists.')
                        return redirect('creditlistout')
            
            CnNum = row[5]
            cdn_no0 = str(CnNum)
            prefix = ''.join(filter(str.isalpha, cdn_no0)) 
            
            pattern_exists = checkCreditNotePattern(prefix)

            if prefix !="" and pattern_exists:
                res = f'<script>alert("Pattern already Exists.! Try another!");window.history.back();</script>'
                messages.success(request, f'Pattern in Row No.{rowNo}. already Exists ')
                return redirect('creditlistout')

            if Credit_Note.objects.filter(company = com, credit_note_number__iexact = CnNum).exists():
                messages.success(request, f'Credit Note No. in row no.{rowNo} already Exists ')
                return redirect('creditlistout')
            
            credit = Credit_Note(
                    company = com,
                    login_details = log_details,
                    customer = cuss,
                    customer_email = cuss.customer_email,
                    customer_billing_address =  cuss.billing_attention + '' + cuss.billing_address +  '' + cuss.billing_city +  '' + cuss.billing_state,
                    customer_gst_type =  cuss.GST_treatement,
                    customer_gst_number =  cuss.GST_number,   
                    customer_place_of_supply = row[4] , 
                    
                    recurring_invoice_id = rinvoic,
                    invoice_id = invoic,
                    invoice_type = inv_typ,
                    invoice_number = inv_num,
                    
                    reference_number = latestNum ,
                    credit_note_date = row[3] ,
                    credit_note_number = row[5] ,
                    
                    taxAmount_igst = row[13] ,
                    
                    payment_method = row[19] ,
                    cheque_number = row[29] if row[20] is not None else '' ,
                    upi_number = row[21] if row[21] is not None else '' ,
                    bank_account_number = row[22] if row[22] is not None else '' ,
                    sub_total = row[9] ,
                    
                    
                    cgst = row[11] ,
                    sgst = row[12] ,
                    
                    adjustment = row[14] ,
                    shipping_charge = row[15] ,
                    grand_total = row[16] ,
                    advance_paid = row[17] ,
                    balance = row[18] ,
                    description = row[8] , 
                    status = 'Saved'               
                )
            
            credit.save()

            # Save transaction
                        
            Credit_Note_History.objects.create(
                company = com,
                login_details = log_details,
                credit_note = credit,
                action = 'Created',
                date = date.today(),
                reference_number = latestNum
            )

            # reference numebr
            Credit_Note_Reference.objects.create(
                company = com,
                login_details = log_details,
                reference_number = latestNum
            )

# -------------------second sheet--------------------------------------
            
            for index, row2 in data2.iloc[1:].iterrows():
                if row[0] == row2[0]:
                    newItemm = Items.objects.filter(company=com,hsn_code = row2[2])           
                    if newItemm.exists():
                        newItem = Items.objects.get(company=com,hsn_code = row2[2])
                        pass
                    else:
                        cre = Credit_Note.objects.get(id=credit.id)
                        cre.delete()
                        messages.success(request, f'Item doesnt exists.')
                        return redirect('creditlistout')  
                    
                    
                    hsn  = row2[2]
                    qty = row2[3]
                    price = row2[4]
                    tax = row2[5]
                    discount = row2[6]
                    total = row2[7]
                    print(row2)
                    ittm = Credit_Note_Items(company = com, login_details = log_details, credit_note = credit, items = newItem, hsn = hsn, quantity = int(qty), price = float(price), tax_rate = tax, discount = float(discount), total = float(total))
                    ittm.save()
                    newItem.current_stock -= int(qty)
                    newItem.save()
                else:
                    pass
            
            messages.success(request, 'Import successful')
            return redirect('creditlistout')  
    return redirect('creditlistout') 


#  -------------------- Credit Note - end - harikrishnan  ------------------------------- 


#  -------------------- Credit Note - start - harikrishnan  ------------------------------- 

def getItemDetailsAjax2(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
        
        item = Items.objects.filter(company = cmp, item_name = itemName).first()
        print('py ok ',item.current_stock)
        context = {
            'avl':item.current_stock,
        }
        return JsonResponse(context)
    else:
       return redirect('/')


#  -------------------- Credit Note - end - harikrishnan  ------------------------------- 
###########################Recurring_expense########by haripriya###########
def recurring_expenses_listpage(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        expenses = Recurring_Expense.objects.filter(company=dash_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        expenses = Recurring_Expense.objects.filter(company=dash_details.company)
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
    content = {
                'details': dash_details,
                'expenses':expenses,
                'allmodules': allmodules,
                'log_id':log_details,
                
                
        }
    return render(request,'zohomodules/recurring_expense/recurring_exp_listout.html',content) 



def recurring_expenses_createload(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        price_lists=PriceList.objects.filter(company=company,type='Sales',status='Active')
        rec_exp = Recurring_Expense.objects.filter(company = company)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d") 
        customers=Customer.objects.filter(company_id = company, customer_status = 'Active')
        payments=Company_Payment_Term.objects.filter(company_id = company)
        banks = Banking.objects.filter(company_id = company)
        acc = Chart_of_Accounts.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') , company=company).order_by('account_name')
        vendor=Vendor.objects.filter(company_id=company)
        latest_reexp = Recurring_Expense.objects.filter(company_id = company).order_by('-id').first()
        repeat = CompanyRepeatEvery.objects.filter(company = company)
        new_number = int(latest_reexp.refrenceid) + 1 if latest_reexp else 1

        if recurring_expense_Reference.objects.filter(company = company).exists():
            deleted = recurring_expense_Reference.objects.get(company = company)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next invoice number w r t last invoic number if exists.
        nxtrexp = ""
        lastRexp = Recurring_Expense.objects.filter(company_id = company).last()
        if lastRexp:
            rexp = str(lastRexp.Expense_Number)
            numbers = []
            stri = []
            for word in rexp:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtrexp = st+'0'+ str(inv_num)
                else:
                    nxtrexp = st+ str(inv_num)
            else:
                nxtrexp = st+ str(inv_num)


       

        context={
            'details':dash_details,
            'allmodules': allmodules,
            'c':customers,
            'vendors':vendor,
            'payments':payments,
            'banks':banks,
            'tod':tod,
            'ref_no':new_number,
            'rexp':nxtrexp,
            'accounts':acc,
            'company':company,
            'price_lists':price_lists,
            'repeat':repeat,



            
        }
        return render(request,'zohomodules/recurring_expense/recurring_exp_createpage.html',context) 




def getBankData(request):
  
        
       bankId = request.GET['id']
       bnk = Banking.objects.get(id = bankId)

       if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
       else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})



def check_vendorreccemail_exist(request):
    if request.method == 'GET':
       vendoremail = request.GET.get('vendor_email', None)

       if vendoremail:
          
            exists = Vendor.objects.filter(
                    vendor_email=vendoremail
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        
def check_vendor_recc_work_phone_exist(request):
    if request.method == 'GET':
       wPhone = request.GET.get('w_Phone', None)

       if wPhone:
          
            exists = Vendor.objects.filter(
                    phone=wPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        
        
def check_vendor_recc_phonenumber_exist(request):
    if request.method == 'GET':
       mPhone = request.GET.get('m_Phone', None)

       if mPhone:
          
            exists = Vendor.objects.filter(
                    mobile=mPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})
        

def payment_vendor_recc_terms_add(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)        
        if request.method == 'POST':
            terms = request.POST.get('name')
            day = request.POST.get('days')
            normalized_data = terms.replace(" ", "")
            pay_tm = add_space_before_first_digit(normalized_data)
            ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=dash_details)
            ptr.save()
            payterms_obj = Company_Payment_Term.objects.filter(company=dash_details).values('id', 'term_name')


            payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name']} for pay_terms in payterms_obj]
            response_data = {
            "message": "success",
            'payment_list':payment_list,
            }
            return JsonResponse(response_data)

        else:
            return JsonResponse({'error': 'Invalid request'}, status=400)    
            


def add_vendor_reccexp(request):
   
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        

       
        if request.method=="POST":
            vendor_data=Vendor()
            vendor_data.login_details=log_details
            vendor_data.company=dash_details
            vendor_data.title = request.POST.get('salutations')
            vendor_data.first_name=request.POST['first_names']
            vendor_data.last_name=request.POST['last_names']
            vendor_data.company_name=request.POST['company_names']
            vendor_data.vendor_display_name=request.POST['c_display_names']
            vendor_data.vendor_email=request.POST['cvendor_emails']
            vendor_data.phone=request.POST['w_phones']
            vendor_data.mobile=request.POST['m_phones']
            vendor_data.skype_name_number=request.POST['skype_numbers']
            vendor_data.designation=request.POST['designations']
            vendor_data.department=request.POST['departments']
            vendor_data.website=request.POST['websites']
            vendor_data.gst_treatment=request.POST['gsts']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remarks']
            vendor_data.current_balance=request.POST['opening_bals']

            x=request.POST['gsts']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_numbers']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_numbers']
                vendor_data.pan_number=request.POST['pan_numbers']

            vendor_data.source_of_supply=request.POST['source_supplys']
            vendor_data.currency=request.POST['currencys']
            print(vendor_data.currency)
            op_type=request.POST.get('op_types')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
    
            vendor_data.opening_balance=request.POST['opening_bals']
            vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_termss'])

           
            vendor_data.billing_attention=request.POST['battentions']
            vendor_data.billing_country=request.POST['bcountrys']
            vendor_data.billing_address=request.POST['baddresss']
            vendor_data.billing_city=request.POST['bcitys']
            vendor_data.billing_state=request.POST['bstates']
            vendor_data.billing_pin_code=request.POST['bzips']
            vendor_data.billing_phone=request.POST['bphones']
            vendor_data.billing_fax=request.POST['bfaxs']
            vendor_data.shipping_attention=request.POST['sattentions']
            vendor_data.shipping_country=request.POST['s_countrys']
            vendor_data.shipping_address=request.POST['saddresss']
            vendor_data.shipping_city=request.POST['scitys']
            vendor_data.shipping_state=request.POST['sstates']
            vendor_data.shipping_pin_code=request.POST['szips']
            vendor_data.shipping_phone=request.POST['sphones']
            vendor_data.shipping_fax=request.POST['sfaxs']
            vendor_data.save()
            print(vendor_data)
           # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=dash_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            rdata=Vendor_remarks_table()
            rdata.remarks=request.POST['remarks']
            rdata.company=dash_details
            rdata.vendor=vdata
            rdata.save()

            print(rdata)
     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('tsalutations[]')
            first_name =request.POST.getlist('tfirst_names[]')
            last_name =request.POST.getlist('tlast_names[]')
            email =request.POST.getlist('tEmails[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhones[]')
            skype_name_number =request.POST.getlist('tSkypes[]')
            designation =request.POST.getlist('tDesignations[]')
            department =request.POST.getlist('tDepartments[]') 
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
           
           
            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    created = VendorContactPerson.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                        work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=dash_details,vendor=vendor)
                
        
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})



def getRecExpVendorData(request):
   
        
        vendorid = request.POST['id']
        vendors = Vendor.objects.get(id = vendorid)

        if vendors:
            
                list = False
                listId = None
                listName = None
                context = {
                'status':True, 'id':vendors.id, 'email':vendors.vendor_email, 'gstType':vendors.gst_treatment,'shipState':vendors.source_of_supply,'gstin':False if vendors.gst_number == "" or vendors.gst_number == None else True, 'gstNo':vendors.gst_number, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':vendors.billing_address, 'city':vendors.billing_city, 'state':vendors.billing_state, 'country':vendors.billing_country, 'pincode':vendors.billing_pin_code
                }
                return JsonResponse(context)


def checkExpenseHSN(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        hsnNo = request.GET['hsn']
        print(hsnNo)

        if hsnNo != "" and Recurring_Expense.objects.filter(company = com, hsn__iexact = hsnNo).exists():
            return JsonResponse({'status':True, 'is_exists':True, 'message':'HSN Number already exists.!'})
        else:
            return JsonResponse({'status':True, 'is_exists':False, 'message':''})
    else:
       return redirect('/')

def checkExpenseSAC(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
    
        sacNo = request.GET['sac']

        if sacNo != "" and Recurring_Expense.objects.filter(company = com, sac__iexact = sacNo).exists():
            return JsonResponse({'status':True, 'is_exists':True, 'message':'SAC Number already exists.!'})
        else:
            return JsonResponse({'status':True, 'is_exists':False, 'message':''})
    else:
       return redirect('/')


def createRecurring_expense(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        data = LoginDetails.objects.get(id = log_id)
        
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        reexp = Recurring_Expense.objects.filter(company = company)

        

        customers=Customer.objects.filter(company_id = company)
        payments=Company_Payment_Term.objects.filter(company_id = company)
        banks = Banking.objects.filter(company_id = company)
        
       
        if request.method == 'POST':
            rec = request.POST['expense_no']
            expType = request.POST['expense_type']
            HSN = request.POST['hsn']
            SAC = request.POST['sac']
            if Recurring_Expense.objects.filter(company = company, Expense_Number__iexact = rec).exists():
               res = f'<script>alert("Recurring Expense Number `{rec}` already exists, try another!");window.history.back();</script>'
               return HttpResponse(res)
            elif expType == 'Goods' and Recurring_Expense.objects.filter(company = company, hsn__iexact = HSN).exists():
                res = f'<script>alert("HSN Number `{HSN}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif expType == 'Service' and Recurring_Expense.objects.filter(company = company, sac__iexact = SAC).exists():
                res = f'<script>alert("SAC Number `{SAC}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            
           
            
            vendorSupply = request.POST['source_supply']
            customerSupply = request.POST['place_of_supply']

            exp = Recurring_Expense(
                company = company,
                login_details = log_details,
                vendor = None if request.POST['vendor'] == "" else Vendor.objects.get(id = request.POST['vendor']),
                vendor_mail=request.POST['vendorEmail'],
                vendor_address=request.POST['vendor_bill_address'],
                vendor_gst_type=request.POST['vendor_gst_type'],
                vendor_gst=request.POST['vendor_gstin'],
                Vendor_Sourceofsupply=vendorSupply,
                hsn=HSN,
                sac=SAC,

                customer = None if request.POST['customer'] == "" else Customer.objects.get(id = request.POST['customer']),
                customeremail = request.POST['customerEmail'],
                cust_address = request.POST['bill_address'],
                cust_gsttype = request.POST['gst_type'],
                cust_gst_no = request.POST['gstin'],
                cust_placeofsupply = customerSupply,
                
                refrenceid= request.POST['reference_number'],
                Expense_Number = rec,
                profile_name= request.POST['profile'],
                repeat= None if request.POST['repeat_every'] == "" else CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                notes=request.POST['note'],
                expense_type=expType,
                exp_date = request.POST['date'],
                amount=request.POST['amount'],
                gst_treatment = request.POST['taxGST'] if vendorSupply == customerSupply else request.POST['taxIGST'],
                chart_of_accounts = None if request.POST['cost_acc'] == "" else Chart_of_Accounts.objects.get(id = request.POST['cost_acc']),
                Expense_account=request.POST['cost_acc'],
               
                Payment_Method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_id = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
  
            )

            exp.save()

            if len(request.FILES) != 0:
                exp.document=request.FILES.get('file')
            exp.save()

            if 'Draft' in request.POST:
                exp.activation_tag = "Draft"
            elif "Save" in request.POST:

                exp.activation_tag = "Save" 
            exp.save()

            
                    
            recurring_expense_History.objects.create(
               company = company,
                logindetails = log_details,
                expense = exp,
                Date = request.POST['date'],

                action = 'Created'
            )
            

            return redirect(recurring_expenses_listpage)
        else:
            return redirect(recurring_expenses_listpage)
    else:
       return redirect('/') 


def recurring_expense_overview(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
       
        

        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        rexpense = Recurring_Expense.objects.filter(company = company)

   
        rec = Recurring_Expense.objects.get(id = pk)
        cmt = Recurring_Expense_comments.objects.filter(expense = rec)
        hist =recurring_expense_History.objects.filter( expense = rec).last()
        histo =recurring_expense_History.objects.filter( expense = rec)
        repeat=CompanyRepeatEvery.objects.filter(company=company)

        created = recurring_expense_History.objects.filter( expense = rec,  action = 'Created')
        
        return render(request,'zohomodules/recurring_expense/recurring_expense_overview.html',{'allmodules':allmodules,'com':company,'cmp':company, 'data':log_details, 'details': dash_details,'expense':rec,'rexpense':rexpense,'comments':cmt,'history':hist,'historys':histo,  'created':created,'repeat':repeat})
    else:
       return redirect('/')


def convertRecurringExpense(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        rexpense = Recurring_Expense.objects.filter(company = company)



        inv = Recurring_Expense.objects.get(id = id)
        inv.activation_tag = 'Save'
        inv.save()
        return redirect(recurring_expense_overview,id)

def addRExpenseComment(request, id):
    if 'login_id' not in request.session:
        return redirect('/')
    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == "Company":
            com = CompanyDetails.objects.get(login_details=log_details)
    else:
            cmp = StaffDetails.objects.get(login_details=log_details)
            com = cmp.company

            

    inv = Recurring_Expense.objects.get(id = id)
    if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Recurring_Expense_comments.objects.create(company = com, expense = inv, comments = cmt)
            return redirect(recurring_expense_overview, id)
    return redirect(recurring_expense_overview, id)
    
def deleteRExpenseComment(request,id):
    if 'login_id' not in request.session:
        return redirect('/')
    print(id)
    cmt = Recurring_Expense_comments.objects.get(id = id)
    invId = cmt.expense.id
    cmt.delete()

    return redirect(recurring_expense_overview,invId)

def add_re_attach(request,id):
    if request.method == 'POST' and request.FILES.get('file'):
        inv = Recurring_Expense.objects.get(id=id)
        inv.document = request.FILES['file']
        print("success")

        inv.save()

        
        return redirect(recurring_expense_overview, id)


def deleteRExpense(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        Rexp = Recurring_Expense.objects.filter(company = company)

        inv = Recurring_Expense.objects.get( id = id)
        print("delete ok")


  

        

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if recurring_expense_Reference.objects.filter(company = company).exists():
            deleted = recurring_expense_Reference.objects.get(company = company)
            if int(inv.refrenceid) > int(deleted.reference_number):
                deleted.reference_number = inv.refrenceid
                deleted.save()
        else:
            recurring_expense_Reference.objects.create(company = company, reference_number = inv.refrenceid)
        
        inv.delete()
        return redirect(recurring_expenses_listpage)


def checkRexpenseNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        rexp = Recurring_Expense.objects.filter(company = company)
        
        invNo = request.GET['invNum']

        nxtInv = ""
        lastInv = Recurring_Expense.objects.filter(company = company).last()
        if lastInv:
            inv_no = str(lastInv.Expense_Number)

            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        if Recurring_Expense.objects.filter(company = company, Expense_Number__iexact = invNo).exists():
            return JsonResponse({'status':False, 'message':'Rec.Expense No already Exists.!'})
        elif nxtInv != "" and invNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Rec.Expense No is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})


def shareRExpenseToEmail(request,id):
    if 'login_id' not in request.session:
        return redirect('/')
    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == 'Staff':
        staff = StaffDetails.objects.get(login_details=log_details)
        company = staff.company
    elif log_details.user_type == 'Company':
        company = CompanyDetails.objects.get(login_details=log_details)
        
    inv = Recurring_Expense.objects.get(id = id)
    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            
        
            context = {'expense':inv,'cmp':company}
            template_path = 'zohomodules/recurring_expense/rexpense_share.html'
            template = get_template(template_path)

            

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'RecurringExpense_{inv.Expense_Number}'
            subject = f"RecurringExpense_{inv.Expense_Number}"

            email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached RecurringExpense for - RECURRINGEXPENSE-{inv.Expense_Number}. \n{email_message}\n\n--\nRegards,\n{company.company_name}\n{company.address}\n{company.state} - {company.country}\n{company.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Recurring Expense details has been shared via email successfully..!')
            return redirect(recurring_expense_overview,id)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(recurring_expense_overview, id)


def editRexpense(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        rexpense = Recurring_Expense.objects.filter(company = company)

        rec = Recurring_Expense.objects.get(id = id)
        payments=Company_Payment_Term.objects.filter(company_id = company)
        cust = Customer.objects.filter(company = company, customer_status='Active')
        trms = Company_Payment_Term.objects.filter(company = company)
        bnk = Banking.objects.filter(company = company)
        repeat = CompanyRepeatEvery.objects.filter(company = company)
        vendor=Vendor.objects.filter(company=company)
        priceList = PriceList.objects.filter(company =company, type = 'Sales', status = 'Active')
        acc = Chart_of_Accounts.objects.filter( company=company)

        context = {
            'allmodules':allmodules, 'com':company, 'cmp':company, 'data':log_details,'expense':rec, 'customers':cust,  'pTerms':trms,'payments':payments,
            'banks':bnk,'accounts':acc,'details': dash_details,'repeat':repeat,'vendor':vendor,'priceList':priceList,'rexpense':rexpense,
        }
        return render(request,'zohomodules/recurring_expense/recurring_exp_editpage.html',context)
    else:
       return redirect('/')


def updateRecurringexpense(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
          
        data = LoginDetails.objects.get(id = log_id)
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                allmodules=ZohoModules.objects.get(company=staff.company)
                dash_details = StaffDetails.objects.get(login_details=log_details,company_approval=1)
                    
        elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details,superadmin_approval=1,Distributor_approval=1)

                allmodules= ZohoModules.objects.get(company=company,status='New')
        rexpense = Recurring_Expense.objects.filter(company = company)
        rec = Recurring_Expense.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['expense_no']
            expType = request.POST['expense_type']
            HSN=request.POST['hsn']
            SAC=request.POST['sac']
            # if rec.Expense_Number != invNum and Recurring_Expense.objects.filter(company = company, Expense_Number__iexact = invNum).exists():
            #     res = f'<script>alert("Expense Number `{invNum}` already exists, try another!");window.history.back();</script>'
            #     return HttpResponse(res)
            # elif expType == 'Goods' and Recurring_Expense.objects.filter(company = company, hsn__iexact = HSN).exists():
            #     res = f'<script>alert("HSN Number `{HSN}` already exists, try another!");window.history.back();</script>'
            #     return HttpResponse(res)
            # elif expType == 'Service' and Recurring_Expense.objects.filter(company = company, sac__iexact = SAC).exists():
            #     res = f'<script>alert("SAC Number `{SAC}` already exists, try another!");window.history.back();</script>'
            #     return HttpResponse(res)
            
            vendorSupply = request.POST['source_supply']
            customerSupply = request.POST['place_of_supply']
            
            rec.customer = Customer.objects.get(id = request.POST['customer'])
            rec.company=company
            rec.customeremail = request.POST['customerEmail']
            rec.cust_address = request.POST['bill_address']
            rec.customer_GSTtype = request.POST['gst_type']
            rec.customer_GSTnumber = request.POST['gstin']
            rec.customer_place_of_supply = customerSupply
            rec.Expense_Number = invNum
            
            rec.exp_date = request.POST['date']
           
            rec.Payment_Method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            rec.cheque_id = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            rec.upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            rec.bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            
            rec.notes = request.POST['note']
            rec.expense_type= expType
            rec.chart_of_accounts= Chart_of_Accounts.objects.get(id = request.POST['cost_acc'])
            rec.Expense_account=request.POST['cost_acc']

            rec.hsn=HSN
            rec.sac=SAC
            rec.refrenceid=request.POST['reference_number']
            rec.profile_name=request.POST['profile']
            rec.amount=request.POST['amount']
            rec.gst_treatment=request.POST['taxGST'] if vendorSupply == customerSupply else request.POST['taxIGST'],
          

            rec.vendor = Vendor.objects.get(id = request.POST['vendor'])

            rec.vendor_mail = request.POST['vendorEmail']
            rec.vendor_address = request.POST['vendor_bill_address']
            rec.vendor_gst_type = request.POST['vendor_gst_type']
            rec.vendor_gst = request.POST['vendor_gstin']
            rec.Vendor_Sourceofsupply = vendorSupply
            
            rec.repeat=CompanyRepeatEvery.objects.get(id = request.POST['repeat_every'])
            if len(request.FILES) != 0:
                rec.document=request.FILES.get('file')

            rec.save()

            if 'Draft' in request.POST:
                rec.activation_tag = "Draft"
            elif "Save" in request.POST:

                rec.activation_tag = "Save" 
            rec.save()
            

            # Save transaction
                    
            recurring_expense_History.objects.create(
                company = company,
                logindetails = log_details,
                expense = rec,
                Date = datetime.now(),

                action = 'Edited'
            )

            return redirect(recurring_expense_overview, id)
        else:
            return redirect(editRexpense, id)
    else:
       return redirect('/')

def newRepeatEveryrec(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        dur = int(request.POST['duration'])
        type = request.POST['type']

        d = 30 if type == 'Month' else 360
        dys = dur * d
        print(dur,d,dys)
        rep_every = str(dur)+" "+type

        if not CompanyRepeatEvery.objects.filter(company = com, repeat_every__iexact = rep_every).exists():
            CompanyRepeatEvery.objects.create(company = com, repeat_every = rep_every, repeat_type = type, duration = dur, days = dys)
            
            list= []
            rep = CompanyRepeatEvery.objects.filter(company = com)

            for r in rep:
                repDict = {
                    'repeat_every': r.repeat_every,
                    'id': r.id
                }
                list.append(repDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{rep_every} already exists, try another.!'})

    else:
        return redirect('/')


def createRexpenseAccount(request):                                                               
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')

def getRExpenseAccounts(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')


def createRecurringexpCustomer(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'




            
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.remarks=request.POST['remark']

            customer_data.save()
            print(customer_data.billing_attention)
            print(customer_data.billing_country)
            print(customer_data.billing_address)
            print(customer_data.billing_city)
            print( customer_data.billing_state)
            print(customer_data.billing_pincode)
            print(customer_data.billing_mobile)
            print(customer_data.billing_fax)
            print(customer_data.shipping_attention)
            print( customer_data.shipping_country)
            print(customer_data.shipping_address)
            print(customer_data.shipping_city)
            print(customer_data.shipping_state)
            print(customer_data.shipping_pincode)
            print(customer_data.shipping_mobile)
            print(customer_data.shipping_fax)
            print(customer_data.remarks)


            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            vdata=Customer.objects.get(id=customer_data.id)
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=com
            rdata.customer=vdata
            rdata.save()

        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
            msg = f'Successfully added customer!'
            return JsonResponse({'status':True,'message':msg})
        else:
            return JsonResponse({'status':False})
        
def getrecurringexpCustomers(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id, option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')


def getRecExpCustomerData(request):
   
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            
                list = False
                listId = None
                listName = None
                context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
                }
                return JsonResponse(context)
        


def getvendorRe(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Vendor.objects.filter(company = com, vendor_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')

def check_vendor_pan(request):
    if request.method == 'POST':
        panNumber = request.POST.get('panNumber')
        pan_exists = Vendor.objects.filter(pan_number=panNumber).exists()

        if pan_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})



def import_rec_exp_details(request):
    if request.method == 'POST' and 'file' in request.FILES:
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            if 'login_id' not in request.session:
                return redirect('/')
            log_details = LoginDetails.objects.get(id=log_id)

            if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                    
            elif log_details.user_type == 'Company':
                company = CompanyDetails.objects.get(login_details=log_details)
            excel_file = request.FILES['file']
            print(excel_file)
            workbook = openpyxl.load_workbook(excel_file)
            sheet = workbook.active
            for row in sheet.iter_rows(min_row=2, values_only=True):
                Profilename, expdate, expensetype, hsn, sac, expenseaccount, amount, paymentmethod, chequeid, UPIID, BankNO, vendorName, VendorMail, vendorAddress, VendorGSTType, VendorGSTno, Vendorsource_of_supply, ExpenseNumber, customername, CustomerEmail, Customergsttype, customergstno, Customeraddress, customerplaceofsupply, gsttreatment, status, notes, RepeatEvery = row
                   
                if not Profilename:
                    # Handle the case where Profilename is empty or None
                    continue
                try:
                    rpt = CompanyRepeatEvery.objects.get(company = company, repeat_every = RepeatEvery)
                except:
                    rpt = None
                try:
                    customer = Customer.objects.get(company = company,first_name=customername)
                except:
                    customer = None
                
                try:
                    vendor = Vendor.objects.get(company = company,first_name=vendorName)
                except:
                    vendor = None
                try:
                    acc = Chart_of_Accounts.objects.get(company = company,account_type =expenseaccount)
                except:
                    acc= None
                
                chart_of_accounts_value = None if acc is None else acc
                latest_inv = Recurring_Expense.objects.filter(company_id=company).order_by('-id').first()

                new_number = int(latest_inv.refrenceid) + 1 if latest_inv else 1

                if recurring_expense_Reference.objects.filter(company_id=company).exists():
                    deleted = recurring_expense_Reference.objects.get(company_id=company)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number += 1

                created_rexp = Recurring_Expense(
                    company=company,
                    login_details=log_details,
                    profile_name=Profilename,
                    exp_date=expdate,
                    expense_type=expensetype,
                    Expense_account=expenseaccount,
                    hsn=hsn,
                    sac=sac,
                    amount=amount,
                    Payment_Method=paymentmethod,
                    cheque_id=chequeid,
                    upi_number=UPIID,
                    bank_account=BankNO,
                    vendor_name=vendorName,
                    vendor_mail=VendorMail,
                    vendor_address=vendorAddress,
                    vendor_gst_type=VendorGSTType,
                    vendor_gst=VendorGSTno,
                    Vendor_Sourceofsupply=Vendorsource_of_supply,
                    refrenceid=new_number,
                    Expense_Number=ExpenseNumber,
                    customer_name=customername,
                    customeremail=CustomerEmail,
                    cust_gsttype=Customergsttype,
                    cust_gst_no=customergstno,
                    cust_address=Customeraddress,
                    cust_placeofsupply=customerplaceofsupply,
                    gst_treatment=gsttreatment,
                    activation_tag=status,
                    notes=notes,
                    repeatEvery=RepeatEvery,
                    chart_of_accounts=chart_of_accounts_value ,
                    repeat=rpt,
                    vendor=vendor,
                    customer=customer,

                )

                created_rexp.save()
                
                recurring_expense_History.objects.create(
                    company=company,
                    logindetails=log_details,
                    expense=created_rexp,
                    Date=datetime.now(),
                    action='Created'
                )
                
                messages.success(request, "Recurring Expense successfully created.")
            
            return redirect('recurring_expenses_listpage')
        
        messages.error(request, "No file uploaded or invalid request method")
        return redirect('recurring_expenses_listpage')

def recurringExpensePdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = Recurring_Expense.objects.get(id = id)
        
    
        context = {'expense':inv, 'company':com}
        
        template_path = 'zohomodules/recurring_expense/recuring_exp_pdf.html'
        fname = 'Recurring_Expense_'+inv.Expense_Number
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')
        
#End
def bankholder_check(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company
        id = request.GET.get('id',None)
        print('done')
        data = {
            'is_tak': BankAccount.objects.filter(bank=id).exists()
        }
        if data['is_tak']:
            data['error_message'] = 'BankAccount Already Taken.'
        return JsonResponse(data)
    

def bankholder_list(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        id = request.POST.get('id')
        bank = Banking.objects.get(id = id,company=comp)
        bank_acno = bank.bnk_acno
        bank_ifsc = bank.bnk_ifsc
        bank_branch = bank.bnk_branch
        return JsonResponse({'bnk_acno': bank_acno,'bnk_ifsc': bank_ifsc,'bnk_branch':bank_branch },safe=False)
        
# < -------------------- > Stock Adjustment - Start < ------------------------------- >

def load_stock_adjust_list(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    allmodules= ZohoModules.objects.get(company = cmp)
    stk_adj = StockAdjustment.objects.filter(company = cmp)
    return render(request, 'zohomodules/StockAdjustment/stock_adjust_list.html',{'allmodules':allmodules, 'details':dash_details, 'stk_adj':stk_adj})

def load_stock_adjust_create(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    allmodules= ZohoModules.objects.get(company = cmp)
    tod = datetime.now().strftime('%Y-%m-%d')
    itms = Items.objects.filter(company = cmp, activation_tag = 'active')
    units = Unit.objects.filter(company=cmp)
    accounts = Chart_of_Accounts.objects.filter(company=cmp)
    srefno = StockAdjustmentRefNo.objects.filter(company=cmp).last()
    if srefno:
        ref = int(srefno.ref_no) + 1 
    else:
        ref = 1
    reason = StockAdjustmentReason.objects.filter(company=cmp)
    return render(request, 'zohomodules/StockAdjustment/stock_adjust_create.html',{'allmodules':allmodules, 'details':dash_details, 'tod':tod, 'ref':ref, 'itms':itms,
                                                                                    'units':units, 'accounts':accounts, 'reason':reason})
    
def get_item_data(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
    items = {}
    option_objects = Items.objects.filter(company = cmp, activation_tag='active')
    for option in option_objects:
        items[option.id] = [option.item_name, option.current_stock, option.purchase_price]
    return JsonResponse(items)

def add_new_unit(request):                                                                
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
    if request.method == 'POST':
        unit_name = request.POST['units']
        if Unit.objects.filter(unit_name=unit_name, company=cmp).exists():
            return JsonResponse({"message": "error"})
        else:
            unit = Unit(unit_name = unit_name, company=cmp)  
            unit.save()  
            unit = Unit.objects.filter(company=cmp).last()
            return JsonResponse({"message": "success", 'unit_id': unit.id, 'unit_name': unit.unit_name})

def add_new_reason(request):                                                                
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
    if request.method == 'POST':
        reason = request.POST['reason']
        if reason == 'Stock on Fire'or reason == 'High Demand of Goods' or reason == 'Stock Written Off' or reason == 'Inventory Revaluation' or StockAdjustmentReason.objects.filter(reason = reason, company = cmp).exists():
            return JsonResponse({"message": "error"})
        else:
            StockAdjustmentReason.objects.create(reason = reason, company = cmp, login_details = log_details)  
            return JsonResponse({"message": "success"})


def stock_adjust_create(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
    if request.method == 'POST':
        mode = request.POST['adj_mode']
        ref_no = request.POST['ref_no']
        adj_date = request.POST['adj_date']
        adj_acc = request.POST['adj_acc']
        adj_reason = request.POST['adj_reason']
        adj_desc = request.POST['adj_desc']
        if 'Draft' in request.POST:
            status = "Draft"
        if 'Save' in request.POST:
            status = "Save"
        stk_adj = StockAdjustment.objects.create(company = cmp, login_details = log_details, mode = mode, ref_no = ref_no, adj_date = adj_date, account = adj_acc, 
                                                 reason = adj_reason, desc = adj_desc, status = status)

        item_name = request.POST.getlist("item_name[]")
        cur_val = request.POST.getlist("cur_val[]")
        change_val = request.POST.getlist("change_val[]")
        adj_val = request.POST.getlist("adj_val[]")
        if len(item_name)==len(cur_val)==len(change_val)==len(adj_val):
            mapped = zip(item_name, cur_val, change_val, adj_val)
            mapped = list(mapped)
            for ele in mapped:
                itm = Items.objects.get(company = cmp, item_name = ele[0], activation_tag = 'active')
                StockAdjustmentItem.objects.create(item = itm, stock_adj = stk_adj, current_val = ele[1], changed_val = ele[2], adjusted_val = ele[3])
                if mode == 'Quantity':
                    itm.current_stock = int(ele[1]) + int(ele[3])
                    itm.save()
        StockAdjustmentRefNo.objects.create(company = cmp, logindetails = log_details, ref_no = ref_no)
        StockAdjustmentHistory.objects.create(login_details = log_details, stock_adj = stk_adj, action = 'Created')
        return redirect('load_stock_adjust_list')

def sample_stock_adjust_download(request):
    stk_adjust_data = [['SLNO', 'MODE', 'DATE', 'ACCOUNT', 'REASON', 'DESCRIPTION'],['1', 'Quantity', '2024-03-20', 'Rent Expense', 'Stock on Fire', '',]]
    stk_adjust_item_data = [['RI NO', 'ITEM NAME', 'CHANGED VALUE'], ['1', 'PEN', '100',], ['1', 'PENCIL', '300',]]
    wb = Workbook()
    sheet1 = wb.active
    sheet1.title = 'Stock Adjust'
    sheet2 = wb.create_sheet(title='Items')
    for row in stk_adjust_data:
        sheet1.append(row)
    for row in stk_adjust_item_data:
        sheet2.append(row)
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=Stock_Adjust_Sample.xlsx'
    wb.save(response)
    return response

def import_stock_adjust_from_excel(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company

    if request.method == "POST" and 'excel_file' in request.FILES:
        excel_file = request.FILES['excel_file']
        wb = load_workbook(excel_file)

        try:
            ws = wb["Stock Adjust"]
        except:
            messages.error(request,'`Stock Adjust` sheet not found.! Please check.')
            return redirect(load_stock_adjust_list)

        try:
            ws = wb["Items"]
        except:
            messages.error(request,'`Items` sheet not found.! Please check.')
            return redirect(load_stock_adjust_list)
            
        ws = wb["Stock Adjust"]
        stk_adjust_data = ['SLNO', 'MODE', 'DATE', 'ACCOUNT', 'REASON', 'DESCRIPTION']
        stk_adjust_sheet = [cell.value for cell in ws[1]]
        if stk_adjust_sheet != stk_adjust_data:
            messages.error(request,'`Stock Adjust` sheet column names or order is not in the required formate.! Please check.')
            return redirect(load_stock_adjust_list)

        row_number = 1
        for row in ws.iter_rows(min_row=2, values_only=True):
            slno, mode, date, account, reason, description = row
            if slno is None or mode is None or date is None or account is None or reason is None:
                messages.error(request,'`Stock Adjust` sheet entries missing required fields.! Please check.')
                return redirect(load_stock_adjust_list)
            try:
                datetime.strptime(date, '%Y-%m-%d')
            except:
                try:
                    datetime.strptime(date, '%d-%m-%Y')
                except:
                    error_message = f'Date at row {row_number} in `Stock Adjust` is invalid'
                    messages.error(request, error_message)
                    return redirect(load_stock_adjust_list)
            
        ws = wb["Items"]
        items_columns = ['RI NO', 'ITEM NAME', 'CHANGED VALUE']
        items_sheet = [cell.value for cell in ws[1]]
        if items_sheet != items_columns:
            messages.error(request,'`Items` sheet column names or order is not in the required formate.! Please check.')
            return redirect(load_stock_adjust_list)

        row_number = 1
        for row in ws.iter_rows(min_row=2, values_only=True):
            row_number += 1
            ri_no, itm_name, changed_val = row
            if ri_no is None or itm_name is None or changed_val is None:
                messages.error(request,'`Items` sheet entries missing required fields.! Please check.')
                return redirect(load_stock_adjust_list)
            
            if not Items.objects.filter(company = cmp, item_name = itm_name, activation_tag = 'active').exists():
                error_message = f'`Items` sheet entry at row {row_number} is missing required fields.! Please check.'
                messages.error(request, error_message)
                return redirect(load_stock_adjust_list)

        ws = wb['Stock Adjust']
        srefno = StockAdjustmentRefNo.objects.filter(company=cmp).last()
        if srefno:
            ref = int(srefno.ref_no) + 1 
        else:
            ref = 1
        for row in ws.iter_rows(min_row=2, values_only=True):
            slno, mode, date, account, reason, description = row
            
            try:
                date_obj = datetime.strptime(date, '%d-%m-%Y')
                converted_date = date_obj.strftime('%Y-%m-%d')
            except:
                date_obj = datetime.strptime(date, '%Y-%m-%d')
                converted_date = date_obj.strftime('%Y-%m-%d')

            stk_adj = StockAdjustment.objects.create(company = cmp, login_details = log_details, mode = mode, ref_no = ref, adj_date = converted_date, account = account, 
                                                 reason = reason, desc = description, status = 'Draft')

            ws = wb['Items']
            for irow in ws.iter_rows(min_row=2, values_only=True):
                ri_no, itm_name, changed_val = irow
                if ri_no == slno:
                    itm = Items.objects.get(company = cmp, item_name = itm_name, activation_tag='active')
                    if mode == "Quantity":
                        val = int(itm.current_stock)
                        new_val = float(changed_val) - val
                        itm.current_stock = val + new_val
                        itm.save()
                    else:
                        val = float(itm.purchase_price) * float(itm.current_stock)
                        new_val = float(changed_val) - val
                
                    StockAdjustmentItem.objects.create(item = itm, stock_adj = stk_adj, current_val = val, changed_val = changed_val, adjusted_val = new_val)

            StockAdjustmentRefNo.objects.create(company = cmp, logindetails = log_details, ref_no = ref)
            StockAdjustmentHistory.objects.create(login_details = log_details, stock_adj = stk_adj, action = 'Created')
            ref += 1
            messages.success(request,'Import Successfull')
        return redirect(load_stock_adjust_list)

def load_stock_adjust_view(request, id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    allmodules= ZohoModules.objects.get(company = cmp)
    all_stk_adj = StockAdjustment.objects.filter(company = cmp)
    stk_adj = StockAdjustment.objects.get(company = cmp, id = id)
    stk_adj_itm = StockAdjustmentItem.objects.filter(stock_adj = stk_adj)
    stk_hist = StockAdjustmentHistory.objects.filter(stock_adj = stk_adj)
    stk_hist_last = StockAdjustmentHistory.objects.filter(stock_adj = stk_adj).last()
    stk_comment = StockAdjustmentComment.objects.filter(stock_adj = stk_adj)
    return render(request, 'zohomodules/StockAdjustment/stock_adjust_view.html',{'allmodules':allmodules, 'details':dash_details, 'stk_adj':stk_adj, 'stk_adj_itm':stk_adj_itm, 
                                                                                 'all_stk_adj':all_stk_adj, 'stk_hist':stk_hist, 'stk_hist_last':stk_hist_last, 'stk_comment':stk_comment})

def load_stock_adjust_edit(request, id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
        dash_details = StaffDetails.objects.get(login_details=log_details)
    allmodules= ZohoModules.objects.get(company = cmp)
    stk_adj = StockAdjustment.objects.get(company = cmp, id = id)
    stk_adj_itm = StockAdjustmentItem.objects.filter(stock_adj = stk_adj)
    itms = Items.objects.filter(company = cmp, activation_tag = 'active')
    units = Unit.objects.filter(company=cmp)
    accounts = Chart_of_Accounts.objects.filter(company=cmp)
    reason = StockAdjustmentReason.objects.filter(company=cmp)
    return render(request, 'zohomodules/StockAdjustment/stock_adjust_edit.html',
                  {'allmodules':allmodules, 'details':dash_details, 'stk_adj':stk_adj, 'stk_adj_itm':stk_adj_itm, 'itms':itms, 'units':units, 'accounts':accounts, 'reason':reason})

def stock_adjust_edit(request, id):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
    if request.method == 'POST':
        stk_adj = StockAdjustment.objects.get(id = id)
        mode = request.POST['adj_mode']
        stk_adj.mode = mode
        stk_adj.adj_date = request.POST['adj_date']
        stk_adj.account = request.POST['adj_acc']
        stk_adj.reason = request.POST['adj_reason']
        stk_adj.desc = request.POST['adj_desc']
        stk_adj.save()
        
        stk_itms = StockAdjustmentItem.objects.filter(stock_adj = stk_adj)
        if mode == 'Quantity':
            for itm in stk_itms:
                val = float(itm.item.current_stock)
                itm.item.current_stock = float(itm.changed_val) - val
                itm.item.save()
        stk_itms.delete()

        item_name = request.POST.getlist("item_name[]")
        cur_val = request.POST.getlist("cur_val[]")
        change_val = request.POST.getlist("change_val[]")
        adj_val = request.POST.getlist("adj_val[]")
        if len(item_name)==len(cur_val)==len(change_val)==len(adj_val):
            mapped = zip(item_name, cur_val, change_val, adj_val)
            mapped = list(mapped)
            for ele in mapped:
                itm = Items.objects.get(company = cmp, item_name = ele[0], activation_tag = 'active')
                StockAdjustmentItem.objects.create(item = itm, stock_adj = stk_adj, current_val = ele[1], changed_val = ele[2], adjusted_val = ele[3])
                if mode == 'Quantity':
                    itm.current_stock = int(ele[1]) + int(ele[3])
                    itm.save()
        StockAdjustmentHistory.objects.create(login_details = log_details, stock_adj = stk_adj, action = 'Edited')
        return redirect('load_stock_adjust_view', id)

def stock_adjustment_convert(request, id):
    stk_adj = StockAdjustment.objects.get(id = id)
    stk_adj.status = 'Save'
    stk_adj.save()
    return redirect('load_stock_adjust_view', id)

def stock_adjustment_delete(request, id):
    stk_adj = StockAdjustment.objects.get(id = id)
    stk_itms = StockAdjustmentItem.objects.filter(stock_adj = stk_adj)
    if stk_adj.mode == 'Quantity':
        for itm in stk_itms:
            val = float(itm.item.current_stock)
            itm.item.current_stock = val - float(itm.adjusted_val)
            itm.item.save()
    stk_itms.delete()
    stk_adj.delete()
    return redirect('load_stock_adjust_list')

def stock_adjust_comment_create(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if request.method == "POST":
        id = request.POST['stk_adj_id']
        cmt = request.POST['comment'].strip()
        stk_adj = StockAdjustment.objects.get(id = id)
        StockAdjustmentComment.objects.create(login_details = log_details, stock_adj = stk_adj, comment = cmt)
        return JsonResponse({"message": "success"})

def stock_adjust_comment_delete(request, id):
    comment = StockAdjustmentComment.objects.get(id = id)
    stk_id = comment.stock_adj.id
    comment.delete()
    return redirect('load_stock_adjust_view', stk_id)

def stock_adjust_file_add(request, id):
    stk_adj = StockAdjustment.objects.get(id = id)
    if request.method == 'POST' and len(request.FILES) != 0:
        stk_adj.file = request.FILES.get('file')
        stk_adj.save()
    return redirect('load_stock_adjust_view', id)

def share_stock_adjust_via_email(request, id):
    stk_adj = StockAdjustment.objects.get(id = id)
    stk_adj_itm = StockAdjustmentItem.objects.filter(stock_adj = stk_adj)
    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
        
            context = {'stk_adj':stk_adj, 'stk_adj_itm':stk_adj_itm}
            template_path = 'zohomodules/StockAdjustment/stock_adjust_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Stock-Adjsutment'
            subject = f"Stock Adjustment Email"
            # from django.core.mail import EmailMessage as EmailMsg
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Stock Adjustment.\n{email_message}\n\n", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Rec. Invoice details has been shared via email successfully..!')
            return redirect('load_stock_adjust_view', id)
    except Exception as e:
        messages.error(request, f'{e}')
        return redirect('load_stock_adjust_view', id)

def get_all_items_data(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details = log_details)
    else:
        cmp = StaffDetails.objects.get(login_details = log_details).company
    itm = Items.objects.filter(company = cmp, activation_tag = 'active')
    itm_data = [{'current_stock': obj.current_stock, 'purchase_price': obj.purchase_price, 'item_name': obj.item_name} for obj in itm]
    return JsonResponse(itm_data, safe=False)
# < -------------------- > Stock Adjustment - End < ------------------------------- >

#Debit note
def debitnote_list(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        rec = debitnote.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        context = {
            'invoices': rec, 'allmodules':allmodules, 'details':dash_details
        }
        return render(request, 'zohomodules/debitnote/debitnote_list.html', context)
    else:
        return redirect('/')
    
    
def adddebit_note(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Vendor.objects.filter(company = cmp, vendor_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Purchase', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = debitnote.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if debitnote_Reference.objects.filter(company = cmp).exists():
            deleted = debitnote_Reference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = debitnote.objects.filter(company=cmp).last()

        if lastInv:
            inv_no = str(lastInv.debitnote_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        else:
            nxtInv = 'DB-001'
        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'invNo':nxtInv, 'ref_no':new_number,'units': units,'accounts':accounts,
        }
        return render(request, 'zohomodules/debitnote/create_debitnote.html', context)
    else:
        return redirect('/')
def newdebitnoteCustomerAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if Vendor.objects.filter(company = com, gst_number=request.POST['gst_number']).exists():
            return JsonResponse({'status':False, 'message':'GSTIN already exists'})
        elif Vendor.objects.filter(company = com, pan_number=request.POST['pan_number']).exists():
            return JsonResponse({'status':False, 'message':'PAN No. already exists'})
        elif Vendor.objects.filter(company = com, vendor_email=request.POST['vendor_email']).exists():
            return JsonResponse({'status':False, 'message':'Email already exists'})
        elif Vendor.objects.filter(company = com, phone=request.POST['w_phone']).exists():
            return JsonResponse({'status':False, 'message':'Work Phone no. already exists'})
        elif Vendor.objects.filter(company = com, mobile=request.POST['m_phone']).exists():
            return JsonResponse({'status':False, 'message':'Mobile No. already exists'})

        if request.method=="POST":
            vendor_data=Vendor()
            vendor_data.login_details=log_details
            vendor_data.company=com
            vendor_data.title = request.POST.get('salutation')
            vendor_data.first_name=request.POST['first_name']
            vendor_data.last_name=request.POST['last_name']
            vendor_data.company_name=request.POST['company_name']
            vendor_data.vendor_display_name=request.POST['v_display_name']
            vendor_data.vendor_email=request.POST['vendor_email']
            vendor_data.phone=request.POST['w_phone']
            vendor_data.mobile=request.POST['m_phone']
            vendor_data.skype_name_number=request.POST['skype_number']
            vendor_data.designation=request.POST['designation']
            vendor_data.department=request.POST['department']
            vendor_data.website=request.POST['website']
            vendor_data.gst_treatment=request.POST['gst']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remark']
            vendor_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_number']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_number']
                vendor_data.pan_number=request.POST['pan_number']

            vendor_data.source_of_supply=request.POST['source_supply']
            vendor_data.currency=request.POST['currency']
            print(vendor_data.currency)
            op_type=request.POST.get('op_type')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
    
            vendor_data.opening_balance=request.POST['opening_bal']
            vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])

           
            vendor_data.billing_attention=request.POST['battention']
            vendor_data.billing_country=request.POST['bcountry']
            vendor_data.billing_address=request.POST['baddress']
            vendor_data.billing_city=request.POST['bcity']
            vendor_data.billing_state=request.POST['bstate']
            vendor_data.billing_pin_code=request.POST['bzip']
            vendor_data.billing_phone=request.POST['bphone']
            vendor_data.billing_fax=request.POST['bfax']
            vendor_data.shipping_attention=request.POST['sattention']
            vendor_data.shipping_country=request.POST['s_country']
            vendor_data.shipping_address=request.POST['saddress']
            vendor_data.shipping_city=request.POST['scity']
            vendor_data.shipping_state=request.POST['sstate']
            vendor_data.shipping_pin_code=request.POST['szip']
            vendor_data.shipping_phone=request.POST['sphone']
            vendor_data.shipping_fax=request.POST['sfax']
            vendor_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            rdata=Vendor_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=com
            rdata.vendor=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            print(department) 

            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    VendorContactPerson.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=com,vendor=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})
        
def getvendorsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Vendor.objects.filter(company = com, vendor_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
    
    
def getVendorrDetailsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Vendor.objects.get(id = custId)
        purbill = Bill.objects.filter(Vendor=custId, Company=cmp)
        recbill_data = [{'id': bill.id, 'bill_number': bill.Bill_Number} for bill in purbill]
        for data in recbill_data:
            print(data['bill_number'])
        data7 = {
      
            'recbill_data': recbill_data,
        }
        print(data7)



        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.vendor_email, 'gstType':cust.gst_treatment,'shipState':cust.source_of_supply,'gstin':False if cust.gst_number == "" or cust.gst_number == None or cust.gst_number == 'null' else True, 'gstNo':cust.gst_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country,'recbill_data': data7, 'recbill_data': recbill_data, 'pincode':cust.billing_pin_code
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def createdebitnote(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkRecInvNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("debit note No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if debitnote.objects.filter(company = com, debitnote_no__iexact = invNum).exists():
                res = f'<script>alert("debit note Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            bill_no= request.POST['billList']
            bill_type= request.POST['billTypeSelect']
            print(bill_type)


           

           

           
            print(bill_no)
            # bill_id=Bill.objects.get(Bill_Number = bill_no)
           




            inv = debitnote(
                company = com,
                login_details = com.login_details,
                vendor = Vendor.objects.get(id = request.POST['customerId']),
                vendor_email = request.POST['customer_email'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['customer_gst_type'],
                gstin = request.POST['customer_gstin'],
                place_of_supply = request.POST['place_of_supply'],
                # profile_name = request.POST['profile_name'],
                # entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                debitnote_no = invNum,
                bill_no= request.POST['billList'],
                bill_type=request.POST['billTypeSelect'],

                # payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                debitnote_date = request.POST['start_date'],
                # end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                # salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                # repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_conditions = request.POST['terms']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    debitnote_item.objects.create(company = com, login_details = com.login_details, debit_note = inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            debitnote_History.objects.create(
                company = com,
                login_details = log_details,
                debit_note = inv,
                action = 'Created'
            )
            if bill_type == 'bills':
                # Assuming request.POST['billList'] contains the bill number
                bill_id = Bill.objects.get(Bill_Number=request.POST['billList'])

                print(bill_id)

                # Update the Action field for the corresponding bill
                bill = Bill.objects.get(Bill_Number=request.POST['billList'])
                bill.debitNoteaction = 'Edited'
                bill.save()
                print("ed bill")
            if bill_type == 'recurring':
                bill_id = Recurring_bills.objects.get(recc_bill_no = request.POST['billList'])

                print(bill_id)

                # Update the Action field for the corresponding bill
                bill = Recurring_bills.objects.get(recc_bill_no = request.POST['billList'])
                bill.debitNoteaction = 'Edited'
                bill.save()
                print("ed rur")

            return redirect(debitnote_list)
        else:
            return redirect(adddebit_note)
    else:
       return redirect('/')
   
def view_debitnote(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        invoice = debitnote.objects.get(id = id)
        invItems = debitnote_item.objects.filter(debit_note = invoice)
        recInv = debitnote.objects.filter(company = cmp)
        cmts = debitnote_Comments.objects.filter(debit_note = invoice)
        hist = debitnote_History.objects.filter(debit_note = invoice)
        last_history = debitnote_History.objects.filter(debit_note = invoice).last()
        created = debitnote_History.objects.get(debit_note = invoice, action = 'Created')

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'invoice':invoice, 'invItems': invItems, 'allInvoices':recInv, 'comments':cmts, 'history':hist, 'last_history':last_history, 'created':created,
        }
        return render(request, 'zohomodules/debitnote/view_debitnote.html', context)
    else:
        return redirect('/')
    
def convertDebit_note(request,id):
    if 'login_id' in request.session:
        rec_inv = debitnote.objects.get(id = id)
        rec_inv.status = 'Saved'
        rec_inv.save()
        return redirect(view_debitnote, id)
    else:
        return redirect('/')

def addDebit_noteComment(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = debitnote.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            debitnote_Comments.objects.create(company = com, debit_note = rec_inv, comments = cmt)
            return redirect(view_debitnote, id)
        return redirect(view_debitnote, id)
    return redirect('/')

def deleteDebit_noteComment(request,id):
    if 'login_id' in request.session:
        cmt = debitnote_Comments.objects.get(id = id)
        recInvId = cmt.debit_note.id
        cmt.delete()
        return redirect(view_debitnote, recInvId)
    else:
        return redirect('/')

def deletedebit_note(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        recInv = debitnote.objects.get( id = id)
        for i in debitnote_item.objects.filter(debit_note = recInv):
            item = Items.objects.get(id = i.item.id)
            item.current_stock += i.quantity
            item.save()
        
        debitnote_item.objects.filter(debit_note = recInv).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if debitnote_Reference.objects.filter(company = com).exists():
            deleted = debitnote_Reference.objects.get(company = com)
            if int(recInv.reference_no) > int(deleted.reference_number):
                deleted.reference_number = recInv.reference_no
                deleted.save()
        else:
            debitnote_Reference.objects.create(company = com, login_details = com.login_details, reference_number = recInv.reference_no)
        
        recInv.delete()
        return redirect(debitnote_list)

def attachdebitnoteFile(request, id):
    if 'login_id' in request.session:
        inv = debitnote.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            inv.document = request.FILES.get('file')
            inv.save()

        return redirect(view_debitnote, id)
    else:
        return redirect('/')

def debitnotePdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = debitnote.objects.get(id = id)
        itms = debitnote_item.objects.filter(debit_note = inv)
    
        context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
        
        template_path = 'zohomodules/recurring_invoice/recurring_invoice_pdf.html'
        fname = 'debitnote_'+inv.debitnote_no
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def sharedebitnoteeToEmail(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = debitnote.objects.get(id = id)
        itms = debitnote_item.objects.filter(debit_note = inv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
                template_path = 'zohomodules/debitnote/debitnote_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'debitnote_{inv.debitnote_no}'
                subject = f"debitnote_{inv.debitnote_no}"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached debit note for - No.-{inv.debitnote_no}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'debit note details has been shared via email successfully..!')
                return redirect(view_debitnote,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(view_debitnote, id)
        
def editdebitnote(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
       
        cust = Vendor.objects.filter(company = cmp, vendor_status = 'Active')
        trm = Bill.objects.filter(Company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'purchase', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        invoice = debitnote.objects.get(id = id)
       

        print(invoice)
        invItems = debitnote_item.objects.filter(debit_note = invoice)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'units': units,'accounts':accounts, 'invoice':invoice, 'invItems': invItems,
        }
        return render(request, 'zohomodules/debitnote/edit_debitnote.html', context)
    else:
        return redirect('/')
def get_bill_items(request):
    # Query the database to retrieve the bill object
    bill_number = request.GET.get('bill_number')
    bill_type = request.GET.get('bill_type')  # Add a parameter for the bill type

    # Determine which bill model to query based on the bill type
    if bill_type == 'bills':
        bill_model = Bill
        items_model = BillItems
        bill = get_object_or_404(bill_model, Bill_Number=bill_number)
        bill_items = items_model.objects.filter(Bills=bill)
        items_list = []
    

        for item in bill_items:
            item_details = {
                'Items': item.Items,
                'HSN': item.HSN,
                'Quantity': item.Quantity,
                'Price': item.Price,
                'Tax_Rate': item.Tax_Rate,
                'Discount': item.Discount,
                'Total': item.Total
            }
            items_list.append(item_details)
            print(items_list)


    elif bill_type == 'recurring':
        bill_model = Recurring_bills
        items_model = RecurrItemsList
        bill = get_object_or_404(bill_model, recc_bill_no=bill_number)
        bill_items = items_model.objects.filter(recurr_bill_id=bill)
        items_list = []
    

        for item in bill_items:
            item_details = {
                'Items': item.item_name,
                'HSN': item.item_hsn,
                'Quantity': item.qty,
                'Price': item.price,
                'Tax_Rate': item.taxGST,
                'Discount': item.discount,
                'Total': item.total
            }
            items_list.append(item_details)
            print(items_list)
    else:
        return JsonResponse({'error': 'Invalid bill type'}, status=400)

   
    return JsonResponse(items_list, safe=False)

def checkdebitnoteNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = debitnote.objects.filter(company = com).last()
        if lastInv:
            inv_no = str(lastInv.debitnote_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtInv = 'RI01'

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkRecInvNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Debit Note No. Pattern already Exists.!'})
        elif debitnote.objects.filter(company = com, debitnote_no__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Debit Note No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Debit Note No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def updatedebitnote(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = debitnote.objects.get(id = id)
        bill_type = request.POST['billTypeSelect']
        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']


            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkRecInvNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Debitnote No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if rec_inv.debitnote_no != invNum and debitnote.objects.filter(company = com, debitnote_no__iexact = invNum).exists():
                res = f'<script>alert("Debit note Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            rec_inv.vendor = Vendor.objects.get(id = request.POST['customerId'])
            rec_inv.vendor_email = request.POST['customer_email']
            rec_inv.billing_address = request.POST['bill_address']
            rec_inv.gst_type = request.POST['customer_gst_type']
            rec_inv.gstin = request.POST['customer_gstin']
            rec_inv.place_of_supply = request.POST['place_of_supply']
            # rec_inv.profile_name = request.POST['profile_name']
            rec_inv.bill_type = request.POST['billTypeSelect']
            rec_inv.reference_no = request.POST['reference_number']
            rec_inv.debitnote_no = invNum
            # rec_inv.payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term'])
            rec_inv.debitnote_date = request.POST['start_date']
            rec_inv.bill_no = request.POST['billList']
            # rec_inv.salesOrder_no = request.POST['order_number']
            rec_inv.price_list_applied = True if 'priceList' in request.POST else False
            rec_inv.price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id'])
            # rec_inv.repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every'])
            rec_inv.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            rec_inv.cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            rec_inv.upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            rec_inv.bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            rec_inv.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            rec_inv.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            rec_inv.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            rec_inv.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            rec_inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            rec_inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            rec_inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            rec_inv.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            rec_inv.advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            rec_inv.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            rec_inv.description = request.POST['note']
            rec_inv.terms_and_conditions = request.POST['terms']

            if len(request.FILES) != 0:
                rec_inv.document=request.FILES.get('file')
            rec_inv.save()


            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]
            print(invItem_ids)

            inv_items = debitnote_item.objects.filter(debit_note = rec_inv)
            print(inv_items)
            object_ids = [obj.id for obj in inv_items]
            for i in debitnote_item.objects.filter(debit_note = rec_inv):
                item = Items.objects.get(id = i.item.id)
                item.current_stock += i.quantity
                item.save()
            debitnote_item.objects.filter(debit_note = rec_inv).delete()


            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    debitnote_item.objects.create(company = com, login_details = com.login_details, debit_note = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
                    
            debitnote_History.objects.create(
                company = com,
                login_details = log_details,
                debit_note = rec_inv,
                action = 'Edited'
            )
            if bill_type == 'bills':
                # Assuming request.POST['billList'] contains the bill number
                bill_id = Bill.objects.get(Bill_Number=request.POST['billList'])

                print(bill_id)

                # Update the Action field for the corresponding bill
                bill = Bill.objects.get(Bill_Number=request.POST['billList'])
                bill.debitNoteaction = 'Edited'
                bill.save()
                print("ed bill")
            if bill_type == 'recurring':
                bill_id = Recurring_bills.objects.get(recc_bill_no = request.POST['billList'])

                print(bill_id)

                # Update the Action field for the corresponding bill
                bill = Recurring_bills.objects.get(recc_bill_no = request.POST['billList'])
                bill.debitNoteaction = 'Edited'
                bill.save()
                print("ed rur")

            return redirect(view_debitnote, id)
        else:
            return redirect(view_debitnote, id)
    else:
       return redirect('/')
   
def downloaddebitnoteSampleImportFile(request):
    recInv_table_data = [['SLNO','VENDOR','DATE','PLACE OF SUPPLY','DB NO','BILL NO','BILL TYPE','PRICE LIST','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE'],['1', 'Kevin Debryne', '2024-03-20', '[KL]-Kerala','DB100','bill-002','bills','','','1000','0','25','25','50','0','0','1050','1000']]
    items_table_data = [['DB NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL'], ['1', 'Test Item 1','789987','1','1000','5','0','1000']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'DEBIT_NOTE'
    sheet2 = wb.create_sheet(title='items')

    # Populate the sheets with data
    for row in recInv_table_data:
        sheet1.append(row)

    for row in items_table_data:
        sheet2.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=debit_note_sample_file.xlsx'

    wb.save(response)

    return response

def importdebitnoteFromExcel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']
            print("ok")

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["DEBIT_NOTE"]
            except:
                print('sheet not found')
                messages.error(request,'`DEBIT_NOTE` sheet not found.! Please check.')
                return redirect(debitnote_list)

            try:
                ws = wb["items"]
            except:
                print('sheet not found')
                messages.error(request,'`items` sheet not found.! Please check.')
                return redirect(debitnote_list)
            
            ws = wb["DEBIT_NOTE"]
            rec_inv_columns = ['SLNO','VENDOR','DATE','PLACE OF SUPPLY','DB NO','BILL NO','BILL TYPE','PRICE LIST','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE']
            rec_inv_sheet = [cell.value for cell in ws[1]]
            if rec_inv_sheet != rec_inv_columns:
                print('invalid sheet')
                messages.error(request,'`DEBIT_NOTE` sheet column names or order is not in the required formate.! Please check.')
                return redirect(debitnote_list)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, vendor,date,place_of_supply, debitnote_no,bill_no,bill_type, price_list, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                if slno is None  or vendor is None  or date is None or place_of_supply is None  or debitnote_no is None or bill_no is None or bill_type is None  or subtotal is None or taxamount is None or grandtotal is None:
                    print('debitnote == invalid data')
                    messages.error(request,'`debitnote` sheet entries missing required fields.! Please check.')
                    return redirect(debitnote_list)
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns = ['DB NO','PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL']
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`items` sheet column names or order is not in the required formate.! Please check.')
                return redirect(debitnote_list)

            for row in ws.iter_rows(min_row=2, values_only=True):
                db_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                if db_no is None or name is None or quantity is None or tax_percentage is None or total is None:
                    print('items == invalid data')
                    messages.error(request,'`items` sheet entries missing required fields.! Please check.')
                    return redirect(debitnote_list)
            
            # getting data from rec_invoice sheet and create rec_invoice.
            incorrect_data = []
            existing_pattern = []
            ws = wb['DEBIT_NOTE']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, vendor,debit_note_date,place_of_supply, debit_note_no,bill_no,bill_type, price_list, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                recInvNo = slno
                if slno is None:
                    continue
                # Fetching last rec_inv and assigning upcoming rec_inv no as current + 1
                # Also check for if any rec_inv is deleted and rec_inv no is continuos w r t the deleted rec_inv
                latest_inv = debitnote.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

                if debitnote_Reference.objects.filter(company = com).exists():
                    deleted = debitnote_Reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                
                cust = vendor.split(' ')
            
                if len(cust) > 2:
                    cust[1] = cust[1] + ' ' + ' '.join(cust[2:])
                    cust = cust[:2]
                    fName = cust[0]
                    lName = cust[1]
                else:
                    fName = cust[0]
                    lName = cust[1]
                print(cust,fName,lName)

                if lName == "":  
                    if not Vendor.objects.filter(company = com, first_name = fName).exists():
                        print('No vendor1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Vendor.objects.filter(company = com, first_name = fName).first()
                        email = c.vendor_email
                        gstType = c.gst_treatment
                        gstIn = c.gst_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pin_code}"
                    except:
                        pass

                if fName != "" and lName != "":  
                    if not Vendor.objects.filter(company = com, first_name = fName, last_name = lName).exists():
                        print('No vendor2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Vendor.objects.filter(company = com, first_name = fName, last_name = lName).first()
                        email = c.vendor_email
                        gstType = c.gst_treatment
                        gstIn = c.gst_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pin_code}"
                    except:
                        pass

                if debit_note_date is None:
                    debit_note_date = dateToday
                else:
                    debit_note_date = datetime.strptime(debit_note_date, '%Y-%m-%d').date()

                PatternStr = []
                for word in debit_note_no:
                    if word.isdigit():
                        pass
                    else:
                        PatternStr.append(word)
                
                pattern = ''
                for j in PatternStr:
                    pattern += j

                pattern_exists = checkRecInvNumberPattern(pattern)

                if pattern !="" and pattern_exists:
                    existing_pattern.append(slno)
                    continue

                while debitnote.objects.filter(company = com, debitnote_no__iexact = debit_note_no).exists():
                    debit_note_no = getNextRINumber(debit_note_no)

                
                try:
                    priceList = PriceList.objects.get(company = com, name = price_list)
                except:
                    priceList = None

                

                recInv = debitnote(
                    company = com,
                    login_details = com.login_details,
                    vendor = None if c is None else c,
                    vendor_email = email,
                    billing_address = adrs,
                    gst_type = gstType,
                    gstin = gstIn,
                    place_of_supply = place_of_supply,
                    reference_no = new_number,
                    debitnote_no = debit_note_no,
                    debitnote_date = debit_note_date,
                    bill_no=bill_no,
                    bill_type=bill_type,
                    price_list_applied = True if priceList is not None else False,
                    price_list = priceList,
                    payment_method = None,
                    cheque_number = None,
                    upi_number = None,
                    bank_account_number = None,
                    subtotal = 0.0 if subtotal == "" else float(subtotal),
                    igst = 0.0 if igst == "" else float(igst),
                    cgst = 0.0 if cgst == "" else float(cgst),
                    sgst = 0.0 if sgst == "" else float(sgst),
                    tax_amount = 0.0 if taxamount == "" else float(taxamount),
                    adjustment = 0.0 if adjustment == "" else float(adjustment),
                    shipping_charge = 0.0 if shipping == "" else float(shipping),
                    grandtotal = 0.0 if grandtotal == "" else float(grandtotal),
                    advance_paid = 0.0 if advance == "" else float(advance),
                    balance = float(grandtotal) - float(advance),
                    description = description,
                    status = "Draft"
                )
                recInv.save()

                # Transaction history
                history = debitnote_History(
                    company = com,
                    login_details = log_details,
                    debit_note = recInv,
                    action = 'Created'
                )
                history.save()

                # Items for the estimate
                ws = wb['items']
                for row in ws.iter_rows(min_row=2, values_only=True):
                    rec_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                    if int(rec_no) == int(recInvNo):
                        print(row)
                        if discount is None:
                            discount=0
                        if price is None:
                            price=0
                        if quantity is None:
                            quantity=0
                        if not Items.objects.filter(company = com, item_name = name).exists():
                            print('No Item')
                            incorrect_data.append(rec_no)
                            continue
                        try:
                            itm = Items.objects.filter(company = com, item_name = name).first()
                        except:
                            pass

                        debitnote_item.objects.create(company = com, login_details = com.login_details, debit_note = recInv, item = itm, hsn = hsn, quantity = quantity, price = price, tax_rate = tax_percentage, discount = discount, total = total)
                        itm.current_stock -= int(quantity)
                        itm.save()

            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect(debitnote_list)
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to DB No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect(debitnote_list)
        else:
            return redirect(debitnote_list)
    else:
        return redirect('/')
        
#End
#Retainer invoice
def retainer_list(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            item = Items.objects.filter(company=dash_details.company)
            allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            invoices = RetainerInvoice.objects.filter(logindetails=log_details).order_by(F('retainer_invoice_date').asc())
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            item = Items.objects.filter(company=dash_details)
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            invoices = RetainerInvoice.objects.filter(company=dash_details).order_by(F('retainer_invoice_date').asc())
        else:
            return redirect('/')
        
        # Prepare the context to pass to the template
        context = {
            'details': dash_details,
            'item': item,
            'allmodules': allmodules,
            'invoices': invoices,
        }
        
        # Render the template with the context data
        return render(request, 'zohomodules/retainer_invoice/retainer_list.html', context)
    else:
        return redirect('/')
        
def new_retainer(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=login_id)
        # Add this print statement to check the log_details
        print("Login Details:", log_details)
        if log_details.user_type == 'Staff':
            staff_id = request.session['login_id']
            try:
                staff = StaffDetails.objects.get(login_details=log_details)
                company = staff.company
                dash_details = staff
                customers = Customer.objects.filter(company=company)
                last_record = RetainerInvoice.objects.filter(user=request.user.id).order_by('-id').first()  # Use .first() to get a single instance
            except StaffDetails.DoesNotExist:
                return redirect('/')
        elif log_details.user_type == 'Company':
            company_id = request.session['login_id']
            try:
                company = CompanyDetails.objects.get(login_details=log_details)
                dash_details = company
                customers = Customer.objects.filter(company=company)
                last_record = RetainerInvoice.objects.filter(company=dash_details).order_by('-id').first()  # Use .first() to get a single instance
            except CompanyDetails.DoesNotExist:
                return redirect('/')
        else:
            return redirect('/')

        item = Items.objects.filter(company=company)
        allmodules = ZohoModules.objects.get(company=company, status='New')
        units = Unit.objects.filter(company=company)
        accounts = Chart_of_Accounts.objects.filter(company=company)
        
        payment_terms = Company_Payment_Term.objects.filter(company=company)
        print("Payment Terms:", payment_terms)  # Debugging statement
        # Get the last recorded RetainerInvoice based on logindetails
        # last_record = RetainerInvoice.objects.filter(logindetails=log_details).order_by('-id').first()
        print("last record:",last_record)
        # Initialize next retainer invoice number
        next_ret_number = ''
        
        lastSalesNo = ''
        last_digit_index = 0  # Initialize last_digit_index here
        if last_record ==None:
            reference = '01'
            remaining_characters=''
            
        else:
            lastSalesNo = last_record.retainer_invoice_number
            last_two_numbers = int(lastSalesNo[-2:])+1
            for i in range(len(lastSalesNo)-1,-1,-1):
                if not lastSalesNo[i].isdigit():
                    last_digit_index=i+1
                    break
            prefix=lastSalesNo[:last_digit_index]
            number=int(lastSalesNo[last_digit_index:])
            number+=1
            enumber=str(number).zfill(3)
            next_ret_number=f"{prefix}{enumber}"
            print(next_ret_number)
            # print("lastSalesNo:", lastSalesNo)  # Print lastSalesNo to the terminal
            last_two_numbers = int(lastSalesNo[-2:])+1
            # print(last_two_numbers)
            remaining_characters = lastSalesNo[:-2]  
            if remaining_characters == '':
                if last_two_numbers < 10:
                    reference = '0'+str(last_two_numbers)
                else:
                    reference = str(last_two_numbers)
            else:
                if last_two_numbers < 10:
                    reference = remaining_characters+'0'+str(last_two_numbers)
                else:
                    reference = remaining_characters+str(last_two_numbers)
        # Get the last reference from retInvoiceReference
        last_reference = retInvoiceReference.objects.filter(company=company).last()
        if last_reference is None:
            reford = '01'
        else:
            # Increment the reference number for the next RetainerInvoice
            next_reference = last_reference.reference + 1
            reford = f"{next_reference:02}"
        
        banks = Banking.objects.filter(company=company).values_list('bnk_name', flat=True)
        subtotal = request.POST.get('subtotal')  # Update this with the correct POST data key
        adjustment = request.POST.get('adjustment')  # Update this with the correct POST data key
        total = request.POST.get('total')  # Update this with the correct POST data key
        paid = request.POST.get('paid')  # Update this with the correct POST data key
        balance = request.POST.get('balance')  # Update 
        context = {
            'details': dash_details,
            'units': units,
            'allmodules': allmodules,
            'accounts': accounts,
            'customer1': customers,
            'reford': reford,
            'next_ret_number': next_ret_number,
            'item': item,
            'banks': banks,
            'pTerms': payment_terms,  # Add payment terms data to the context
            
        }
        
        return render(request, 'zohomodules/retainer_invoice/new_retainer.html', context)
    else:
        return redirect('/')

def get_customer_details(request):
    if request.method == 'POST' and request.headers.get('x-requested-with') == 'XMLHttpRequest':
        customer_id = request.POST.get('customer_id')
        customer = Customer.objects.get(pk=customer_id)
        response_data = {
            'customer_email': customer.customer_email,
            'gst_treatment': customer.GST_treatement,
            'gstin': customer.GST_number,
            'customer_address': customer.billing_address,
            'place_of_supply': customer.place_of_supply, 
            # Include other fields you need
        }
        print(response_data)  # Debugging line
        return JsonResponse(response_data)
    else:
        return JsonResponse({'error': 'Invalid request'})


def itemdata_ri(request):
    id = request.GET.get('id')

    try:
        item = Items.objects.get(id=id)
        rate = item.selling_price
        # Fetch company details associated with the item
        company = item.company
        place = company.state
        gst = item.intrastate_tax
        igst = item.interstate_tax
        desc = item.sales_description
        stock = item.opening_stock
        hsn = item.hsn_code

        return JsonResponse({
            "status": "success",
            "desc": desc,
            "place": place,
            "rate": rate,
            "gst": gst,
            "igst": igst,
            "stock": stock,
            "hsn": hsn
        })
    except Items.DoesNotExist:
        return JsonResponse({"status": "error", "message": "Item not found"})
        
def get_bank_details(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']           
        else:
            return redirect('/')
        
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        bank_name = request.GET.get('bank_name')
        bank = Banking.objects.get(bnk_name=bank_name,company=dash_details,
                    login_details=log_details)
        data = {'bnk_acno': bank.bnk_acno}
        return JsonResponse(data)


def create_invoice_draft(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']           
        else:
            return redirect('/')
        
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            company=staff_details.company
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
        else:    
            company=CompanyDetails.objects.get(login_details=log_details)
            dash_details = company
        if request.method == 'POST':
            # Extract data from the request
            customer_id = request.POST.get('customer_id')
            customer_mailid = request.POST.get('cx_mail')
            retainer_invoice_number = request.POST.get('retainer-invoice-number')
            references = request.POST.get('references')
            retainer_invoice_date = request.POST.get('invoicedate')
            total_amount = request.POST.get('total')
            bal_amount = request.POST.get('balance')
            customer_notes = request.POST.get('customer_notes')
            terms_and_conditions = request.POST.get('terms')
            paid = request.POST.get('paid')  # Retrieve the 'paid' value from the request
            adjustment = request.POST.get('adjustment')  # Retrieve the 'adjustment' value from the request
            pay_method = request.POST.get('pay_method')
            acc_no = request.POST.get('acc_no', '')
            cheque_no = request.POST.get('chq_no', '')
            upi_id = request.POST.get('upi_id', '')
            
            # Ensure request.user is a User instance
            created_by = LoginDetails.objects.get(id=log_id)  # No need to check if it's in session since it's checked above
            document_file = request.FILES.get('document')
            if document_file:
                # Process the uploaded file
                # For example, you can save it to a specific directory
                # Here, I'm assuming you have a 'documents' directory in your MEDIA_ROOT
                document_path = os.path.join(settings.MEDIA_ROOT, 'documents', document_file.name)
                with open(document_path, 'wb') as document_destination:
                    for chunk in document_file.chunks():
                        document_destination.write(chunk) 
            # Create a new instance of RetainerInvoice
            retainer_invoice = RetainerInvoice(
                customer_name_id=customer_id,  # Assuming customer_name is a ForeignKey
                customer_mailid=customer_mailid,
                retainer_invoice_number=retainer_invoice_number,
                refrences=references,
                retainer_invoice_date=retainer_invoice_date,
                total_amount=total_amount,
                balance=bal_amount,
                customer_notes=customer_notes,
                terms_and_conditions=terms_and_conditions,
                advance=paid,
                adjustment=adjustment,
                is_sent=False,  # Assuming this is correct for create_invoice_draft
                # Set the date and action by fields
                created_at=timezone.now(),
                modified_at=timezone.now(),  # Assuming modified_at is set to current time when created
                created_by=created_by,
                modified_by=created_by,  # Initially set modified_by to created_by
                logindetails=log_details,
                company=company, 
            )

            # Use transaction.atomic() to ensure atomicity of the operations
            with transaction.atomic():
                # Save the RetainerInvoice instance
                retainer_invoice.save()

                # Increment and save the reference number for retInvoiceReference
                last_reference = retInvoiceReference.objects.filter(company=dash_details).last()
                if last_reference is None:
                    next_reference = 1
                else:
                    next_reference = last_reference.reference + 1
                
                retInvoiceReference.objects.create(
                    reference=next_reference,
                    user=None,  # Update this if needed
                    company=dash_details,
                    logindetails=log_details  # Update this if needed
                )

                # Optionally, create and save a RetainerPaymentDetails instance
                if pay_method:
                    ret_payment = retainer_payment_details(
                        retainer=retainer_invoice,
                        payment_opt=pay_method,
                        acc_no=acc_no,
                        cheque_no=cheque_no,
                        upi_id=upi_id
                    )
                    ret_payment.save()

                # Save Retaineritems instances for each item received in the POST request
                description = request.POST.getlist('description[]')
                amount = request.POST.getlist('amount[]')
                item_ids = request.POST.getlist('item[]')
                qty = request.POST.getlist('quantity[]')
                rate = request.POST.getlist('rate[]')
                hsn = request.POST.getlist('hsn[]')

                for i in range(len(description)):
                    item = Items.objects.get(id=item_ids[i])
                    Retaineritems.objects.create(
                        retainer=retainer_invoice,
                        description=description[i],
                        amount=amount[i],
                        itemname=item.item_name,  # Assign the item name properly
                        quantity=qty[i],
                        rate=rate[i],
                        hsn=hsn[i],
                        company=company,  # Assign the company here
                        logindetails=log_details,  # Assign the logindetails here
                        item=item
                    )

            # Redirect to retainer_list.html after saving
            return redirect('retainer_list')

        else:
            return HttpResponse("Invalid request")
    else:
        return redirect('/')

def create_invoice_send(request):
    if 'login_id' in request.session:
        log_id = request.session.get('login_id')
        if not log_id:
            return redirect('/')
        
        log_details= LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            company=staff_details.company
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
        else:    
            company=CompanyDetails.objects.get(login_details=log_details)
            dash_details = company
        
        if request.method == 'POST':
            # Extract data from the request
            customer_id = request.POST.get('customer_id')
            customer_mailid = request.POST.get('cx_mail')
            retainer_invoice_number = request.POST.get('retainer-invoice-number')
            references = request.POST.get('references')
            retainer_invoice_date = request.POST.get('invoicedate')
            total_amount = request.POST.get('total')
            bal_amount = request.POST.get('balance')
            customer_notes = request.POST.get('customer_notes')
            terms_and_conditions = request.POST.get('terms')
            paid = request.POST.get('paid',0)  # Retrieve the 'paid' value from the request
            adjustment = request.POST.get('adjustment',0)  # Retrieve the 'adjustment' value from the request
            try:
                paid = int(paid)
            except ValueError:
                paid = 0  # Default to 0 if not a valid integer

            try:
                adjustment = int(adjustment)
            except ValueError:
                adjustment = 0  # Default to 0 if not a valid integer
            pay_method = request.POST.get('pay_method')
            acc_no = request.POST.get('acc_no', '')
            cheque_no = request.POST.get('chq_no', '')
            upi_id = request.POST.get('upi_id', '')

            # Ensure request.user is a User instance
            created_by = LoginDetails.objects.get(id=log_id)  # No need to check if it's in session since it's checked above
            

            document_file = request.FILES.get('document')
            if document_file:
                # Process the uploaded file
                # For example, you can save it to a specific directory
                # Here, I'm assuming you have a 'documents' directory in your MEDIA_ROOT
                document_path = os.path.join(settings.MEDIA_ROOT, 'documents', document_file.name)
                with open(document_path, 'wb') as document_destination:
                    for chunk in document_file.chunks():
                        document_destination.write(chunk) 
            # Create a new instance of RetainerInvoice
            retainer_invoice = RetainerInvoice(
                customer_name_id=customer_id,  # Assuming customer_name is a ForeignKey
                customer_mailid=customer_mailid,
                retainer_invoice_number=retainer_invoice_number,
                refrences=references,
                retainer_invoice_date=retainer_invoice_date,
                total_amount=total_amount,
                balance=bal_amount,
                customer_notes=customer_notes,
                terms_and_conditions=terms_and_conditions,
                advance=paid,
                adjustment=adjustment,
                is_sent=True,  # Assuming this is correct for create_invoice_send
                # Set the date and action by fields
                created_at=timezone.now(),
                modified_at=timezone.now(),  # Assuming modified_at is set to current time when created
                created_by=created_by,
                modified_by=created_by,  # Initially set modified_by to created_by
                logindetails=log_details,
                company=company, 
            )

            # Use transaction.atomic() to ensure atomicity of the operations
            with transaction.atomic():
                # Save the RetainerInvoice instance
                retainer_invoice.save()

                # Increment and save the reference number for retInvoiceReference
                last_reference = retInvoiceReference.objects.filter(company=dash_details).last()
                if last_reference is None:
                    next_reference = 1
                else:
                    next_reference = last_reference.reference + 1
                
                retInvoiceReference.objects.create(
                    reference=next_reference,
                    user=None,  # Update this if needed
                    company=dash_details,
                    logindetails=log_details  # Update this if needed
                )

                # Optionally, create and save a RetainerPaymentDetails instance
                if pay_method:
                    ret_payment = retainer_payment_details(
                        retainer=retainer_invoice,
                        payment_opt=pay_method,
                        acc_no=acc_no,
                        cheque_no=cheque_no,
                        upi_id=upi_id
                    )
                    ret_payment.save()

                # Save Retaineritems instances for each item received in the POST request
                description = request.POST.getlist('description[]')
                amount = request.POST.getlist('amount[]')
                item_ids = request.POST.getlist('item[]')
                qty = request.POST.getlist('quantity[]')
                rate = request.POST.getlist('rate[]')
                hsn= request.POST.getlist('hsn[]')

                for i in range(len(description)):
                    item = Items.objects.get(id=item_ids[i])
                    Retaineritems.objects.create(
                        retainer=retainer_invoice,
                        description=description[i],
                        amount=amount[i],
                        itemname=item.item_name,  # Assign the item name properly
                        quantity=qty[i],
                        rate=rate[i],
                        hsn=hsn[i],
                        company=company,  # Assign the company here
                        logindetails=log_details,  # Assign the logindetails here
                        item=item
                    )

            # Redirect to retainer_list.html after saving
            return redirect('retainer_list')

        else:
            return HttpResponse("Invalid request")
    else:
        return redirect('/')


def retaineroverview(request, pk=None):
    try:
        if 'login_id' in request.session:
            login_id = request.session.get('login_id')
            if not login_id:
                return redirect('/')
            
            log_details = LoginDetails.objects.get(id=login_id)
            invoices=None
            company = None
            if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                company = dash_details.company 
                item = Items.objects.filter(company=company)
                status = request.GET.get('status')  # Get the status parameter from the URL
                
                if status == 'draft':
                    invoices = RetainerInvoice.objects.filter(logindetails=log_details, is_sent=False).order_by('-id')
                elif status == 'sent':
                    invoices = RetainerInvoice.objects.filter(logindetails=log_details, is_sent=True).order_by('-id')
                else:
                    invoices = RetainerInvoice.objects.filter(logindetails=log_details).order_by('-id')

                allmodules = ZohoModules.objects.get(company=company,status='New')
                units = Unit.objects.filter(company=company)
                accounts = Chart_of_Accounts.objects.filter(company=company)
            elif log_details.user_type == 'Company':
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                company = dash_details  
                item = Items.objects.filter(company=company)
       
                allmodules = ZohoModules.objects.get(company=company,status='New')
                units = Unit.objects.filter(company=company)
                accounts = Chart_of_Accounts.objects.filter(company=company)
                status = request.GET.get('status')  # Get the status parameter from the URL
                
                if status == 'draft':
                    invoices = RetainerInvoice.objects.filter(company=company, is_sent=False).order_by('-id')
                elif status == 'sent':
                    invoices = RetainerInvoice.objects.filter(company=company, is_sent=True).order_by('-id')
                else:
                    invoices = RetainerInvoice.objects.filter(company=company).order_by('-id')

                
            invoice = RetainerInvoice.objects.get(pk=pk)
            
            
            items = Retaineritems.objects.filter(retainer=invoice)
            payment_details = retainer_payment_details.objects.filter(retainer=invoice).first()  # Fetch payment details for the invoice
            comments = RetainerInvoiceComment.objects.filter(retainer_invoice=invoice)
            # Accessing customer attributes
            customer_name = invoice.customer_name.customer_display_name  # Assuming customerName is the attribute for customer name
            
            customer_email = invoice.customer_name.customer_email
            gst_treatment = invoice.customer_name.GST_treatement
            gst_number = invoice.customer_name.GST_number
            place_of_supply = invoice.customer_name.place_of_supply
            billing_address = invoice.customer_name.billing_address  # Fetch billing address
            retainer_id = invoice.id  # Assuming the ID of the RetainerInvoice object is stored in the 'id' attribute
            # Print the retainer object here
            print(invoice)
            history_entries = RetainerInvoice.objects.filter(id=pk).order_by('modified_at') 
            # invoices = RetainerInvoice.objects.select_related('customer_name').all()
            # Fetch modified by and created by login details objects
            # Fetch modified by and created by login details objects
            modified_by_details = None
            created_by_details = None
            for entry in history_entries:
                if entry.modified_by:
                    modified_by_details = entry.modified_by
                if entry.created_by:
                    created_by_details = entry.created_by
            
            retainer_invoice = RetainerInvoice.objects.get(pk=retainer_id)
            subtotal = Retaineritems.objects.filter(retainer=retainer_invoice).aggregate(total=Sum('amount'))['total']
            context = {
                'details': dash_details,
                'company': company, 
                'invoice': invoice,
                'history_entries': history_entries,
                'units': units,
                'allmodules': allmodules,
                'accounts': accounts,
                'customer_name': customer_name,
                'customer_email': customer_email,
                'gst_treatment': gst_treatment,
                'gst_number': gst_number,
                'place_of_supply': place_of_supply,
                'items': items,
                'billing_address': billing_address,  # Pass billing address to the context
                'ret_payments': payment_details,
                'retainer_id': retainer_id,  # Pass the retainer_id to the context
                'created_by_details': created_by_details,
                'modified_by_details': modified_by_details,
                'comments': comments,
                'invoices': invoices,
                'status': status,  # Pass the status to the template
                'invoicess': retainer_invoice,
                'subtotal': subtotal if subtotal else 0,
                'adjustment': retainer_invoice.adjustment,
                'total': retainer_invoice.total_amount,
                'paid': retainer_invoice.paid,
                'balance': retainer_invoice.balance,
                
            }
            return render(request, 'zohomodules/retainer_invoice/retaineroverview.html', context)
        
        return render(request, 'zohomodules/retainer_invoice/retaineroverview.html')
    
    except ObjectDoesNotExist:
        return HttpResponse("The requested item does not exist.")
        
def attachRetainerInvoiceFile(request, id):
    if 'login_id' in request.session:
        inv = RetainerInvoice.objects.get(id=id)

        if request.method == 'POST' and len(request.FILES) != 0:
            inv.document = request.FILES.get('file')
            inv.save()

        return redirect('retaineroverview', pk=id)
    else:
        return redirect('/')


def shareRetainerInvoiceToEmail(request, id):
    try:
        if request.method == 'POST':
            # Get the retainer invoice object
            invoice = RetainerInvoice.objects.get(id=id)
            # Get the items associated with the retainer invoice
            items = Retaineritems.objects.filter(retainer=invoice)
            # Get the logged-in user's company details
            company = invoice.company

            # Extract email IDs and message from the POST request
            emails_string = request.POST.get('email_ids')
            email_message = request.POST.get('email_message')

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]

            # Render the retainer invoice PDF
            context = {'invoice': invoice, 'items': items, 'company': company}
            template_path = 'zohomodules/retainer_invoice/retainer_invoice_pdf.html'
            template = get_template(template_path)
            html = template.render(context)

            # Generate PDF
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()

            # Set email subject
            subject = f"Retainer Invoice - {invoice.retainer_invoice_number}"

            # Create email message
            email = EmailMessage(
                subject,
                email_message,
                settings.EMAIL_HOST_USER,
                emails_list,
            )
            # Attach PDF
            email.attach(f"RetainerInvoice_{invoice.retainer_invoice_number}.pdf", pdf, 'application/pdf')
            email.send()

            # Return success message
            messages.success(request, "Retainer invoice shared successfully via email.")
            return JsonResponse({'success': True})

    except Exception as e:
        # Return error message if any exception occurs
        return JsonResponse({'success': False, 'error': str(e)})

def retainer_edit_page(request, retainer_id):
    print("View accessed")  # Check if the view is accessed
    if 'login_id' in request.session:
        print("Session found")  # Check if session is found
        login_id = request.session.get('login_id')
        if not login_id:
            return redirect('/')

        log_details = get_object_or_404(LoginDetails, id=login_id)

        if log_details.user_type == 'Staff':
            dash_details = get_object_or_404(StaffDetails, login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = get_object_or_404(CompanyDetails, login_details=log_details)
            company = dash_details

        retainer = get_object_or_404(RetainerInvoice, pk=retainer_id)
        retainer_items = Retaineritems.objects.filter(retainer=retainer)
        customers = Customer.objects.filter(company=company)
        allmodules = get_object_or_404(ZohoModules, company=company, status='New')
        items = Items.objects.filter(company=company)

        if request.method == 'POST':
            print("POST request received")  # Check if POST request is received
            customer_id = request.POST.get('customer_id')
            customer = get_object_or_404(Customer, pk=int(customer_id)) if customer_id and customer_id.isdigit() else None

            retainer.customer_mailid = request.POST.get('cx_mail')
            retainer.retainer_invoice_number = request.POST.get('retainer-invoice-number')
            retainer.refrences = request.POST.get('refrences')
           
            retainer.retainer_invoice_date = request.POST.get('invoicedate')
            retainer.customer_notes = request.POST.get('customer_notes')
            retainer.terms_and_conditions = request.POST.get('terms')

            # Debug prints for paid and adjustment values
            paid_value = request.POST.get('paid')
            adjustment_value = request.POST.get('adjustment')
            print(f"Paid before save: {paid_value}")
            print(f"Adjustment before save: {adjustment_value}")

            if paid_value:
                retainer.paid = float(paid_value)
            if adjustment_value:
                retainer.adjustment = float(adjustment_value)

            print(f"Paid after conversion: {retainer.paid}")
            print(f"Adjustment after conversion: {retainer.adjustment}")

            pay_method = request.POST.get('pay_method')
            if pay_method:
                ret_payment, _ = retainer_payment_details.objects.get_or_create(retainer=retainer)
                ret_payment.payment_opt = pay_method
                ret_payment.acc_no = request.POST.get('acc_no', '')
                ret_payment.cheque_no = request.POST.get('chq_no', '')
                ret_payment.upi_id = request.POST.get('upi_id', '')
                ret_payment.save()

            # Update and save retainer
            retainer.modified_at = timezone.now()
            retainer.modified_by = log_details
            retainer.save()

            # Debug print to check if values are saved correctly
            saved_retainer = RetainerInvoice.objects.get(pk=retainer_id)
            print(f"Paid after save: {saved_retainer.paid}")
            print(f"Adjustment after save: {saved_retainer.adjustment}")

            # Process retainer items
            descriptions = request.POST.getlist('description[]')
            amounts = request.POST.getlist('amount[]')
            quantities = request.POST.getlist('quantity[]')
            rates = request.POST.getlist('rate[]')
            hsns = request.POST.getlist('hsn[]')
            item_ids = request.POST.getlist('item[]')
            existing_item_ids = list(retainer_items.values_list('id', flat=True))

            for i in range(len(item_ids)):
                if item_ids[i].isdigit():
                    item_instance = get_object_or_404(Items, id=int(item_ids[i]))
                    description = descriptions[i] if i < len(descriptions) else ''
                    amount = amounts[i] if i < len(amounts) else 0
                    quantity = quantities[i] if i < len(quantities) else 0
                    rate = rates[i] if i < len(rates) else 0
                    hsn = hsns[i] if i < len(hsns) else ''

                    if i < len(existing_item_ids):
                        retainer_item = get_object_or_404(Retaineritems, id=existing_item_ids[i])
                        retainer_item.description = description
                        retainer_item.amount = amount
                        retainer_item.itemname = item_instance.item_name
                        retainer_item.quantity = quantity
                        retainer_item.rate = rate
                        retainer_item.hsn = hsn
                        retainer_item.save()
                    else:
                        Retaineritems.objects.create(
                            retainer=retainer,
                            description=description,
                            amount=amount,
                            itemname=item_instance.item_name,
                            quantity=quantity,
                            rate=rate,
                            hsn=hsn
                        )

            # Recalculate total amount based on updated items
            total_amount = Retaineritems.objects.filter(retainer=retainer).aggregate(total=Sum('amount'))['total'] or 0
            retainer.total_amount = total_amount + (retainer.adjustment or 0.0)
            retainer.balance = total_amount - (retainer.paid or 0.0) + (retainer.adjustment or 0.0)
            retainer.save()

            return redirect('retaineroverview', pk=retainer.id)

        else:
            print("Rendering form")  # Check if GET request is processed
            customer_name = retainer.customer_name.customer_display_name
            customer_email = retainer.customer_name.customer_email
            billing_address = retainer.customer_name.billing_address
            gst_treatment = retainer.customer_name.GST_treatement
            gst_number = retainer.customer_name.GST_number
            place_of_supply = retainer.customer_name.place_of_supply
            retainer_invoice_date = retainer.retainer_invoice_date
            total_amount = retainer.total_amount
            customer_notes = retainer.customer_notes
            terms_conditions = retainer.terms_and_conditions
            balance = retainer.balance
            payment_methods = ['cash', 'cheque', 'upi']
            banks = Banking.objects.filter(company=company).values_list('bnk_name', flat=True)
            payment_details = retainer_payment_details.objects.filter(retainer=retainer).first()

            context = {
                'retainer': retainer,
                'customer_name': customer_name,
                'customer_email': customer_email,
                'billing_address': billing_address,
                'gst_treatment': gst_treatment,
                'gst_number': gst_number,
                'place_of_supply': place_of_supply,
                'retainer_invoice_number': retainer.retainer_invoice_number,
                'retainer_invoice_date': retainer_invoice_date,
                'total_amount': total_amount,
                'customer_notes': customer_notes,
                'terms_conditions': terms_conditions,
                'balance': balance,
                'payment_methods': payment_methods,
                'banks': banks,
                'payment_details': payment_details,
                'retainer_items': retainer_items,
                'customer1': customers,
                'items': items,
                'customers': customers,
                'allmodules': allmodules,
                'refrences': retainer.refrences,
            }

            return render(request, 'zohomodules/retainer_invoice/retainer_invoice_edit.html', context)
    else:
        return redirect('/')

def delete_retainer(request, retainer_id):
    try:
        retainer = RetainerInvoice.objects.get(pk=retainer_id)
        retainer.delete()
    except RetainerInvoice.DoesNotExist:
        pass  # Handle the case where the retainer does not exist
    return redirect('retainer_list')
  

def addRetainerInvoiceComment(request, retainer_id):  # Change 'id' to 'retainer_id'
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company

        ret_inv = RetainerInvoice.objects.get(id=retainer_id)  # Change 'id' to 'retainer_id'
        if request.method == "POST":
            cmt = request.POST.get('comment').strip()

            RetainerInvoiceComment.objects.create(company=com, retainer_invoice=ret_inv, comment=cmt)
            return redirect(retaineroverview, retainer_id)  # Change 'id' to 'retainer_id'
        return redirect(retaineroverview, retainer_id)  # Change 'id' to 'retainer_id'
    return redirect('/')

def deleteRetainerInvoiceComment(request, comment_id):
    if 'login_id' in request.session:
        try:
            # Attempt to retrieve the comment using get_object_or_404
            comment = get_object_or_404(RetainerInvoiceComment, id=comment_id)
            retainer_id = comment.retainer_invoice.id
            comment.delete()
            return redirect(retaineroverview, retainer_id)
        except:
            # Handle the case where the comment does not exist
            return HttpResponse("Retainer Invoice Comment does not exist.")
    else:
        return redirect('/')
        
def convertRetainerInvoice(request, retainer_id):
    if 'login_id' in request.session:
        retainer_invoice = RetainerInvoice.objects.get(id=retainer_id)
        retainer_invoice.status = 'Saved'  # Set the status to 'Saved'
        retainer_invoice.is_sent = True  # Update is_sent to True after conversion
        retainer_invoice.save()
        return redirect('retaineroverview', pk=retainer_invoice.pk)  # Use 'pk' instead of 'retainer_id'
    else:
        return redirect('/')
        
#End

def convertRecurringbill(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = StaffDetails.objects.get(login_details = log_details).company 

        recurr = Recurring_bills.objects.get(id=pk)
        recurr.status = "Save"
        recurr.save()

    return redirect('recurr_overview',pk=pk)
    
def recur_getItems(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
           
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            com = staff.company
                    
        elif log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        items = {}
        option_objects = Items.objects.filter(company = com)
        for option in option_objects:
            items[option.id] = [option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')
        
        
def get_bills(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 
        if request.method == 'GET':
            vendor_id = request.GET.get('vendor')
            bill_type = request.GET.get('type')
            print(vendor_id)
            print(bill_type)

            
            cust = Vendor.objects.get(vendor_display_name = vendor_id)

            # Assuming you have models named Bill and RecurringBill with relevant fields
            if bill_type == 'bills':
                bills = Bill.objects.filter(Vendor=cust,Company=com,debitNoteaction='Created')
                bill_data = [{'id': bill.id, 'bill_number': bill.Bill_Number} for bill in bills]

                print(bills)

            elif bill_type == 'recurring':
                bills = Recurring_bills.objects.filter(vendor_details=cust,company=com, debitNoteaction='Created')
                bill_data = [{'id': bill.id, 'bill_number': bill.recc_bill_no} for bill in bills]

                print(bills)

            else:
                # Handle invalid bill type
                return JsonResponse({'error': 'Invalid bill type'})

            # Serialize the bills data

            # Return the serialized bill data as JSON response
            return JsonResponse({'bills': bill_data})
        else:
            # Handle unsupported request method
            return JsonResponse({'error': 'Unsupported request method'}, status=405) 
            
            
def checkitembill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 
        if request.method == 'GET':
            itemname = request.GET.get('itemname')
            bill_number = request.GET.get('billnumber')
            bill_type = request.GET.get('billType')

            print(itemname)
            print(bill_number)
            
            itm = Items.objects.get(item_name=itemname,company=com)
            print(itm.item_name+"hh")

            if bill_type == 'bills':
                try:
                    pbill=Bill.objects.get(Bill_Number=bill_number,Company=com)
                    print(pbill)
                
                    pbillitem = BillItems.objects.get(Bills=pbill, Company=com, Items=itm.item_name)
                    print(pbillitem)
                    billitemqty=pbillitem.Quantity
                    print(billitemqty)

                    itmname=pbillitem.Items
                    print(itmname)

                    
                    print("bill")
                    print(billitemqty)
                    print(itmname)
                except BillItems.DoesNotExist:
                    itmname = 0
                    billitemqty=0

                data7 = {'itemnames':itmname,'qty':billitemqty}
                return JsonResponse(data7)

            elif bill_type == 'recurring':
                rbills = Recurring_bills.objects.get(recc_bill_no=bill_number,company=com)
                print(rbills)

                try:
                    pbillitem = RecurrItemsList.objects.get(recurr_bill_id=rbills, item_id=itm)
                    billitemqty=pbillitem.qty
                    itmname=pbillitem.item_id.item_name
                    print(billitemqty)
                    print(itmname)
                except RecurrItemsList.DoesNotExist:
                    itmname = 0
                    billitemqty=0
                print("recurring")
                print(billitemqty)
                print(itmname)

                data7 = {'itemnames':itmname,'qty':billitemqty}
                return JsonResponse(data7)
            else:
                # Handle invalid bill type
                return JsonResponse({'error': 'Invalid bill type'})
                
                
def loan_check(request):
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
                
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company
        pan_number = request.GET.get('emp', None)
        print(pan_number)
        data = {
            'is_tak': loan_account.objects.filter(company=comp, bank_holder_id=pan_number).exists()
            
        }
        print(data)
        if data['is_tak']:
            data['error_message'] = 'Loan Account  already exists.'

        return JsonResponse(data)
        
        
        
#--------------------------Meenu Shaju -Delivery Challan--------------

def challan_list(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        dc = Delivery_challan.objects.filter(company=comp_details)
    
    
        return render(request,'zohomodules/Delivery-challan/challan_list.html',{'d_challan':dc,'allmodules':allmodules,'details':dash_details})

def delivery_challan(request):
     
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_challan = Delivery_challan.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_challan.reference_number) + 1 if latest_challan else 1

        if Delivery_challan_reference.objects.filter(company = cmp).exists():
            deleted = Delivery_challan_reference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtchallan = ""
        lastchallan = Delivery_challan.objects.filter(company = cmp).last()
        if lastchallan:
            challan_no = str(lastchallan.challan_number)
            numbers = []
            stri = []
            for word in challan_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            challan_num = int(num)+1

            if num[0] == '0':
                if challan_num <10:
                    nxtchallan = st+'0'+ str(challan_num)
                else:
                    nxtchallan = st+ str(challan_num)
            else:
                nxtchallan = st+ str(challan_num)
        else:
            nxtchallan = 'DC01'
        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'invNo':nxtchallan, 'ref_no':new_number,'units': units,'accounts':accounts,
        }
       

        return render(request,'zohomodules/Delivery-challan/new_challan.html',context) 
     

def challan_get_customer_data(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def challan_get_item_data(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
       
        item = Items.objects.filter(company = cmp, item_name = itemName).first()

        

               
        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,
            

        }
        return JsonResponse(context)
    else:
       return redirect('/')
    

def challannewSalesCustomerAjax(request):
   
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST.get('company_name')
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST.get('skype_number')
            customer_data.designation=request.POST.get('designation')
            customer_data.department=request.POST.get('department')
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST.get('remark')
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST.get('currency')
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST.get('fbk')
            customer_data.twitter=request.POST.get('twtr')
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'




            
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            vdata=Customer.objects.get(id=customer_data.id)
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST.get('remark')
            rdata.company=com
            rdata.customer=vdata
            rdata.save()

        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            data = {
                'status': 'success',
                
            }
            
            
            return JsonResponse(data)

        else:
            return JsonResponse({'status':False})


def challangetCustomersAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company

        options = []
        option_objects = Customer.objects.filter(company=com, customer_status='Active')
        for option in option_objects:
            options.append({
                'id': option.id,
                'name': option.first_name + ' ' + option.last_name,
            })

        return JsonResponse(options, safe=False)
    else:
        return redirect('/')

    
def challan_customer_payment_terms_add(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
        if request.method == 'POST':
            terms = request.POST.get('name')
            day = request.POST.get('days')
            normalized_data = terms.replace(" ", "")
            pay_tm = add_space_before_first_digit(normalized_data)
            ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=comp_details)
            ptr.save()
            payterms_obj = Company_Payment_Term.objects.filter(company=comp_details).values('id', 'term_name')


            payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name']} for pay_terms in payterms_obj]
            response_data = {
            "message": "success",
            'payment_list':payment_list,
            }
            return JsonResponse(response_data)

        else:
            return JsonResponse({'error': 'Invalid request'}, status=400)   
        

def challan_term_dropdown(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company=CompanyDetails.objects.get(login_details=log_details)
            options = {}
            option_objects =Company_Payment_Term.objects.filter(company=company,status='Active')
            for option in option_objects:
                full_name = f"{option.first_name} {option.last_name}"
                options[option.id] = full_name

            return JsonResponse(options)
            
        if log_details.user_type=='Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company=staff.company
            options = {}
            option_objects = Company_Payment_Term.objects.filter(company=staff.company,status='Active')
            for option in option_objects:
                full_name = f"{option.first_name} {option.last_name}"
                options[option.id] = full_name

            return JsonResponse(options)
           
            
def challan_customer_check_gst(request):
    if request.method == 'POST':
        gstNumber = request.POST.get('gstNumber')
        gst_exists = Customer.objects.filter(GST_number=gstNumber).exists()
       
        if gst_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}) 


def challan_check_customer_term_exist(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)
            
        allmodules = ZohoModules.objects.get(company=comp_details, status='New')

    if request.method == 'GET':
        term_name = request.GET.get('term_name', None)
        if term_name:
            normalized_data = term_name.replace(" ", "")
            term_name_processed = add_space_before_first_digit(normalized_data)
            exists = Company_Payment_Term.objects.filter(
                term_name=term_name_processed,
                company=comp_details
            ).exists()
            return JsonResponse({'exists': exists})          
        else:
            return JsonResponse({'exists': False})  # Return False if term_name is None
    else:
        return JsonResponse({'exists': False})

def challan_check_customer_email_exist(request):
    if request.method == 'GET':
       vendoremail = request.GET.get('vendor_email', None)

       if vendoremail:
          
            exists = Customer.objects.filter(
                    customer_email=vendoremail
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False}) 


def challan_check_customer_work_phone_exist(request):
    if request.method == 'GET':
       wPhone = request.GET.get('w_Phone', None)

       if wPhone:
          
            exists = Customer.objects.filter(
                    customer_phone=wPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False})  
    

def challan_check_customer_phonenumber_exist(request):
    if request.method == 'GET':
       mPhone = request.GET.get('m_Phone', None)

       if mPhone:
          
            exists = Customer.objects.filter(
                    customer_mobile=mPhone
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False}) 
    

def add_delivery_challan(request):
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            challanNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in challanNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = ChallancheckRecInvNumberPattern(pattern)

            if Delivery_challan.objects.filter(company = com, challan_number = challanNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{challanNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            challan = Delivery_challan(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                
                
                place_of_supply = request.POST['place_of_supply'],
                
                reference_number = request.POST['reference_number'],
                challan_number = challanNum,
                
                challan_date = request.POST['start_date'],
                
                sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_condition = request.POST['terms'],
                challan_type = request.POST['challanType']
            )

            challan.save()

            if len(request.FILES) != 0:
                challan.document=request.FILES.get('file')
            challan.save()

            if 'Draft' in request.POST:
                challan.status = "Draft"
            elif "Saved" in request.POST:
                challan.status = "Save" 
            challan.save()

            

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Delivery_challan_item.objects.create(company = com, login_details = com.login_details, delivery_challan = challan, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
           
                    
            Delivery_challan_history.objects.create(
                company = com,
                login_details =log_details,
                delivery_challan = challan,
                action = 'Created'
            )

            return redirect(challan_list)
        else:
            return redirect(delivery_challan)
     else:
       return redirect('/')

def ChallancheckRecInvNumberPattern(pattern):
    models = [invoice,Delivery_challan]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False
    
def challan_overview(request,id):
    if 'login_id' in request.session:
            if request.session.has_key('login_id'):
                log_id = request.session['login_id']
            
            else:
                return redirect('/')
        
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type=='Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

            else:    
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                comp_details=CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=comp_details,status='New')
            challan = Delivery_challan.objects.get(id=id)
            all_challan = Delivery_challan.objects.filter(company=comp_details)
            items = Delivery_challan_item.objects.filter(company=comp_details,delivery_challan=challan)
            comments = Delivery_challan_comment.objects.filter(company=comp_details,delivery_challan=challan)
            history = Delivery_challan_history.objects.filter(company=comp_details,delivery_challan=challan)
            last_history = Delivery_challan_history.objects.filter(delivery_challan = challan).last()
            
        
            return render(request,'zohomodules/Delivery-challan/challan_overview.html',{'challan':challan,'d_challan':all_challan,'items':items,'comments':comments,'history':history,'details':dash_details,'allmodules':allmodules,'last_history':last_history}) 
                
def convert_save(request,id):
    dc = Delivery_challan.objects.get(id=id)
    dc.status = 'Save'
    dc.save()
    return redirect(reverse('challan_overview', args=[id]))


def challan_edit(request,id):
    
   if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
       
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        challan = Delivery_challan.objects.get(id = id)
        challanItems = Delivery_challan_item.objects.filter(delivery_challan = challan)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm,  'items':itms,
            'units': units,'accounts':accounts, 'challan':challan, 'challanItems': challanItems,
        }
        


        
        return render(request,'zohomodules/Delivery-challan/challan_edit.html',context)
     
def edit_challan(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = Delivery_challan.objects.get(id = id)
        if request.method == 'POST':
            challanNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in challanNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = ChallancheckRecInvNumberPattern(pattern)

            

            if rec_inv.challan_number != challanNum and Delivery_challan.objects.filter(company = com, challan_number = challanNum).exists():
                res = f'<script>alert("Challan Number `{challanNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            rec_inv.customer = Customer.objects.get(id = request.POST['customerId'])
            
            rec_inv.place_of_supply = request.POST['place_of_supply']
           
            rec_inv.reference_number = request.POST['reference_number']
            rec_inv.challan_number = challanNum
            
            rec_inv.challan_date = request.POST['start_date']
            
            rec_inv.sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            rec_inv.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            rec_inv.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            rec_inv.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            rec_inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            rec_inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            rec_inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            rec_inv.grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            rec_inv.advance = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            rec_inv.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            rec_inv.description = request.POST['note']
            rec_inv.terms_condition = request.POST['terms'],
            rec_inv.challan_type = request.POST['challanType']
            
            if len(request.FILES) != 0:
                rec_inv.document=request.FILES.get('file')
            rec_inv.save()


            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            inv_items = Delivery_challan_item.objects.filter(delivery_challan = rec_inv)
            object_ids = [obj.id for obj in inv_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
            for itmId in ids_to_delete:
                invItem = Delivery_challan_item.objects.get(id = itmId)
                item = Items.objects.get(id = invItem.item.id)
                item.current_stock += invItem.quantity
                item.save()

            Delivery_challan_item.objects.filter(id__in=ids_to_delete).delete()
            
            count = Delivery_challan_item.objects.filter(delivery_challan = rec_inv).count()

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total,invItem_ids)
                mapped = list(mapped)
                for ele in mapped:
                    if int(len(itemId))>int(count):
                        if ele[8] == 0:
                            itm = Items.objects.get(id = int(ele[0]))
                            Delivery_challan_item.objects.create(company = com, login_details = com.login_details, delivery_challan = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                            itm.current_stock -= int(ele[3])
                            itm.save()
                        else:
                            itm = Items.objects.get(id = int(ele[0]))
                            inItm = Delivery_challan_item.objects.get(id = int(ele[8]))
                            crQty = int(inItm.quantity)
                            
                            Delivery_challan_item.objects.filter( id = int(ele[8])).update(delivery_challan = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                            if crQty < int(ele[3]):
                                itm.current_stock -=  abs(crQty - int(ele[3]))
                            elif crQty > int(ele[3]):
                                itm.current_stock += abs(crQty - int(ele[3]))
                            itm.save()
                    else:
                        itm = Items.objects.get(id = int(ele[0]))
                        inItm = Delivery_challan_item.objects.get(id = int(ele[8]))
                        crQty = int(inItm.quantity)

                        Delivery_challan_item.objects.filter( id = int(ele[8])).update(delivery_challan = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                        if crQty < int(ele[3]):
                            itm.current_stock -=  abs(crQty - int(ele[3]))
                        elif crQty > int(ele[3]):
                            itm.current_stock += abs(crQty - int(ele[3]))
                        itm.save()
            
            # Save transaction
                    
            Delivery_challan_history.objects.create(
                company = com,
                login_details = log_details,
                delivery_challan = rec_inv,
                action = 'Edited'
            )

            return redirect(challan_overview, id)
        else:
            return redirect(challan_edit, id)
    else:
       return redirect('/')


def challan_add_comment(request,id):
    if request.method == 'POST':
        if 'login_id' not in request.session:
            return JsonResponse({'error': 'User not logged in'}, status=401)

        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)

        
        challan = Delivery_challan.objects.get(id=id)
        
        comment_text = request.POST.get('comment')
        current_date = date.today()
        
        if comment_text:  
            comment = Delivery_challan_comment(
                comment=comment_text,
                delivery_challan=challan,
                date = current_date,
                company=company,
                login_details=log_details
            )
            comment.save()

            return redirect('challan_overview',id=id)
        
def delete_challan_comment(request,id):
    comment = Delivery_challan_comment.objects.get(id=id)    
    comment.delete()  
    return redirect('challan_overview',id=comment.delivery_challan.id )  

def challan_delete(request,id):
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        challan = Delivery_challan.objects.get(id=id)  
        for i in Delivery_challan_item.objects.filter(delivery_challan = challan):
                item = Items.objects.get(id = i.item.id)
                item.current_stock += i.quantity
                item.save()
         # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Delivery_challan_reference.objects.filter(company = com).exists():
            deleted = Delivery_challan_reference.objects.get(company = com)
            if int(challan.reference_number) > int(deleted.reference_number):
                deleted.reference_number = challan.reference_number
                deleted.save()
        else:
            Delivery_challan_reference.objects.create(company = com, login_details = com.login_details, reference_number = challan.reference_number)

            
      
        challan.delete()   
        return redirect('challan_list')   

def challan_attach_pdf(request,id):
    if request.method == 'POST':
        if 'login_id' not in request.session:
            return JsonResponse({'error': 'User not logged in'}, status=401)

        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)

        challan = Delivery_challan.objects.get(id=id)
       
        if len(request.FILES) != 0:
            challan.document = request.FILES.get('file')
            challan.save()

        return redirect(challan_overview, id)
    else:
        return redirect('/')

                
def challan_pdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = Delivery_challan.objects.get(id = id)
        itms = Delivery_challan_item.objects.filter(delivery_challan = inv)
    
        context = {'challan':inv, 'items':itms,'cmp':com}
        
        template_path = 'zohomodules/Delivery-challan/challan_pdf.html'
        fname = 'DeliveryChallan_'+inv.challan_number
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

       
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        print(pisa_status)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')
    
def challan_email(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = Delivery_challan.objects.get(id = id)
        itms = Delivery_challan_item.objects.filter(delivery_challan = inv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'challan':inv, 'items':itms,'cmp':com}
                template_path = 'zohomodules/Delivery-challan/challan_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Delivery Challan_{inv.challan_number}'
                subject = f"Delivery Challan_{inv.challan_number}"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Delivery Challan for - Challan No-{inv.challan_number}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Delivery Challan details has been shared via email successfully..!')
                return redirect(challan_overview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(challan_overview, id)
        

def downloadDeliveryChallanSampleImportFile(request):
    recInv_table_data = [['SLNO','CUSTOMER','CUSTOMER EMAIL','PLACE OF SUPPLY','DC NO','DATE','TYPE','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE','BALANCE','STATUS'],['1', 'Kevin Debryne','','[KL]-Kerala' ,'DC100','2024-03-20','SUPPLY OF LIQUID GASES','','1000','0','25','25','50','0','0','1050','1000','50','Save/Draft']]

    items_table_data = [['Sl NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL'], ['1', 'Test Item 1','789987','1','1000','5','0','1000']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'delivery_challan'
    sheet2 = wb.create_sheet(title='items')

    
    for row in recInv_table_data:
        sheet1.append(row)

    for row in items_table_data:
        sheet2.append(row)
    column_widths_sheet1 = {'A': 10, 'B': 20, 'C': 20, 'D': 15, 'E': 15, 'F': 25, 'G': 30, 'H': 15, 'I': 15, 'J': 15, 'K': 15, 'L': 15, 'M': 15, 'N': 15, 'O': 15, 'P': 15, 'Q': 15,'R':20}
    for column, width in column_widths_sheet1.items():
        sheet1.column_dimensions[column].width = width

    # Increase column width for specific columns in sheet2
    column_widths_sheet2 = {'A': 15, 'B': 30, 'C': 15, 'D': 15, 'E': 15, 'F': 15, 'G': 15, 'H': 15}
    for column, width in column_widths_sheet2.items():
        sheet2.column_dimensions[column].width = width


    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=delivery_challan_sample_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response


def checkChallanPattern(pattern):
    models = [Delivery_challan]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False


def importDeliveryChallanFromExcel(request):
    log_id = request.session['login_id']
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        com = CompanyDetails.objects.get(login_details = log_details)
    else:
        com = StaffDetails.objects.get(login_details = log_details).company
    
    ref_num = Delivery_challan_reference.objects.filter(company = com).last()
    if ref_num is None:
        latestNum =  1
    else:
        latestNum = int(ref_num.reference_number) + 1

    latest_challan = Delivery_challan.objects.filter(company = com).order_by('-id').first()
                
    new_number = int(latest_challan.reference_number) + 1 if latest_challan else 1

    if Delivery_challan_reference.objects.filter(company = com).exists():
                    deleted = Delivery_challan_reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1

    if request.method == 'POST' and request.FILES['excel_file']:
        excel_file = request.FILES['excel_file']

        # Check if the uploaded file is an Excel file
        if not excel_file.name.endswith('.xlsx'):
            return HttpResponse("Please upload a valid Excel file.")

        # Load the Excel file
        wb = load_workbook(excel_file, data_only=True)

        # Process first sheet
        first_sheet = wb.sheetnames[0]
        sheet1 = wb[first_sheet]
        data1 = pd.DataFrame(sheet1.values)

        # Process second sheet
        second_sheet = wb.sheetnames[1]
        sheet2 = wb[second_sheet]
        data2 = pd.DataFrame(sheet2.values)
        
        rowNo = 0
        for index, row in data1.iloc[1:].iterrows():
            rowNo += 1
            name = row[1]
            fullname = name.split()
            first_name = fullname[0]
            last_name = ' '.join(fullname[1:]) if len(fullname) > 1 else ''

            cus = Customer.objects.filter(company=com,customer_email=row[2])
            
            if cus.exists():
                cuss = Customer.objects.get(company=com,customer_email=row[2])
                pass
            else:
                messages.success(request, f'Customer in Row No.{rowNo} doesnt exists.')
                return redirect('challan_list')  

            
            
            CnNum = row[4]
            cdn_no0 = str(CnNum)
            prefix = ''.join(filter(str.isalpha, cdn_no0)) 

            print("CnNum:", CnNum)
            print("Prefix:", prefix)
            
                


            

            if Delivery_challan.objects.filter(company = com, challan_number = CnNum).exists():
                messages.success(request, f'Challan No. in row no.{rowNo} already Exists ')
                return redirect('challan_list')
            
            challan = Delivery_challan(
                    company = com,
                    login_details = log_details,
                    customer = cuss,
                    
                    
                    place_of_supply = row[3] , 
                    challan_type = row[6] , 
                    
                   
                    
                    reference_number = new_number ,
                    challan_date = row[5] ,
                    challan_number = row[4] ,
                    description = row[7],
                    sub_total = row[8],
                    igst = row[9],
                    cgst = row[10],
                    sgst = row[11],
                    
                    tax_amount = row[12] ,
                    
                    
                    
                    
                   
                    adjustment = row[13] ,
                    shipping_charge = row[14] ,
                    grand_total = row[15] ,
                    advance = row[16] ,
                    balance = row[17] ,
                     
                    status = row[18]               
                )
            
            challan.save()

            
                        
            Delivery_challan_history.objects.create(
                company = com,
                login_details = log_details,
                delivery_challan = challan,
                action = 'Created',
                date = date.today(),
                
            )

            # reference numebr
           

# -------------------second sheet--------------------------------------
            
            for index, row2 in data2.iloc[1:].iterrows():
                if row[0] == row2[0]:
                    newItemm = Items.objects.filter(company=com,hsn_code = row2[2])           
                    if newItemm.exists():
                        newItem = Items.objects.get(company=com,hsn_code = row2[2])
                        pass
                    else:
                        cre = Delivery_challan.objects.get(id=challan.id)
                        cre.delete()
                        messages.success(request, f'Item doesnt exists.')
                        return redirect('challan_list')  
                    
                    
                    hsn  = row2[2]
                    quantity = row2[3]
                    price = row2[4]
                    tax_rate = row2[5]
                    discount = row2[6]
                    total = row2[7]
                    print(row2)
                    print("Price:", price, "Type:", type(price))
                    ittm = Delivery_challan_item(company = com, login_details = log_details, delivery_challan = challan, item = newItem, hsn = hsn, quantity = int(quantity), price = price, tax_rate = tax_rate, discount = float(discount), total = float(total))
                    ittm.save()
                    newItem.current_stock -= int(quantity)
                    newItem.save()
                else:
                    pass
            
            
            return redirect('challan_list')  
    return redirect('challan_list')  


def ChallancheckRecurringInvoiceNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        challanNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtchallan = ""
        lastchallan = Delivery_challan.objects.filter(company = com).last()
        if lastchallan:
            challan_no = str(lastchallan.challan_number)
            numbers = []
            stri = []
            for word in challan_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            challan_num = int(num)+1

            if num[0] == '0':
                if challan_num <10:
                    nxtchallan = st+'0'+ str(challan_num)
                else:
                    nxtchallan = st+ str(challan_num)
            else:
                nxtchallan = st+ str(challan_num)
        # else:
        #     nxtInv = 'RI01'

        PatternStr = []
        for word in challanNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkChallanPattern(pattern)

        
        if Delivery_challan.objects.filter(company = com, challan_number = challanNo).exists():
            return JsonResponse({'status':False, 'message':'challan No. already Exists.!'})
        elif nxtchallan != "" and challanNo != nxtchallan:
            return JsonResponse({'status':False, 'message':'Challan  No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def convert_rec_invoice(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = RecurringInvoice.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Reccurring_Invoice_Reference.objects.filter(company = cmp).exists():
            deleted = Reccurring_Invoice_Reference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = RecurringInvoice.objects.filter(company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        else:
            nxtInv = 'RI01'
        challan = Delivery_challan.objects.get(id = id)
        challanitem = Delivery_challan_item.objects.filter(delivery_challan = challan)
        print(challan.customer.id)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
            'invNo':nxtInv, 'ref_no':new_number,'units': units,'accounts':accounts,'challan':challan,'item':challanitem
        }
        
        return render(request,'zohomodules/Delivery-challan/convert_rec_invoice.html',context)
    else:
        return redirect('/')

def save_challanRecurringInvoice(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkChallanPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Rec. Invoice No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            challanId = request.POST['challan_id']
            challan = Delivery_challan.objects.get(id = challanId)

            inv = RecurringInvoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                billing_address = request.POST.get('bill_address'),
                gst_type = request.POST['customer_gst_type'],
                gstin = request.POST.get('customer_gstin'),
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = request.POST.get('igst'),
                cgst = request.POST.get('cgst'),
                sgst = request.POST.get('sgst'),

                
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance_paid = 0.0 if request.POST.get('advance') == "" else float(request.POST.get('advance')),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_conditions = request.POST['terms']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            RecurringInvoiceHistory.objects.create(
                company = com,
                login_details = com.login_details,
                recurring_invoice = inv,
                action = 'Created'
            )
            challan.rec_invoice_convert = inv
            challan.save()

            return redirect(challan_list)
        else:
            return redirect(challan_list)
    else:
       return redirect('/')


def convert_invoice(request,id):
    if 'login_id' in request.session:
           log_id = request.session['login_id']
           log_details= LoginDetails.objects.get(id=log_id)
           if log_details.user_type == 'Company':
               cmp = CompanyDetails.objects.get(login_details = log_details)
               dash_details = CompanyDetails.objects.get(login_details=log_details)
           else:
               cmp = StaffDetails.objects.get(login_details = log_details).company
               dash_details = StaffDetails.objects.get(login_details=log_details)
   
           allmodules= ZohoModules.objects.get(company = cmp)
           cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
           trm = Company_Payment_Term.objects.filter(company = cmp)
           repeat = CompanyRepeatEvery.objects.filter(company = cmp)
           bnk = Banking.objects.filter(company = cmp)
           priceList = PriceList.objects.filter(company = cmp, status = 'Active')
           itms = Items.objects.filter(company = cmp, activation_tag = 'active')
           units = Unit.objects.filter(company=cmp)
           accounts=Chart_of_Accounts.objects.filter(company=cmp)
   
           # Fetching last rec_invoice and assigning upcoming ref no as current + 1
           # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
           latest_inv = invoice.objects.filter(company = cmp).order_by('-id').first()
   
           new_number = int(latest_inv.reference_number) + 1 if latest_inv else 1
   
           if invoiceReference.objects.filter(company = cmp).exists():
               deleted = invoiceReference.objects.get(company = cmp)
               
               if deleted:
                   while int(deleted.reference_number) >= new_number:
                       new_number+=1
   
           # Finding next rec_invoice number w r t last rec_invoice number if exists.
           nxtInv = ""
           lastInv = invoice.objects.filter(company = cmp).last()
           if lastInv:
               inv_no = str(lastInv.invoice_number)
               numbers = []
               stri = []
               for word in inv_no:
                   if word.isdigit():
                       numbers.append(word)
                   else:
                       stri.append(word)
               
               num=''
               for i in numbers:
                   num +=i
               
               st = ''
               for j in stri:
                   st = st+j
   
               inv_num = int(num)+1
   
               padding_length = len(num) - 1
   
                       
               nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
           else:
               nxtInv = 'in-01'
           challan = Delivery_challan.objects.get(id = id)
           challanitem = Delivery_challan_item.objects.filter(delivery_challan = challan)
           context = {
               'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'banks':bnk, 'priceListItems':priceList, 'items':itms,
               'invNo':nxtInv, 'ref_no':new_number,'units': units,'accounts':accounts,'challan':challan,'item':challanitem
           }
       
           return render(request,'zohomodules/Delivery-challan/convert_invoice.html',context)


def save_challanInvoice(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if invoice.objects.filter(company = com, invoice_number__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            
            challanId = request.POST.get('challan_id')
            print(challanId)
            challan= Delivery_challan.objects.get(id=challanId)

            inv = invoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                customer_billingaddress = request.POST.get('bill_address'),
                customer_GSTtype = request.POST['customer_gst_type'],
                customer_GSTnumber = request.POST.get('customer_gstin'),
                customer_place_of_supply = request.POST['place_of_supply'],
            
                reference_number = request.POST['reference_number'],
                invoice_number = invNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                date = request.POST['start_date'],
                expiration_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                # Order_number = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                UPI_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                IGST = request.POST.get('igst'),
                CGST = request.POST.get('cgst'),
                SGST = request.POST.get('sgst'),

                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advanced_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_condition = request.POST['terms']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    invoiceitems.objects.create(company = com, logindetails = com.login_details, invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            invoiceHistory.objects.create(
                company = com,
                login_details = com.login_details,
                invoice = inv,
                action = 'Created'
            )

           

            challan.invoice_convert = inv
            challan.save()

            return redirect(challan_list)
        else:
            return redirect(challan_list)
    else:
       return redirect('/')
    

def challangetUnitsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Unit.objects.filter(company=com)
        for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
        return JsonResponse(options)

def challancreateNewItemAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = 0 if request.POST['pcost'] == "" else request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = 0 if request.POST['salesprice'] == "" else request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = 0 if request.POST['min_stock'] == "" else request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag = 'active',
                type = 'Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = com.login_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def challangetAllItemsAjax(request):
     if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
     else:
        return redirect('/')
           

def challancreateNewAccountAjax(request):                                                                #new by tinto mt
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')


def challangetAllAccountsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')
    
def challan_customer_check_pan(request):
    if request.method == 'POST':
        panNumber = request.POST.get('panNumber')
        pan_exists = Customer.objects.filter(PAN_number=panNumber).exists()

        if pan_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})  

def update_available_quantity(request):
    
    if request.method == 'POST' :
        item_id = request.POST.get('itemid')
        
        qty = request.POST.get('qty')
        print(qty)

        try:
            item = Items.objects.get(id=item_id)
            name = item.item_name
            print(name)
            available_quantity = item.current_stock - int(qty)
            print(available_quantity)
            
            return JsonResponse({'available_quantity': available_quantity})
        except Items.DoesNotExist:
            return JsonResponse({'error': 'Item does not exist'}, status=404)
    else:
        return JsonResponse({'error': 'Invalid request'}, status=400, safe=False)

# ------------------Delivery challan end----------------------------------

def retainer_history(request, retainer_id):
    try:
        retainer = RetainerInvoice.objects.get(pk=retainer_id)
        history = {
            'created_by': retainer.created_by.username if retainer.created_by else None,
            'created_at': retainer.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'modified_by': retainer.modified_by.username if retainer.modified_by else None,
            'modified_at': retainer.modified_at.strftime('%Y-%m-%d %H:%M:%S')
        }
        return JsonResponse({'history': history})
    except RetainerInvoice.DoesNotExist:
        return JsonResponse({'error': 'Retainer invoice does not exist'}, status=404)
        
def downloadRetainerInvoiceSampleImportFile(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            invoices = RetainerInvoice.objects.filter(logindetails=log_details).order_by('-id')
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            invoices = RetainerInvoice.objects.filter(company=dash_details).order_by('-id')
        else:
            return redirect('/')
        
        # Create a new Workbook
        wb = Workbook()

        # Create the Retainer Invoice sheet
        retainer_invoice_sheet = wb.active
        retainer_invoice_sheet.title = 'Retainer Invoices'

        # Define the Retainer Invoice headers
        retainer_invoice_fieldnames = ['Date', 'Retainer Number', 'Customer Name', 'Customer Mail Id', 'Amount', 'Status', 'Balance']
        retainer_invoice_sheet.append(retainer_invoice_fieldnames)

        # Write each retainer invoice to the Retainer Invoice sheet
        for invoice in invoices:
            retainer_invoice_sheet.append([
                invoice.retainer_invoice_date,
                invoice.retainer_invoice_number,
                invoice.customer_name.customer_display_name,
                invoice.customer_mailid,
                invoice.total_amount,
                'Sent' if invoice.is_sent else 'Draft',
                invoice.balance,
            ])

        # Create the Items sheet
        items_sheet = wb.create_sheet(title='Items')

        # Define the Items headers
        items_fieldnames = ['Retainer Invoice Number', 'Items', 'Description', 'Rate', 'Quantity', 'Amount']
        items_sheet.append(items_fieldnames)

        # Retrieve and write each item associated with the retainer invoices
        for invoice in invoices:
            items = Retaineritems.objects.filter(retainer=invoice)
            for item in items:
                items_sheet.append([
                    invoice.retainer_invoice_number,
                    item.itemname,
                    item.description,
                    item.rate,
                    item.quantity,
                    item.amount
                ])

        # Create a response with the Excel file
        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = 'attachment; filename=retainer_invoice_sample_file.xlsx'

        # Save the workbook to the response
        wb.save(response)

        return response
    else:
        return redirect('/')
    
    
def importRetainerInvoiceFromExcel(request):
    com = None 
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            invoices = RetainerInvoice.objects.filter(logindetails=log_details).order_by('-id')
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            invoices = RetainerInvoice.objects.filter(company=dash_details).order_by('-id')
            com = dash_details.company
        else:
            return redirect('/')

        current_datetime = timezone.now()
        date_today = current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking retainer invoice sheet columns
            try:
                ws = wb["retainer_invoice"]
            except:
                print('Sheet not found:', sys.exc_info()[0])
                messages.error(request, '`retainer_invoice` sheet not found.! Please check.')
                return redirect(retainer_list)

            ret_inv_columns = ['CUSTOMER NAME', 'MAIL ID', 'PLACE OF SUPPLY', 'RETAINER INVOICE NUMBER', 'REFERENCES', 'RETAINER INVOICE DATE', 'ADVANCE', 'TOTAL AMOUNT', 'CUSTOMER NOTES', 'TERMS AND CONDITIONS', 'BALANCE', 'PAID', 'PAY METHOD', 'ACC NO', 'CHEQUE NO', 'UPI ID']
            ret_inv_sheet = [cell.value for cell in ws[1]]
            print('Retainer invoice sheet columns:', ret_inv_sheet)  # Debug print
            if ret_inv_sheet != ret_inv_columns:
                print('Invalid sheet format:', ret_inv_sheet)
                messages.error(request, '`retainer_invoice` sheet column names or order is not in the required format.! Please check.')
                return redirect(retainer_list)

            for row in ws.iter_rows(min_row=2, values_only=True):
                print('Row data:', row)  # Debug print
                customer_name, customer_mailid, place_of_supply, retainer_invoice_number, references, retainer_invoice_date, advance, total_amount, customer_notes, terms_and_conditions, balance, paid, pay_method, acc_no, cheque_no, upi_id = row
                if any(field is None for field in [customer_name, retainer_invoice_number, retainer_invoice_date, total_amount]):
                    print('Invalid data:', row)  # Debug print
                    messages.error(request, '`retainer_invoice` sheet entries missing required fields.! Please check.')
                    return redirect(retainer_list)

                # Retrieve the Customer instance based on the customer_mailid
                customer_instance, created = Customer.objects.get_or_create(customer_email=customer_mailid)

                # Example logic for creating a Retainer invoice instance
                retainer_invoice = RetainerInvoice(
                    company=com,
                    logindetails=log_details,
                    customer_name=customer_instance,
                    customer_mailid=customer_mailid,
                    customer_placesupply=place_of_supply,
                    retainer_invoice_number=retainer_invoice_number,
                    refrences=references,
                    retainer_invoice_date=retainer_invoice_date,
                    advance=advance,
                    total_amount=total_amount,
                    customer_notes=customer_notes,
                    terms_and_conditions=terms_and_conditions,
                    balance=balance,
                    is_draft=True,  # Set to True if necessary
                    is_sent=False,  # Set to False if necessary
                    created_at=current_datetime,
                    modified_at=current_datetime
                )
                retainer_invoice.save()

                # Optionally, create and save related models like Retaineritems, retInvoiceReference, or retainer_payment_details

                # Example logic for creating Retaineritems instances
                try:
                    ws_items = wb['retainer_items']
                except Exception as e:
                    print(f'Retainer items sheet for {retainer_invoice_number} not found:', e)  # Debug print
                    messages.warning(request, f'Retainer items sheet for {retainer_invoice_number} not found.! Skipping this retainer invoice.')
                    continue

                # Define the expected columns for retainer items
                ret_item_columns = ['RETAINER INVOICE NUMBER','DESCRIPTION', 'AMOUNT', 'ITEM NAME','QUANTITY', 'RATE']
                ret_item_sheet = [cell.value for cell in ws_items[1]]
                print('Retainer items sheet columns:', ret_item_sheet)  # Debug print
                if ret_item_sheet != ret_item_columns:
                    print('Invalid item sheet format:', ret_item_sheet)  # Debug print
                    messages.error(request, 'Retainer items sheet column names or order is not in the required format.! Please check.')
                    return redirect(importRetainerInvoiceFromExcel)
                
                for item_row in ws_items.iter_rows(min_row=2, values_only=True):
                    retainer_invoice_number, description, amount, item_name, quantity, rate = item_row               
                    
                    # Example logic for creating a Retaineritems instance
                    retainer_item = Retaineritems(
                        company=com,
                        logindetails=log_details,
                        retainer=retainer_invoice,
                        description=description,
                        amount=amount,
                        itemname=item_name,
                        quantity=quantity,
                        rate=rate
                    )
                    retainer_item.save()

                # Example logic for creating retainer_payment_details instance
                if paid:
                    ret_payment = retainer_payment_details(
                        retainer=retainer_invoice,
                        payment_opt=pay_method,
                        acc_no=acc_no,
                        cheque_no=cheque_no,
                        upi_id=upi_id
                    )
                    ret_payment.save()

            messages.success(request, 'Data imported successfully.!')
            return redirect(retainer_list)
        else:
            return redirect(retainer_list)
    else:
        return redirect('/')

def get_customers(request):
    customers = Customer.objects.filter(company=company).values('id', 'customer_display_name')
    return JsonResponse(list(customers), safe=False)
    
#Bill
def bill_list(request):
    
        return render(request, 'zohomodules/bill/create_bill.html')


def add_space_before_first_digit(term):
   
    if term:
        for i, char in enumerate(term):
            if char.isdigit():
                return term[:i] + ' ' + term[i:]
    return term


def bill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Company':
            # cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff

        # bills = Bill.objects.filter(company=cmp)
        # all_modules = ZohoModules.objects.get(company=cmp)
        context = {
            # 'bills': bills,
            # 'allmodules': all_modules,
            'details': dash_details
        }
        return render(request, 'zohomodules/bill/bill_list.html', context)
    else:
        return redirect('/')


def add_bill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            dash_details = company
        else:
            staff_details = StaffDetails.objects.get(login_details=log_details)
            company = staff_details.company
            dash_details = staff_details

        all_modules = ZohoModules.objects.get(company=company)
        customers = Customer.objects.filter(company=company, customer_status='Active')
        payment_terms = Company_Payment_Term.objects.filter(company=company)
        repeat = CompanyRepeatEvery.objects.filter(company=company)
        banks = Banking.objects.filter(company=company)
        price_list = PriceList.objects.filter(company=company, type='Sales', status='Active')
        items = Items.objects.filter(company=company, activation_tag='active')
        units = Unit.objects.filter(company=company)
        accounts = Chart_of_Accounts.objects.filter(company=company)

        # Fetching last bill and assigning upcoming reference number as current + 1
        latest_inv = Bill.objects.filter(Company=company).order_by('-id').first()
        new_reference_number = latest_inv.reference_no + 1 if latest_inv else 1

        if Bill_Reference.objects.filter(company = company).exists():
            deleted = Bill_Reference.objects.get(company=company)
            if deleted:
                while int(deleted.reference_number) >= new_reference_number:
                    new_reference_number += 1

        # Finding next bill number w.r.t last bill number if exists.
        next_bill_number = ""
        last_bill = Bill_Reference.objects.filter(company=company).last()
        if last_bill:
            bill_no = str(last_bill.Bill_Number)
            num_part = ''.join(filter(str.isdigit, bill_no))
            alpha_part = ''.join(filter(str.isalpha, bill_no))
            next_num = int(num_part) + 1
            next_bill_number = alpha_part + str(next_num).zfill(len(num_part))
        else:
            next_bill_number = 'BI001'

        context = {
            'company': company,
            'allmodules': all_modules,
            'details': dash_details,
            'customers': customers,
            'payment_terms': payment_terms,
            'repeat': repeat,
            'banks': banks,
            'price_list_items': price_list,
            'items': items,
            'next_bill_number': next_bill_number,
            'new_reference_number': new_reference_number,
            'units': units,
            'accounts': accounts,
        }
        return render(request, 'zohomodules/bill/add_bill.html', context)
    else:
        return redirect('/')
        
def createbill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkRecInvNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Rec. Invoice No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = RecurringInvoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['customer_gst_type'],
                gstin = request.POST['customer_gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_conditions = request.POST['terms']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            RecurringInvoiceHistory.objects.create(
                company = com,
                login_details = log_details,
                recurring_invoice = inv,
                action = 'Created'
            )

            return redirect(recurringInvoice)
        else:
            return redirect(addRecurringInvoice)
    else:
       return redirect('/')

def bill_vendor_create(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        

       
        if request.method=="POST":
            vendor_data=Vendor()
            vendor_data.login_details=log_details
            vendor_data.company=dash_details
            vendor_data.title = request.POST.get('salutation')
            vendor_data.first_name=request.POST['first_name']
            vendor_data.last_name=request.POST['last_name']
            vendor_data.company_name=request.POST['company_name']
            vendor_data.vendor_display_name=request.POST['v_display_name']
            vendor_data.vendor_email=request.POST['vendor_email']
            vendor_data.phone=request.POST['w_phone']
            vendor_data.mobile=request.POST['m_phone']
            vendor_data.skype_name_number=request.POST['skype_number']
            vendor_data.designation=request.POST['designation']
            vendor_data.department=request.POST['department']
            vendor_data.website=request.POST['website']
            vendor_data.gst_treatment=request.POST['gst']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remark']
            vendor_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_number']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_number']
                vendor_data.pan_number=request.POST['pan_number']

            vendor_data.source_of_supply=request.POST['source_supply']
            vendor_data.currency=request.POST['currency']
            print(vendor_data.currency)
            op_type=request.POST.get('op_type')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
    
            vendor_data.opening_balance=request.POST['opening_bal']
            # vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])

           
            vendor_data.billing_attention=request.POST['battention']
            vendor_data.billing_country=request.POST['bcountry']
            vendor_data.billing_address=request.POST['baddress']
            vendor_data.billing_city=request.POST['bcity']
            vendor_data.billing_state=request.POST['bstate']
            vendor_data.billing_pin_code=request.POST['bzip']
            vendor_data.billing_phone=request.POST['bphone']
            vendor_data.billing_fax=request.POST['bfax']
            vendor_data.shipping_attention=request.POST['sattention']
            vendor_data.shipping_country=request.POST['s_country']
            vendor_data.shipping_address=request.POST['saddress']
            vendor_data.shipping_city=request.POST['scity']
            vendor_data.shipping_state=request.POST['sstate']
            vendor_data.shipping_pin_code=request.POST['szip']
            vendor_data.shipping_phone=request.POST['sphone']
            vendor_data.shipping_fax=request.POST['sfax']
            vendor_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=dash_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            rdata=Vendor_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=dash_details
            rdata.vendor=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = VendorContactPerson.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                        work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=dash_details,vendor=vendor)
                
        
            messages.success(request, 'Data saved successfully!')   

            data = {
                'vendor_first_name':vendor_data.first_name,
                'vendor_id':vendor_data.id,
            }
        
            return redirect('bill_create')
        
        else:
            messages.error(request, 'Some error occurred !')   

            error = {
                'error':'error',
            }

            return redirect('bill_create')

def bill_create(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details

        if Bill.objects.filter(Company=company).exists():
            last_bill = Bill.objects.filter(Company=company).last()
            last_bill_number = last_bill.Bill_Number
            prefix = ''.join([char for char in last_bill_number if not char.isdigit()])
            last_number = int(''.join([char for char in last_bill_number if char.isdigit()]))
            new_number = last_number + 1
            invNo = f"{prefix}{str(new_number).zfill(2)}"
        else:
            invNo = "TY01"  # Initial bill number

        item = Items.objects.filter(company=company)
        allmodules = ZohoModules.objects.get(company=company, status='New')
        banks = Banking.objects.filter(company=company)
        vendors = Vendor.objects.filter(company=company)
        customers = Customer.objects.filter(company=company)
        pricelist = PriceList.objects.filter(company=company, status='Active', type='Purchase')
        items = Items.objects.filter(company=company)
        credits = BillCreditPeriod.objects.filter(company=company)
        repeat_list = RecurringRepeatEvery.objects.filter(company=company)
        payments = Company_Payment_Term.objects.filter(company_id=company.id)
        
        # Fetch the last Bill_Reference for the company
        recc_bill_no = Bill.objects.filter(Company=company).last()
        
        units = Unit.objects.filter(company=company)
        accounts = Chart_of_Accounts.objects.filter(company=company)
        
        # Assign a default value to recc_ref_no
        recc_ref_no = '01'  # Default reference number pattern for the first reference number
        if recc_bill_no:
            # Increment the reference number
            numeric_part = int(recc_bill_no.Reference_Number) + 1
            recc_ref_no = f"{numeric_part:02d}"

        context = {
            'invNo': invNo,
            'details': dash_details,
            'item': item,
            'allmodules': allmodules,
            'banks': banks,
            'vendors': vendors,
            'customers': customers,
            'items': items,
            'pricelist': pricelist,
            'credits': credits,
            'repeat_list': repeat_list,
            'payments': payments,
            'recc_bill_no': recc_bill_no,
            'recc_ref_no': recc_ref_no,  # Include recc_ref_no in the context
            'units': units,
            'accounts': accounts,
            'company': company,
        }
        return render(request, 'zohomodules/bill/create_bill.html', context)
    else:
        return redirect('bill_listout') 

def add_space_before_first_digit(data):
    for index, char in enumerate(data):
        if char.isdigit():
            return data[:index] + ' ' + data[index:]
    return data

def payment_add(request):
    if 'login_id' in request.session:
        log_id = request.session.get('login_id')
        if not log_id:
            return redirect('/')
        
        try:
            log_details = LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Staff':
                staff_details = StaffDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
            else:
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            
            if request.method == 'POST':
                terms = request.POST.get('term_name')
                day = request.POST.get('term_days')
                
                if terms:
                    normalized_data = terms.replace(" ", "")
                    pay_tm = normalized_data
                    ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=dash_details)
                    ptr.save()
                    
                    # Retrieve updated payment terms
                    payterms_obj = Company_Payment_Term.objects.filter(company=dash_details).values('id', 'term_name', 'days')
                    payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name'], 'days': pay_terms['days']} for pay_terms in payterms_obj]
                    
                    response_data = {
                        "message": "success",
                        'payment_list': payment_list,
                    }
                    return JsonResponse(response_data)
                else:
                    return JsonResponse({'error': 'Invalid term name'}, status=400)
            else:
                return JsonResponse({'error': 'Invalid request method'}, status=400)
        except LoginDetails.DoesNotExist:
            return JsonResponse({'error': 'User details not found'}, status=404)
    else:
        return JsonResponse({'error': 'User not logged in'}, status=401)

def getbillCustomerData(request):
   
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            
                list = False
                listId = None
                listName = None
                context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
                }
                return JsonResponse(context)

def getBank(request):
  
        
       bankId = request.GET['id']
       bnk = Banking.objects.get(id = bankId)

       if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
       else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
            
def get_bill_ItemDetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = StaffDetails.objects.get(login_details = log_details).company 
        itemName = request.GET['item']
        item = Items.objects.get( item_name = itemName,company_id=comp_details.id)

        context = {
            'status':True,
            'id':item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,

        }
        print('++++++++++++++++++++++++++++++')
        print(item.current_stock)
        print('++++++++++++++++++++++++++++++')
        return JsonResponse(context)
    else:
        return redirect('/')


def checkBillNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = invoice.objects.filter(company = com).last()

        if lastInv:
            inv_no = str(lastInv.invoice_number)

            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j            


            inv_num = int(num)+1
           

            
            padding_length = len(num) - 1

                    
            nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
            print(nxtInv)
            

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j
            print("patern")
            print(pattern)


        # pattern_exists = checkRecInvNumberPattern(pattern)

        # if pattern !="" and pattern_exists:
        #     return JsonResponse({'status':False, 'message':'Rec. Invoice No. Pattern already Exists.!'})
        if invoice.objects.filter(company = com, invoice_number__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Invoice No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def get_price_list(request,pk):
    try:
        price_list = PriceList.objects.get(id=pk)
        price_list_percentage =  price_list.percentage_value
        percentage_type = price_list.percentage_type
        data = {
            'price_list_percentage':price_list_percentage,
            'percentage_type':percentage_type,
        }
        return JsonResponse(data)
    except:
        error = {
            'error':'error'
        }
        return JsonResponse(error,status=400)

def save_Item_Unit(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
           
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details) 
        if request.method == "POST":
            name = request.POST['units'].upper()
            print(name)

            if not Unit.objects.filter(company = com, unit_name__iexact = name).exists():
                unit = Unit(
                    company = com,
                    unit_name = name
                )
                unit.save()
                return JsonResponse({'status':True})
            else:
                return JsonResponse({'status':False, 'message':'Unit already exists.!'})

def showunitdropdown(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)

def check_account(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
            
        if log_details.user_type == 'Staff':
                staff = StaffDetails.objects.get(login_details=log_details)
                com = staff.company
                    
        elif log_details.user_type == 'Company':
                com = CompanyDetails.objects.get(login_details=log_details)

        if Chart_of_Accounts.objects.filter(company = com, account_type = request.GET['type']).exists():
            list= []
            account_objects = Chart_of_Accounts.objects.filter(company = com, account_type = request.GET['type'])

            for account in account_objects:
                accounts = {
                    'name': account.account_name,
                }
                list.append(accounts)

            return JsonResponse({'status':True,'accounts':list},safe=False)
        else:
            return JsonResponse({'status':False})

def create_New_Account(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')
    
def bill_item_creation(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = 0 if request.POST['pcost'] == "" else request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = 0 if request.POST['salesprice'] == "" else request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = 0 if request.POST['min_stock'] == "" else request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag = 'active',
                type = 'Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = log_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def bill_getItems(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
           
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            com = staff.company
                    
        elif log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        items = {}
        option_objects = Items.objects.filter(company = com)
        for option in option_objects:
            items[option.id] = [option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')

def get_vendors_detailsbill(request,pk):
    vendor_data = Vendor.objects.get(id=pk)
    data = {
        'vendor_email':vendor_data.vendor_email,
        'vendor_gst_treat':vendor_data.gst_treatment,
        'vendor_gstin': vendor_data.gst_number,
        'vendor_address': vendor_data.billing_address,
        'billing_city': vendor_data.billing_city,
        'billing_state': vendor_data.billing_state,
        'billing_country': vendor_data.billing_country,
        'billing_pin_code': vendor_data.billing_pin_code,
        'vendor_source_of_suppy': vendor_data.source_of_supply,
    }
    print(vendor_data.source_of_supply)
    print('SUCCESS')
    return JsonResponse(data)        

def get_customer_detailsbill(request,pk):
    customer_data = Customer.objects.get(id=pk)
    data = {
        'customer_first_name':customer_data.first_name,
        'customer_email':customer_data.customer_email,
        'customer_gst_treat':customer_data.GST_treatement,
        'customer_gstin': customer_data.GST_number,
        'customer_address': customer_data.billing_address,
        'customer_place_of_supply': customer_data.place_of_supply,
    }
    print('SUCCESS')
    return JsonResponse(data)

def check_bill_no_valid(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company
        
        RecInvNo = request.GET.get('RecInvNum')

        # Determine the next expected invoice number
        last_bill = Bill.objects.filter(Company=com).last()
        if last_bill:
            inv_no = str(last_bill.Bill_Number)
            prefix = ''.join([char for char in inv_no if not char.isdigit()])
            numeric_part = ''.join([char for char in inv_no if char.isdigit()])
            inv_num = int(numeric_part) + 1
            nxtInv = prefix + str(inv_num).zfill(len(numeric_part))
        else:
            nxtInv = "TY01"

        # Extract pattern from input invoice number
        input_prefix = ''.join([char for char in RecInvNo if not char.isdigit()])
        
        # Check if the pattern exists in any bill number
        pattern_exists = Bill.objects.filter(Company=com, Bill_Number__startswith=input_prefix).exists()

        if pattern_exists and not RecInvNo.startswith(input_prefix):
            return JsonResponse({'status': False, 'message': 'Bill No. Pattern already Exists.!'})
        elif Bill.objects.filter(Company=com, Bill_Number__iexact=RecInvNo).exists():
            return JsonResponse({'status': False, 'message': 'Bill No. already Exists.!'})
        elif nxtInv and RecInvNo != nxtInv:
            return JsonResponse({'status': False, 'message': 'Bill No. is not continuous.!'})
        else:
            return JsonResponse({'status': True, 'message': 'Number is okay.!'})
    else:
        return redirect('/')
        
def bill_add_item_unit(request):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            company = StaffDetails.objects.get(login_details=log_details).company
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)

        if request.method == "POST":
            name = request.POST['name'].upper()
            print('==========================================')
            print(name)
            print('==========================================')

            if not Unit.objects.filter(company = company, unit_name__iexact = name).exists():
                unit = Unit(
                    company = company,
                    unit_name = name
                )
                unit.save()

                return JsonResponse({'status':True,'unit_name':name,'unit_id':unit.id})
            else:
                return JsonResponse({'status':False, 'message':'Unit already exists.!'})

def bill_add_item_account(request):                                                                   #new by tinto mt
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')

        # ----------------------------------------------------------------------------

def add_new_bill(request):
    if request.method == 'POST':
        try:
            log_id = request.session.get('login_id')
            if not log_id:
                return redirect('/')

            log_details = LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
            else:
                comp_details = CompanyDetails.objects.get(login_details=log_details)

            status = 'Draft'
            if 'Save' in request.POST:
                status = 'Saved'

            # Find the last reference number and increment it by 1
            if Bill.objects.filter(Company=comp_details).exists():
                last_bill = Bill.objects.filter(Company=comp_details).last()
                last_reference_number = int(last_bill.Reference_Number)
                new_reference_number = last_reference_number + 1

                # Generate the next bill number
                last_bill_number = last_bill.Bill_Number
                match = re.match(r"([a-zA-Z]+)([0-9]+)", last_bill_number)
                if match:
                    prefix = match.group(1)
                    last_number = match.group(2)
                    new_number = int(last_number) + 1
                    new_bill_number = f"{prefix}{str(new_number).zfill(len(last_number))}"
                else:
                    new_bill_number = "TY001"  # Default if pattern is not found
            else:
                new_reference_number = 1
                new_bill_number = "TY001"  # Initial bill number

            invNum = request.POST.get('bill_number', new_bill_number)

            # Extract pattern and check if it exists
            PatternStr = ''.join([char for char in invNum if not char.isdigit()])
            pattern_exists = Bill.objects.filter(Company=comp_details, Bill_Number__startswith=PatternStr).exists()

            if pattern_exists and invNum != new_bill_number:
                res = f'<script>alert("Bill No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if Bill.objects.filter(Company=comp_details, Bill_Number__iexact=invNum).exists():
                res = f'<script>alert("Bill Number {invNum} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            with transaction.atomic():
                recurring_bill_data = Bill(
                    Company=comp_details,
                    Login_Details=log_details,
                    Bill_Number=invNum,
                    Bill_Date=request.POST.get('rec_bil_Date'),
                    Due_Date=request.POST.get('due_date'),
                    Payment_Method=request.POST.get('payment_method'),
                    Reference_Number=new_reference_number,
                    Cheque_Number=request.POST.get('cheque_id'),
                    UPI_Id=request.POST.get('upi_id'),
                    Bank_Account=request.POST.get('bank_account'),
                    Sub_Total=request.POST.get('subtotal'),
                    Description=request.POST.get('note'),
                    Document=request.FILES.get('file'),
                    Purchase_Order_Number=request.POST.get('order_number'),
                    CGST=request.POST.get('cgst'),
                    SGST=request.POST.get('sgst'),
                    IGST=request.POST.get('igst'),
                    Tax_Amount=request.POST.get('taxamount'),
                    Shipping_Charge=request.POST.get('ship'),
                    Adjustment_Number=request.POST.get('adj'),
                    Grand_Total=request.POST.get('grandtotal'),
                    Advance_amount_Paid=request.POST.get('advance'),
                    Balance=request.POST.get('balance'),
                    Status=status,
                    Customer_id=request.POST.get('customer_id'),  # Assign Customer ID here
                    Vendor_id=request.POST.get('vendor_id')  # Assign Vendor ID here
                )

                recurring_bill_data.save()

                item_id = request.POST.getlist('item_id[]')
                item_name = request.POST.getlist('item_name[]')
                hsn = request.POST.getlist('hsn[]')
                qty = request.POST.getlist('qty[]')
                price = request.POST.getlist('price[]')
                taxGST = request.POST.getlist('taxGST[]')
                taxIGST = request.POST.getlist('taxIGST[]')
                discount = request.POST.getlist('discount[]')
                total = request.POST.getlist('total[]')

                for i in range(len(item_name)):
                    item = Items.objects.get(id=item_id[i])

                    recurr_item = BillItems(
                        item_id=item,
                        item_name=item_name[i],
                        item_hsn=hsn[i],
                        total_qty=item.current_stock,
                        qty=qty[i],
                        bal_qty=int(item.current_stock) + int(qty[i]),
                        price=price[i],
                        taxGST=taxGST[i],
                        taxIGST=taxIGST[i],
                        discount=discount[i],
                        total=total[i],
                        Bills=recurring_bill_data,
                        Login_Details=log_details,
                        Company=comp_details
                    )
                    recurr_item.save()

                    item.current_stock += int(qty[i])
                    item.save()

                recurr_history = Bill_History(
                    Company=comp_details,
                    Login_Details=log_details,
                    bills=recurring_bill_data,
                    action='Created'
                )
                recurr_history.save()

            return redirect('bill_listout')

        except IntegrityError as e:
            return HttpResponse(f'<script>alert("Integrity error occurred: {e}");window.history.back();</script>')
        except Exception as e:
            return HttpResponse(f'<script>alert("An error occurred: {e}");window.history.back();</script>')

    return redirect('bill_listout')

def bill_listout(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            recurr_bills=Bill.objects.filter(Company=dash_details.company)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            recurr_bills=Bill.objects.filter(Company=dash_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        context = {
                'details': dash_details,
                'recurr_bills': recurr_bills,
                'allmodules': allmodules,
        }
        return render(request,'zohomodules/bill/bill_listout.html',context)
    else:
        return redirect('/')


def bill_customer_create(request):
     if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        

       
        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=log_details
            customer_data.company=comp_details
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['customer_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type=op_type
            else:
                customer_data.opening_balance_type='Opening Balance not selected'
    
            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                 customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                 customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'
    



           
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=comp_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=comp_details
            rdata.customer=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = CustomerContactPersons.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=comp_details,customer=vendor)
                
        
            messages.success(request, 'Customer created successfully!')   
            print('CREATE CUSTOMER SUCCESS')
            data = {
                'customer_fname':customer_data.first_name,
                'customer_id':customer_data.id,
            }
            return JsonResponse(data)
        
        else:
            messages.error(request, 'Some error occurred !')   
            print('CREATE CUSTOMER ERROR')
            error={
                'error':'error',
            }
            return JsonResponse(error,status=400)

def purchasebillno(request):
    try:
        partyid = request.POST['id']
        party_instance = Parties.objects.get(id=partyid)

        # Initialize lists to store multiple bill numbers and dates
        bill_numbers = []
        bill_dates = []

        try:
            # Retrieve all instances for the party
            bill_instances = SalesInvoice.objects.filter(party=party_instance)

            # Loop through each instance and collect bill numbers and dates
            for bill_instance in bill_instances:
                bill_numbers.append(bill_instance.invoice_no)
                bill_dates.append(bill_instance.date)

        except SalesInvoice.DoesNotExist:
            pass

        # Return a JSON response with the list of bill numbers and dates
        if not bill_numbers and not bill_dates:
            return JsonResponse({'bill_numbers': ['no invoice'], 'bill_dates': ['nodate']})

        return JsonResponse({'bill_numbers': bill_numbers, 'bill_dates': bill_dates})

    except KeyError:
        return JsonResponse({'error': 'The key "id" is missing in the POST request.'})

    except Parties.DoesNotExist:
        return JsonResponse({'error': 'Party not found.'})

def bill_overview(request, pk):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        allmodules = ZohoModules.objects.get(company=company, status='New')
        recurr_bill = Bill.objects.get(id=pk)
        recurr_lists = Bill.objects.filter(Company=company)  # Corrected line
        last_history = Bill_History.objects.filter(bills=recurr_bill.id).last()
        history = Bill_History.objects.filter(bills=recurr_bill.id)
        recurr_items = BillItems.objects.filter(Bills=recurr_bill.id)  # Corrected line

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'recurr_bill': recurr_bill,
            'recurr_lists': recurr_lists,
            'recurr_items': recurr_items,
            'last_history': last_history,
            'history': history,
            'company': company,
        }
        return render(request, 'zohomodules/bill/bill_overview.html', context)
        
#End

def Salesbycustomer(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        reportData = []
        totInv = 0
        totRecInv = 0
        totCrdNote = 0
        subTot = 0
        subTotWOCrd = 0
        totjour =0

        cust = Customer.objects.filter(company=cmp)
        
        for c in cust:
            customerName = c.first_name +" "+c.last_name
            count = 0
            sales = 0

            inv = invoice.objects.filter(customer=c, status = 'Saved')
            recInv = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
            crd = Credit_Note.objects.filter(customer=c, status = 'Saved')
        
            

            for i in inv:
                sales += float(i.grand_total)
                totInv += float(i.grand_total)
                subTot += float(i.sub_total)
                subTotWOCrd += float(i.sub_total)

            for r in recInv:
                sales += float(r.grandtotal)
                totRecInv += float(r.grandtotal)
                subTot += float(r.subtotal)
                subTotWOCrd += float(r.subtotal)

            for n in crd:
                sales -= float(n.grand_total)
                totCrdNote += float(n.grand_total)
                subTot -= float(n.sub_total)
            
           

            count = len(inv) + len(recInv) + len(crd)

            details = {
                'name': customerName,
                'count':count,
                'sales':sales
            }

            reportData.append(details)

        totCust = len(cust)
        totSale = totInv + totRecInv - totCrdNote 
        totSaleWOCrdNote = totInv + totRecInv 

        context = {
            'allmodules':allmodules, 'details':dash_details,'log_details':log_details , 'cmp':cmp,'reportData':reportData,
            'totalCustomers':totCust, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
            'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
            'startDate':None, 'endDate':None
        }
        
        
        return render(request, 'zohomodules/Reports/sales_by_customer.html', context)
    else:
        return redirect('/')
        
def salesByCustomerReportCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)

        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totInv = 0
            totRecInv = 0
            totCrdNote = 0
            subTot = 0
            subTotWOCrd = 0

            cust = Customer.objects.filter(company=cmp)


            for c in cust:
                customerName = c.first_name +" "+c.last_name
                count = 0
                sales = 0

                if startDate == None or endDate == None:
                    if trans == "all":
                        inv = invoice.objects.filter(customer=c, status = 'Saved')
                        recInv = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
                        crd = Credit_Note.objects.filter(customer=c, status = 'Saved')
                    elif trans == 'invoice':
                        inv = invoice.objects.filter(customer=c, status = 'Saved')
                        recInv = None
                        crd = None
                    elif trans == 'recurring_invoice':
                        inv = None
                        recInv = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
                        crd = None
                    elif trans == 'credit_notes':
                        inv = None
                        recInv = None
                        crd = Credit_Note.objects.filter(customer=c, status = 'Saved')
                else:
                    if trans == 'all':
                        inv = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                        recInv = RecurringInvoice.objects.filter(customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                        crd = Credit_Note.objects.filter(customer=c, credit_note_date__range = [startDate, endDate], status = 'Saved')
                    elif trans == 'invoice':
                        inv = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                        recInv = None
                        crd = None
                    elif trans == 'recurring_invoice':
                        inv = None
                        recInv = RecurringInvoice.objects.filter(customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                        crd = None
                    elif trans == 'credit_notes':
                        inv = None
                        recInv = None
                        crd = Credit_Note.objects.filter(customer=c, credit_note_date__range = [startDate, endDate], status = 'Saved')

                if inv:
                    count += len(inv)
                    for i in inv:
                        sales += float(i.grand_total)
                        totInv += float(i.grand_total)
                        subTot += float(i.sub_total)
                        subTotWOCrd += float(i.sub_total)

                if recInv:
                    count += len(recInv)
                    for r in recInv:
                        sales += float(r.grandtotal)
                        totRecInv += float(r.grandtotal)
                        subTot += float(r.subtotal)
                        subTotWOCrd += float(r.subtotal)
                
                if crd:
                    count += len(crd)
                    for n in crd:
                        sales -= float(n.grand_total)
                        totCrdNote += float(n.grand_total)
                        subTot -= float(n.sub_total)

                details = {
                    'name': customerName,
                    'count':count,
                    'sales':sales
                }

                reportData.append(details)

            totCust = len(cust)
            totSale = totInv + totRecInv - totCrdNote
            totSaleWOCrdNote = totInv + totRecInv

            context = {
                'allmodules':allmodules, 'cmp':cmp,  'reportData':reportData,'totalCustomers':totCust, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
                'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
                'startDate':startDate, 'endDate':endDate, 'transaction':trans,
            }
            return render(request,'zohomodules/Reports/sales_by_customer.html', context)
    else:
        return redirect('/')

def shareSalesByCustomerReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totInv = 0
                totRecInv = 0
                totCrdNote = 0
                subTot = 0
                subTotWOCrd = 0

                cust = Customer.objects.filter(company=cmp)

                for c in cust:
                    customerName = c.first_name + " " + c.last_name
                    count = 0
                    sales = 0

                    if startDate == None or endDate == None:
                        if trans == "all":
                            inv = invoice.objects.filter(customer=c, status='Saved')
                            recInv = RecurringInvoice.objects.filter(customer=c, status='Saved')
                            crd = Credit_Note.objects.filter(customer=c, status='Saved')
                        elif trans == 'invoice':
                            inv = invoice.objects.filter(customer=c, status='Saved')
                            recInv = None
                            crd = None
                        elif trans == 'recurring_invoice':
                            inv = None
                            recInv = RecurringInvoice.objects.filter(customer=c, status='Saved')
                            crd = None
                        elif trans == 'credit_notes':
                            inv = None
                            recInv = None
                            crd = Credit_Note.objects.filter(customer=c, status='Saved')
                    else:
                        if trans == 'all':
                            inv = invoice.objects.filter(customer=c, date__range=[startDate, endDate], status='Saved')
                            recInv = RecurringInvoice.objects.filter(customer=c, start_date__range=[startDate, endDate], status='Saved')
                            crd = Credit_Note.objects.filter(customer=c, credit_note_date__range=[startDate, endDate], status='Saved')
                        elif trans == 'invoice':
                            inv = invoice.objects.filter(customer=c, date__range=[startDate, endDate], status='Saved')
                            recInv = None
                            crd = None
                        elif trans == 'recurring_invoice':
                            inv = None
                            recInv = RecurringInvoice.objects.filter(customer=c, start_date__range=[startDate, endDate], status='Saved')
                            crd = None
                        elif trans == 'credit_notes':
                            inv = None
                            recInv = None
                            crd = Credit_Note.objects.filter(customer=c, credit_note_date__range=[startDate, endDate], status='Saved')

                    if inv:
                        count += len(inv)
                        for i in inv:
                            sales += float(i.grand_total)
                            totInv += float(i.grand_total)
                            subTot += float(i.sub_total)
                            subTotWOCrd += float(i.sub_total)

                    if recInv:
                        count += len(recInv)
                        for r in recInv:
                            sales += float(r.grandtotal)
                            totRecInv += float(r.grandtotal)
                            subTot += float(r.subtotal)
                            subTotWOCrd += float(r.subtotal)

                    if crd:
                        count += len(crd)
                        for n in crd:
                            sales -= float(n.grand_total)
                            totCrdNote += float(n.grand_total)
                            subTot -= float(n.sub_total)

                    details = {
                        'name': customerName,
                        'count': count,
                        'sales': sales
                    }

                    reportData.append(details)

                totCust = len(cust)
                totSale = totInv + totRecInv - totCrdNote
                totSaleWOCrdNote = totInv + totRecInv

                context = {'reportData': reportData, 'cmp': cmp, 'startDate': startDate, 'endDate': endDate, 'totalCustomers': totCust, 'totalInvoice': totInv, 'totalRecInvoice': totRecInv, 'totalCreditNote': totCrdNote, 'subtotal': subTot, 'subtotalWOCredit': subTotWOCrd, 'totalSale': totSale, 'totalSaleWOCredit': totSaleWOCrdNote}
                template_path = 'zohomodules/Reports/Sales_by_customer_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Sales By Report'
                subject = f"Sales By Report"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Sales By Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales By Report details has been shared via email successfully..!')
                return redirect(Salesbycustomer)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Salesbycustomer)
            
# harikrishnan

def creditnotedetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        allmodules= ZohoModules.objects.get(company=com,status='New')
        credit = Credit_Note.objects.filter(company=com)
        totalCredit = Credit_Note.objects.filter(company=com).count()
        totalCustomer = Credit_Note.objects.filter(company=com).values('customer').distinct().count()
        totalAmount = Credit_Note.objects.filter(company=com).values('grand_total').annotate(total_sum=Sum('grand_total'))
        context = {
            'credit':credit,
            'allmodules':allmodules,
            'totalCreditNoteCount':totalCredit,
            'companyName':com.company_name,
            'log_details':log_details,
            'totalCustomer':totalCustomer,
            'totalAmount':totalAmount,
            }
        return render(request,'zohomodules/Reports/creditnote_details.html',context)

def sendEmail_creditnotedetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                totalCount = request.POST['count']
                totalCustomer = request.POST['totalCustomer']
                totalAmount = request.POST['totalAmount']
                start_date = request.POST.get('start_date') or None
                end_date = request.POST.get('end_date') or None
                statuss = request.POST.get('statusVal')

                if start_date != None and end_date != None:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = Credit_Note.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]) & Q(status=statuss))
                    else:
                        itms = Credit_Note.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]))
                else:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = Credit_Note.objects.filter(company=com,status=statuss)
                    else:
                        itms = Credit_Note.objects.filter(company=com)
                    

                context = { 'credit':itms,'cmp':com,'companyName':com.company_name,'totalAmount':totalAmount,
                           'totalCount':totalCount,'totalCustomer':totalCustomer,'start_date':start_date,'end_date':end_date}
                
                template_path = 'zohomodules/Reports/creditnotedetails_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Credit_Note_Details'
                subject = f"Credit_Note_Details"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Credit Note for   \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Credit Note details has been shared via email successfully..!')
                return redirect(creditnotedetails)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(creditnotedetails)

# end
# Ginto Salesorder Report             
def Salesorder_report(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    data=Customer.objects.filter(company=comp_details)
    sale = SaleOrder.objects.filter(company=comp_details)
    total_sales_amount = sale.aggregate(grand_total=Sum('grand_total'))['grand_total']
    totalCustomer = Customer.objects.filter(company=comp_details).count()
    return render(request, 'zohomodules/Reports/Salesorder_report.html', {
                'sale': sale,
                'allmodules': allmodules,
                'data': data,
                'log_details': log_details,
                'total_sales_amount': total_sales_amount,
                'totalCustomer':totalCustomer,
                'companyName':comp_details.company_name,
            })
    

def salesReportCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company

        allmodules = ZohoModules.objects.get(company=comp_details,status='New')
        data = Customer.objects.filter(company=comp_details)  

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            sale = SaleOrder.objects.filter(company=comp_details)  

            if startDate and endDate:
                sale = sale.filter(sales_order_date__range=[startDate, endDate])

            if trans == 'saved':
                sale = sale.filter(status='Save', convert_to_invoice__isnull=True, convert_to_recurringinvoice__isnull=True)
            elif trans == 'draft':
                sale = sale.filter(status='Draft', convert_to_invoice__isnull=True, convert_to_recurringinvoice__isnull=True)
            elif trans == 'Converted_to_Invoice':
                sale = sale.filter(convert_to_invoice__isnull=False)
            elif trans == 'Converted_to_RecurringInvoice':
                sale = sale.filter(convert_to_recurringinvoice__isnull=False)
                
            total_sales_amount = sale.aggregate(total_sales=Sum('grand_total'))['total_sales'] or 0

            # Count unique customers based on the filtered sales orders
            totalCustomer = sale.values('customer').distinct().count()

            context = {
                'sale': sale,
                'log_details': log_details,
                'allmodules': allmodules,
                'startDate': startDate, 
                'endDate': endDate, 
                'transaction': trans,
                'total_sales_amount': total_sales_amount,
                'totalCustomer': totalCustomer,
                'companyName':comp_details.company_name, 
            }
            return render(request,'zohomodules/Reports/Salesorder_report.html', context)
        else:
           return redirect('/')
   

def shareSalesReportsToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company

        if request.method == 'POST':
            emails_string = request.POST.get('email_ids', '')
            emails_list = [email.strip() for email in emails_string.split(',') if email.strip()]
            email_message = request.POST.get('email_message', '')
            totalCustomer = request.POST.get('count', '')  
            total_sales_amount = request.POST.get('total_sales','')
            start_date = request.POST.get('start_date')
            end_date = request.POST.get('end_date')

            if start_date and end_date:
                itms = SaleOrder.objects.filter(Q(company=com) & Q(sales_order_date__range=[start_date, end_date]))
            else:
                itms = SaleOrder.objects.filter(company=com)

            context = {
                'sale': itms,
                'cmp': com,
                'companyName': com.company_name,
                'total_sales_amount': total_sales_amount,
                'totalCustomer': totalCustomer,
                'start_date': start_date,
                'end_date': end_date
            }

            template_path = 'zohomodules/Reports/Salesorder_pdf.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()

            filename = f'Salesorder Reports'
            subject = f"Salesorder Reports"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached Salesorder Reports for\n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            # messages.success(request, 'Salesorder Reports has been shared via email successfully..!')
            return redirect(Salesorder_report)
    # messages.error(request, 'An error occurred while sharing Salesorder Reports via email.')
    return redirect(Salesorder_report)
        
#End
#----------------------Report Sales By Item Meenu shaju ----------------------------------------------
def sales_item(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp).values('item__item_name').annotate(
        item_name=Max('item__item_name'),
        total_count=Sum('quantity'),
        price=Sum('price') / Count('item__item_name'),
        
         )
        for summary in recurring_items_summary:
            summary['total_amount'] = summary['total_count'] * summary['price']


    
        invoice_items_summary = invoiceitems.objects.filter(company=cmp).values('Items__item_name').annotate(
        item_name=Max('Items__item_name'),
        total_count=Sum('quantity'),
        price=Sum('price') / Count('Items__item_name'),
        
        )
        for summary in invoice_items_summary:
            summary['total_amount'] = summary['total_count'] * summary['price']

        credit_note_items_summary = Credit_Note_Items.objects.filter(company=cmp).values('items__item_name').annotate(
        item_name=Max('items__item_name'),
        total_count=Sum('quantity'),
        price=Sum('price') / Count('items__item_name'),
    )

        for summary in credit_note_items_summary:
            summary['total_amount'] = summary['total_count'] * summary['price']
        credit_note_counts = {summary['item_name']: summary['total_count'] for summary in credit_note_items_summary}

        combined_summary = list(recurring_items_summary) + list(invoice_items_summary)
        unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

        
        for summary in combined_summary:
                item_name = summary['item_name']
                unique_items[item_name]['total_count'] += summary['total_count']
                unique_items[item_name]['price'] = summary['price']  

            
        combined_summary_with_total_qty = []
        for item_name, item_info in unique_items.items():
                combined_summary_with_total_qty.append({
                    'item_name': item_name,
                    'total_count': item_info['total_count'],
                    'price': item_info['price'],
                    'total_amount': item_info['total_count'] * item_info['price']
                })

        


        for summary in combined_summary_with_total_qty:
            item_name = summary['item_name']
            if item_name in credit_note_counts:
                # Subtract credit note count from combined summary count
                summary['total_count'] -= credit_note_counts[item_name]


        

        # Calculate total quantity
        total_qty_recurring = sum(summary['total_count'] for summary in recurring_items_summary)
        total_qty_invoice = sum(summary['total_count'] for summary in invoice_items_summary)
        total_qty_credit_note = sum(summary['total_count'] for summary in credit_note_items_summary)
        total_qty = total_qty_recurring + total_qty_invoice

        #claculate sale total in invoice and rec invoice,credit note
        total_sale_recurring = sum(summary['total_amount'] for summary in recurring_items_summary)
        total_sale_invoice = sum(summary['total_amount'] for summary in invoice_items_summary)
        total_sale_credit_note = sum(summary['total_amount'] for summary in credit_note_items_summary)

        total_sale = total_sale_invoice + total_sale_recurring - total_sale_credit_note
        # total of subtotal in invoice and rec invoice table
        total_subtotal_invoice = invoice.objects.filter(company=cmp).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0

    # Calculate total subtotal for recurring invoices
        total_subtotal_recurring_invoice = RecurringInvoice.objects.filter(company=cmp).aggregate(total_subtotal=Sum('subtotal'))['total_subtotal'] or 0
        total_subtotal_credit_note = Credit_Note.objects.filter(company=cmp).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0
    # Total of subtotal for both invoices and recurring invoices
        total_subtotal = total_subtotal_invoice + total_subtotal_recurring_invoice - total_subtotal_credit_note
        total_subtotal_withoutcreditnote = total_subtotal_invoice + total_subtotal_recurring_invoice

        total_salewithoutcreditnote = total_sale_invoice + total_sale_recurring

    
        



        
        context = {
             'allmodules':allmodules, 'details':dash_details,'log_details':log_details,'combined_summary':combined_summary_with_total_qty,'cmp':cmp,
        'total_qty':total_qty,'tsr':total_sale_recurring,'tsi':total_sale_invoice,'tsc':total_sale_credit_note,
        'total_sale':total_sale,'total_subtotal':total_subtotal,'total_subtotalwithoutcreditnote':total_subtotal_withoutcreditnote,
        'total_salewithoutcreditnote':total_salewithoutcreditnote
        }
        return render(request, 'zohomodules/Reports/sales_item.html', context)
    else:
        return redirect('/')


def customize_salebyitem(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)

        
        allmodules= ZohoModules.objects.get(company = cmp)
        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')

            
            from_date = datetime.strptime(from_date, '%Y-%m-%d')
            to_date = datetime.strptime(to_date, '%Y-%m-%d')

            
           
            
            recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__start_date__range=[from_date,to_date]).values('item__item_name').annotate(
            item_name=Max('item__item_name'),
            total_count=Sum('quantity'),
            price=Sum('price') / Count('item__item_name'),
            
            )
            for summary in recurring_items_summary:
                summary['total_amount'] = summary['total_count'] * summary['price']


        
            invoice_items_summary = invoiceitems.objects.filter(company=cmp,invoice__date__range=[from_date,to_date]).values('Items__item_name').annotate(
            item_name=Max('Items__item_name'),
            total_count=Sum('quantity'),
            price=Sum('price') / Count('Items__item_name'),
            
            )
            for summary in invoice_items_summary:
                summary['total_amount'] = summary['total_count'] * summary['price']

            credit_note_items_summary = Credit_Note_Items.objects.filter(company=cmp,credit_note__credit_note_date__range=[from_date,to_date]).values('items__item_name').annotate(
            item_name=Max('items__item_name'),
            total_count=Sum('quantity'),
            price=Sum('price') / Count('items__item_name'),
        )

            for summary in credit_note_items_summary:
                summary['total_amount'] = summary['total_count'] * summary['price']

            credit_note_counts = {summary['item_name']: summary['total_count'] for summary in credit_note_items_summary}


            combined_summary = list(recurring_items_summary) + list(invoice_items_summary)
            unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

        
            for summary in combined_summary:
                item_name = summary['item_name']
                unique_items[item_name]['total_count'] += summary['total_count']
                unique_items[item_name]['price'] = summary['price']  

            
        combined_summary_with_total_qty = []
        for item_name, item_info in unique_items.items():
                combined_summary_with_total_qty.append({
                    'item_name': item_name,
                    'total_count': item_info['total_count'],
                    'price': item_info['price'],
                    'total_amount': item_info['total_count'] * item_info['price']
                })

        


        for summary in combined_summary_with_total_qty:
            item_name = summary['item_name']
            if item_name in credit_note_counts:
                # Subtract credit note count from combined summary count
                summary['total_count'] -= credit_note_counts[item_name]


        
           
            # Calculate total quantity
            total_qty_recurring = sum(summary['total_count'] for summary in recurring_items_summary)
            total_qty_invoice = sum(summary['total_count'] for summary in invoice_items_summary)
            total_qty_credit_note = sum(summary['total_count'] for summary in credit_note_items_summary)
            total_qty = total_qty_recurring + total_qty_invoice

            #claculate sale total in invoice and rec invoice,credit note
            total_sale_recurring = sum(summary['total_amount'] for summary in recurring_items_summary)
            total_sale_invoice = sum(summary['total_amount'] for summary in invoice_items_summary)
            total_sale_credit_note = sum(summary['total_amount'] for summary in credit_note_items_summary)

            total_sale = total_sale_invoice + total_sale_recurring - total_sale_credit_note
            # total of subtotal in invoice and rec invoice table
            total_subtotal_invoice = invoice.objects.filter(company=cmp,date__range=[from_date,to_date]).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0

        # Calculate total subtotal for recurring invoices
            total_subtotal_recurring_invoice = RecurringInvoice.objects.filter(company=cmp,start_date__range=[from_date,to_date]).aggregate(total_subtotal=Sum('subtotal'))['total_subtotal'] or 0
            total_subtotal_credit_note = Credit_Note.objects.filter(company=cmp,credit_note_date__range=[from_date,to_date]).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0
        # Total of subtotal for both invoices and recurring invoices
            total_subtotal = total_subtotal_invoice + total_subtotal_recurring_invoice - total_subtotal_credit_note
            total_subtotal_withoutcreditnote = total_subtotal_invoice + total_subtotal_recurring_invoice

            total_salewithoutcreditnote = total_sale_invoice + total_sale_recurring

        
            



            
            context = {
                'allmodules':allmodules, 'details':dash_details,'log_details':log_details,'combined_summary':combined_summary_with_total_qty,'cmp':cmp,
            'total_qty':total_qty,'tsr':total_sale_recurring,'tsi':total_sale_invoice,'tsc':total_sale_credit_note,
            'total_sale':total_sale,'total_subtotal':total_subtotal,'total_subtotalwithoutcreditnote':total_subtotal_withoutcreditnote,
            'total_salewithoutcreditnote':total_salewithoutcreditnote,'from_date':from_date,'to_date':to_date
            }
            return render(request, 'zohomodules/Reports/sales_item.html', context)
        else:
            return redirect('/')


def sales_item_report(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp).values('item__item_name').annotate(
        item_name=Max('item__item_name'),
        total_count=Sum('quantity'),
        price=Sum('price') / Count('item__item_name'),
        
         )
        for summary in recurring_items_summary:
            summary['total_amount'] = summary['total_count'] * summary['price']


    
        invoice_items_summary = invoiceitems.objects.filter(company=cmp).values('Items__item_name').annotate(
        item_name=Max('Items__item_name'),
        total_count=Sum('quantity'),
        price=Sum('price') / Count('Items__item_name'),
        
        )
        for summary in invoice_items_summary:
            summary['total_amount'] = summary['total_count'] * summary['price']
        credit_note_items_summary = Credit_Note_Items.objects.filter(company=cmp).values('items__item_name').annotate(
        item_name=Max('items__item_name'),
        total_count=Sum('quantity'),
        price=Sum('price') / Count('items__item_name'),
    )

        for summary in credit_note_items_summary:
            summary['total_amount'] = summary['total_count'] * summary['price']
        credit_note_counts = {summary['item_name']: summary['total_count'] for summary in credit_note_items_summary}


        combined_summary = list(recurring_items_summary) + list(invoice_items_summary)
        unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

        
        for summary in combined_summary:
                item_name = summary['item_name']
                unique_items[item_name]['total_count'] += summary['total_count']
                unique_items[item_name]['price'] = summary['price']  

            
        combined_summary_with_total_qty = []
        for item_name, item_info in unique_items.items():
                combined_summary_with_total_qty.append({
                    'item_name': item_name,
                    'total_count': item_info['total_count'],
                    'price': item_info['price'],
                    'total_amount': item_info['total_count'] * item_info['price']
                })

        


        for summary in combined_summary_with_total_qty:
            item_name = summary['item_name']
            if item_name in credit_note_counts:
                # Subtract credit note count from combined summary count
                summary['total_count'] -= credit_note_counts[item_name]


        # Calculate total quantity
        total_qty_recurring = sum(summary['total_count'] for summary in recurring_items_summary)
        total_qty_invoice = sum(summary['total_count'] for summary in invoice_items_summary)
        total_qty_credit_note = sum(summary['total_count'] for summary in credit_note_items_summary)
        total_qty = total_qty_recurring + total_qty_invoice

        #claculate sale total in invoice and rec invoice,credit note
        total_sale_recurring = sum(summary['total_amount'] for summary in recurring_items_summary)
        total_sale_invoice = sum(summary['total_amount'] for summary in invoice_items_summary)
        total_sale_credit_note = sum(summary['total_amount'] for summary in credit_note_items_summary)

        total_sale = total_sale_invoice + total_sale_recurring - total_sale_credit_note
        # total of subtotal in invoice and rec invoice table
        total_subtotal_invoice = invoice.objects.filter(company=cmp).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0

    # Calculate total subtotal for recurring invoices
        total_subtotal_recurring_invoice = RecurringInvoice.objects.filter(company=cmp).aggregate(total_subtotal=Sum('subtotal'))['total_subtotal'] or 0
        total_subtotal_credit_note = Credit_Note.objects.filter(company=cmp).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0
    # Total of subtotal for both invoices and recurring invoices
        total_subtotal = total_subtotal_invoice + total_subtotal_recurring_invoice - total_subtotal_credit_note
        total_subtotal_withoutcreditnote = total_subtotal_invoice + total_subtotal_recurring_invoice

        total_salewithoutcreditnote = total_sale_invoice + total_sale_recurring

    
        



        
        context = {
             'log_details':log_details,'combined_summary':combined_summary_with_total_qty,'cmp':cmp,
        'total_qty':total_qty,'tsr':total_sale_recurring,'tsi':total_sale_invoice,'tsc':total_sale_credit_note,
        'total_sale':total_sale,'total_subtotal':total_subtotal,'total_subtotalwithoutcreditnote':total_subtotal_withoutcreditnote,
        'total_salewithoutcreditnote':total_salewithoutcreditnote
        }
        
        
        template_path = 'zohomodules/Reports/sales_item_report.html'
        fname = 'Slaes_Item_Report_'
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

       
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        print(pisa_status)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def sales_item_report_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=com).values('item__item_name').annotate(
                item_name=Max('item__item_name'),
                total_count=Sum('quantity'),
                price=Sum('price') / Count('item__item_name'),
                
                )
                for summary in recurring_items_summary:
                    summary['total_amount'] = summary['total_count'] * summary['price']


            
                invoice_items_summary = invoiceitems.objects.filter(company=com).values('Items__item_name').annotate(
                item_name=Max('Items__item_name'),
                total_count=Sum('quantity'),
                price=Sum('price') / Count('Items__item_name'),
                
                )
                for summary in invoice_items_summary:
                    summary['total_amount'] = summary['total_count'] * summary['price']

                credit_note_items_summary = Credit_Note_Items.objects.filter(company=com).values('items__item_name').annotate(
                item_name=Max('items__item_name'),
                total_count=Sum('quantity'),
                price=Sum('price') / Count('items__item_name'),
            )

                for summary in credit_note_items_summary:
                    summary['total_amount'] = summary['total_count'] * summary['price']

                credit_note_counts = {summary['item_name']: summary['total_count'] for summary in credit_note_items_summary}


                combined_summary = list(recurring_items_summary) + list(invoice_items_summary)
                unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

                
                for summary in combined_summary:
                        item_name = summary['item_name']
                        unique_items[item_name]['total_count'] += summary['total_count']
                        unique_items[item_name]['price'] = summary['price']  

                    
                combined_summary_with_total_qty = []
                for item_name, item_info in unique_items.items():
                        combined_summary_with_total_qty.append({
                            'item_name': item_name,
                            'total_count': item_info['total_count'],
                            'price': item_info['price'],
                            'total_amount': item_info['total_count'] * item_info['price']
                        })

                


                for summary in combined_summary_with_total_qty:
                    item_name = summary['item_name']
                    if item_name in credit_note_counts:
                        # Subtract credit note count from combined summary count
                        summary['total_count'] -= credit_note_counts[item_name]


                        

                # Calculate total quantity
                total_qty_recurring = sum(summary['total_count'] for summary in recurring_items_summary)
                total_qty_invoice = sum(summary['total_count'] for summary in invoice_items_summary)
                total_qty_credit_note = sum(summary['total_count'] for summary in credit_note_items_summary)
                total_qty = total_qty_recurring + total_qty_invoice

                #claculate sale total in invoice and rec invoice,credit note
                total_sale_recurring = sum(summary['total_amount'] for summary in recurring_items_summary)
                total_sale_invoice = sum(summary['total_amount'] for summary in invoice_items_summary)
                total_sale_credit_note = sum(summary['total_amount'] for summary in credit_note_items_summary)

                total_sale = total_sale_invoice + total_sale_recurring - total_sale_credit_note
                # total of subtotal in invoice and rec invoice table
                total_subtotal_invoice = invoice.objects.filter(company=com).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0

            # Calculate total subtotal for recurring invoices
                total_subtotal_recurring_invoice = RecurringInvoice.objects.filter(company=com).aggregate(total_subtotal=Sum('subtotal'))['total_subtotal'] or 0
                total_subtotal_credit_note = Credit_Note.objects.filter(company=com).aggregate(total_subtotal=Sum('sub_total'))['total_subtotal'] or 0
            # Total of subtotal for both invoices and recurring invoices
                total_subtotal = total_subtotal_invoice + total_subtotal_recurring_invoice - total_subtotal_credit_note
                total_subtotal_withoutcreditnote = total_subtotal_invoice + total_subtotal_recurring_invoice

                total_salewithoutcreditnote = total_sale_invoice + total_sale_recurring

            
                


                

                
                context = {
                    'log_details':log_details,'combined_summary':combined_summary_with_total_qty,'cmp':com,
                'total_qty':total_qty,'tsr':total_sale_recurring,'tsi':total_sale_invoice,'tsc':total_sale_credit_note,
                'total_sale':total_sale,'total_subtotal':total_subtotal,'total_subtotalwithoutcreditnote':total_subtotal_withoutcreditnote,
                'total_salewithoutcreditnote':total_salewithoutcreditnote
                }
                    
                
                template_path = 'zohomodules/Reports/sales_item_report.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Sales_Item_Report'
                subject = f"Sales By Item Report_"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Details for - Sales Item Report. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales Report details has been shared via email successfully..!')
                return redirect(sales_item)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(sales_item)
   

#End
#=================================RECURRING IVOICE REPORT  START==========================================
def ReccuringBillReport(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    print("log_details:",log_details)
    
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        print("dash_details:",dash_details)
        
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        print("allmodules:",allmodules)
        
        currentDate = datetime.today()
        print("currentDate:",currentDate)

        reportData = []
        print("reportData1:",reportData)
        
        totalSales = 0
        print("totalSales1:",totalSales)
        
        totvendr=0
        print("totvendr:",totvendr)
        totalbalance=0
        print("totalbalance1:",totalbalance)

        rec = RecurringInvoice.objects.filter(company=dash_details)
        print("rec:",rec)
        
        cust= Customer.objects.filter(company=dash_details)
        
        if rec:
            for s in rec:
                partyName = s.customer.customer_display_name
                print("partyName:",partyName)
                
                date = s.start_date
                print("start_date:",date)
                 
                ship_date = s.end_date
                print("ship_date:",ship_date)
                end_date = datetime.combine(s.end_date, datetime.min.time())
                
                print("end_date:",end_date)
                #end_date = datetime.combine(s.expected_shipment_date, datetime.min.time())

                rbill =s.rec_invoice_no
                print("rbill:",rbill)
                
                ordrno =s.salesOrder_no
                print("ordrno:",ordrno)
                
                total = s.grandtotal
                print("total:",total)
                
                paid=s.advance_paid
                print("paid:",paid)
                
                balance=s.balance
                print("balance:",balance)
                
                st=s.status
                print("st7:",st)
                
                totalSales += float(s.grandtotal)
                print("totalSales:",totalSales)
                
                totalbalance += float(s.balance)
                print("totalbalance:",totalbalance)
                
                if s.status == 'Draft':
                    st = 'Draft'
                    print("st6:",st)
                elif s.advance_paid == 0 and end_date>currentDate:
                    st = 'Not paid'
                    print("st5:",st)
                    
                elif s.advance_paid == s.grandtotal:
                    st = 'fully paid'
                    print("st4:",st)
                
                elif s.advance_paid > 0 and s.advance_paid<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                    print("st3:",st)
                    
                elif end_date<currentDate and s.advance_paid<=s.grandtotal:
                    st = 'overdue'
                    print("st2:",st)
                    
                
                else:
                    st = s.status
                    print("st1:",st)

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                print("details:",details)
                reportData.append(details)
                print("reportData:",reportData)
                totvendr=len(cust)

        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData':reportData,
            'totalbalance':totalbalance,
            'totalSales':totalSales,
            'totcust':totvendr,
            'startDate':None,
            'endDate':None

            #'journal_entries':journal_entries,
           
        }
        
        return render(request,'zohomodules/Reports/Reccuring_Bill_Report.html',context)
    
    if log_details.user_type=="Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        print("c")
        print(company_details)
        comp=CompanyDetails.objects.get(id=company_details.company.id)
        print("d")
        print(comp)
        allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
        print("e")
        print(allmodules)
        
        currentDate = datetime.today()
        print("currentDate:",currentDate)

        reportData = []
        print("reportData1:",reportData)
        
        totalSales = 0
        print("totalSales1:",totalSales)
        
        totvendr=0
        print("totvendr:",totvendr)
        totalbalance=0
        print("totalbalance1:",totalbalance)

        rec = RecurringInvoice.objects.filter(company=company_details.company)
        print("rec:",rec)
        
        cust= Customer.objects.filter(company=company_details.company)
        
        if rec:
            for s in rec:
                partyName = s.customer.customer_display_name
                print("partyName:",partyName)
                
                date = s.start_date
                print("start_date:",date)
                 
                ship_date = s.end_date
                print("ship_date:",ship_date)
                end_date = datetime.combine(s.end_date, datetime.min.time())
                
                print("end_date:",end_date)
                #end_date = datetime.combine(s.expected_shipment_date, datetime.min.time())

                rbill =s.rec_invoice_no
                print("rbill:",rbill)
                
                ordrno =s.salesOrder_no
                print("ordrno:",ordrno)
                
                total = s.grandtotal
                print("total:",total)
                
                paid=s.advance_paid
                print("paid:",paid)
                
                balance=s.balance
                print("balance:",balance)
                
                st=s.status
                print("st7:",st)
                
                totalSales += float(s.grandtotal)
                print("totalSales:",totalSales)
                
                totalbalance += float(s.balance)
                print("totalbalance:",totalbalance)
                
                if s.status == 'Draft':
                    st = 'Draft'
                    print("st6:",st)
                elif s.advance_paid == 0 and end_date>currentDate:
                    st = 'Not paid'
                    print("st5:",st)
                    
                elif s.advance_paid == s.grandtotal:
                    st = 'fully paid'
                    print("st4:",st)
                
                elif s.advance_paid > 0 and s.advance_paid<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                    print("st3:",st)
                    
                elif end_date<currentDate and s.advance_paid<=s.grandtotal:
                    st = 'overdue'
                    print("st2:",st)
                    
                
                else:
                    st = s.status
                    print("st1:",st)

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                print("details:",details)
                reportData.append(details)
                print("reportData:",reportData)
                totvendr=len(cust)

        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':company_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData':reportData,
            'totalbalance':totalbalance,
            'totalSales':totalSales,
            'totcust':totvendr,
            'startDate':None,
            'endDate':None

            #'journal_entries':journal_entries,
           
        }
        
        return render(request,'zohomodules/Reports/Reccuring_Bill_Report.html',context)
        

def ReccuringBillReportCustomized(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    print("log_details:",log_details)
    
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        print("dash_details:",dash_details)
        
        
        
        #journal_entries = JournalEntry.objects.filter(journal__in=journal,company=dash_details)
        #print(journal_entries)
        
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        print("allmodules:",allmodules)
        
        startDate = request.GET.get('start_date', None)
        print("startdate:",startDate)
        
        endDate = request.GET.get('end_date', None)
        print("endDate:",endDate)
        
        status = request.GET.get('status')
        print("status:",status)
        
        report = request.GET.get('billdate',None)
        print("report:",report)



        currentDate = datetime.today()
        print("currentDate:",currentDate)
        reportData = []
        print("reportData:",reportData)
        totalSales = 0
        print("totalSales:",totalSales)
        totvendr=0
        print("totvendr:",totvendr)
        totalbalance=0
        print("totalbalance:",totalbalance)
        
        rec = RecurringInvoice.objects.filter(company=dash_details)
        print("rec:",rec)
        cust = Customer.objects.filter(company=dash_details)
        print("cust:",cust)
        
        if startDate and endDate:
            rec = rec.filter(start_date__range=[startDate, endDate])
            print("rec1:",rec)
            
        if report:
            if report=='billdate':
                rec = rec.filter(start_date__range=[startDate, endDate])
                print("rec2:",rec)
            if report=='shipdate':
                rec = rec.filter(end_date__range=[startDate, endDate])
                print("rec3:",rec)
              

        if status:
            if status == 'Draft':
                rec = rec.filter(status = 'Draft')
                print("rec4:",rec)
            elif status == 'fully paid':
                rec = rec.filter(advance_paid=F('grandtotal'),status='Save')
                print("rec5:",recurr_overview)
                

            elif status == 'Not paid':
                rec = rec.filter(Q(advance_paid=0)  & Q(end_date__gt=currentDate),status='Save')
                print("rec6:",rec)

            elif status == 'partially paid':
                rec = rec.filter(Q(advance_paid__gt=0)  & Q(advance_paid__lt=F('grandtotal')) & Q(end_date__gt=currentDate),status='Save')
                print(rec)
                print("7")
            elif status == 'overdue':
                rec = rec.filter((Q(end_date__lte=currentDate) & Q(advance_paid__lt=F('grandtotal')) ), status='Save')
                print("8")
                print(rec)
                
        for s in rec:
            partyName = s.customer.customer_display_name
            print("partyName:",partyName)
            
            date = s.start_date
            print("date:",date)
            
            ship_date = s.end_date
            print("ship_date:",ship_date)
            
            end_date = datetime.combine(s.end_date, datetime.min.time())
            print("end_date:",end_date)
            

            rbill =s.rec_invoice_no
            print("rbill:",rbill)
            
            ordrno =s.salesOrder_no
            print("ordrno:",ordrno)
            
            total = s.grandtotal
            print("total:",total)
            
            paid=s.advance_paid
            print("paid:",paid)
            
            balance=s.balance
            print("balance:",balance)
            
            st=s.status
            print("st1:",st)
            
            totalSales += float(s.grandtotal)
            print("totalSales:",totalSales)
            
            totalbalance += float(s.balance)
            print("totalbalance:",totalbalance)
            
            if s.status == 'Draft':
                st = 'Draft'
                print("st2:",st)
            elif s.advance_paid == 0 and end_date>currentDate:
                st = 'Not paid'
                print("st3:",st)
                
            elif s.advance_paid == s.grandtotal:
                st = 'fully paid'
                print("st4:",staff_password_change)
            
            elif s.advance_paid > 0 and s.advance_paid<s.grandtotal and end_date>currentDate:
                st = 'partially paid'
                print("st5:",st)
            elif end_date<currentDate and s.advance_paid<=s.grandtotal:
                st = 'overdue'
                print("st5:",st)
            
            else:
                st = s.status
                print("st6:",st)

            details = {
                'date': date,
                'name': partyName,
                'ship_date':ship_date,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,
                
                
                
            }
            print("details:",details)
            reportData.append(details)
            print("reportData1:",reportData)
            totvendr=len(cust)
            print("totvendr1:",totvendr)



        
        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData': reportData,
            'totalbalance':totalbalance,
            'totalSales': totalSales, 
            'totcust': totvendr,
            'startDate': startDate,
            'endDate': endDate, 
            'status': status,
            'billdate':report

            #'journal_entries':journal_entries,
           
        }
        
        return render(request,'zohomodules/Reports/Reccuring_Bill_Report.html',context)
    
    if log_details.user_type=="Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        print("c")
        print(company_details)
        comp=CompanyDetails.objects.get(id=company_details.company.id)
        print("d")
        print(comp)
        allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
        print("e")
        print(allmodules)
        startDate = request.GET.get('start_date', None)
        print("startdate:",startDate)
        
        endDate = request.GET.get('end_date', None)
        print("endDate:",endDate)
        
        status = request.GET.get('status')
        print("status:",status)
        
        report = request.GET.get('billdate',None)
        print("report:",report)



        currentDate = datetime.today()
        print("currentDate:",currentDate)
        reportData = []
        print("reportData:",reportData)
        totalSales = 0
        print("totalSales:",totalSales)
        totvendr=0
        print("totvendr:",totvendr)
        totalbalance=0
        print("totalbalance:",totalbalance)
        
        rec = RecurringInvoice.objects.filter(company=company_details.company)
        print("rec:",rec)
        cust = Customer.objects.filter(company=company_details.company)
        print("cust:",cust)
        
        if startDate and endDate:
            rec = rec.filter(start_date__range=[startDate, endDate])
            print("rec1:",rec)
            
        if report:
            if report=='billdate':
                rec = rec.filter(start_date__range=[startDate, endDate])
                print("rec2:",rec)
            if report=='shipdate':
                rec = rec.filter(end_date__range=[startDate, endDate])
                print("rec3:",rec)
              

        if status:
            if status == 'Draft':
                rec = rec.filter(status = 'Draft')
                print("rec4:",rec)
            elif status == 'fully paid':
                rec = rec.filter(advance_paid=F('grandtotal'),status='Save')
                print("rec5:",recurr_overview)
                

            elif status == 'Not paid':
                rec = rec.filter(Q(advance_paid=0)  & Q(end_date__gt=currentDate),status='Save')
                print("rec6:",rec)

            elif status == 'partially paid':
                rec = rec.filter(Q(advance_paid__gt=0)  & Q(advance_paid__lt=F('grandtotal')) & Q(end_date__gt=currentDate),status='Save')
                print(rec)
                print("7")
            elif status == 'overdue':
                rec = rec.filter((Q(end_date__lte=currentDate) & Q(advance_paid__lt=F('grandtotal')) ), status='Save')
                print("8")
                print(rec)
                
        for s in rec:
            partyName = s.customer.customer_display_name
            print("partyName:",partyName)
            
            date = s.start_date
            print("date:",date)
            
            ship_date = s.end_date
            print("ship_date:",ship_date)
            
            end_date = datetime.combine(s.end_date, datetime.min.time())
            print("end_date:",end_date)
            

            rbill =s.rec_invoice_no
            print("rbill:",rbill)
            
            ordrno =s.salesOrder_no
            print("ordrno:",ordrno)
            
            total = s.grandtotal
            print("total:",total)
            
            paid=s.advance_paid
            print("paid:",paid)
            
            balance=s.balance
            print("balance:",balance)
            
            st=s.status
            print("st1:",st)
            
            totalSales += float(s.grandtotal)
            print("totalSales:",totalSales)
            
            totalbalance += float(s.balance)
            print("totalbalance:",totalbalance)
            
            if s.status == 'Draft':
                st = 'Draft'
                print("st2:",st)
            elif s.advance_paid == 0 and end_date>currentDate:
                st = 'Not paid'
                print("st3:",st)
                
            elif s.advance_paid == s.grandtotal:
                st = 'fully paid'
                print("st4:",staff_password_change)
            
            elif s.advance_paid > 0 and s.advance_paid<s.grandtotal and end_date>currentDate:
                st = 'partially paid'
                print("st5:",st)
            elif end_date<currentDate and s.advance_paid<=s.grandtotal:
                st = 'overdue'
                print("st5:",st)
            
            else:
                st = s.status
                print("st6:",st)

            details = {
                'date': date,
                'name': partyName,
                'ship_date':ship_date,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,
                
                
                
            }
            print("details:",details)
            reportData.append(details)
            print("reportData1:",reportData)
            totvendr=len(cust)
            print("totvendr1:",totvendr)



        
        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':company_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData': reportData,
            'totalbalance':totalbalance,
            'totalSales': totalSales, 
            'totcust': totvendr,
            'startDate': startDate,
            'endDate': endDate, 
            'status': status,
            'billdate':report

            #'journal_entries':journal_entries,
           
        }
        
        return render(request,'zohomodules/Reports/Reccuring_Bill_Report.html',context)
    
   
def Rec_invoice_report_email(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    print("log_details:",log_details)
    
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        print("dash_details:",dash_details)
    
    
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            # print(emails_list)
            cust = Customer.objects.filter(company=dash_details)
        
            #cust = Fin_Customers.objects.filter(Company=cmp)
            startDate = request.GET.get('start_date', None)
            print("startdate:",startDate)
            
            endDate = request.GET.get('end_date', None)
            print("endDate:",endDate)
            
            status = request.GET.get('status')
            print("status:",status)
            
            currentDate = datetime.today()


            reportData = []
            totalSales = 0
            totvendr=0
            totalbalance=0

            rec = RecurringInvoice.objects.filter(company=dash_details)
            cust = Customer.objects.filter(company=dash_details)


            if startDate and endDate:
                rec = rec.filter(start_date__range=[startDate, endDate])
                print(rec)
                print("1")
            

            if status:
                if status == 'Draft':
                    rec = rec.filter(status = 'Draft')
                elif status == 'fully paid':
                    rec = rec.filter(advance_paid=F('grandtotal'),status='Save')
                    
                elif status == 'Not paid':
                    rec = rec.filter(Q(advance_paid=0)  & Q(end_date__gt=currentDate),status='Save')

                elif status == 'partially paid':
                    rec = rec.filter(Q(advance_paid__gt=0)  & Q(advance_paid__lt=F('grandtotal')) & Q(end_date__gt=currentDate),status='Save')
                
                elif status == 'overdue':
                    rec = rec.filter((Q(end_date__lte=currentDate) & Q(advance_paid__lt=F('grandtotal')) ), status='Save')
                    

            for s in rec:
                partyName = s.customer.customer_display_name
                date = s.start_date
                ship_date = s.end_date
                end_date = datetime.combine(s.end_date, datetime.min.time())

                rbill =s.rec_invoice_no
                ordrno =s.salesOrder_no
                total = s.grandtotal
                paid=s.advance_paid
                balance=s.balance
                st=s.status
                totalSales += float(s.grandtotal)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.advance_paid == 0 and end_date>currentDate:
                    st = 'Not paid'
                    
                elif s.advance_paid == s.grandtotal:
                    st = 'fully paid'
            
                elif s.advance_paid > 0 and s.advance_paid<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.advance_paid<=s.grandtotal:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(cust)

            context = {'details': dash_details, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
            template_path = 'zohomodules/Reports/rec_invoice_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Report_rec_invoice_Details'
            subject = f"Report_rec_invoice_Details"
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Report for - recinvoice Details. \n{email_message}\n\n--\nRegards,\n{dash_details.company_name}\n{dash_details.address}\n{dash_details.state} - {dash_details.country}\n{dash_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Report has been shared via email successfully..!')
            return redirect(ReccuringBillReport)
    
    if log_details.user_type=="Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        print("c")
        print(company_details)
        comp=CompanyDetails.objects.get(id=company_details.company.id)
        print("d")
        print(comp)
        allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
        print("e")
        print(allmodules)
        
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            # print(emails_list)
            cust = Customer.objects.filter(company=company_details.company)
        
            #cust = Fin_Customers.objects.filter(Company=cmp)
            startDate = request.GET.get('start_date', None)
            print("startdate:",startDate)
            
            endDate = request.GET.get('end_date', None)
            print("endDate:",endDate)
            
            status = request.GET.get('status')
            print("status:",status)
            
            currentDate = datetime.today()


            reportData = []
            totalSales = 0
            totvendr=0
            totalbalance=0

            rec = RecurringInvoice.objects.filter(company=company_details.company)
            cust = Customer.objects.filter(company=company_details.company)


            if startDate and endDate:
                rec = rec.filter(start_date__range=[startDate, endDate])
                print(rec)
                print("1")
            

            if status:
                if status == 'Draft':
                    rec = rec.filter(status = 'Draft')
                elif status == 'fully paid':
                    rec = rec.filter(advance_paid=F('grandtotal'),status='Save')
                    
                elif status == 'Not paid':
                    rec = rec.filter(Q(advance_paid=0)  & Q(end_date__gt=currentDate),status='Save')

                elif status == 'partially paid':
                    rec = rec.filter(Q(advance_paid__gt=0)  & Q(advance_paid__lt=F('grandtotal')) & Q(end_date__gt=currentDate),status='Save')
                
                elif status == 'overdue':
                    rec = rec.filter((Q(end_date__lte=currentDate) & Q(advance_paid__lt=F('grandtotal')) ), status='Save')
                    

            for s in rec:
                partyName = s.customer.customer_display_name
                date = s.start_date
                ship_date = s.end_date
                end_date = datetime.combine(s.end_date, datetime.min.time())

                rbill =s.rec_invoice_no
                ordrno =s.salesOrder_no
                total = s.grandtotal
                paid=s.advance_paid
                balance=s.balance
                st=s.status
                totalSales += float(s.grandtotal)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.advance_paid == 0 and end_date>currentDate:
                    st = 'Not paid'
                    
                elif s.advance_paid == s.grandtotal:
                    st = 'fully paid'
            
                elif s.advance_paid > 0 and s.advance_paid<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.advance_paid<=s.grandtotal:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(cust)

            context = {'details': company_details, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
            template_path = 'zohomodules/Reports/rec_invoice_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Report_rec_invoice_Details'
            subject = f"Report_rec_invoice_Details"
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Report for - recinvoice Details. \n{email_message}\n\n--\nRegards,\n{company_details.company.company_name}\n{company_details.company.address}\n{company_details.company.state} - {company_details.company.country}\n{company_details.company.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Report has been shared via email successfully..!')
            return redirect(ReccuringBillReport)


#=================================RECURRING IVOICE REPORT  END==========================================
# < --------------------- > Eway Bills < ------------------------------- >
def eway_bills(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        bills = EwayBill.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        context = {
            'bills': bills, 'allmodules':allmodules, 'details':dash_details
        }
        return render(request, 'zohomodules/eway_bills/eway_bills.html', context)
    else:
        return redirect('/')

def create_eway_bill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)
        trm = Company_Payment_Term.objects.filter(company = cmp)
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        trpt = Transportation.objects.filter(company = cmp)

        latest_inv = EwayBill.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Eway_bill_Reference.objects.filter(company = cmp).exists():
            deleted = Eway_bill_Reference.objects.get(company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = EwayBill.objects.filter(company=cmp).last()

        if lastInv:
            inv_no = str(lastInv.eway_bill_number)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        else:
            nxtInv = 'EW001'
        

        context = {
            'cmp':cmp,'allmodules':allmodules, 'billno':nxtInv ,'refno': new_number, 'details':dash_details, 'customers': cust,'items':itms,'units':units,'accounts':accounts,'pTerms':trm,'trpt':trpt
            
        }
        return render(request, 'zohomodules/eway_bills/create_eway_bill.html', context)
    else:
        return redirect('/')
    

def getItemDetailsAjax3(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
        item = Items.objects.filter(company = cmp, item_name = itemName).first()
        

        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,

        }
        return JsonResponse(context)
    else:
       return redirect('/')


def createEwayBill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        if request.method == 'POST':
            eway_bill_number = request.POST['EwayBill_no']
            
            # Check if the E-way Bill number already exists in the database
            if EwayBill.objects.filter(eway_bill_number=eway_bill_number).exists():
                res = f'<script>alert("Eway Bill already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            transaction_type = request.POST.get('itemType')
            
            # Extract HSN or SAC number based on transaction type
            if transaction_type == 'Goods':
                hsn_number = request.POST.get('hsnNumber')
                sac_number = None  # Since HSN is applicable only for Goods, set SAC number to None
            else:
                hsn_number = None  # Since SAC is applicable only for Services, set HSN number to None
                sac_number = request.POST.get('sacNumber')
            
            # Check if HSN number or SAC number already exists in the database
            if hsn_number is not None and EwayBill.objects.filter(hsn=hsn_number).exists():
                res = '<script>alert("HSN number already exists!");window.history.back();</script>'
                return HttpResponse(res)
            elif sac_number is not None and EwayBill.objects.filter(sac=sac_number).exists():
                res = '<script>alert("SAC number already exists!");window.history.back();</script>'
                return HttpResponse(res)
            env = EwayBill(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                document_type = request.POST['document_type'],
                transaction_sub_type = request.POST['transaction_sub_type'],
                customer_email = request.POST['customer_email'],
                eway_billing_address = request.POST['additional_bill_address'],
                eway_bill_number = request.POST['EwayBill_no'],
                reference_no = request.POST['reference_number'],
                transaction_type = request.POST['itemType'],
                transportation = request.POST['entry_type'],
                kilometers = request.POST['kilometers'],
                vehicle_number = request.POST['vehicle_number'],
                gst_type = request.POST['customer_gst_type'],
                gstin = request.POST['customer_gstin'],
                place_of_supply = request.POST['place_of_supply'],
                start_date = request.POST['start_date'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                description = request.POST['note'],
                hsn=request.POST.get('hsnNumber') if request.POST['itemType'] == 'Goods' else None,
                sac=request.POST.get('sacNumber') if request.POST['itemType'] == 'Services' else None
            )

            env.save()

            if len(request.FILES) != 0:
                env.document=request.FILES.get('file')
            env.save()

            if  "Saved" in request.POST:
                env.status = "Saved" 
            env.save()

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Eway_bill_item.objects.create(company = com, login_details = com.login_details,EwayBill = env, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            EwayBillHistory.objects.create(
                company = com,
                login_details = log_details,
                EwayBill = env,
                action = 'Created'
            )

            return redirect('eway_bills')
        else:
            return redirect('create_eway_bill')
    else:
       return redirect('/')


def viewewaybill(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        bill = EwayBill.objects.get(id = id)
        invItems = Eway_bill_item.objects.filter(EwayBill = bill)
        recInv = EwayBill.objects.filter(company = cmp)
        hist = EwayBillHistory.objects.filter(EwayBill = bill)
        last_history = EwayBillHistory.objects.filter(EwayBill = bill).last()
        created = EwayBillHistory.objects.get(EwayBill_id = bill,action = 'Created')
        cmts = Eway_Bill_Comments.objects.filter(eway_bill = bill)
        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'invoice':bill, 'invItems': invItems, 'allInvoices':recInv, 'history':hist, 'last_history':last_history, 'created':created,'comments':cmts
        }
        return render(request, 'zohomodules/eway_bills/view_eway_bills.html', context)
    else:
        return redirect('/')

def editewaybill(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)
        trpt = Transportation.objects.filter(company = cmp)
        invoice = EwayBill.objects.get(id = id)
        invItems = Eway_bill_item.objects.filter(EwayBill = invoice)

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'items':itms,
            'units': units,'accounts':accounts, 'invoice':invoice, 'invItems': invItems,'trpt':trpt
        }
        return render(request, 'zohomodules/eway_bills/edit_eway_bills.html', context)
    else:
        return redirect('/')

def getUnitsAjax2(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
            
            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)
            
def updateewaybill(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = EwayBill.objects.get(id = id)
        if request.method == 'POST':
            eway_bill_number = request.POST['EwayBill_no']
            hsn_number = request.POST.get('hsnNumber')
            sac_number = request.POST.get('sacNumber')
            print(hsn_number)

            # Check if the Eway Bill number already exists in the database
            if EwayBill.objects.filter(eway_bill_number=eway_bill_number).exclude(id=id).exists():
                res = f'<script>alert("Eway Bill already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            
            # Check if HSN number or SAC number already exists in the database
            if hsn_number is not None and EwayBill.objects.filter(hsn=hsn_number).exclude(id=id).exists():
                res = '<script>alert("HSN number already exists!");window.history.back();</script>'
                return HttpResponse(res)
            elif sac_number is not None and EwayBill.objects.filter(sac=sac_number).exclude(id=id).exists():
                res = '<script>alert("SAC number already exists!");window.history.back();</script>'
                return HttpResponse(res)
            rec_inv.customer = Customer.objects.get(id = request.POST['customerId'])
            rec_inv.customer_email = request.POST['customer_email']
            rec_inv.document_type = request.POST['document_type']
            rec_inv.transaction_sub_type = request.POST['transaction_sub_type']
            rec_inv.eway_billing_address = request.POST['bill_address']
            rec_inv.eway_bill_number = request.POST['EwayBill_no']
            rec_inv.reference_no = request.POST['reference_number']
            rec_inv.transaction_type = request.POST['itemType']
            rec_inv.transportation = request.POST['entry_type']
            rec_inv.kilometers = request.POST['kilometers']
            rec_inv.vehicle_number = request.POST['vehicle_number']
            rec_inv.gst_type = request.POST['customer_gst_type']
            rec_inv.gstin = request.POST['customer_gstin']
            rec_inv.place_of_supply = request.POST['place_of_supply']
            rec_inv.start_date = request.POST['start_date']
            rec_inv.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            rec_inv.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            rec_inv.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            rec_inv.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            rec_inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            rec_inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            rec_inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            rec_inv.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            rec_inv.description = request.POST['note']
            rec_inv.hsn=request.POST.get('hsnNumber') if request.POST['itemType'] == 'Goods' else None
            rec_inv.sac=request.POST.get('sacNumber') if request.POST['itemType'] == 'Services' else None

            if len(request.FILES) != 0:
                rec_inv.document=request.FILES.get('file')
            rec_inv.save()


            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            inv_items = Eway_bill_item.objects.filter(EwayBill = rec_inv)
            object_ids = [obj.id for obj in inv_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
            for itmId in ids_to_delete:
                invItem = Eway_bill_item.objects.get(id = itmId)
                item = Items.objects.get(id = invItem.item.id)
                item.current_stock += invItem.quantity
                item.save()

            Eway_bill_item.objects.filter(id__in=ids_to_delete).delete()
            
            count = Eway_bill_item.objects.filter(EwayBill = rec_inv).count()

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total,invItem_ids)
                mapped = list(mapped)
                for ele in mapped:
                    if int(len(itemId))>int(count):
                        if ele[8] == 0:
                            itm = Items.objects.get(id = int(ele[0]))
                            Eway_bill_item.objects.create(company = com, login_details = com.login_details, EwayBill = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                            itm.current_stock -= int(ele[3])
                            itm.save()
                        else:
                            itm = Items.objects.get(id = int(ele[0]))
                            inItm = Eway_bill_item.objects.get(id = int(ele[8]))
                            crQty = int(inItm.quantity)
                            
                            Eway_bill_item.objects.filter( id = int(ele[8])).update(EwayBill = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                            if crQty < int(ele[3]):
                                itm.current_stock -=  abs(crQty - int(ele[3]))
                            elif crQty > int(ele[3]):
                                itm.current_stock += abs(crQty - int(ele[3]))
                            itm.save()
                    else:
                        itm = Items.objects.get(id = int(ele[0]))
                        inItm = Eway_bill_item.objects.get(id = int(ele[8]))
                        crQty = int(inItm.quantity)

                        Eway_bill_item.objects.filter( id = int(ele[8])).update(EwayBill = rec_inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))

                        if crQty < int(ele[3]):
                            itm.current_stock -=  abs(crQty - int(ele[3]))
                        elif crQty > int(ele[3]):
                            itm.current_stock += abs(crQty - int(ele[3]))
                        itm.save()
            
            # Save transaction
                    
            EwayBillHistory.objects.create(
                company = com,
                login_details = log_details,
                EwayBill = rec_inv,
                action = 'Edited'
            )

            return redirect(viewewaybill, id)
        else:
            return redirect(editewaybill, id)
    else:
       return redirect('/')


def deleteewaybill(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        recInv = EwayBill.objects.get( id = id)
        for i in Eway_bill_item.objects.filter(EwayBill = recInv):
            item = Items.objects.get(id = i.item.id)
            item.current_stock += i.quantity
            item.save()
        
        Eway_bill_item.objects.filter(EwayBill = recInv).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Eway_bill_Reference.objects.filter(company = com).exists():
            deleted = Eway_bill_Reference.objects.get(company = com)
            if int(recInv.reference_no) > int(deleted.reference_number):
                deleted.reference_number = recInv.reference_no
                deleted.save()
        else:
            Eway_bill_Reference.objects.create(company = com, login_details = com.login_details, reference_number = recInv.reference_no)
        
        recInv.delete()
        return redirect(eway_bills)

def ewaybillpdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = EwayBill.objects.get(id = id)
        itms = Eway_bill_item.objects.filter(EwayBill = inv)
    
        context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
        
        template_path = 'zohomodules/eway_bills/eway_bill_pdf.html'
        fname = 'Eway_bill'+inv.eway_bill_number
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def shareewaybillemail(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        inv = EwayBill.objects.get(id = id)
        itms = Eway_bill_item.objects.filter(EwayBill_id = inv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'EwayBill':inv, 'EwayBillItems':itms,'cmp':com}
                template_path = 'zohomodules/eway_bills/eway_bill_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Eway_Bill_{inv.eway_bill_number}'
                subject = f"Eway_Bill_{inv.eway_bill_number}"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Eway Bill for - Eway Bill-{inv.eway_bill_number}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Eway Bill details has been shared via email successfully..!')
                return redirect(viewewaybill,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(viewewaybill, id)


def attachewaybillfile(request, id):
    if 'login_id' in request.session:
        inv = EwayBill.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            inv.document = request.FILES.get('file')
            inv.save()

        return redirect(viewewaybill, id)
    else:
        return redirect('/')


def addewaybillcomment(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        rec_inv = EwayBill.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Eway_Bill_Comments.objects.create(company = com, eway_bill = rec_inv, comments = cmt)
            return redirect(viewewaybill, id)
        return redirect(viewewaybill, id)
    return redirect('/')


def deleteewaybillcomment(request,id):
    if 'login_id' in request.session:
        cmt = Eway_Bill_Comments.objects.get(id = id)
        recInvId = cmt.eway_bill.id
        cmt.delete()
        return redirect(viewewaybill, recInvId)
    else:
        return redirect('/')

def importewaybillexell(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["recurring_invoice"]
            except:
                print('sheet not found')
                messages.error(request,'`recurring_invoice` sheet not found.! Please check.')
                return redirect(recurringInvoice)

            try:
                ws = wb["items"]
            except:
                print('sheet not found')
                messages.error(request,'`items` sheet not found.! Please check.')
                return redirect(recurringInvoice)
            
            ws = wb["recurring_invoice"]
            rec_inv_columns = ['SLNO','CUSTOMER','DATE','PLACE OF SUPPLY','Eway Bill NO','TERMS','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL','ADVANCE']
            rec_inv_sheet = [cell.value for cell in ws[1]]
            if rec_inv_sheet != rec_inv_columns:
                print('invalid sheet')
                messages.error(request,'`eway_bill` sheet column names or order is not in the required formate.! Please check.')
                return redirect(eway_bills)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,date,place_of_supply,  eway_bill_no, terms,  description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                if slno is None  or customer is None  or date is None or place_of_supply is None  or eway_bill_no is None  or  subtotal is None or taxamount is None or grandtotal is None:
                    print('eway bill == invalid data')
                    messages.error(request,'`eway bill` sheet entries missing required fields.! Please check.')
                    return redirect(eway_bills)
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns = ['RI NO','PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL']
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`items` sheet column names or order is not in the required formate.! Please check.')
                return redirect(eway_bills)

            for row in ws.iter_rows(min_row=2, values_only=True):
                ri_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                if ri_no is None or name is None or quantity is None or tax_percentage is None or total is None:
                    print('items == invalid data')
                    messages.error(request,'`items` sheet entries missing required fields.! Please check.')
                    return redirect(eway_bills)
            
            # getting data from rec_invoice sheet and create rec_invoice.
            incorrect_data = []
            existing_pattern = []
            ws = wb['recurring_invoice']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,startdate,place_of_supply,eway_bill_no, terms,  description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal, advance = row
                recInvNo = slno
                if slno is None:
                    continue
                # Fetching last rec_inv and assigning upcoming rec_inv no as current + 1
                # Also check for if any rec_inv is deleted and rec_inv no is continuos w r t the deleted rec_inv
                latest_inv = EwayBill.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

                if Eway_bill_Reference.objects.filter(company = com).exists():
                    deleted = Eway_bill_Reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                
                cust = customer.split(' ')
            
                if len(cust) > 2:
                    cust[1] = cust[1] + ' ' + ' '.join(cust[2:])
                    cust = cust[:2]
                    fName = cust[0]
                    lName = cust[1]
                else:
                    fName = cust[0]
                    lName = cust[1]
                print(cust,fName,lName)

                if lName == "":  
                    if not Customer.objects.filter(company = com, first_name = fName).exists():
                        print('No Customer1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if fName != "" and lName != "":  
                    if not Customer.objects.filter(company = com, first_name = fName, last_name = lName).exists():
                        print('No Customer2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName, last_name = lName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if startdate is None:
                    startdate = dateToday
                else:
                    startdate = datetime.strptime(startdate, '%Y-%m-%d').date()

                PatternStr = []
                for word in eway_bill_no:
                    if word.isdigit():
                        pass
                    else:
                        PatternStr.append(word)
                
                pattern = ''
                for j in PatternStr:
                    pattern += j

                pattern_exists = checkRecInvNumberPattern(pattern)

                if pattern !="" and pattern_exists:
                    existing_pattern.append(slno)
                    continue

                while EwayBill.objects.filter(company = com, eway_bill_no__iexact = eway_bill_no).exists():
                    eway_bill_no = getNextRINumber(eway_bill_no)

                
                

                

                recInv = EwayBill(
                    company = com,
                    login_details = com.login_details,
                    customer = None if c is None else c,
                    customer_email = email,
                    billing_address = adrs,
                    gst_type = gstType,
                    gstin = gstIn,
                    place_of_supply = place_of_supply,
                
                    reference_no = new_number,
                    eway_bill_no = eway_bill_no,
                    
                    start_date = startdate,
                    subtotal = 0.0 if subtotal == "" else float(subtotal),
                    igst = 0.0 if igst == "" else float(igst),
                    cgst = 0.0 if cgst == "" else float(cgst),
                    sgst = 0.0 if sgst == "" else float(sgst),
                    tax_amount = 0.0 if taxamount == "" else float(taxamount),
                    adjustment = 0.0 if adjustment == "" else float(adjustment),
                    shipping_charge = 0.0 if shipping == "" else float(shipping),
                    grandtotal = 0.0 if grandtotal == "" else float(grandtotal),
                    
                    
                    description = description,
                    status = "Draft"
                )
                recInv.save()

                # Transaction history
                history = EwayBillHistory(
                    company = com,
                    login_details = log_details,
                    EwayBill = recInv,
                    action = 'Created'
                )
                history.save()

                # Items for the estimate
                ws = wb['items']
                for row in ws.iter_rows(min_row=2, values_only=True):
                    rec_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                    if int(rec_no) == int(recInvNo):
                        print(row)
                        if discount is None:
                            discount=0
                        if price is None:
                            price=0
                        if quantity is None:
                            quantity=0
                        if not Items.objects.filter(company = com, item_name = name).exists():
                            print('No Item')
                            incorrect_data.append(rec_no)
                            continue
                        try:
                            itm = Items.objects.filter(company = com, item_name = name).first()
                        except:
                            pass

                        Eway_bill_item.objects.create(company = com, login_details = com.login_details, eway_bill_no = recInv, item = itm, hsn = hsn, quantity = quantity, price = price, tax_rate = tax_percentage, discount = discount, total = total)
                        itm.current_stock -= int(quantity)
                        itm.save()

            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect(eway_bills)
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to Eway No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect(eway_bills)
        else:
            return redirect(eway_bills)
    else:
        return redirect('/')

def check_eway_bill(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
    if request.method == 'POST':
        bill_no = request.POST.get('bill_no', None)
        print(bill_no)
        if bill_no:
            exists = EwayBill.objects.filter(eway_bill_number=bill_no).exists()
            return JsonResponse({'exists': exists})
    return JsonResponse({'exists': False})
    
def add_uni(request):                                                                
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Transportation.objects.filter(transportation = unit_name, company = c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Transportation(transportation=unit_name,company = c)  
                unit.save()  
                return JsonResponse({"message": "success"})
        return JsonResponse({"message": "success"})

    elif log_user.user_type == 'Staff':
        if request.method == 'POST':
            staff = LoginDetails.objects.get(id=login_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c = sf.company
            unit_name = request.POST['units']
            
            if Transportation.objects.filter(transportation=unit_name,company = c).exists():
                return JsonResponse({"message": "error"})
            elif unit_name == 'Bus' or unit_name == 'Train' or unit_name == 'Car':
                return JsonResponse({"message": "error"})
            else:
                unit = Transportation(transportation=unit_name,company = c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    return JsonResponse({"message": "success"})
    
#End
#-------------Arya E.R--------journal report-----#
def Fin_journel_report(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   

        currentDate = datetime.today()

        reportData = []
        totaldebit = 0
        totalcredit=0

        Jrn = Journal.objects.filter(company=comp_details).values('id')
        JrnAcc = JournalEntry.objects.filter(journal__in=Jrn)
        
       
        if JrnAcc:
            for s in JrnAcc:
                date = s.journal.date 

                accname = s.account
                debit = s.journal.total_debit
                credit = s.journal.total_credit

                ref = s.journal.reference_no
                jounal =s.journal.journal_no
                st=s.journal.status
                totaldebit += float(s.journal.total_debit)
                totalcredit += float(s.journal.total_credit)

                
                    

                details = {
                    'date': date,
                    'name': accname,
                    'sales_no':ref,
                    'jounal':jounal,
                    'debit':debit,
                    'credit': credit,
                    'status': st,

                    
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules,'reportData':reportData, 'totaldebit':totaldebit,'totalcredit':totalcredit,
            'startDate':None, 'endDate':None,'details':dash_details,'log_details':log_details,'Jrn':Jrn,'JrnAcc':JrnAcc,
        }
        return render(request,'zohomodules/Reports/Fin_journal_reports.html', context)
    else:
        return redirect('/')

def Fin_journalDetailsCustomized(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
   
    
        

        if request.method == 'POST':
            trans = request.POST['transactions']
            startDate = request.POST['from_date']
            endDate = request.POST['to_date']
            # status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            currentDate = datetime.today()

            reportData = []
            totaldebit = 0
            totalcredit=0

            Jrn = Journal.objects.filter(company=comp_details).values('id')
            JrnAcc = JournalEntry.objects.filter(journal__in=Jrn)

           
        
            
            if startDate or endDate :
                JrnAcc = JrnAcc.filter(journal__date__range=[startDate, endDate])

            
            if trans == 'draft':
                JrnAcc = JrnAcc.filter(journal__status = 'draft')
                
            if trans == 'save':
                JrnAcc = JrnAcc.filter(journal__status = 'save')

            

           
              

            for s in JrnAcc:
                    date = s.journal.date 

                    accname = s.account
                    debit = s.journal.total_debit
                    credit = s.journal.total_credit

                    ref = s.journal.reference_no
                    jounal =s.journal.journal_no
                    st=s.journal.status
                    totaldebit += float(s.journal.total_debit)
                    totalcredit += float(s.journal.total_credit)

                
                    

                    details = {
                        'date': date,
                        'name': accname,
                        'sales_no':ref,
                        'jounal':jounal,
                        'debit':debit,
                        'credit': credit,
                        'status': st,

                        
                    }
                    reportData.append(details)


            context = {
            'allmodules':allmodules, 'totaldebit':totaldebit,'totalcredit':totalcredit,'transaction':trans,
            'startDate':startDate, 'endDate':endDate,'details':dash_details,'log_details':log_details,'Jrn':Jrn,'JrnAcc':JrnAcc,
            }
            return render(request,'zohomodules/Reports/Fin_journal_reports.html', context)
        else:
            return redirect('Fin_journel_report')
    else:
        return redirect('/')


def Fin_share_journalDetailsReportToEmail(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')  
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                trans = request.POST['transactions']
                startDate = request.POST['start']
                endDate = request.POST['end']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                currentDate = datetime.today()

                reportData = []
                totaldebit = 0
                totalcredit=0

                
                Jrn = Journal.objects.filter(company=comp_details).values('id')
                JrnAcc = JournalEntry.objects.filter(journal__in=Jrn)

               

                if startDate or endDate :
                    JrnAcc = JrnAcc.filter(journal__date__range=[startDate, endDate])

                
                if trans == 'draft':
                    JrnAcc = JrnAcc.filter(journal__status = 'draft')
                    
                if trans == 'save':
                    JrnAcc = JrnAcc.filter(journal__status = 'save')
              

                for s in JrnAcc:
                        date = s.journal.date 

                        accname = s.account
                        debit = s.journal.total_debit
                        credit = s.journal.total_credit

                        ref = s.journal.reference_no
                        jounal =s.journal.journal_no
                        st=s.journal.status
                        totaldebit += float(s.journal.total_debit)
                        totalcredit += float(s.journal.total_credit)                    

                        details = {
                            'date': date,
                            'name': accname,
                            'sales_no':ref,
                            'jounal':jounal,
                            'debit':debit,
                            'credit': credit,
                            'status': st,

                            
                        }
                        reportData.append(details)

                context = {'reportData': reportData,'startDate': startDate, 'endDate': endDate,'totaldebit':totaldebit,'totalcredit':totalcredit,'allmodules':allmodules,'details':dash_details,'log_details':log_details,'Jrn':Jrn,'JrnAcc':JrnAcc,'transaction':trans,}
                template_path = 'zohomodules/Reports/Fin_journal_reports_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Journal Report'
                subject = f"Journal Report"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Journal Report. \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Journal Report details has been shared via email successfully..!')
                return redirect(Fin_journel_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_journel_report)
    else:
        return redirect('/')  

#End
# ----ashikh vu----cash in hand--( start )---------------------------
def cash_in_hand_listout(request):
    if 'login_id' in request.session:
        # if log_details.user_type == 'Company':
        #     cmp = CompanyDetails.objects.get(login_details = log_details)
        #     dash_details = CompanyDetails.objects.get(login_details=log_details)
        # else:
        #     cmp = StaffDetails.objects.get(login_details = log_details).company
        #     dash_details = StaffDetails.objects.get(login_details=log_details)
        # allmodules= ZohoModules.objects.get(company = cmp)

        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            
        item=Items.objects.filter(company=dash_details)

        cash_in_hand = list(CashInHand.objects.filter(company=dash_details).annotate(
            object_id=F('id'),object_date=F('date'),object_type=F('adjustment'),object_name=Value("",output_field=CharField()),object_amount=F('amount'),object_action=Value(True,output_field=BooleanField()))
        )
        inv = list(invoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('date'),object_type=Value('Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
        )
        so = list(SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('sales_order_date'),object_type=Value('Sales Order',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
        )
        recinv = list(RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('start_date'),object_type=Value('Recurring Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
        )
        rinv = list(retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash").exclude(retainer__advance=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('retainer__created_at'),object_type=Value('Retainer Invoice',output_field=CharField()),object_name=F('retainer__customer_name__first_name'),object_amount=F('retainer__advance'))
        )
        cn = list(Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('credit_note_date'),object_type=Value('Credit Note',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
        )
        pay_recieved=list(Payment_details.objects.filter(company=dash_details,payment_recieved__status__iexact="Saved",payment_recieved__payment_method__iexact='Cash').exclude(payment=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('Date'),object_type=Value('Payment Recieved',output_field=CharField()),object_name=F('payment_recieved__customer__first_name'),object_amount=F('payment'))
        )
        bill = list(Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash').exclude(Advance_amount_Paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('Bill_Date'),object_type=Value('Purchase Bill',output_field=CharField()),object_name=F('Vendor__first_name'),object_amount=F('Advance_amount_Paid'))
        )
        recbill = list(Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash').exclude(paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('rec_bill_date'),object_type=Value('Recurring Bill',output_field=CharField()),object_name=F('vendor_details__first_name'),object_amount=F('paid'))
        )
        vend_credit = list(debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('debitnote_date'),object_type=Value('Vendor Credit / Debit Note',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advance_paid'))
        )
        purch_order = list(PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('purchase_order_date'),object_type=Value('Purchase Order',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advanced_paid'))
        )
        expense = list(Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('date'),object_type=Value('Expense',output_field=CharField()),object_name=F('vendor_name'),object_amount=F('amount'))
        )
        rec_expense = list(Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('exp_date'),object_type=Value('Recurring Expense',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('amount'))
        )
        pay_made=list(payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(Q(total=F('balance')) | Q(total=None) | Q(balance=None)).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Payment Made',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=(F('total')-F('balance')))
        )
        emp_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Employee Loan',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('principal_amount'))
        )
        emp_repay_or_emi = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID").annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('EMI Paid',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('interest_amonut')+F('total_payment'))
        )
        emp_repay_new_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Additional Lone',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('total_payment'))
        )
        loan_acc = list(loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('loan_date'),object_type=Value('Loan Account',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('loan_amount'))
        )
        loan_acc_additional_loan = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan").annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account Additional Loan',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
        )
        loan_acc_emi = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account EMI paid',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
        )
        all_query_set = cash_in_hand+inv+so+recinv+rinv+cn+pay_recieved+bill+recbill+vend_credit+purch_order+expense+rec_expense+pay_made+emp_loan+emp_repay_or_emi+emp_repay_new_loan+loan_acc+loan_acc_additional_loan+loan_acc_emi
        

        all = []

        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')
        if request.method == "POST":
            print('inside POST')
            if request.POST.get('start_date') and request.POST.get('end_date'):
                start_date = datetime.strptime(request.POST.get('start_date'),'%Y-%m-%d') 
                end_date = datetime.strptime(request.POST.get('end_date'),'%Y-%m-%d') 
                # print(start_date)
                # print(end_date)
                # print('*')
                for i in all_query_set:
                    # print(str(i.object_date)[:10])
                    d = str(i.object_date)[:10]
                    # print(type(d))
                    my_date = datetime.strptime(d,'%Y-%m-%d')
                    # print(my_date)
                    if my_date >=start_date and my_date <= end_date:
                        all.append(i)
                print('\n\nsuccess')
            else:
                print('failed inside')
        else:
            print('failed')
            all = all_query_set
            
        
        total_balance = 0
        for i in all:
            if i.object_type.upper() == "REDUCE CASH":
                total_balance -= float(i.object_amount)
            elif i.object_type.upper() == "ADD CASH":
                total_balance += float(i.object_amount)
            elif i.object_is.upper()== "ADD":
                total_balance += float(i.object_amount)
            elif i.object_is.upper()== "REDUCE":
                total_balance -= float(i.object_amount)
            print(total_balance)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'item':item,
            'all_query_set': all,
            'total_balance':total_balance,
            'start_date':start_date,
            'end_date':end_date
        }
        return render(request,'zohomodules/cash_in_hand/cash_in_hand_listout.html',context)
    else:
        return redirect('/')


def cash_in_hand_add(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        context = {'allmodules':allmodules}
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_add.html",context)
    else:
        return redirect('/')


def cash_in_hand_adjust_cash(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            staff = None
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        if request.method == "POST":
            if request.POST.get('adjust') == 'reduce':
                adj = "Reduce Cash"
            else:
                adj = "Add Cash"
            amt = request.POST.get('amount')
            date = request.POST.get('date')
            desc = request.POST.get('desc')

            cih=CashInHand(company=dash_details,adjustment =adj,amount =amt,date =date,description =desc)
            cih.save()

            CashInHandHistory.objects.create(user=log_details,company=dash_details,cih=cih,action="Created")

            context = {'allmodules':allmodules}
            return redirect('cash_in_hand_listout')
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_add.html",context)
    else:
        return redirect('/')

def cash_in_hand_adjust_cash_edit(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            staff = None
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        if request.method == "POST":
            cih = CashInHand.objects.get(id=pk)

            if request.POST.get('adjust') == 'reduce':
                adj = "Reduce Cash"
            else:
                adj = "Add Cash"
            amt = request.POST.get('amount')
            date = request.POST.get('date')
            desc = request.POST.get('desc')

            cih.adjustment = adj
            cih.amount = amt
            cih.date = date
            cih.description = desc
            cih.save()

            CashInHandHistory.objects.create(user=log_details,company=dash_details,cih=cih,action="Edited")

            context = {'allmodules':allmodules}
            return redirect('cash_in_hand_listout')
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_add.html",context)
    else:
        return redirect('/')

def cash_in_hand_statement(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
        item=Items.objects.filter(company=dash_details)

        cash_in_hand = list(CashInHand.objects.filter(company=dash_details).annotate(
            object_id=F('id'),object_date=F('date'),object_type=F('adjustment'),object_name=Value("",output_field=CharField()),object_amount=F('amount'),object_action=Value(True,output_field=BooleanField()))
        )
        inv = list(invoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('date'),object_type=Value('Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
        )
        so = list(SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('sales_order_date'),object_type=Value('Sales Order',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
        )
        recinv = list(RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('start_date'),object_type=Value('Recurring Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
        )
        rinv = list(retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash").exclude(retainer__advance=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('retainer__created_at'),object_type=Value('Retainer Invoice',output_field=CharField()),object_name=F('retainer__customer_name__first_name'),object_amount=F('retainer__advance'))
        )
        cn = list(Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('credit_note_date'),object_type=Value('Credit Note',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
        )
        pay_recieved=list(Payment_details.objects.filter(company=dash_details,payment_recieved__status__iexact="Saved",payment_recieved__payment_method__iexact='Cash').exclude(payment=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('Date'),object_type=Value('Payment Recieved',output_field=CharField()),object_name=F('payment_recieved__customer__first_name'),object_amount=F('payment'))
        )
        bill = list(Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash').exclude(Advance_amount_Paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('Bill_Date'),object_type=Value('Purchase Bill',output_field=CharField()),object_name=F('Vendor__first_name'),object_amount=F('Advance_amount_Paid'))
        )
        recbill = list(Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash').exclude(paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('rec_bill_date'),object_type=Value('Recurring Bill',output_field=CharField()),object_name=F('vendor_details__first_name'),object_amount=F('paid'))
        )
        vend_credit = list(debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('debitnote_date'),object_type=Value('Vendor Credit / Debit Note',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advance_paid'))
        )
        purch_order = list(PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('purchase_order_date'),object_type=Value('Purchase Order',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advanced_paid'))
        )
        expense = list(Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('date'),object_type=Value('Expense',output_field=CharField()),object_name=F('vendor_name'),object_amount=F('amount'))
        )
        rec_expense = list(Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('exp_date'),object_type=Value('Recurring Expense',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('amount'))
        )
        pay_made=list(payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(Q(total=F('balance')) | Q(total=None) | Q(balance=None)).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Payment Made',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=(F('total')-F('balance')))
        )
        emp_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Employee Loan',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('principal_amount'))
        )
        emp_repay_or_emi = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID").annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('EMI Paid',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('interest_amonut')+F('total_payment'))
        )
        emp_repay_new_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Additional Lone',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('total_payment'))
        )
        loan_acc = list(loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('loan_date'),object_type=Value('Loan Account',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('loan_amount'))
        )
        loan_acc_additional_loan = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan").annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account Additional Loan',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
        )
        loan_acc_emi = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account EMI paid',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
        )
        all_query_set = cash_in_hand+inv+so+recinv+rinv+cn+pay_recieved+bill+recbill+vend_credit+purch_order+expense+rec_expense+pay_made+emp_loan+emp_repay_or_emi+emp_repay_new_loan+loan_acc+loan_acc_additional_loan+loan_acc_emi
        
        all = []

        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')
        if request.method == "POST":
            print('inside POST')
            if request.POST.get('start_date') and request.POST.get('end_date'):
                start_date = datetime.strptime(request.POST.get('start_date'),'%Y-%m-%d') 
                end_date = datetime.strptime(request.POST.get('end_date'),'%Y-%m-%d') 
                # print(start_date)
                # print(end_date)
                # print('*')
                for i in all_query_set:
                    # print(str(i.object_date)[:10])
                    d = str(i.object_date)[:10]
                    # print(type(d))
                    my_date = datetime.strptime(d,'%Y-%m-%d') 
                    # print(my_date)
                    if my_date >=start_date and my_date <= end_date:
                        all.append(i)
                print('\n\nsuccess')
            else:
                print('failed inside')
        else:
            print('failed')
            all = all_query_set
            
        
        total_balance = 0
        for i in all:
            if i.object_type.upper() == "REDUCE CASH":
                total_balance -= float(i.object_amount)
            elif i.object_type.upper() == "ADD CASH":
                total_balance += float(i.object_amount)
            elif i.object_is.upper()== "ADD":
                total_balance += float(i.object_amount)
            elif i.object_is.upper()== "REDUCE":
                total_balance -= float(i.object_amount)
            print(total_balance)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'item':item,
            'all_query_set': all,
            'total_balance':total_balance,
            'start_date':start_date,
            'end_date':end_date
        }
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_statement.html",context)
    else:
        return redirect('/')

def share_cash_in_hand_statement_via_mail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        
        item=Items.objects.filter(company=dash_details)

        cash_in_hand = list(CashInHand.objects.filter(company=dash_details).annotate(
            object_id=F('id'),object_date=F('date'),object_type=F('adjustment'),object_name=Value("",output_field=CharField()),object_amount=F('amount'),object_action=Value(True,output_field=BooleanField()))
        )
        inv = list(invoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('date'),object_type=Value('Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
        )
        so = list(SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('sales_order_date'),object_type=Value('Sales Order',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
        )
        recinv = list(RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('start_date'),object_type=Value('Recurring Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
        )
        rinv = list(retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash").exclude(retainer__advance=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('retainer__created_at'),object_type=Value('Retainer Invoice',output_field=CharField()),object_name=F('retainer__customer_name__first_name'),object_amount=F('retainer__advance'))
        )
        cn = list(Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('credit_note_date'),object_type=Value('Credit Note',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
        )
        pay_recieved=list(Payment_details.objects.filter(company=dash_details,payment_recieved__status__iexact="Saved",payment_recieved__payment_method__iexact='Cash').exclude(payment=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('Date'),object_type=Value('Payment Recieved',output_field=CharField()),object_name=F('payment_recieved__customer__first_name'),object_amount=F('payment'))
        )
        bill = list(Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash').exclude(Advance_amount_Paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('Bill_Date'),object_type=Value('Purchase Bill',output_field=CharField()),object_name=F('Vendor__first_name'),object_amount=F('Advance_amount_Paid'))
        )
        recbill = list(Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash').exclude(paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('rec_bill_date'),object_type=Value('Recurring Bill',output_field=CharField()),object_name=F('vendor_details__first_name'),object_amount=F('paid'))
        )
        vend_credit = list(debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('debitnote_date'),object_type=Value('Vendor Credit / Debit Note',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advance_paid'))
        )
        purch_order = list(PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('purchase_order_date'),object_type=Value('Purchase Order',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advanced_paid'))
        )
        expense = list(Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('date'),object_type=Value('Expense',output_field=CharField()),object_name=F('vendor_name'),object_amount=F('amount'))
        )
        rec_expense = list(Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('exp_date'),object_type=Value('Recurring Expense',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('amount'))
        )
        pay_made=list(payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(Q(total=F('balance')) | Q(total=None) | Q(balance=None)).annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Payment Made',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=(F('total')-F('balance')))
        )
        emp_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Employee Loan',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('principal_amount'))
        )
        emp_repay_or_emi = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID").annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('EMI Paid',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('interest_amonut')+F('total_payment'))
        )
        emp_repay_new_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Additional Lone',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('total_payment'))
        )
        loan_acc = list(loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash').annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('loan_date'),object_type=Value('Loan Account',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('loan_amount'))
        )
        loan_acc_additional_loan = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan").annotate(
            object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account Additional Loan',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
        )
        loan_acc_emi = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid").annotate(
            object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account EMI paid',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
        )
        all_query_set = cash_in_hand+inv+so+recinv+rinv+cn+pay_recieved+bill+recbill+vend_credit+purch_order+expense+rec_expense+pay_made+emp_loan+emp_repay_or_emi+emp_repay_new_loan+loan_acc+loan_acc_additional_loan+loan_acc_emi

        total_balance = 0
        for i in all_query_set:
            if i.object_type.upper() == "REDUCE CASH":
                total_balance -= float(i.object_amount)
            elif i.object_type.upper() == "ADD CASH":
                total_balance += float(i.object_amount)
            elif i.object_is.upper()== "ADD":
                total_balance += float(i.object_amount)
            elif i.object_is.upper()== "REDUCE":
                total_balance -= float(i.object_amount)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'item':item,
            'all_query_set': all_query_set,
            'total_balance':total_balance,
        }
        # if request.method == 'POST':
        #     try:
        #         emails_string = request.POST['email_ids']

        #         # Split the string by commas and remove any leading or trailing whitespace
        #         emails_list = [email.strip() for email in emails_string.split(',')]
        #         email_message = request.POST['email_message']
        #         # print(emails_list)
        
        #         template_path = 'zohomodules/cash_in_hand/cash_in_hand_statement_pdf.html'
        #         template = get_template(template_path)

        #         html  = template.render(context)
        #         result = BytesIO()
        #         pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
        #         pdf = result.getvalue()
        #         filename = f'Cash_In_Hand'
        #         subject = f"Cash_In_Hand"
        #         email = EmailMessage(subject, f"Hi,\nPlease find the attached Statement for - Cash_in_hand. \n{email_message}\n\n--\nRegards,\n{dash_details.company_name}\n{dash_details.address}\n{dash_details.state} - {dash_details.country}\n{dash_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        #         email.attach(filename, pdf, "application/pdf")
        #         email.send(fail_silently=False)
        #         return JsonResponse("<script>alert('Statement has been shared via email successfully..!')</script>")
        #     except Exception as e:
        #         print(e)
        #         messages.error(request, f'{e}')
        #         return JsonResponse("<script>alert('Statement has been shared via email Failed..!')</script>")
        return redirect('cash_in_hand_statement')
    else:
        return redirect('/')


def cash_in_hand_adjust_cash_edit_page(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        cih = CashInHand.objects.get(id=pk)
        context = {'allmodules':allmodules,'cih':cih}
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_adjust_cash_edit_page.html",context)
    else:
        return redirect('/')


def cash_in_hand_delete(request,pk):
    cih = CashInHand.objects.get(id=pk)
    cih.delete()
    return redirect('cash_in_hand_listout')


def get_cash_history(request,pk):
    history = CashInHandHistory.objects.filter(cih=pk)
    context={
        'history':history
    }
    print('already in ')
    return TemplateResponse(request,'zohomodules/cash_in_hand/get_cash_history.html',context) 

def cash_in_hand_graph(request,period):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')


    item=Items.objects.filter(company=dash_details)

    cash_in_hand = list(CashInHand.objects.filter(company=dash_details).annotate(
        object_id=F('id'),object_date=F('date'),object_type=F('adjustment'),object_name=Value("",output_field=CharField()),object_amount=F('amount'),object_action=Value(True,output_field=BooleanField()))
    )
    inv = list(invoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('date'),object_type=Value('Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
    )
    so = list(SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('sales_order_date'),object_type=Value('Sales Order',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advanced_paid'))
    )
    recinv = list(RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('start_date'),object_type=Value('Recurring Invoice',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
    )
    rinv = list(retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash").exclude(retainer__advance=0).annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('retainer__created_at'),object_type=Value('Retainer Invoice',output_field=CharField()),object_name=F('retainer__customer_name__first_name'),object_amount=F('retainer__advance'))
    )
    cn = list(Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('credit_note_date'),object_type=Value('Credit Note',output_field=CharField()),object_name=F('customer__first_name'),object_amount=F('advance_paid'))
    )
    pay_recieved=list(Payment_details.objects.filter(company=dash_details,payment_recieved__status__iexact="Saved",payment_recieved__payment_method__iexact='Cash').exclude(payment=0).annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('Date'),object_type=Value('Payment Recieved',output_field=CharField()),object_name=F('payment_recieved__customer__first_name'),object_amount=F('payment'))
    )
    bill = list(Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash').exclude(Advance_amount_Paid=0).annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('Bill_Date'),object_type=Value('Purchase Bill',output_field=CharField()),object_name=F('Vendor__first_name'),object_amount=F('Advance_amount_Paid'))
    )
    recbill = list(Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash').exclude(paid=0).annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('rec_bill_date'),object_type=Value('Recurring Bill',output_field=CharField()),object_name=F('vendor_details__first_name'),object_amount=F('paid'))
    )
    vend_credit = list(debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0).annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('debitnote_date'),object_type=Value('Vendor Credit / Debit Note',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advance_paid'))
    )
    purch_order = list(PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash').exclude(advanced_paid=0).annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('purchase_order_date'),object_type=Value('Purchase Order',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('advanced_paid'))
    )
    expense = list(Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash').annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('date'),object_type=Value('Expense',output_field=CharField()),object_name=F('vendor_name'),object_amount=F('amount'))
    )
    rec_expense = list(Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash').annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('exp_date'),object_type=Value('Recurring Expense',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=F('amount'))
    )
    pay_made=list(payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(Q(total=F('balance')) | Q(total=None) | Q(balance=None)).annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Payment Made',output_field=CharField()),object_name=F('vendor__first_name'),object_amount=(F('total')-F('balance')))
    )
    emp_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED").annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Employee Loan',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('principal_amount'))
    )
    emp_repay_or_emi = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID").annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('EMI Paid',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('interest_amonut')+F('total_payment'))
    )
    emp_repay_new_loan = list(EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED").annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Additional Lone',output_field=CharField()),object_name=F('employee__first_name'),object_amount=F('total_payment'))
    )
    loan_acc = list(loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash').annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('loan_date'),object_type=Value('Loan Account',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('loan_amount'))
    )
    loan_acc_additional_loan = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan").annotate(
        object_id=F('id'),object_is=Value('ADD',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account Additional Loan',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
    )
    loan_acc_emi = list(LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid").annotate(
        object_id=F('id'),object_is=Value('REDUCE',output_field=CharField()),object_date=F('payment_date'),object_type=Value('Loan Account EMI paid',output_field=CharField()),object_name=F('company__company_name'),object_amount=F('total_amount'))
    )
    all_query_set = cash_in_hand+inv+so+recinv+rinv+cn+pay_recieved+bill+recbill+vend_credit+purch_order+expense+rec_expense+pay_made+emp_loan+emp_repay_or_emi+emp_repay_new_loan+loan_acc+loan_acc_additional_loan+loan_acc_emi

    total_balance = 0
    cashin = 0
    cashout = 0

    label = []
    data1 = []
    data2 = []

    current_year = datetime.today().year
    current_month = datetime.today().month

    period_MY = ''
    if request.POST.get('period_M_or_Y'):
        period_MY = request.POST.get('period_M_or_Y')
        print(f'yes  {period_MY}')
    else:
        print('no')
    # print(f"{str(date.today().year)[0:4]}")
    # for month in range(1, current_month + 1):
    if period_MY == 'year':
        print('inside first for loop')
        for yr in range((date.today().year)-9, (date.today().year)+1):
            label.append(yr)
            cashin = 0
            cashout = 0
            for i in all_query_set:
                d = str(i.object_date)
                year_digit = d[0:4]
                print(yr,year_digit)
                # print(type(d),d,type(year_digit),year_digit)
                if str(yr) == year_digit and i.object_type.upper() == "REDUCE CASH":
                    print('coorect1')
                    total_balance -= float(i.object_amount)
                    cashout +=  float(i.object_amount)
                elif str(yr) == year_digit and i.object_type.upper() == "ADD CASH":
                    print('coorect2')
                    total_balance += float(i.object_amount)
                    cashin +=  float(i.object_amount)
                elif str(yr) == year_digit and i.object_is.upper()== "ADD":
                    print('coorect3')
                    total_balance += float(i.object_amount)
                    cashin +=  float(i.object_amount)
                elif str(yr) == year_digit and i.object_is.upper()== "REDUCE":
                    print('coorect4')
                    total_balance -= float(i.object_amount)
                    cashout +=  float(i.object_amount)
                print(cashin,cashout)
                # print(yr,year_digit)
            data1.append(float(cashin))
            data2.append(float(cashout))
        print(data1,data2)
        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'item':item,
            'cashIn':data1,
            'cashOut':data2,
            'label':label,
            'all_query_set': all_query_set,
            'total_balance':total_balance,
            'period':period_MY
        }
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_graph.html",context)
    else:
        print('inside second for loop')
        for month in range(1, 13):
            label.append(datetime(current_year, month, 1).strftime("%B"))
            cashin = 0
            cashout = 0
            for i in all_query_set:
                d = str(i.object_date)
                month_digit = int(d[5:7].lstrip('0'))
                if month == month_digit and i.object_type.upper() == "REDUCE CASH":
                    total_balance -= float(i.object_amount)
                    cashout +=  float(i.object_amount)
                elif month == month_digit and i.object_type.upper() == "ADD CASH":
                    total_balance += float(i.object_amount)
                    cashin +=  float(i.object_amount)
                elif month == month_digit and i.object_is.upper()== "ADD":
                    total_balance += float(i.object_amount)
                    cashin +=  float(i.object_amount)
                elif month == month_digit and i.object_is.upper()== "REDUCE":
                    total_balance -= float(i.object_amount)
                    cashout +=  float(i.object_amount)
                # print(month,month_digit)
            data1.append(float(cashin))
            data2.append(float(cashout))

        print(data2)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'item':item,
            'cashIn':data1,
            'cashOut':data2,
            'label':label,
            'all_query_set': all_query_set,
            'total_balance':total_balance,
            'period':"month"
        }
        return render(request,"zohomodules/cash_in_hand/cash_in_hand_graph.html",context)
# ---------------------------------ashikh vu------( end )------------------------------
# --------------------Cheque-----------Antony Tom------------------------------------

def statement(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            comp=dash_details
            
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            comp=dash_details.company

        allmodules  = ZohoModules.objects.get(status='New',company=comp)
        bank_objects = Banking.objects.filter(company=comp)

        inv = invoice.objects.filter(company = comp, payment_method__iexact = 'cheque', advanced_paid__gt = 0)
        crdNt = Credit_Note.objects.filter(company = comp, payment_method__iexact = 'cheque', advance_paid__gt = 0)
        recInv = RecurringInvoice.objects.filter(company = comp, payment_method__iexact = 'cheque', advance_paid__gt = 0)
        sordr= SaleOrder.objects.filter(company = comp, payment_method__iexact='cheque', advanced_paid__gt = 0)
        rtInv = retainer_payment_details.objects.filter(retainer__customer_name__company = comp,payment_opt__iexact='cheque',retainer__advance__gt=0)
        bill= Bill.objects.filter(Company = comp, Payment_Method__iexact='cheque', Advance_amount_Paid__gt = 0)
        rcrbl= Recurring_bills.objects.filter(company = comp, payment_type__iexact='cheque', paid__gt = 0)
        pordr= PurchaseOrder.objects.filter(company = comp, payment_method__iexact='cheque', advanced_paid__gt = 0)
        dbtnt= debitnote.objects.filter(company = comp, payment_method__iexact='cheque', advance_paid__gt = 0)

        pmtrec= Payment_details.objects.filter(company = comp, payment_recieved__payment_method__iexact='cheque', payment__gt = 0)
        expen= Expense.objects.filter(company = comp, payment_type__iexact='cheque')
        RECexpen= Recurring_Expense.objects.filter(company = comp, Payment_Method__iexact='cheque')
        pamade= payment_made.objects.filter(company = comp, payment_method__iexact='cheque')
        emoloanre= EmployeeLoanRepayment.objects.filter(company = comp, payment_method__iexact='cheque')
        empLoan = loan_account.objects.filter(company = comp, payment_method__iexact = 'Cheque')
        empLoanRe = LoanRepayemnt.objects.filter(company = comp, payment_method__iexact = 'cheque')



        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': bank_objects,
            'log_details':log_details,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'pmtrec':pmtrec,
            'expen':expen,
            'RECexpen':RECexpen,
            'pamade':pamade,
            'emploanre':emoloanre,
            'empLoan':empLoan,
            'empLoanRe':empLoanRe,
      
            }
        return render(request,'zohomodules/cheque/statement.html',context)
    else:
         return redirect('/')


def list_cheque(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            company=dash_details
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            account_holder = BankAccount.objects.filter(company=company)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            company=dash_details.company
            allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            account_holder = BankAccount.objects.filter(company=company)

        inv = invoice.objects.filter(company = company, payment_method__iexact = 'cheque', advanced_paid__gt = 0)
        crdNt = Credit_Note.objects.filter(company = company, payment_method__iexact = 'cheque', advance_paid__gt = 0)
        recInv = RecurringInvoice.objects.filter(company = company, payment_method__iexact = 'cheque', advance_paid__gt = 0)
        sordr= SaleOrder.objects.filter(company = company, payment_method__iexact='cheque', advanced_paid__gt = 0)
        rtInv = retainer_payment_details.objects.filter(retainer__customer_name__company = company,payment_opt__iexact='cheque',retainer__advance__gt=0)
        bill= Bill.objects.filter(Company = company, Payment_Method__iexact='cheque', Advance_amount_Paid__gt = 0)
        rcrbl= Recurring_bills.objects.filter(company = company, payment_type__iexact='cheque', paid__gt = 0)
        pordr= PurchaseOrder.objects.filter(company = company, payment_method__iexact='cheque', advanced_paid__gt = 0)
        dbtnt= debitnote.objects.filter(company = company, payment_method__iexact='cheque', advance_paid__gt = 0)

        pmtrec= Payment_details.objects.filter(company = company, payment_recieved__payment_method__iexact='cheque', payment__gt = 0)
        expen= Expense.objects.filter(company = company, payment_type__iexact='cheque')
        RECexpen= Recurring_Expense.objects.filter(company = company, Payment_Method__iexact='cheque')
        pamade= payment_made.objects.filter(company = company, payment_method__iexact='cheque')
        emoloanre= EmployeeLoanRepayment.objects.filter(company = company, payment_method__iexact='cheque')
        empLoan = loan_account.objects.filter(company = company, payment_method__iexact = 'Cheque')
        empLoanRe = LoanRepayemnt.objects.filter(company = company, payment_method__iexact = 'cheque')


        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': account_holder,
            'log_details':log_details,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'pmtrec':pmtrec,
            'expen':expen,
            'RECexpen':RECexpen,
            'pamade':pamade,
            'emploanre':emoloanre,
            'empLoan':empLoan,
            'empLoanRe':empLoanRe,
     
        }
    
        return render(request,'zohomodules/cheque/list_cheque.html',context)


def Fin_shareChequeStatementToEmail(request):
    if 'login_id' not in request.session:
        return redirect('/')
    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
        company=dash_details.company
        allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
        account_holder = BankAccount.objects.filter(company=company)
    elif log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
        company=dash_details
        allmodules = ZohoModules.objects.get(company=dash_details, status='New')
        account_holder = BankAccount.objects.filter(company=company)

    inv = invoice.objects.filter(company = company, payment_method__iexact = 'cheque', advanced_paid__gt = 0)
    crdNt = Credit_Note.objects.filter(company = company, payment_method__iexact = 'cheque', advance_paid__gt = 0)
    recInv = RecurringInvoice.objects.filter(company = company, payment_method__iexact = 'cheque', advance_paid__gt = 0)
    sordr= SaleOrder.objects.filter(company = company, payment_method__iexact='cheque', advanced_paid__gt = 0)
    rtInv = retainer_payment_details.objects.filter(retainer__customer_name__company = company,payment_opt__iexact='cheque',retainer__advance__gt=0)
    bill= Bill.objects.filter(Company = company, Payment_Method__iexact='cheque', Advance_amount_Paid__gt = 0)
    rcrbl= Recurring_bills.objects.filter(company = company, payment_type__iexact='cheque', paid__gt = 0)
    pordr= PurchaseOrder.objects.filter(company = company, payment_method__iexact='cheque', advanced_paid__gt = 0)
    dbtnt= debitnote.objects.filter(company = company, payment_method__iexact='cheque', advance_paid__gt = 0)

    pmtrec= Payment_details.objects.filter(company = company, payment_recieved__payment_method__iexact='cheque', payment__gt = 0)
    expen= Expense.objects.filter(company = company, payment_type__iexact='cheque')
    RECexpen= Recurring_Expense.objects.filter(company = company, Payment_Method__iexact='cheque')
    pamade= payment_made.objects.filter(company = company, payment_method__iexact='cheque')
    emoloanre= EmployeeLoanRepayment.objects.filter(company = company, payment_method__iexact='cheque')
    empLoan = loan_account.objects.filter(company = company, payment_method__iexact = 'Cheque')
    empLoanRe = LoanRepayemnt.objects.filter(company = company, payment_method__iexact = 'cheque')

    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            
        
            context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': account_holder,
            'log_details':log_details,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'pmtrec':pmtrec,
            'expen':expen,
            'RECexpen':RECexpen,
            'pamade':pamade,
            'emploanre':emoloanre,
            'empLoan':empLoan,
            'empLoanRe':empLoanRe,

        }


            template_path = 'zohomodules/cheque/mail_chequestatement.html'
            template = get_template(template_path)

            

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Cheque_Payments'
            subject = f"Cheque_Payments"

            email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached Cheque for -{email_message}\n\n--\nRegards,\n{company.company_name}\n{company.address}\n{company.state} - {company.country}\n{company.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Cheque details has been shared via email successfully..!')
            return redirect(statement)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(statement)

#End
# upi
def list_upi(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            company=dash_details
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            account_holder = BankAccount.objects.filter(company=company)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            company=dash_details.company
            allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            account_holder = BankAccount.objects.filter(company=company)

        inv = invoice.objects.filter(company = company, payment_method__iexact = 'upi', advanced_paid__gt = 0)
        crdNt = Credit_Note.objects.filter(company = company, payment_method__iexact = 'upi', advance_paid__gt = 0)
        recInv = RecurringInvoice.objects.filter(company = company, payment_method__iexact = 'upi', advance_paid__gt = 0)
        sordr= SaleOrder.objects.filter(company = company, payment_method__iexact='upi', advanced_paid__gt = 0)
        rtInv = retainer_payment_details.objects.filter(retainer__customer_name__company = company,payment_opt__iexact='upi',retainer__advance__gt=0)
        bill= Bill.objects.filter(Company = company, Payment_Method__iexact='upi', Advance_amount_Paid__gt = 0)
        rcrbl= Recurring_bills.objects.filter(company = company, payment_type__iexact='upi', paid__gt = 0)
        pordr= PurchaseOrder.objects.filter(company = company, payment_method__iexact='upi', advanced_paid__gt = 0)
        dbtnt= debitnote.objects.filter(company = company, payment_method__iexact='upi', advance_paid__gt = 0)

        pmtrec= Payment_details.objects.filter(company = company, payment_recieved__payment_method__iexact='upi', payment__gt = 0)
        expen= Expense.objects.filter(company = company, payment_type__iexact='upi')
        RECexpen= Recurring_Expense.objects.filter(company = company, Payment_Method__iexact='upi')
        pamade= payment_made.objects.filter(company = company, payment_method__iexact='upi')
        emoloanre= EmployeeLoanRepayment.objects.filter(company = company, payment_method__iexact='upi')
        empLoan = loan_account.objects.filter(company = company, payment_method__iexact = 'upi')
        empLoanRe = LoanRepayemnt.objects.filter(company = company, payment_method__iexact = 'upi')

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': account_holder,
            'log_details':log_details,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'pmtrec':pmtrec,
            'expen':expen,
            'RECexpen':RECexpen,
            'pamade':pamade,
            'emploanre':emoloanre,
            'empLoan':empLoan,
            'empLoanRe':empLoanRe,

        }
            
    
        return render(request,'zohomodules/upi/list_upi.html',context)

def upi_statement(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            company=dash_details
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            account_holder = BankAccount.objects.filter(company=company)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            company=dash_details.company
            allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            account_holder = BankAccount.objects.filter(company=company)

        inv = invoice.objects.filter(company = company, payment_method__iexact = 'upi', advanced_paid__gt = 0)
        crdNt = Credit_Note.objects.filter(company = company, payment_method__iexact = 'upi', advance_paid__gt = 0)
        recInv = RecurringInvoice.objects.filter(company = company, payment_method__iexact = 'upi', advance_paid__gt = 0)
        sordr= SaleOrder.objects.filter(company = company, payment_method__iexact='upi', advanced_paid__gt = 0)
        rtInv = retainer_payment_details.objects.filter(retainer__customer_name__company = company,payment_opt__iexact='upi',retainer__advance__gt=0)
        bill= Bill.objects.filter(Company = company, Payment_Method__iexact='upi', Advance_amount_Paid__gt = 0)
        rcrbl= Recurring_bills.objects.filter(company = company, payment_type__iexact='upi', paid__gt = 0)
        pordr= PurchaseOrder.objects.filter(company = company, payment_method__iexact='upi', advanced_paid__gt = 0)
        dbtnt= debitnote.objects.filter(company = company, payment_method__iexact='upi', advance_paid__gt = 0)

        pmtrec= Payment_details.objects.filter(company = company, payment_recieved__payment_method__iexact='upi', payment__gt = 0)
        expen= Expense.objects.filter(company = company, payment_type__iexact='upi')
        RECexpen= Recurring_Expense.objects.filter(company = company, Payment_Method__iexact='upi')
        pamade= payment_made.objects.filter(company = company, payment_method__iexact='upi')
        emoloanre= EmployeeLoanRepayment.objects.filter(company = company, payment_method__iexact='upi')
        empLoan = loan_account.objects.filter(company = company, payment_method__iexact = 'upi')
        empLoanRe = LoanRepayemnt.objects.filter(company = company, payment_method__iexact = 'upi')

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': account_holder,
            'log_details':log_details,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'pmtrec':pmtrec,
            'expen':expen,
            'RECexpen':RECexpen,
            'pamade':pamade,
            'emploanre':emoloanre,
            'empLoan':empLoan,
            'empLoanRe':empLoanRe,
    
        }
        return render(request,'zohomodules/upi/upi_statement.html',context)
    else:
         return redirect('/')


def shareupiToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            company=dash_details
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
            account_holder = BankAccount.objects.filter(company=company)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            company=dash_details.company
            allmodules = allmodules = ZohoModules.objects.get(company=dash_details.company, status='New')
            account_holder = BankAccount.objects.filter(company=company)

        inv = invoice.objects.filter(company = company, payment_method__iexact = 'upi', advanced_paid__gt = 0)
        crdNt = Credit_Note.objects.filter(company = company, payment_method__iexact = 'upi', advance_paid__gt = 0)
        recInv = RecurringInvoice.objects.filter(company = company, payment_method__iexact = 'upi', advance_paid__gt = 0)
        sordr= SaleOrder.objects.filter(company = company, payment_method__iexact='upi', advanced_paid__gt = 0)
        rtInv = retainer_payment_details.objects.filter(retainer__customer_name__company = company,payment_opt__iexact='upi',retainer__advance__gt=0)
        bill= Bill.objects.filter(Company = company, Payment_Method__iexact='upi', Advance_amount_Paid__gt = 0)
        rcrbl= Recurring_bills.objects.filter(company = company, payment_type__iexact='upi', paid__gt = 0)
        pordr= PurchaseOrder.objects.filter(company = company, payment_method__iexact='upi', advanced_paid__gt = 0)
        dbtnt= debitnote.objects.filter(company = company, payment_method__iexact='upi', advance_paid__gt = 0)

        pmtrec= Payment_details.objects.filter(company = company, payment_recieved__payment_method__iexact='upi', payment__gt = 0)
        expen= Expense.objects.filter(company = company, payment_type__iexact='upi')
        RECexpen= Recurring_Expense.objects.filter(company = company, Payment_Method__iexact='upi')
        pamade= payment_made.objects.filter(company = company, payment_method__iexact='upi')
        emoloanre= EmployeeLoanRepayment.objects.filter(company = company, payment_method__iexact='upi')
        empLoan = loan_account.objects.filter(company = company, payment_method__iexact = 'upi')
        empLoanRe = LoanRepayemnt.objects.filter(company = company, payment_method__iexact = 'upi')
    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            
        
            context = {
            'details': dash_details,
            'allmodules': allmodules,
            'account_holder': account_holder,
            'log_details':log_details,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'pmtrec':pmtrec,
            'expen':expen,
            'RECexpen':RECexpen,
            'pamade':pamade,
            'emploanre':emoloanre,
            'empLoan':empLoan,
            'empLoanRe':empLoanRe,

        }


            template_path = 'zohomodules/upi/mail_upistatement.html'
            template = get_template(template_path)

            

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Upi_Payments'
            subject = f"Upi_Payments"

            email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached UPI for - UPI-{email_message}\n\n--\nRegards,\n{company.company_name}\n{company.address}\n{company.state} - {company.country}\n{company.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'UPI details has been shared via email successfully..!')
            return redirect(upi_statement)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(upi_statement)
        
#End
def debit_note_reports(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        


       
        debit_note = debitnote.objects.filter(company=cmp)
            

            

        context = {
                 'cmp':cmp,'DEBIT_NOTE': debit_note, 'allmodules':allmodules, 'details':dash_details,'log_details':log_details
            
        }
        return render(request, 'zohomodules/Reports/debit_note_reports.html', context)
    else:
        return redirect('/')


def sharedebitReportsToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                totalCount = request.POST['count']
                totalCustomer = request.POST['totalCustomer']
                totalAmount = request.POST['totalAmount']
                start_date = request.POST.get('start_date') or None
                end_date = request.POST.get('end_date') or None
                statuss = request.POST.get('statusVal')

                if start_date != None and end_date != None:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = debitnote.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]) & Q(status=statuss))
                    else:
                        itms = debitnote.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]))
                else:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = debitnote.objects.filter(company=com,status=statuss)
                    else:
                        itms = debitnote.objects.filter(company=com)
                    

                context = { 'credit':itms,'cmp':com,'companyName':com.company_name,'totalAmount':totalAmount,
                           'totalCount':totalCount,'totalCustomer':totalCustomer,'start_date':start_date,'end_date':end_date}
                
                template_path = 'zohomodules/Reports/creditnotedetails_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Credit_Note_Details'
                subject = f"Credit_Note_Details"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Credit Note for   \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Credit Note details has been shared via email successfully..!')
                return redirect(debit_note_reports)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(debit_note_reports)
            
  
#-------------------------------Estimate------------------------------------------     

def sales_estimate(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            estimate = Estimate.objects.filter(company=dash_details)




            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,

            }
            return render(request,'zohomodules/estimate/sales_estimate.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            estimate = Estimate.objects.filter(company=dash_details.company)

        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,

            }


            return render(request,'zohomodules/estimate/sales_estimate.html', context)
    else:
        return redirect('/')

def sales_estimate_new(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d,superadmin_approval=1,Distributor_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            customer_details = Customer.objects.filter(company=dash_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.id)

            comp_payment_terms=Company_Payment_Term.objects.filter(company=comp_details)
            price_lists=PriceList.objects.filter(company=comp_details,type='Sales',status='Active')
            items=Items.objects.filter(company=comp_details)
            units=Unit.objects.filter(company=comp_details)
            accounts=Chart_of_Accounts.objects.filter(company=comp_details)


             # Finding next rec_invoice number w r t last rec_invoice number if exists.
            nxtEst = ""
            lastEst = Estimate.objects.filter(company=comp_details).last()

            if lastEst:
                est_no = str(lastEst.estimate_number)
                numbers = []
                stri = []
                for word in est_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)

                num = ''.join(numbers)
                st = ''.join(stri)

                est_no = int(num) + 1
                if num[0] == 0:
                    nxtEst = st + num.zfill(len(num)) 
                else:
                    nxtEst = st + str(est_no).zfill(len(num))
            else:
                nxtEst = 'EST001'




            if EstimateReference.objects.filter(company=comp_details).exists():
                Reference_no = EstimateReference.objects.filter(company=comp_details).last()
                ref_no =int(Reference_no.reference_number) + 1

            else:
                ref_no = 1



            
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_details':login_d,
                'customer':customer_details,
                'priceListItems':price_lists,
                'comp_payment_terms':comp_payment_terms,
                'items':items,
                'units':units,
                'accounts':accounts,
                'est_no':nxtEst,
                'ref_no':ref_no,
                'cmp':comp_details,

            }
            return render(request,'zohomodules/estimate/sales_estimate_new.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            customer_details = Customer.objects.filter(company=dash_details.company)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)

            comp_payment_terms=Company_Payment_Term.objects.filter(company=comp_details)
            price_lists=PriceList.objects.filter(company=comp_details,type='Sales',status='Active')
            items=Items.objects.filter(company=comp_details)
            units=Unit.objects.filter(company=comp_details)
            accounts=Chart_of_Accounts.objects.filter(company=dash_details.company)

            # Finding next rec_invoice number w r t last rec_invoice number if exists.
            nxtEst = ""
            lastEst = Estimate.objects.filter(company=comp_details).last()

            if lastEst:
                est_no = str(lastEst.estimate_number)
                numbers = []
                stri = []
                for word in est_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)

                num = ''.join(numbers)
                st = ''.join(stri)

                est_no = int(num) + 1
                if num[0] == 0:
                    nxtEst = st + num.zfill(len(num)) 
                else:
                    nxtEst = st + str(est_no).zfill(len(num))
            else:
                nxtEst = 'EST001'




            if EstimateReference.objects.filter(company=comp_details).exists():
                Reference_no = EstimateReference.objects.filter(company=comp_details).last()
                ref_no =int(Reference_no.reference_number) + 1

            else:
                ref_no = 1






            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_details':login_d,
                'customer':customer_details,
                'priceListItems':price_lists,
                'comp_payment_terms':comp_payment_terms,
                'items':items,
                'units':units,
                'accounts':accounts,
                'est_no':nxtEst,
                'ref_no':ref_no,
                'cmp':comp_details,

            }


            return render(request,'zohomodules/estimate/sales_estimate_new.html', context)
    else:
        return redirect('/')


def checkEstimateNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        EstNo = request.GET['EstNum']

        # Finding next estimate number w r t last estimate number if exists.
        nxtEst = ""
        lastEst = Estimate.objects.filter(company = com).last()
        if lastEst:
            est_no = str(lastEst.estimate_number)
            numbers = []
            stri = []
            for word in est_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtEst = st + num.zfill(len(num)) 
            else:
                nxtEst = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtEst = 'EST001'

        PatternStr = []
        for word in EstNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkEstimatePattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Estimate No. Pattern already Exists.!'})
        elif Estimate.objects.filter(company = com, estimate_number__iexact = EstNo).exists():
            return JsonResponse({'status':False, 'message':'Estimate No. already Exists.!'})
        elif nxtEst != "" and EstNo != nxtEst:
            return JsonResponse({'status':False, 'message':'Estimate No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkEstimatePattern(pattern):
    models = [invoice, SaleOrder, RecurringInvoice]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False


def get_customer_detailsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None or cust.GST_number == 'null' else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def get_item_detailsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemId = request.GET['id']
        item = Items.objects.get(id=itemId)


        if item:

            context = {
                'status':True,
                'id': item.id,
                'hsn':item.hsn_code,
                'sales_rate':item.selling_price,
                'purchase_rate':item.purchase_price,
                'avl':item.current_stock,
                'tax': True if item.tax_reference == 'taxable' else False,
                'gst':item.intrastate_tax,
                'igst':item.interstate_tax,
                # 'PLPrice':priceListPrice,

            }
            return JsonResponse(context)
        
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
        
        
    else:
       return redirect('/')


def sales_estimate_new_customer(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=login_d)
            comp_details=CompanyDetails.objects.get(login_details=login_d)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')



        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=login_d
            customer_data.company=comp_details
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type=request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type=op_type
            else:
                customer_data.opening_balance_type='Opening Balance not selected'
    
            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms=Company_Payment_Term.objects.get(id=request.POST['payment_term'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                 customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                 customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'
    



           
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
           # ................ Adding to History table...........................
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=comp_details
            vendor_history_obj.login_details=login_d
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=comp_details
            rdata.customer=vdata
            rdata.save()


     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('salutation[]')
            first_name =request.POST.getlist('first_name[]')
            last_name =request.POST.getlist('last_name[]')
            email =request.POST.getlist('email[]')
            work_phone =request.POST.getlist('wphone[]')
            mobile =request.POST.getlist('mobile[]')
            skype_name_number =request.POST.getlist('skype[]')
            designation =request.POST.getlist('designation[]')
            department =request.POST.getlist('department[]') 
            vdata=Customer.objects.get(id=customer_data.id)
            vendor=vdata
           
            if title != ['Select']:
                if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                    mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                    mapped2=list(mapped2)
                    print(mapped2)
                    for ele in mapped2:
                        created = CustomerContactPersons.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                                work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=comp_details,customer=vendor)
                        
    return redirect('sales_estimate_new')

def sales_estimate_new_item(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type=='Company':
            company_id = request.session['login_id']

        
            if request.method == 'POST':
                a=Items()
                b=Item_Transaction_History()
                c = CompanyDetails.objects.get(login_details=company_id)
                b.company=c
                b.Date=date.today()
                b.logindetails=login_d
                a.login_details=login_d
                a.company=c
                a.item_type = request.POST.get("type",None)
                a.item_name = request.POST.get("name",None)
                unit_id = request.POST.get("unit")
                uid=Unit.objects.get(id=unit_id)
                # unit_instance = get_object_or_404(Unit, id=unit_id)
                a.unit = uid
                a.hsn_code = request.POST.get("hsn",None)
                a.tax_reference = request.POST.get("radio",None)
                a.intrastate_tax = request.POST.get("intra",None)
                a.interstate_tax= request.POST.get("inter",None)
                a.selling_price = request.POST.get("sel_price",None)
                a.sales_account = request.POST.get("sel_acc",None)
                a.sales_description = request.POST.get("sel_desc",None)
                a.purchase_price = request.POST.get("cost_price",None)
                a.purchase_account = request.POST.get("cost_acc",None)
                a.purchase_description = request.POST.get("pur_desc",None)
                # track = request.POST.get("trackState",None)
                track_state_value = request.POST.get("trackstate", None)

    # Check if the checkbox is checked
                if track_state_value == "on":
                    a.track_inventory = 1
                else:
                    a.track_inventory = 0

                
                minstock=request.POST.get("minimum_stock",None)
                if minstock != "":
                    a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
                else:
                    a.minimum_stock_to_maintain = 0
                a.activation_tag = 'Active'
                a.type = 'Opening Stock'
                a.inventory_account = request.POST.get("invacc",None)
                a.opening_stock = request.POST.get("openstock",None)
                a.current_stock=request.POST.get("openstock",None)
                a.opening_stock_per_unit = request.POST.get("rate",None)
                item_name= request.POST.get("name",None)
                hsncode=request.POST.get("hsn",None)

                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()


                item_obj = Items.objects.filter(company=company_id)


                item_list = [{'id': items['id'], 'hsn_code': items['hsn_code'], 'selling_price': items['selling_price'], 
                              'taxreference': items['taxreference'], 'intrastate_tax': items['intrastate_tax'], 'interstate_tax': 
                              items['interstate_tax'], 'item_name': items['item_name']} for items in item_obj]
                response_data = {
                "message": "success",
                'item_list':item_list,
                }
                return JsonResponse(response_data)
                
            
        else:
            staff_id = request.session['login_id']
            if request.method=='POST':
                a=Items()
                b=Item_Transaction_History()
                staff = LoginDetails.objects.get(id=staff_id)
                sf = StaffDetails.objects.get(login_details=staff)
                c=sf.company
                b.Date=date.today()
                b.company=c
                b.logindetails=login_d
                a.login_details=login_d
                a.company=c
                a.item_type = request.POST.get("type",None)
                a.item_name = request.POST.get("name",None)
                unit_id = request.POST.get("unit")
                unit_instance = get_object_or_404(Unit, id=unit_id)
                a.unit = unit_instance
                a.hsn_code = request.POST.get("hsn",None)
                a.tax_reference = request.POST.get("radio",None)
                a.intrastate_tax = request.POST.get("intra",None)
                a.interstate_tax= request.POST.get("inter",None)
                a.selling_price = request.POST.get("sel_price",None)
                a.sales_account = request.POST.get("sel_acc",None)
                a.sales_description = request.POST.get("sel_desc",None)
                a.purchase_price = request.POST.get("cost_price",None)
                a.purchase_account = request.POST.get("cost_acc",None)
                a.purchase_description = request.POST.get("pur_desc",None)
                # track_state_value = request.POST.get("trackState", None)

                track_state_value = request.POST.get("trackstate", None)

                # Check if the checkbox is checked
                if track_state_value == "on":
                    a.track_inventory = 1
                else:
                    a.track_inventory = 0
                minstock=request.POST.get("minimum_stock",None)
                item_name= request.POST.get("name",None)
                hsncode=request.POST.get("hsn",None)
                
                if minstock != "":
                    a.minimum_stock_to_maintain = request.POST.get("minimum_stock",None)
                else:
                    a.minimum_stock_to_maintain = 0
                # a.activation_tag = request.POST.get("status",None)
                a.inventory_account = request.POST.get("invacc",None)
                a.opening_stock = request.POST.get("openstock",None)
                a.current_stock=request.POST.get("openstock",None)

                a.save()    
                t=Items.objects.get(id=a.id)
                b.items=t
                b.save()


                item_obj = Items.objects.filter(company=company_id)


                item_list = [{'id': items['id'], 'hsn_code': items['hsn_code'], 'selling_price': items['selling_price'], 
                              'taxreference': items['taxreference'], 'intrastate_tax': items['intrastate_tax'], 'interstate_tax': 
                              items['interstate_tax'], 'item_name': items['item_name']} for items in item_obj]
                response_data = {
                "message": "success",
                'item_list':item_list,
                }
                return JsonResponse(response_data)
            
            

    else:
        redirect('/')


def sales_estimate_new_add(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            company_id = request.session['login_id']
            company = CompanyDetails.objects.get(login_details=login_d)
            if request.method=='POST':
                estNumber = request.POST['estimate_no']
                if Estimate.objects.filter(company = company, estimate_number__iexact = estNumber).exists():
                    res = f'<script>alert("Estimate Number `{estNumber}` already exists, try another!");window.history.back();</script>'
                    return HttpResponse(res)
                
                est = Estimate()
                est.company = company
                est.login_details = login_d
                customer_id = request.POST['customerId']
                est.customer = Customer.objects.get(id=customer_id)
                est.customer_email = request.POST['email']
                est.customer_bill_address = request.POST['billingAddress']
                est.customer_gst_treatment = request.POST['gst_treatment']
                est.customer_gst_number = request.POST['gst_number']
                est.customer_place_of_supply = request.POST['place_of_supply']
                est.estimate_date = request.POST['estimate_date']
                paymentterm_id = request.POST['payment_term']
                est.payment_term = Company_Payment_Term.objects.get(id=paymentterm_id)
                est.expiration_date = request.POST['exp_date']
                est.reference_number = request.POST['reference_no']
                est.estimate_number = request.POST['estimate_no']
                est.description = request.POST['description']

                if 'file' in request.FILES:
                    est.document = request.FILES['file']
                
                est.terms_and_condition = request.POST['terms']
                est.sub_total = request.POST['subtotal']
                est.cgst = request.POST['cgst']
                est.sgst = request.POST['sgst']
                est.tax_amount_igst = request.POST['igst']
                est.shipping_charge = request.POST['ship']
                est.adjustment = request.POST['adj']
                est.grand_total = request.POST['grandtotal']

                if 'Draft' in request.POST:
                    est.status = "Draft"

                elif "Save" in request.POST:
                    est.status = "Saved"


                est.save()


    #..................save reference number.............................

                reference = EstimateReference()
                reference.reference_number = request.POST['reference_no']
                reference.company = company
                reference.login_details = login_d

                reference.save()

    #..................save estimate history............................

                history = EstimateHistory()
                history.company = company
                history.login_details = login_d
                history.estimate = est
                history.date = datetime.today().date()
                history.action = "Created"

                history.save() 


    #................Adding item table .............................................

                # Save estimate items.

                itemId = request.POST.getlist("itemId[]")
                # itemName = request.POST.getlist("item_name[]")
                hsn  = request.POST.getlist("hsn[]")
                qty = request.POST.getlist("qty[]")
                price = request.POST.getlist("price[]")
                tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == company.state else request.POST.getlist("taxIGST[]")
                discount = request.POST.getlist("discount[]")
                total = request.POST.getlist("total[]")

                if len(itemId)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and hsn and qty and price and tax and discount and total:
                    mapped = zip(itemId,hsn,qty,price,tax,discount,total)
                    mapped = list(mapped)
                    for ele in mapped:
                        itm = Items.objects.get(id = int(ele[0]))
                        EstimateItems.objects.create(item=itm, hsn=ele[1], quantity=int(ele[2]), price = float(ele[3]), tax_rate = float(ele[4]),
                        discount=float(ele[5]), total=float(ele[6]), estimate=est, login_details=login_d, company=company)
                        itm.current_stock -= int(ele[2])
                        itm.save()
                            
                        




                

            return redirect('sales_estimate')

        else:

            company_id = request.session['login_id']
            staff_details = StaffDetails.objects.get(login_details=login_d)
            company = CompanyDetails.objects.get(id=staff_details.company.id)
            if request.method=='POST':

                estNumber = request.POST['estimate_no']
                if Estimate.objects.filter(company = company, estimate_number__iexact = estNumber).exists():
                    res = f'<script>alert("Estimate Number `{estNumber}` already exists, try another!");window.history.back();</script>'
                    return HttpResponse(res)

                est = Estimate()
                est.company = company
                est.login_details = login_d
                customer_id = request.POST['customerId']
                est.customer = Customer.objects.get(id=customer_id)
                est.customer_email = request.POST['email']
                est.customer_bill_address = request.POST['billingAddress']
                est.customer_gst_treatment = request.POST['gst_treatment']
                est.customer_gst_number = request.POST['gst_number']
                est.customer_place_of_supply = request.POST['place_of_supply']
                est.estimate_date = request.POST['estimate_date']
                paymentterm_id = request.POST['payment_term']
                est.payment_term = Company_Payment_Term.objects.get(id=paymentterm_id)
                est.expiration_date = request.POST['exp_date']
                est.reference_number = request.POST['reference_no']
                est.estimate_number = request.POST['estimate_no']
                est.description = request.POST['description']

                if 'file' in request.FILES:
                    est.document = request.FILES['file']

                est.terms_and_condition = request.POST['terms']
                est.sub_total = request.POST['subtotal']
                est.cgst = request.POST['cgst']
                est.sgst = request.POST['sgst']
                est.tax_amount_igst = request.POST['igst']
                est.shipping_charge = request.POST['ship']
                est.adjustment = request.POST['adj']
                est.grand_total = request.POST['grandtotal']

                

                if 'Draft' in request.POST:
                    est.status = "Draft"

                elif "Save" in request.POST:
                    est.status = "Saved"

                

                est.save()


    #..................save reference number.............................

                reference = EstimateReference()
                reference.reference_number = request.POST['reference_no']
                reference.company = company
                reference.login_details = login_d

                reference.save()

    #..................save estimate history............................

                history = EstimateHistory()
                history.company = company
                history.login_details = login_d
                history.estimate = est
                history.date = datetime.today().date()
                history.action = "Created"

                history.save() 


    #................Adding item table .............................................

                # Save estimate items.

                itemId = request.POST.getlist("itemId[]")
                # itemName = request.POST.getlist("item_name[]")
                hsn  = request.POST.getlist("hsn[]")
                qty = request.POST.getlist("qty[]")
                price = request.POST.getlist("price[]")
                tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == company.state else request.POST.getlist("taxIGST[]")
                discount = request.POST.getlist("discount[]")
                total = request.POST.getlist("total[]")

                if len(itemId)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and hsn and qty and price and tax and discount and total:
                    mapped = zip(itemId,hsn,qty,price,tax,discount,total)
                    mapped = list(mapped)
                    for ele in mapped:
                        itm = Items.objects.get(id = int(ele[0]))
                        EstimateItems.objects.create(item=itm, hsn=ele[1], quantity=int(ele[2]), price = float(ele[3]), tax_rate = float(ele[4]),
                        discount=float(ele[5]), total=float(ele[6]), estimate=est, login_details=login_d, company=company)
                        itm.current_stock -= int(ele[2])
                        itm.save()



            return redirect('sales_estimate')






    else:
        return('/')



def addest_unit(request):
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})


def show_unit_dropdownest(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company

        options = {}
        option_objects = Unit.objects.filter(company=com)
        for option in option_objects:
            options[option.id] = [option.id, option.unit_name]
        
        return JsonResponse(options)
    
    # If 'login_id' is not in session or other conditions are not met, return an empty response
    return JsonResponse({})
            

def sales_estimate_overview(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            estimate = Estimate.objects.get(id=pk)
            estimates = Estimate.objects.filter(company=dash_details)
            company = CompanyDetails.objects.get(login_details=login_d)
            comments = EstimateComment.objects.filter(estimate=estimate)
            history = EstimateHistory.objects.filter(estimate=estimate)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            last_history = EstimateHistory.objects.filter(estimate = estimate).last()
            tax = estimate.cgst + estimate.sgst


        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'estimates':estimates,
                'company':company,
                'comments':comments,
                'history':history,
                'est_items':est_items,
                'last_history':last_history,
                'tax':tax,
                

            }
            return render(request,'zohomodules/estimate/sales_estimate_overview.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            estimate = Estimate.objects.get(id=pk)
            estimates = Estimate.objects.filter(company=dash_details.company)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            comments = EstimateComment.objects.filter(estimate=estimate)
            history = EstimateHistory.objects.filter(estimate=estimate)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            last_history = EstimateHistory.objects.filter(estimate = estimate).last()
            tax = estimate.cgst + estimate.sgst

        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'estimates':estimates,
                'company':company,
                'comments':comments,
                'history':history,
                'est_items':est_items,
                'last_history':last_history,
                'tax':tax,

            }
            return render(request,'zohomodules/estimate/sales_estimate_overview.html', context)


    else:
        return('/')


def sales_estimate_edit(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(login_details=login_d)
            customer_details = Customer.objects.filter(company=dash_details)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            items=Items.objects.filter(company=company)
            tax = estimate.cgst + estimate.sgst


            price_lists=PriceList.objects.filter(company=company,type='Sales',status='Active')
            units=Unit.objects.filter(company=company)
            accounts=Chart_of_Accounts.objects.filter(company=dash_details)



        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'est_items':est_items,
                'comp_payment_terms':comp_payment_terms,
                'items':items,
                'units':units,
                'accounts':accounts,
                'tax':tax,
                

            }
            return render(request,'zohomodules/estimate/sales_estimate_edit.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            customer_details = Customer.objects.filter(company=dash_details.company)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            items=Items.objects.filter(company=company)
            tax = estimate.sgst + estimate.cgst


            price_lists=PriceList.objects.filter(company=company,type='Sales',status='Active')
            units=Unit.objects.filter(company=company)
            accounts=Chart_of_Accounts.objects.filter(company=dash_details.company)

        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'est_items':est_items,
                'comp_payment_terms':comp_payment_terms,
                'items':items,
                'units':units,
                'accounts':accounts,
                'tax':tax,

            }
            return render(request,'zohomodules/estimate/sales_estimate_edit.html', context)


    else:
        return('/')

def estimate_edit_op(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

    

        if login_d.user_type == 'Company':
            company_id = request.session['login_id']
            company = CompanyDetails.objects.get(login_details=login_d)

        else:
            staff_id = request.session['login_id']
            staff_details = StaffDetails.objects.get(login_details=login_d)
            company = CompanyDetails.objects.get(id= staff_details.company.id)

        
        if request.method=='POST':
            est = Estimate.objects.get(id=pk)
            customer_id = request.POST['customerId']
            est.customer = Customer.objects.get(id=customer_id)
            est.customer_email = request.POST['email']

            if 'billingAddress' in request.POST:
                est.customer_bill_address = request.POST['billingAddress']


            est.customer_gst_treatment = request.POST['gst_treatment']

            if 'gst_number' in request.POST:
                est.customer_gst_number = request.POST['gst_number']
            
            est.customer_place_of_supply = request.POST['place_of_supply']
            est.estimate_date = request.POST['estimate_date']
            paymentterm_id = request.POST['payment_term']
            est.payment_term = Company_Payment_Term.objects.get(id=paymentterm_id)
            est.expiration_date = request.POST['exp_date']
            est.description = request.POST['description']
            if 'file' in request.FILES:
                est.document = request.FILES['file']

            est.terms_and_condition = request.POST['terms']
            est.sub_total = request.POST['subtotal']
            est.cgst = request.POST['cgst']
            est.sgst = request.POST['sgst']
            est.tax_amount_igst = request.POST['igst']
            est.shipping_charge = request.POST['ship']
            est.adjustment = request.POST['adj']
            est.grand_total = request.POST['grandtotal']


            est.save()

#..................save estimate history............................

            history = EstimateHistory()
            history.company = company
            history.login_details = login_d
            history.estimate = est
            history.date = datetime.today().date()
            history.action = "Edited"
            history.save() 


#................Adding item table .............................................


            # Save estimate items.

            itemId = request.POST.getlist("itemId[]")
            # itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == company.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            itms = EstimateItems.objects.filter(estimate=est)
            for it in itms:
                item = Items.objects.get(id=it.item.id)
                item.current_stock += it.quantity
                item.save()

                # it.item.current_stock += it.quantity
                # it.save()
            itms.delete()

            if len(itemId)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    EstimateItems.objects.create(item=itm, hsn=ele[1], quantity=int(ele[2]), price = float(ele[3]), tax_rate = float(ele[4]),
                    discount=float(ele[5]), total=float(ele[6]), estimate=est, login_details=login_d, company=company)
                    itm.current_stock -= int(ele[2])
                    itm.save()

                            
                        



            return redirect(reverse('sales_estimate_overview', args=[pk]))





    else:
        return('/')


def sales_estimate_comment(request,pk):


    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(login_details=login_d)

            comment=request.POST['comment']


            c1 = EstimateComment(estimate=estimate,comment=comment,company=company,login_details=login_d)
            c1.save()



            return redirect(reverse('sales_estimate_overview', args=[pk]))

        if login_d.user_type == 'Staff':
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(id=estimate.company.id)

            comment=request.POST['comment']


            c1 = EstimateComment(estimate=estimate,comment=comment,company=company,login_details=login_d)
            c1.save()

    
            return redirect(reverse('sales_estimate_overview', args=[pk]))


    else:
        return('/')


def sales_estimate_comment_delete(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        comment = EstimateComment.objects.get(id=pk)
        c1 = comment.estimate.id
        print(c1)
        comment.delete()

        return redirect(reverse('sales_estimate_overview', args=[c1]))

    else:
        return('/')


def sales_estimate_delete(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        est = Estimate.objects.get(id=pk)
        
        est_itm = EstimateItems.objects.filter(estimate=est)
        for itm in est_itm:
            item = Items.objects.get(id=itm.item.id)
            item.current_stock += itm.quantity
            item.save()
            
            # itm.item.current_stock += itm.quantity
            # itm.save()

        est_itm.delete()

        est.delete()


        return redirect('sales_estimate')

    else:
        return('/')

def sales_estimate_convert_saved(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        estimate = Estimate.objects.get(id=pk)
        estimate.status = "Saved"
        estimate.save()


        return redirect(reverse('sales_estimate_overview', args=[pk]))

    else:
        return('/')

def convert_estimate_to_sales_order(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(login_details=login_d)
            customer_details = Customer.objects.filter(company=dash_details)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            tax = estimate.cgst + estimate.sgst


        
            customer=Customer.objects.all()
            item=Items.objects.filter(company=company)
            units = Unit.objects.filter(company=company)
            accounts=Chart_of_Accounts.objects.filter(company=company)
            banks = Banking.objects.filter(company = company)
            
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            priceList = PriceList.objects.filter(company = company, type = 'Sales', status = 'Active')

            if SalesOrderReference.objects.filter(company = company).exists():

                last_ref_num = SalesOrderReference.objects.filter(company = company).last()
                new_ref_num = int(last_ref_num.reference_number) + 1

            else:
                new_ref_num = 1
            

            # latest_sel = SaleOrder.objects.filter(company = company).order_by('-id').first()
            # new_number = int(latest_sel.reference_number) + 1 if latest_sel else 1
            # if SalesOrderReference.objects.filter(company = company).exists():
            #     deleted = SalesOrderReference.objects.get(company = company)
            #     if deleted:
            #         while int(deleted.reference_number) >= new_number:
            #             new_number+=1
            
            nxtSel = ""
            lastSel = SaleOrder.objects.filter(company = company).last()
            if lastSel:
                sel_no = str(lastSel.sales_order_number)
                numbers = []
                stri = []
                for word in sel_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)
                
                num=''
                for i in numbers:
                    num +=i
                
                st = ''
                for j in stri:
                    st = st+j

                sel_num = int(num)+1

                padding_length = len(num) - 1

                        
                nxtSel = f"{st}{num[0]}{sel_num:0{padding_length}d}"
            else:
                nxtSel = 'sel-01'


        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'est_items':est_items,
                'nxtSel':nxtSel,
                'new_ref_num':new_ref_num,
                'comp_payment_terms':comp_payment_terms,
                'banks':banks,
                'items':item,
                'units':units,
                'accounts':accounts,
                'priceListItems':priceList,
                'tax':tax,
                

            }
            return render(request,'zohomodules/estimate/estimate_to_sales_order.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            customer_details = Customer.objects.filter(company=company)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            tax = estimate.cgst + estimate.sgst
            


            customer=Customer.objects.all()
            item=Items.objects.filter(company=company)
            units = Unit.objects.filter(company=company)
            accounts=Chart_of_Accounts.objects.filter(company=company)
            banks = Banking.objects.filter(company = company)
            
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            priceList = PriceList.objects.filter(company = company, type = 'Sales', status = 'Active')

            if SalesOrderReference.objects.filter(company = company).exists():

                last_ref_num = SalesOrderReference.objects.filter(company = company).last()
                new_ref_num = int(last_ref_num.reference_number) + 1

            else:
                new_ref_num = 1
            

            # latest_sel = SaleOrder.objects.filter(company = company).order_by('-id').first()
            # new_number = int(latest_sel.reference_number) + 1 if latest_sel else 1
            # if SalesOrderReference.objects.filter(company = company).exists():
            #     deleted = SalesOrderReference.objects.get(company = company)
            #     if deleted:
            #         while int(deleted.reference_number) >= new_number:
            #             new_number+=1
            
            nxtSel = ""
            lastSel = SaleOrder.objects.filter(company = company).last()
            if lastSel:
                sel_no = str(lastSel.sales_order_number)
                numbers = []
                stri = []
                for word in sel_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)
                
                num=''
                for i in numbers:
                    num +=i
                
                st = ''
                for j in stri:
                    st = st+j

                sel_num = int(num)+1

                padding_length = len(num) - 1

                        
                nxtSel = f"{st}{num[0]}{sel_num:0{padding_length}d}"
            else:
                nxtSel = 'sel-01'

        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'est_items':est_items,
                'nxtSel':nxtSel,
                'new_ref_num':new_ref_num,
                'comp_payment_terms':comp_payment_terms,
                'banks':banks,
                'items':item,
                'units':units,
                'accounts':accounts,
                'priceListItems':priceList,
                'tax':tax,

            }
            return render(request,'zohomodules/estimate/estimate_to_sales_order.html', context)


def checkSalesOrderNumberEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        SelNo = request.GET['SelNum']

        print(SelNo)

        # Finding next estimate number w r t last estimate number if exists.
        nxtSel = ""
        lastSel = SaleOrder.objects.filter(company = com).last()
        if lastSel:
            sel_no = str(lastSel.sales_order_number)
            numbers = []
            stri = []
            for word in sel_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            sel_num = int(num) + 1
            if num[0] == 0:
                nxtSel = st + num.zfill(len(num)) 
            else:
                nxtSel = st + str(sel_num).zfill(len(num))
        # else:
        #     nxtSel = 'sel-01'

        print(nxtSel)

        PatternStr = []
        for word in SelNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkSalesOrderNumberPatternEst(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'SaleOrder No. Pattern already Exists.!'})
        elif SaleOrder.objects.filter(company = com, sales_order_number__iexact = SelNo).exists():
            return JsonResponse({'status':False, 'message':'SaleOrder No. already Exists.!'})
        elif nxtSel != "" and SelNo != nxtSel:
            return JsonResponse({'status':False, 'message':'SaleOrder No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def checkSalesOrderNumberPatternEst(pattern):
    models = [RecurringInvoice, Estimate, invoice]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False


def convert_estimate_to_sales_order_op(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            selNum = request.POST['sales_order_number']
            if SaleOrder.objects.filter(company = comp_details, sales_order_number__iexact = selNum).exists():
                res = f'<script>alert("Salesorder Number `{selNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            sale = SaleOrder(
                company=comp_details,
                login_details=log_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                # customer_billing_address = request.POST['customer_billing_address'],
                customer_gst_type = request.POST['customer_gst_type'],
                customer_gst_number = request.POST['customer_gst_number'],
                customer_place_of_supply = request.POST['customer_place_of_supply'],
               
                reference_number = request.POST['reference_number'],
                sales_order_number =selNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_terms']),
                sales_order_date = request.POST['sales_order_date'],
                # expiration_date = datetime.strptime(request.POST['expiration_date'], '%d-%m-%Y').date(),
                expiration_date = request.POST['expiration_date'],

                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_number'] == "" else request.POST['cheque_number'],
                upi_number = None if request.POST['upi_number'] == "" else request.POST['upi_number'],
                bank_account_number = None if request.POST['bank_account_number'] == "" else request.POST['bank_account_number'],


                sub_total = 0.0 if request.POST['sub_total'] == "" else float(request.POST['sub_total']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['tax_amount'] == "" else float(request.POST['tax_amount']),
                adjustment = 0.0 if request.POST['adjustment'] == "" else float(request.POST['adjustment']),
                shipping_charge = 0.0 if request.POST['shipping_charge'] == "" else float(request.POST['shipping_charge']),
                grand_total = 0.0 if request.POST['grand_total'] == "" else float(request.POST['grand_total']),
                advanced_paid = 0.0 if request.POST['advanced_paid'] == "" else float(request.POST['advanced_paid']),
                balance = request.POST['grand_total'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['description'],
                terms_and_condition = request.POST['terms_and_condition']
            )
            

            if 'customer_billing_address' in request.POST:
                sale.customer_billing_address = request.POST['customer_billing_address']

            sale.save()

            

            if len(request.FILES) != 0:
                sale.document=request.FILES.get('file')
            sale.save()

            if 'save_as_draft' in request.POST:
                sale.status = "Draft"
            elif "save" in request.POST:
                sale.status = "Save" 
            sale.save()

            
            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['customer_place_of_supply'] == comp_details.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    SalesOrderItems.objects.create(company=comp_details, login_details=log_details, sales_order=sale, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            

            # Save transaction
                 
            SalesOrderHistory.objects.create(
                company=comp_details,
                login_details=log_details,
                sales_order=sale,
                date=sale.sales_order_date,
                current_date=date.today(),
                action='Created'
            )


            SalesOrderReference.objects.create(
                reference_number = request.POST['reference_number'],
                company = comp_details,
                staff = None if log_details.user_type == 'Company' else StaffDetails.objects.get(login_details = log_details) 
            )


            # messages.success(request, 'Sales Order created successfully!')


            est = Estimate.objects.get(id=pk)
            est.converted_to_sales_order = sale
            est.save()


            return redirect(sales_estimate)
        else:
            return redirect(sales_estimate)
    else:
        return redirect('/')
    

def convert_estimate_to_invoice(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(login_details=login_d)
            customer_details = Customer.objects.filter(company=dash_details)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            priceList = PriceList.objects.filter(company = company, type = 'Sales', status = 'Active')
            tax = estimate.cgst + estimate.sgst

            units = Unit.objects.filter(company=company)

            accounts=Chart_of_Accounts.objects.filter(company=company)

            item=Items.objects.filter(company=company)

            latest_inv = invoice.objects.filter(company = company).order_by('-id').first()

            new_number = int(latest_inv.reference_number) + 1 if latest_inv else 1

            if invoiceReference.objects.filter(company = company).exists():

                last_ref_num = invoiceReference.objects.filter(company = company).last()
                new_ref_num = int(last_ref_num.reference_number) + 1

            else:
                new_ref_num = 1

            # if invoiceReference.objects.filter(company = company).exists():
            #     deleted = invoiceReference.objects.get(company = company)
                
            #     if deleted:
            #         while int(deleted.reference_number) >= new_number:
            #             new_ref_num += 1


            nxtInv = ""
            lastInv = invoice.objects.filter(company = company).last()
            if lastInv:
                inv_no = str(lastInv.invoice_number)
                numbers = []
                stri = []
                for word in inv_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)
                
                num=''
                for i in numbers:
                    num +=i
                
                st = ''
                for j in stri:
                    st = st+j

                inv_num = int(num)+1

                padding_length = len(num) - 1

                        
                nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
            else:
                nxtInv = 'in-01'


        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'nxtInv':nxtInv,
                'new_ref_num':new_ref_num,
                'est_items':est_items,
                'comp_payment_terms':comp_payment_terms,
                'items':item,
                'units':units,
                'accounts':accounts,
                'priceListItems':priceList,
                'tax':tax,
                

            }
            return render(request,'zohomodules/estimate/estimate_to_invoice.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            customer_details = Customer.objects.filter(company=dash_details.company)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            priceList = PriceList.objects.filter(company = company, type = 'Sales', status = 'Active')
            tax = estimate.cgst + estimate.sgst

            item=Items.objects.filter(company=company)

            units = Unit.objects.filter(company=company)
            accounts=Chart_of_Accounts.objects.filter(company=company)



            latest_inv = invoice.objects.filter(company = company).order_by('-id').first()

            new_number = int(latest_inv.reference_number) + 1 if latest_inv else 1

            if invoiceReference.objects.filter(company = company).exists():

                last_ref_num = invoiceReference.objects.filter(company = company).last()
                new_ref_num = int(last_ref_num.reference_number) + 1

            else:
                new_ref_num = 1


                # deleted = invoiceReference.objects.get(company = company)
                
                # if deleted:
                #     while int(deleted.reference_number) >= new_number:
                #         new_ref_num += 1




            nxtInv = ""
            lastInv = invoice.objects.filter(company = company).last()
            if lastInv:
                inv_no = str(lastInv.invoice_number)
                numbers = []
                stri = []
                for word in inv_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)
                
                num=''
                for i in numbers:
                    num +=i
                
                st = ''
                for j in stri:
                    st = st+j

                inv_num = int(num)+1

                padding_length = len(num) - 1

                        
                nxtInv = f"{st}{num[0]}{inv_num:0{padding_length}d}"
            else:
                nxtInv = 'in-01'

        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'nxtInv':nxtInv,
                'new_ref_num':new_ref_num,
                'est_items':est_items,
                'comp_payment_terms':comp_payment_terms,
                'items':item,
                'units':units,
                'accounts':accounts,
                'priceListItems':priceList,
                'tax':tax,

            }
            return render(request,'zohomodules/estimate/estimate_to_invoice.html', context)


def checkInvoiceNumberEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        InvNo = request.GET['InvNum']

        # Finding next invoice number w r t last invoice number if exists.
        nxtInv = ""
        lastInv = invoice.objects.filter(company = com).last()
        if lastInv:
            inv_no = str(lastInv.invoice_number)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtInv = 'in-01'

        PatternStr = []
        for word in InvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkInvoiceNumberPatternEst(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Invoice No. Pattern already Exists.!'})
        elif invoice.objects.filter(company = com, invoice_number__iexact = InvNo).exists():
            return JsonResponse({'status':False, 'message':'Invoice No. already Exists.!'})
        elif nxtInv != "" and InvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def checkInvoiceNumberPatternEst(pattern):
    models = [RecurringInvoice, Estimate, SaleOrder]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False


def convert_estimate_to_invoice_op(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['invoice_no']
            if invoice.objects.filter(company = com, invoice_number__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = invoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                # customer_billingaddress = None if request.POST['bill_address'] == "" else request.POST['bill_address'],
                customer_GSTtype = request.POST['customer_gst_type'],
                customer_GSTnumber = None if request.POST['customer_gstin'] == "" else request.POST['customer_gstin'],
                customer_place_of_supply = request.POST['place_of_supply'],
                reference_number = request.POST['reference_number'],
                invoice_number = request.POST['invoice_no'],
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                date = request.POST['start_date'],
                expiration_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                # Order_number = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                UPI_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                sub_total = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                IGST = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                CGST = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                SGST = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grand_total = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advanced_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_condition = request.POST['terms']
            )

            if 'bill_address' in request.POST:
                    inv.customer_billingaddress = request.POST['bill_address']

            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'save_as_draft' in request.POST:
                inv.status = "Draft"
            elif "save" in request.POST:
                inv.status = "Saved" 
            inv.save()



            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    invoiceitems.objects.create(company = com, logindetails = com.login_details, invoice = inv, Items = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            invoiceHistory.objects.create(
                company = com,
                login_details = com.login_details,
                invoice = inv,
                action = 'Created'
            )

            invoiceReference.objects.create(
                reference_number = request.POST['reference_number'],
                company = com,
                staff = None if log_details.user_type == 'Company' else StaffDetails.objects.get(login_details = log_details) 
            )

            est = Estimate.objects.get(id=pk)
            est.converted_to_invoice = inv
            est.save()


            return redirect(sales_estimate)
        else:
            return redirect(sales_estimate)
    else:
       return redirect('/')


def convert_estimate_to_recurring_invoice(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=login_d)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(login_details=login_d)
            customer_details = Customer.objects.filter(company=dash_details)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            repeat = CompanyRepeatEvery.objects.filter(company = company)
            priceList = PriceList.objects.filter(company = company, type = 'Sales', status = 'Active')
            tax = estimate.cgst + estimate.sgst

            item=Items.objects.filter(company=company)

            units = Unit.objects.filter(company=company)

            accounts=Chart_of_Accounts.objects.filter(company=company)


            # Fetching last rec_invoice and assigning upcoming ref no as current + 1
            # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
            latest_inv = RecurringInvoice.objects.filter(company = company).order_by('-id').first()

            new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

            if Reccurring_Invoice_Reference.objects.filter(company = company).exists():
                deleted = Reccurring_Invoice_Reference.objects.get(company = company)
                
                if deleted:
                    while int(deleted.reference_number) >= new_number:
                        new_number+=1

            # Finding next rec_invoice number w r t last rec_invoice number if exists.
            nxtInv = ""
            lastInv = RecurringInvoice.objects.filter(company=company).last()

            if lastInv:
                inv_no = str(lastInv.rec_invoice_no)
                numbers = []
                stri = []
                for word in inv_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)

                num = ''.join(numbers)
                st = ''.join(stri)

                inv_num = int(num) + 1
                if num[0] == 0:
                    nxtInv = st + num.zfill(len(num)) 
                else:
                    nxtInv = st + str(inv_num).zfill(len(num))
            else:
                nxtInv = 'RI001'


        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'est_items':est_items,
                'comp_payment_terms':comp_payment_terms,
                'nxtInv':nxtInv,
                'new_number':new_number,
                'repeat':repeat,
                'items':item,
                'units':units,
                'accounts':accounts,
                'priceListItems':priceList,
                'tax':tax,

            }
            return render(request,'zohomodules/estimate/estimate_to_recurring_invoice.html', context)

        if login_d.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=login_d,company_approval=1)
            allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
            estimate = Estimate.objects.get(id=pk)
            company = CompanyDetails.objects.get(id=dash_details.company.id)
            customer_details = Customer.objects.filter(company=dash_details.company)
            est_items = EstimateItems.objects.filter(estimate=estimate)
            comp_payment_terms=Company_Payment_Term.objects.filter(company=company)
            repeat = CompanyRepeatEvery.objects.filter(company = company)
            priceList = PriceList.objects.filter(company = company, type = 'Sales', status = 'Active')
            tax = estimate.cgst + estimate.sgst

            item=Items.objects.filter(company=company)

            units = Unit.objects.filter(company=company)

            accounts=Chart_of_Accounts.objects.filter(company=company)


            # Fetching last rec_invoice and assigning upcoming ref no as current + 1
            # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
            latest_inv = RecurringInvoice.objects.filter(company = company).order_by('-id').first()

            new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

            if Reccurring_Invoice_Reference.objects.filter(company = company).exists():
                deleted = Reccurring_Invoice_Reference.objects.get(company = company)
                
                if deleted:
                    while int(deleted.reference_number) >= new_number:
                        new_number+=1

            # Finding next rec_invoice number w r t last rec_invoice number if exists.
            nxtInv = ""
            lastInv = RecurringInvoice.objects.filter(company=company).last()

            if lastInv:
                inv_no = str(lastInv.rec_invoice_no)
                numbers = []
                stri = []
                for word in inv_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)

                num = ''.join(numbers)
                st = ''.join(stri)

                inv_num = int(num) + 1
                if num[0] == 0:
                    nxtInv = st + num.zfill(len(num)) 
                else:
                    nxtInv = st + str(inv_num).zfill(len(num))
            else:
                nxtInv = 'RI001'

        
            context = {
                'details':dash_details,
                'allmodules':allmodules,
                'login_d':login_d,
                'estimate':estimate,
                'company':company,
                'customer':customer_details,
                'est_items':est_items,
                'comp_payment_terms':comp_payment_terms,
                'nxtInv':nxtInv,
                'new_number':new_number,
                'repeat':repeat,
                'items':item,
                'units':units,
                'accounts':accounts,
                'priceListItems':priceList,
                'tax':tax,

            }
            return render(request,'zohomodules/estimate/estimate_to_recurring_invoice.html', context)


def checkRecurringInvoiceNumberEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = RecurringInvoice.objects.filter(company = com).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtInv = 'RI001'

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j



        pattern_exists = checkRecInvNumberPatternEst(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. Pattern already Exists.!'})
        if RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkRecInvNumberPatternEst(pattern):
    models = [invoice, Estimate, SaleOrder]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def convert_estimate_to_recurring_invoice_op(request,pk):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']

            PatternStr = []
            for word in invNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                
                pattern += j

            # pattern_exists = checkRecInvNumberPattern(pattern)

            # if pattern !="" and pattern_exists:
            #     res = f'<script>alert("Rec. Invoice No. Pattern already Exists.! Try another!");window.history.back();</script>'
            #     return HttpResponse(res)

            if RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = RecurringInvoice(
                company = com,
                login_details = com.login_details,
                customer = Customer.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customer_email'],
                # billing_address = request.POST['bill_address'],
                gst_type = request.POST['customer_gst_type'],
                # gstin = request.POST['customer_gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Company_Payment_Term.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else PriceList.objects.get(id = request.POST['price_list_id']),
                repeat_every = CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                advance_paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                description = request.POST['note'],
                terms_and_conditions = request.POST['terms']
            )

            if 'customer_gstin' in request.POST:
                inv.gstin = request.POST['customer_gstin']
            if 'bill_address' in request.POST:
                inv.billing_address = request.POST['bill_address']


            inv.save()

            if len(request.FILES) != 0:
                inv.document=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Saved" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.state else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Items.objects.get(id = int(ele[0]))
                    Reccurring_Invoice_item.objects.create(company = com, login_details = com.login_details, reccuring_invoice = inv, item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax_rate = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()

            # Save transaction
                    
            RecurringInvoiceHistory.objects.create(
                company = com,
                login_details = log_details,
                recurring_invoice = inv,
                action = 'Created'
            )


            est = Estimate.objects.get(id=pk)
            est.converted_to_recurring_invoice = inv
            est.save()

            return redirect(sales_estimate)
        else:
            return redirect(sales_estimate)
    else:
       return redirect('/')

def download_estimate_sample_import_file(request):

    estimate_table_data = [['SLNO','CUSTOMER','ESTIMATE DATE','PLACE OF SUPPLY','ESTIMATE NO','TERMS','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL'],['1', 'Arun Kumar', '2024-03-20', '[KL]-Kerala','EST100','NET 30','description','1000','0','25','25','50','0','0','1050']]
    items_table_data = [['ESTIMATE NO', 'PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL'], ['1', 'Test Item 1','789987','1','1000','5','0','1000']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'estimate'
    sheet2 = wb.create_sheet(title='items')

    # Populate the sheets with data
    for row in estimate_table_data:
        sheet1.append(row)

    for row in items_table_data:
        sheet2.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=estimate_sample_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response


def import_estimate_from_excel(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company 

        current_datetime = timezone.now()
        dateToday =  current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
        
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            # checking estimate sheet columns
            try:
                ws = wb["estimate"]
            except:
                print('sheet not found')
                messages.error(request,'`estimate` sheet not found.! Please check.')
                return redirect(sales_estimate)

            try:
                ws = wb["items"]
            except:
                print('sheet not found')
                messages.error(request,'`items` sheet not found.! Please check.')
                return redirect(sales_estimate)
            
            ws = wb["estimate"]
            estimate_columns = ['SLNO','CUSTOMER','ESTIMATE DATE','PLACE OF SUPPLY','ESTIMATE NO','TERMS','DESCRIPTION','SUB TOTAL','IGST','CGST','SGST','TAX AMOUNT','ADJUSTMENT','SHIPPING CHARGE','GRAND TOTAL']
            estimate_sheet = [cell.value for cell in ws[1]]
            if estimate_sheet != estimate_columns:
                print('invalid sheet')
                messages.error(request,'`estimate` sheet column names or order is not in the required formate.! Please check.')
                return redirect(sales_estimate)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,date,place_of_supply, estimate_no, terms, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal = row
                if slno is None  or customer is None  or date is None or place_of_supply is None  or estimate_no is None  or terms is None  or subtotal is None or taxamount is None or grandtotal is None:
                    print('estimate == invalid data')
                    messages.error(request,'`estimate` sheet entries missing required fields.! Please check.')
                    return redirect(sales_estimate)
            
            # checking items sheet columns
            ws = wb["items"]
            items_columns = ['ESTIMATE NO','PRODUCT','HSN','QUANTITY','PRICE','TAX PERCENTAGE','DISCOUNT','TOTAL']
            items_sheet = [cell.value for cell in ws[1]]
            if items_sheet != items_columns:
                print('invalid sheet')
                messages.error(request,'`items` sheet column names or order is not in the required formate.! Please check.')
                return redirect(sales_estimate)

            for row in ws.iter_rows(min_row=2, values_only=True):
                est_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                if est_no is None or name is None or quantity is None or tax_percentage is None or total is None:
                    print('items == invalid data')
                    messages.error(request,'`items` sheet entries missing required fields.! Please check.')
                    return redirect(sales_estimate)
            
            # getting data from estimate sheet and create estimate.
            incorrect_data = []
            existing_pattern = []
            ws = wb['estimate']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer,startdate,place_of_supply, estimate_no, terms, description, subtotal, igst, cgst, sgst, taxamount, adjustment, shipping, grandtotal = row
                estNo = slno
                if slno is None:
                    continue
                # Fetching last rec_inv and assigning upcoming rec_inv no as current + 1
                # Also check for if any rec_inv is deleted and rec_inv no is continuos w r t the deleted rec_inv
                latest_est = Estimate.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_est.reference_number) + 1 if latest_est else 1

                # if EstimateReference.objects.filter(company = com).exists():
                #     deleted = EstimateReference.objects.get(company = com)
                    
                #     if deleted:
                #         while int(deleted.reference_number) >= new_number:
                #             new_number+=1
                
                cust = customer.split(' ')
            
                if len(cust) > 2:
                    cust[1] = cust[1] + ' ' + ' '.join(cust[2:])
                    cust = cust[:2]
                    fName = cust[0]
                    lName = cust[1]
                else:
                    fName = cust[0]
                    lName = cust[1]
                print(cust,fName,lName)

                if lName == "":  
                    if not Customer.objects.filter(company = com, first_name = fName).exists():
                        print('No Customer1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if fName != "" and lName != "":  
                    if not Customer.objects.filter(company = com, first_name = fName, last_name = lName).exists():
                        print('No Customer2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        c = Customer.objects.filter(company = com, first_name = fName, last_name = lName).first()
                        email = c.customer_email
                        gstType = c.GST_treatement
                        gstIn = c.GST_number
                        adrs = f"{c.billing_address}, {c.billing_city}\n{c.billing_state}\n{c.billing_country}\n{c.billing_pincode}"
                    except:
                        pass

                if startdate is None:
                    startdate = dateToday
                else:
                    startdate = datetime.strptime(startdate, '%Y-%m-%d').date()

                PatternStr = []
                for word in estimate_no:
                    if word.isdigit():
                        pass
                    else:
                        PatternStr.append(word)
                
                pattern = ''
                for j in PatternStr:
                    pattern += j

                pattern_exists = checkEstNumberPattern(pattern)

                if pattern !="" and pattern_exists:
                    existing_pattern.append(slno)
                    continue

                while Estimate.objects.filter(company = com, estimate_number__iexact = estimate_no).exists():
                    estimate_no = getNextEstNumber(estimate_no)

                try:
                    trm = Company_Payment_Term.objects.get(company = com, term_name = terms)
                    endDate = startdate+timedelta(days = trm.days)
                except:
                    trm = None
                    endDate = None
                # try:
                #     priceList = PriceList.objects.get(company = com, name = price_list)
                # except:
                #     priceList = None

                # try:
                #     rpt = CompanyRepeatEvery.objects.get(company = com, repeat_every = repeat)
                # except:
                #     rpt = None

                est = Estimate(
                    company = com,
                    login_details = com.login_details,
                    customer = None if c is None else c,
                    customer_email = email,
                    customer_bill_address = adrs,
                    customer_gst_treatment = gstType,
                    customer_gst_number = gstIn,
                    customer_place_of_supply = place_of_supply,
                    reference_number = new_number,
                    estimate_number = estimate_no,
                    payment_term = trm,
                    estimate_date = startdate,
                    expiration_date = endDate,
                    sub_total = 0.0 if subtotal == "" else float(subtotal),
                    tax_amount_igst = 0.0 if igst == "" else float(igst),
                    cgst = 0.0 if cgst == "" else float(cgst),
                    sgst = 0.0 if sgst == "" else float(sgst),
                    adjustment = 0.0 if adjustment == "" else float(adjustment),
                    shipping_charge = 0.0 if shipping == "" else float(shipping),
                    grand_total = 0.0 if grandtotal == "" else float(grandtotal),
                    description = "" if description == "" else description,
                    status = "Draft"
                )
                est.save()

                # Transaction history
                history = EstimateHistory(
                    company = com,
                    login_details = log_details,
                    estimate = est,
                    date = dateToday,
                    action = 'Created'
                )
                history.save()

                # Items for the estimate
                ws = wb['items']
                for row in ws.iter_rows(min_row=2, values_only=True):
                    est_no,name,hsn,quantity,price,tax_percentage,discount,total = row
                    if int(est_no) == int(estNo):
                        print(row)
                        if discount is None:
                            discount=0
                        if price is None:
                            price=0
                        if quantity is None:
                            quantity=0
                        if not Items.objects.filter(company = com, item_name = name,hsn_code=hsn,selling_price=price).exists():
                            print('No Item')
                            incorrect_data.append(est_no)
                            continue
                        try:
                            itm = Items.objects.filter(company = com, item_name = name).first()
                        except:
                            pass

                        EstimateItems.objects.create(company = com, login_details = com.login_details, estimate = est, item = itm, hsn = hsn, quantity = quantity, price = price, tax_rate = tax_percentage, discount = discount, total = total)
                        itm.current_stock -= int(quantity)
                        itm.save()

            if not incorrect_data and not existing_pattern:
                messages.success(request, 'Data imported successfully.!')
                return redirect(sales_estimate)
            else:
                if incorrect_data:
                    messages.warning(request, f'Data with following SlNo could not import due to incorrect data provided -> {", ".join(str(item) for item in incorrect_data)}')
                if existing_pattern:
                    messages.warning(request, f'Data with following SlNo could not import due to Estimate No pattern exists already -> {", ".join(str(item) for item in existing_pattern)}')
                return redirect(sales_estimate)
        else:
            return redirect(sales_estimate)
    else:
        return redirect('/')


def getNextEstNumber(estimate_no):
    est_no = estimate_no
    numbers = []
    stri = []
    for word in est_no:
        if word.isdigit():
            numbers.append(word)
        else:
            stri.append(word)
    
    num = ''.join(numbers)
    st = ''.join(stri)

    est_num = int(num) + 1
    if num[0] == 0:
        nxtEstInv = st + num.zfill(len(num)) 
    else:
        nxtEstInv = st + str(est_num).zfill(len(num))

    return nxtEstInv


def checkEstNumberPattern(pattern):
    models = [invoice, SaleOrder, RecurringInvoice]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False


def estimatePdf(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        est = Estimate.objects.get(id = pk)
        itms = EstimateItems.objects.filter(estimate = est)
    
        context = {'estimate':est, 'estimateItems':itms,'cmp':com}
        
        template_path = 'zohomodules/estimate/estimate_pdf.html'
        fname = 'Estimate_'+ est.estimate_number
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')


def estimate_share_email(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        est = Estimate.objects.get(id = pk)
        itms = EstimateItems.objects.filter(estimate = est)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'estimate':est, 'estimateItems':itms,'cmp':com}
                template_path = 'zohomodules/estimate/estimate_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Estimate_{est.estimate_number}'
                subject = f"Estimate_{est.estimate_number}"
                # from django.core.mail import EmailMessage as EmailMsg


                msg = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached Estimate for - ESTIMATE-{est.estimate_number}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", settings.EMAIL_HOST_USER, emails_list)
                msg.attach(filename, pdf, 'application/pdf')
                msg.send()





                # email = EmailMsg(subject, f"Hi,\nPlease find the attached Estimate for - ESTIMATE-{est.estimate_number}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                # email.attach(filename, pdf, "application/pdf")
                # email.send(fail_silently=False)

                messages.success(request, 'Estimate details has been shared via email successfully..!')
                return redirect(reverse('sales_estimate_overview', args=[pk]))
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(reverse('sales_estimate_overview', args=[pk]))

def attach_estimate_document(request,pk):
    if 'login_id' in request.session:
        est = Estimate.objects.get(id = pk)

        if request.method == 'POST':
            est.document = request.FILES.get('file')
            est.save()

        return redirect(reverse('sales_estimate_overview', args=[pk]))
    else:
        return redirect('/')
    
def newEstimateCustomerAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'




            
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.remarks=request.POST['remark']

            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            # vdata=Customer.objects.get(id=customer_data.id)
            # rdata=Customer_remarks_table()
            # rdata.remarks=request.POST['remark']
            # rdata.company=com
            # rdata.customer=vdata
            # rdata.save()

        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})


def getEstCustomersAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')


def createNewItemAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = 0 if request.POST['pcost'] == "" else request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = 0 if request.POST['salesprice'] == "" else request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = 0 if request.POST['min_stock'] == "" else request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag = 'active',
                type = 'Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = log_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def getAllItemsAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')


def getselCustomerDetailsEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)
        
      
        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def getselItemDetailsEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
        
        item_name = request.GET.get('item', '')
        item = Items.objects.filter(company=cmp, item_name=item_name).first()

        if item:
            context = {
                'status': True,
                'id': item.id,
                'hsn': item.hsn_code,
                'sales_rate': item.selling_price,
                'purchase_rate': item.purchase_price,
                'avl': item.current_stock,
                'tax': True if item.tax_reference == 'taxable' else False,
                'gst': item.intrastate_tax,
                'igst': item.interstate_tax,
                'PLPrice': None,  # Since priceListId related content is removed, set to None
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status': False, 'message': 'Item not found'})
    else:
        return redirect('/')


def createsalesCustomerEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'

            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'

            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.remarks=request.POST['remark']

            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})


def getsalesCustomersEst(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')


def createNewItemselEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag ='active',
                type ='Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = com.login_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')


def getAllItemsselEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')
    

def newselPaymentTermEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')


def addsel_unitEst(request):                                                               
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})


def show_unit_dropdownselEst(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)


def checksalesorderNumberEsti(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
        
        RecSelNo = request.GET['RecSelNum']

        nxtSel = ""
        lastSel = SaleOrder.objects.filter(company = comp_details).last()

        if lastSel:
            sel_no = str(lastSel.sales_order_number)

            numbers = []
            stri = []
            for word in sel_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j            

            sel_num = int(num)+1
        
            padding_length = len(num) - 1
   
            nxtSel = f"{st}{num[0]}{sel_num:0{padding_length}d}"
            print(nxtSel)
            

        PatternStr = []
        for word in RecSelNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j
            print("patern")
            print(pattern)

        if SaleOrder.objects.filter(company = comp_details, sales_order_number__iexact = RecSelNo).exists():
            return JsonResponse({'status':False, 'message':'Salesorder No. already Exists.!'})
        elif nxtSel != "" and RecSelNo != nxtSel:
            return JsonResponse({'status':False, 'message':'Salesorder No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def getinvCustomerDetailsEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def createNewIteminvEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        hsn = request.POST['hsn']
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'None-Taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'None-Taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Items.objects.filter(company=com, item_name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Items.objects.filter(company = com, hsn_code__iexact = hsn).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Items(
                company = com,
                login_details = com.login_details,
                item_name = name,
                item_type = type,
                unit = None if unit == "" else Unit.objects.get(id = int(unit)),
                hsn_code = hsn,
                tax_reference = tax,
                intrastate_tax = gstTax,
                interstate_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                date = createdDate,
                minimum_stock_to_maintain = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                opening_stock_per_unit = stockUnitRate,
                track_inventory = int(request.POST['trackInv']),
                activation_tag ='active',
                type ='Opening Stock'
            )
            item.save()

            #save transaction

            Item_Transaction_History.objects.create(
                company = com,
                logindetails = com.login_details,
                items = item,
                Date = createdDate,
                action = 'Created'

            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')


def getinvItemDetailsEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
        priceListId = request.GET['listId']
        item = Items.objects.filter(company = cmp, item_name = itemName).first()

        if priceListId != "":
            priceList = PriceList.objects.get(id = int(priceListId))

            if priceList.item_rate_type == 'Each Item':
                try:
                    priceListPrice = float(PriceListItem.objects.get(company = cmp, price_list = priceList, item = item).custom_rate)
                except:
                    priceListPrice = item.selling_price
            else:
                mark = priceList.percentage_type
                percentage = float(priceList.percentage_value)
                roundOff = priceList.round_off

                if mark == 'Markup':
                    price = float(item.selling_price) + float((item.selling_price) * (percentage/100))
                else:
                    price = float(item.selling_price) - float((item.selling_price) * (percentage/100))

                if priceList.round_off != 'Never Mind':
                    if roundOff == 'Nearest Whole Number':
                        finalPrice = round(price)
                    else:
                        finalPrice = int(price) + float(roundOff)
                else:
                    finalPrice = price

                priceListPrice = finalPrice
        else:
            priceListPrice = None

        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,
            'PLPrice':priceListPrice,

        }
        return JsonResponse(context)
    else:
       return redirect('/')


def getAllItemsinvEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        items = {}
        option_objects = Items.objects.filter(company = com, activation_tag='active')
        for option in option_objects:
            items[option.id] = [option.id,option.item_name]

        return JsonResponse(items)
    else:
        return redirect('/')



def newinvPaymentTermEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')

def addinv_unitEst(request):                                                               
    login_id = request.session['login_id']
    log_user = LoginDetails.objects.get(id=login_id)

    if log_user.user_type == 'Company':
        if request.method == 'POST':
            c = CompanyDetails.objects.get(login_details=login_id)
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    elif log_user.user_type == 'Staff':
        if request.method == 'POST':
            staff = LoginDetails.objects.get(id=login_id)
            sf = StaffDetails.objects.get(login_details=staff)
            c = sf.company
            unit_name = request.POST['units']
            
            if Unit.objects.filter(unit_name=unit_name, company=c).exists():
                return JsonResponse({"message": "error"})
            else:
                unit = Unit(unit_name=unit_name, company=c)  
                unit.save()  
                return JsonResponse({"message": "success"})

    return JsonResponse({"message": "success"})
# create unit


def showinvunit_dropdownEst(request):                                                               
   if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)


def getAllAccountsEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')


def getinvBankAccountNumberEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        bankId = request.GET['id']
        bnk = Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def getCustomerDetailsAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)

        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None or cust.GST_number == 'null' else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def newPaymentTermAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        term = request.POST['term']
        days = request.POST['days']

        if not Company_Payment_Term.objects.filter(company = com, term_name__iexact = term).exists():
            Company_Payment_Term.objects.create(company = com, term_name = term, days =days)
            
            list= []
            terms = Company_Payment_Term.objects.filter(company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')


def newRepeatEveryTypeAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        dur = int(request.POST['duration'])
        type = request.POST['type']

        d = 30 if type == 'Month' else 360
        dys = dur * d
        print(dur,d,dys)
        rep_every = str(dur)+" "+type

        if not CompanyRepeatEvery.objects.filter(company = com, repeat_every__iexact = rep_every).exists():
            CompanyRepeatEvery.objects.create(company = com, repeat_every = rep_every, repeat_type = type, duration = dur, days = dys)
            
            list= []
            rep = CompanyRepeatEvery.objects.filter(company = com)

            for r in rep:
                repDict = {
                    'repeat_every': r.repeat_every,
                    'id': r.id
                }
                list.append(repDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{rep_every} already exists, try another.!'})

    else:
        return redirect('/')


def getUnitsAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

            options = {}
            option_objects = Unit.objects.filter(company=com)
            for option in option_objects:
                options[option.id] = [option.id,option.unit_name]
            return JsonResponse(options)

        
def getItemDetailsAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        itemName = request.GET['item']
        priceListId = request.GET['listId']
        item = Items.objects.filter(company = cmp, item_name = itemName).first()

        if priceListId != "":
            priceList = PriceList.objects.get(id = int(priceListId))

            if priceList.item_rate_type == 'Each Item':
                try:
                    priceListPrice = float(PriceListItem.objects.get(company = cmp, price_list = priceList, item = item).custom_rate)
                except:
                    priceListPrice = item.selling_price
            else:
                mark = priceList.percentage_type
                percentage = float(priceList.percentage_value)
                roundOff = priceList.round_off

                if mark == 'Markup':
                    price = float(item.selling_price) + float((item.selling_price) * (percentage/100))
                else:
                    price = float(item.selling_price) - float((item.selling_price) * (percentage/100))

                if priceList.round_off != 'Never Mind':
                    if roundOff == 'Nearest Whole Number':
                        finalPrice = round(price)
                    else:
                        finalPrice = int(price) + float(roundOff)
                else:
                    finalPrice = price

                priceListPrice = finalPrice
        else:
            priceListPrice = None

        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn_code,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intrastate_tax,
            'igst':item.interstate_tax,
            'PLPrice':priceListPrice,

        }
        return JsonResponse(context)
    else:
       return redirect('/')


def getBankAccountNumberAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        bankId = request.GET['id']
        bnk = Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def checkRecurringInvoiceNumberEsti(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = RecurringInvoice.objects.filter(company = com).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtInv = st + num.zfill(len(num)) 
            else:
                nxtInv = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtInv = 'RI01'

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkEstimatePattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. Pattern already Exists.!'})
        elif RecurringInvoice.objects.filter(company = com, rec_invoice_no__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def createNewAccountAjaxEst(request):                                                                #new by tinto mt
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        if request.method=='POST':
            a=Chart_of_Accounts()
            b=Chart_of_Accounts_History()
            b.company=com
            b.logindetails=com.login_details
            b.action="Created"
            b.Date=date.today()
            a.login_details=com.login_details
            a.company=com
          
        
            a.account_type = request.POST.get("account_type",None)
            a.account_name = request.POST.get("account_name",None)
            a.account_code = request.POST.get("account_code",None)
            a.account_number = request.POST.get("account_number",None)
            a.account_description = request.POST['description']
            a.sub_account = request.POST.get("sub_acc",None)
            a.parent_account = request.POST.get("parent_acc",None)
               
            account_type=request.POST.get("account_type",None)
            if account_type == 'Other Assets':
                a.description = 'Track special assets like goodwill and other intangible assets'
            if account_type == 'Other Current Assets':
                a.description = 'Any short term asset that can be converted into cash or cash equivalents easily Prepaid expenses Stocks and Mutual Funds'
            if account_type == 'Cash':
                a.description = 'To keep track of cash and other cash equivalents like petty cash, undeposited funds, etc., use an organized accounting system  financial software'
            if account_type == 'Bank':
                a.description = 'To keep track of bank accounts like Savings, Checking, and Money Market accounts.'
            if account_type == 'Fixed Asset':
                a.description = 'Any long-term investment or asset that cannot be easily converted into cash includes: Land and Buildings, Plant, Machinery, and Equipment, Computers, Furniture.'
            if account_type == 'Stock':
                a.description = 'To keep track of your inventory assets.'
            if account_type == 'Payment Clearing':
                a.description = 'To keep track of funds moving in and out via payment processors like Stripe, PayPal, etc.'
            if account_type == 'Other Liability':
                a.description = 'Obligation of an entity arising from past transactions or events which would require repayment.Tax to be paid Loan to be Repaid Accounts Payableetc.'
            if account_type == 'Other Current Liability':
                a.description = 'Any short term liability like: Customer Deposits Tax Payable'
            if account_type == 'Credit Card':
                a.description = 'Create a trail of all your credit card transactions by creating a credit card account.'
            if account_type == 'Long Term Liability':
                a.description = 'Liabilities that mature after a minimum period of one year like: Notes Payable Debentures Long Term Loans '
            if account_type == 'Overseas Tax Payable':
                a.description = 'Track your taxes in this account if your business sells digital services to foreign customers.'
            if account_type == 'Equity':
                a.description = 'Owners or stakeholders interest on the assets of the business after deducting all the liabilities.'
            if account_type == 'Income':
                a.description = 'Income or Revenue earned from normal business activities like sale of goods and services to customers.'
            if account_type == 'Other Income':
                a.description = 'Income or revenue earned from activities not directly related to your business like : Interest Earned Dividend Earned'
            if account_type == 'Expense':
                a.description = 'Reflects expenses incurred for running normal business operations, such as : Advertisements and Marketing Business Travel Expenses License Fees Utility Expenses'
            if account_type == 'Cost Of Goods Sold':
                a.description = 'This indicates the direct costs attributable to the production of the goods sold by a company such as: Material and Labor costs Cost of obtaining raw materials'
            if account_type == 'Other Expense':
                a.description = 'Track miscellaneous expenses incurred for activities other than primary business operations or create additional accounts to track default expenses like insurance or contribution towards charity.'
    
            a.Create_status="added"
            a.status = 'Active'
            ac_name=request.POST.get("account_name",None)
            if Chart_of_Accounts.objects.filter(account_name=ac_name,company=com).exists():
                return JsonResponse({'status': False, 'message':'Account Name already exists.!'})
            else:
                a.save()
                b.chart_of_accounts=a
                b.save()
                return JsonResponse({'status': True})

    else:
        return redirect('/')

def getAllAccountsAjaxEst(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        acc = {}
        acc_objects = Chart_of_Accounts.objects.filter(company = com, status = 'Active')
        for option in acc_objects:
            acc[option.id] = [option.account_name,option.account_type]

        return JsonResponse(acc)
    else:
        return redirect('/')



#<-------------------estimate--end-------------------------------------------------------->

def stock_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        # Fetch items related to the company
        items = Items.objects.filter(company=cmp)
        item_data = []
        for item in items:
            # Calculate the total quantity sold for each item
            total_quantity_sold = SalesOrderItems.objects.filter(
                item=item, company=cmp
            ).aggregate(total_quantity_sold=Sum('quantity'))['total_quantity_sold'] or 0

            difference = item.current_stock - total_quantity_sold
            item_data.append({
                'item_name': item.item_name,
                'opening_stock': item.opening_stock,
                'quantity_sold': total_quantity_sold,
                'difference': difference,
            })

        context = {
            'cmp': cmp,
            'details': dash_details,
            'log_details': log_details,
            'items': item_data,
            'allmodules': allmodules
        }
        return render(request, 'zohomodules/Reports/stock_summary.html', context)
    else:
        # Handle the case when the user is not logged in
        return redirect('/')


def customize_stock_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        # Get date range from request
        from_date = request.GET.get('from_date')
        to_date = request.GET.get('to_date')

        # Fetch items related to the company
        items = Items.objects.filter(company=cmp)
        item_data = []

        for item in items:
            # Filter SalesOrderItems based on date range if provided
            sales_order_items_query = SalesOrderItems.objects.filter(item=item, company=cmp)
            if from_date and to_date:
                sales_order_items_query = sales_order_items_query.filter(
                    sales_order__sales_order_date__range=[from_date, to_date]
                )
            total_quantity_sold = sales_order_items_query.aggregate(
                total_quantity_sold=Sum('quantity')
            )['total_quantity_sold'] or 0

            difference = item.current_stock - total_quantity_sold
            item_data.append({
                'item_name': item.item_name,
                'opening_stock': item.opening_stock,
                'quantity_sold': total_quantity_sold,
                'difference': difference,
            })

        context = {
            'cmp': cmp,
            'details': dash_details,
            'log_details': log_details,
            'items': item_data,
            'allmodules': allmodules,
            'from_date': from_date,
            'to_date': to_date,
        }
        return render(request, 'zohomodules/Reports/stock_summary.html', context)
    else:
        # Handle the case when the user is not logged in
        return redirect('/')


def shareStockSummaryToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)


            allmodules = ZohoModules.objects.filter(company=cmp, status='New')

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

               
                from_date = request.POST['start']
                to_date = request.POST['end']
               

                
                if from_date and to_date:
                    items = Items.objects.filter(salesorderitems__sales_order__sales_order_date__range=[from_date, to_date]).filter(company=cmp).distinct()

                    
                    item_data = []
                    for item in items:
                        total_quantity_sold = SalesOrderItems.objects.filter(
                            item=item, sales_order__sales_order_date__range=[from_date, to_date]
                        ).aggregate(total_quantity_sold=Sum('quantity'))['total_quantity_sold'] or 0

                        difference = item.current_stock - total_quantity_sold
                        item_data.append({
                            'item_name': item.item_name,
                            'opening_stock': item.opening_stock,
                            'quantity_sold': total_quantity_sold,
                            'difference': difference,
                            
                        })

                  
                context = { 'items': item_data,
                        'from_date': from_date,
                        'to_date': to_date,
                        'cmp': cmp,
                        'details': dash_details,
                        'log_details': log_details,
                   }
                template_path = 'zohomodules/Reports/stock_summary_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'stock summary report'
                subject = f"stock summary Report"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Sales By Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales By Report details has been shared via email successfully..!')
                return redirect(stock_summary)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(stock_summary)
            
            
##################################################### PAYMENT RECIEVED 
def payment_listout(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)
    payment = Payment_recieved.objects.filter(company = cmp)
    return render(request,'zohomodules/payment_recieved/payment_listout.html',{'allmodules':allmodules,'payment':payment})


def new_payment(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)
        payments=Payment_recieved.objects.filter(company=cmp)

        pay_refnum = Payment_reference.objects.filter(company = cmp).last()
        if pay_refnum is None:
            latestNum =  1
        else:
            latestNum = int(pay_refnum.reference_number) + 1

        
        # Finding next pay recive number w r t last pay recive number if exists.
        nxtPayRecNo = ""
        lastCdn = Payment_recieved.objects.filter(company = cmp).last()
        if lastCdn:
            cdn_no = str(lastCdn.payment_number)
            prefix = ''.join(filter(str.isalpha, cdn_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, cdn_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtPayRecNo = prefix + padded_rb_num
            
        else:
            nxtPayRecNo = 'PR-01'
        

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'bank':bnk, 'priceListItems':priceList, 'items':itms,
            'ref_no':latestNum,'units': units,'accounts':accounts,'nxtPayRecNo':nxtPayRecNo,'payments':payments
        }

    return render(request,'zohomodules/payment_recieved/new_payment.html',context) 


def create_payment(request):
    
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        payment_number= request.POST['paymentRecievedNo'].upper()
        if Payment_recieved.objects.filter(company = com, payment_number__iexact = payment_number).exists():
            return JsonResponse({'status':False, 'message':'Credit Note No. already Exists.!'})

        if request.method == 'POST':
            payment = Payment_recieved(
                company = com,
                login_details= log_details,
                customer_id= request.POST['customerId'],
                customer_email= request.POST['customer_email'],
                customer_billingaddress= request.POST['bill_address'],
                customer_GSTtype= request.POST['customer_gst_type'],
                customer_GSTnumber= request.POST['customer_gstin'],
                customer_place_of_supply=request.POST['place_of_supply'],
                payment_date = request.POST['start_date'],
                reference_number= request.POST['reference_number'],
                payment_number= request.POST['paymentRecievedNo'].upper(),
                payment_method = request.POST['payType'],
                cheque_number = request.POST['cheque_id'] if request.POST['payType'] == 'Cheque' else '' ,
                upi_id = request.POST['upi_id'] if request.POST['payType'] == 'UPI' else '',
                bank_account_number = '' if request.POST['payType'] == 'Cash' or request.POST['payType'] == 'UPI' or request.POST['payType'] == 'Cheque' else request.POST['bnk_id'],
                amount_to_apply = request.POST['tamount'],
                total_payment = request.POST['tpayment'],
                amount_to_credit = request.POST['tbalance'],
            )

            payment.save()

            if request.POST['buttonValue'] == 'DRAFT':
                payment.status = "Draft"
            elif request.POST['buttonValue'] == 'SAVE':
                payment.status = "Saved" 
            payment.save()
            
            
            datee = request.POST.getlist("date[]")
            duedate = request.POST.getlist("duedate[]")
            invoicetype  = request.POST.getlist("invoicetype[]")
            invoiceNumber = request.POST.getlist("invoiceNumber[]")
            invoiceAmount = request.POST.getlist("invoiceAmount[]")
            payment1 = request.POST.getlist("payment[]") 
            balance = request.POST.getlist("balance[]")
            # total = request.POST.getlist("total[]")
            print(datee,duedate,invoicetype,invoiceNumber,invoiceAmount,payment1,balance,'==================')

            mapped = zip(datee,duedate,invoicetype,invoiceNumber,invoiceAmount,payment1,balance)
            mapped = list(mapped)
            for i in mapped:
                pay = Payment_details(company = com,login_details = com.login_details,payment_recieved= payment,balance = i[6],payment= i[5],invoice_amount = float(i[4]),invoice_number= i[3],invoice_type= i[2],Due_Date = i[1],Date = i[0])
                pay.save()

            # history
            histry = payment_history(
                company = com,
                login_details= log_details,
                payment_recieved = payment,
                Date= date.today(),
                action = 'Created',
            )
            histry.save()

            # reference numebr

            Payment_reference.objects.create(
                company = com,
                login_details = log_details,
                reference_number = request.POST['reference_number']
            )

            return redirect(payment_listout)
        else:
            return redirect(payment_listout)


def payment_view(request, pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        payments = Payment_recieved.objects.filter(company=cmp)
        payment = get_object_or_404(Payment_recieved,  pk=pk)
        pymt = Payment_details.objects.filter(payment_recieved=payment)
        payhist = payment_history.objects.filter(payment_recieved=payment)
        last_history = payment_history.objects.filter(payment_recieved=payment).last()
        created = payment_history.objects.get(payment_recieved=payment, action='Created')
        comments = Payment_Comments.objects.filter(payment_recieved=payment)
       
        
        context = {
            'cmp': cmp,
            'allmodules': allmodules,
            'payments':payments,
            'payment': payment,
            'pymt': pymt,
            'payhist': payhist,
            'last_history': last_history,
            'created': created,
            'comments': comments,
        }
        
        return render(request, 'zohomodules/payment_recieved/payment_view.html', context)


def newCustomerAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if Customer.objects.filter(company = com, GST_number=request.POST['gst_number']).exists():
            return JsonResponse({'status':False, 'message':'GSTIN already exists'})
        elif Customer.objects.filter(company = com, PAN_number=request.POST['pan_number']).exists():
            return JsonResponse({'status':False, 'message':'PAN No. already exists'})
        elif Customer.objects.filter(company = com, customer_email=request.POST['vendor_email']).exists():
            return JsonResponse({'status':False, 'message':'Email already exists'})
        elif Customer.objects.filter(company = com, customer_phone=request.POST['w_phone']).exists():
            return JsonResponse({'status':False, 'message':'Work Phone no. already exists'})
        elif Customer.objects.filter(company = com, customer_mobile=request.POST['m_phone']).exists():
            return JsonResponse({'status':False, 'message':'Mobile No. already exists'})

        if request.method=="POST":
            customer_data=Customer()
            customer_data.login_details=com.login_details
            customer_data.company=com
            customer_data.customer_type = request.POST.get('type')

            customer_data.title = request.POST.get('salutation')
            customer_data.first_name=request.POST['first_name']
            customer_data.last_name=request.POST['last_name']
            customer_data.company_name=request.POST['company_name']
            customer_data.customer_display_name=request.POST['v_display_name']
            customer_data.customer_email=request.POST['vendor_email']
            customer_data.customer_phone=request.POST['w_phone']
            customer_data.customer_mobile=request.POST['m_phone']
            customer_data.skype=request.POST['skype_number']
            customer_data.designation=request.POST['designation']
            customer_data.department=request.POST['department']
            customer_data.website=request.POST['website']
            customer_data.GST_treatement=request.POST['gst']
            customer_data.customer_status="Active"
            customer_data.remarks=request.POST['remark']
            customer_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                customer_data.PAN_number=request.POST['pan_number']
                customer_data.GST_number="null"
            else:
                customer_data.GST_number=request.POST['gst_number']
                customer_data.PAN_number=request.POST['pan_number']

            customer_data.place_of_supply=request.POST['source_supply']
            customer_data.currency=request.POST['currency']
            op_type = request.POST.get('op_type')
            if op_type is not None:
                customer_data.opening_balance_type = op_type
            else:
                customer_data.opening_balance_type ='Opening Balance not selected'

            customer_data.opening_balance=request.POST['opening_bal']
            customer_data.company_payment_terms= None if request.POST['payment_terms'] == "" else Company_Payment_Term.objects.get(id=request.POST['payment_terms'])
            # customer_data.price_list=request.POST['plst']
            plst=request.POST.get('plst')
            if plst!=0:
                    customer_data.price_list=plst
            else:
                customer_data.price_list='Price list not selected'




            # customer_data.portal_language=request.POST['plang']
            plang=request.POST.get('plang')
            if plang!=0:
                    customer_data.portal_language=plang
            else:
                customer_data.portal_language='Portal language not selected'

            customer_data.facebook=request.POST['fbk']
            customer_data.twitter=request.POST['twtr']
            customer_data.tax_preference=request.POST['tax1']

            type=request.POST.get('type')
            if type is not None:
                customer_data.customer_type=type
            else:
                customer_data.customer_type='Customer type not selected'




            
            customer_data.billing_attention=request.POST['battention']
            customer_data.billing_country=request.POST['bcountry']
            customer_data.billing_address=request.POST['baddress']
            customer_data.billing_city=request.POST['bcity']
            customer_data.billing_state=request.POST['bstate']
            customer_data.billing_pincode=request.POST['bzip']
            customer_data.billing_mobile=request.POST['bphone']
            customer_data.billing_fax=request.POST['bfax']
            customer_data.shipping_attention=request.POST['sattention']
            customer_data.shipping_country=request.POST['s_country']
            customer_data.shipping_address=request.POST['saddress']
            customer_data.shipping_city=request.POST['scity']
            customer_data.shipping_state=request.POST['sstate']
            customer_data.shipping_pincode=request.POST['szip']
            customer_data.shipping_mobile=request.POST['sphone']
            customer_data.shipping_fax=request.POST['sfax']
            customer_data.save()
            
            vendor_history_obj=CustomerHistory()
            vendor_history_obj.company=com
            vendor_history_obj.login_details=com.login_details
            vendor_history_obj.customer=customer_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

            vdata=Customer.objects.get(id=customer_data.id)
            rdata=Customer_remarks_table()
            rdata.remarks=request.POST['remark']
            rdata.company=com
            rdata.customer=vdata
            rdata.save()

        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirstName[]')
            last_name =request.POST.getlist('tlastName[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Customer.objects.get(id=customer_data.id)

            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    CustomerContactPersons.objects.create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],work_phone=ele[4],mobile=ele[5],skype=ele[6],designation=ele[7],department=ele[8],company=com,customer=vdata)
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})

def getCustomers_pay(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Customer.objects.filter(company = com, customer_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')

def getCustomerDetailsAjax3(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        # crdnote = Credit_Note.objects.filter(company=com).values('invoice', 'recurring_invoice')
        custId = request.POST['id']
        cust = Customer.objects.get(id = custId)
        
        invv = []
        flag_Cnote = False
        flag_Rinvoice = False 
        flag_invoice = False
        invOp = CustomerHistory.objects.filter(customer_id = custId,action='Completed')
        for io in invOp:
            invv.append((io.customer.id,io.date,io.date,'Opening Balance','',io.customer.opening_balance,0,io.customer.opening_balance))

        invCus = invoice.objects.filter(customer_id = custId,company=com).first() 
        if invCus:
            flag_invoice = True
            invv.append((invCus.id,invCus.date,invCus.expiration_date,'Invoice',invCus.invoice_number,invCus.grand_total,invCus.advanced_paid,invCus.balance))

        rinv = RecurringInvoice.objects.filter(customer_id = custId,company=com).first()
        if rinv:
            flag_Rinvoice = True
            invv.append((rinv.id,rinv.start_date,rinv.end_date,'Recurring Invoice', rinv.rec_invoice_no,rinv.grandtotal,rinv.advance_paid,rinv.balance))

        rcrd = Credit_Note.objects.filter(customer_id = custId,company=com).first()
        if rcrd:
            flag_Cnote = True
            invv.append((rcrd.id,rcrd.credit_note_date,rcrd.credit_note_date, 'Credit Note',rcrd.credit_note_number,rcrd.grand_total,rcrd.advance_paid,rcrd.balance))

        # invoice number dropdown
        invlists = []
        invCuslist = invoice.objects.filter(customer_id = custId,company=com).values('id','invoice_number')[1:]
        for i in invCuslist:
            invlists.append((i['id'],i['invoice_number'],'Invoice'))
        rinvlist = RecurringInvoice.objects.filter(customer_id = custId,company=com).values('id','rec_invoice_no')[1:]
        for i in rinvlist:
            invlists.append((i['id'],i['rec_invoice_no'],'Recurring Invoice'))
        rcrdlist = Credit_Note.objects.filter(customer_id = custId,company=com).values('id','credit_note_number')[1:]
        for i in rcrdlist:
            invlists.append((i['id'],i['credit_note_number'],'Credit Note'))
                
        if cust:
            context = {
                'status':True, 'id':cust.id, 'email':cust.customer_email, 'gstType':cust.GST_treatement,'shipState':cust.place_of_supply,'gstin':False if cust.GST_number == "" or cust.GST_number == None or cust.GST_number == 'null' else True, 'gstNo':cust.GST_number,
                'street':cust.billing_address, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode,'invoice':invv,'invoicelist':invlists,
                'flag_invoice':flag_invoice,'flag_Rinvoice':flag_Rinvoice,'flag_Cnote':flag_Cnote,
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def checkPaymentPattern(prefix):
    models = [invoice, Bill, Journal, Delivery_challan, RetainerInvoice, SaleOrder, Credit_Note]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": prefix}).exists():
            return True
    return False

def checkPaymentNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['paymentRecievedNo'].upper() 
        cdn_no0 = str(RecInvNo)
        prefix = ''.join(filter(str.isalpha, cdn_no0))       
        
        nextPayRecNo = ""
        lastCdn = Payment_recieved.objects.filter(company = com).last()
        if lastCdn:
            cdn_no = str(lastCdn.payment_number)
            prefix1 = ''.join(filter(str.isalpha, cdn_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, cdn_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nextPayRecNo = prefix1 + padded_rb_num        

        pattern_exists = checkPaymentPattern(prefix)

        if prefix !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Pattern Code already Exists.!'})
        elif Payment_recieved.objects.filter(company = com, payment_number__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Payment Recieved No. already Exists.!'})
        elif nextPayRecNo != "" and RecInvNo != nextPayRecNo:
            return JsonResponse({'status':False,'valid':True , 'message':'Payment Recieved No. is not continuous.!'})
        else:
            return JsonResponse({'status':True,'valid':True ,'message':'Number is okay.!'})
    else:
       return redirect('/')
    
def changeInvoiceRow(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        selected_value = request.POST.get('value')
        selected_type = request.POST.get('type')
        print('11111111111',selected_type,selected_value) 

        if selected_type == 'Invoice':
            Inv = invoice.objects.get(invoice_number=selected_value)
            context = {
                'date':Inv.date,
                'duedate':Inv.expiration_date,
                'amount':Inv.grand_total,
                'payment':Inv.advanced_paid,
                'balance':Inv.balance,
                'type':selected_type
            }
            return JsonResponse(context)
        elif selected_type == 'Recurring Invoice':
            Inv = RecurringInvoice.objects.get(rec_invoice_no=selected_value)
            context = {
                'date':Inv.start_date,
                'duedate':Inv.end_date,
                'amount':Inv.grandtotal,
                'payment':Inv.advance_paid,
                'balance':Inv.balance,
                'type':selected_type
            }
            return JsonResponse(context)
        elif selected_type == 'Credit Note':
            Inv = Credit_Note.objects.get(credit_note_number = selected_value)
            context = {
                'date':Inv.credit_note_date,
                'duedate':Inv.credit_note_date,
                'amount':Inv.grand_total,
                'payment':Inv.advance_paid,
                'balance':Inv.balance,
                'type':selected_type
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'error':'else part'})      

def import_payment_received_from_excel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company 

        if request.method == "POST" and 'excel_file' in request.FILES:
            excel_file = request.FILES['excel_file']

            wb = load_workbook(excel_file)

            if 'payment_received' not in wb.sheetnames:
                messages.error(request, '`payment_received` sheet not found. Please check.')
                return redirect(recurringInvoice)

            ws = wb["payment_received"]

            payment_columns = ['SLNO', 'CUSTOMER', 'DATE', 'AMOUNT', 'STATUS', 'BALANCE']
            payment_sheet = [cell.value for cell in ws[1]]

            if payment_sheet != payment_columns:
                messages.error(request, '`payment_received` sheet column names or order is not in the required format. Please check.')
                return redirect(recurringInvoice)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, customer_name, payment_date, amount, status, balance = row

                if any(field is None for field in (slno, customer_name, payment_date, amount, status, balance)):
                    messages.error(request, 'Payment received data is incomplete. Please check.')
                    return redirect(payment_listout)

                # Convert payment_date to datetime object
                payment_date = datetime.strptime(payment_date, '%Y-%m-%d')

                # Example validation for customer existence
                if not Customer.objects.filter(company=com, name=customer_name).exists():
                    messages.error(request, f'Customer "{customer_name}" does not exist. Please check.')
                    return redirect(payment_listout)

                # Create Payment_received object
                payment_received = Payment_recieved.objects.create(
                    company=com,
                    login_details=log_details,
                    customer=Customer.objects.get(company=com, name=customer_name),
                    payment_date=payment_date,
                    amount_to_apply=amount,
                    status=status,
                    amount_to_credit=balance
                )

                # You can perform additional processing or save related data here

            messages.success(request, 'Payment received data imported successfully.')
            return redirect(payment_listout)

        else:
            return redirect(payment_listout)
    else:
        return redirect('/')   


def editpage_payment(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company = cmp, customer_status = 'Active')
        trm = Company_Payment_Term.objects.filter(company = cmp)
        repeat = CompanyRepeatEvery.objects.filter(company = cmp)
        bnk = Banking.objects.filter(company = cmp)
        priceList = PriceList.objects.filter(company = cmp, type = 'Sales', status = 'Active')
        itms = Items.objects.filter(company = cmp, activation_tag = 'active')
        units = Unit.objects.filter(company=cmp)
        accounts=Chart_of_Accounts.objects.filter(company=cmp)

        pay_refnum = Payment_reference.objects.filter(company = cmp).last()
        if pay_refnum is None:
            latestNum =  1
        else:
            latestNum = int(pay_refnum.reference_number) + 1

        
        # Finding next pay recive number w r t last pay recive number if exists.
        nxtPayRecNo = ""
        lastCdn = Payment_recieved.objects.filter(company = cmp).last()
        if lastCdn:
            cdn_no = str(lastCdn.payment_number)
            prefix = ''.join(filter(str.isalpha, cdn_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, cdn_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtPayRecNo = prefix + padded_rb_num
            
        else:
            nxtPayRecNo = 'PR01'
        
        thisPayment = Payment_recieved.objects.get(id=pk)
        thisPaymentdetails = Payment_details.objects.filter(payment_recieved=thisPayment)
        thisInvoice = invoice.objects.filter(customer_id = thisPayment.customer)
        thisRecurringInvoice = RecurringInvoice.objects.filter(customer_id = thisPayment.customer)
        thisCreditNote = Credit_Note.objects.filter(customer_id = thisPayment.customer)


        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'customers': cust,'pTerms':trm, 'repeat':repeat, 'bank':bnk, 'priceListItems':priceList, 'items':itms,
            'ref_no':latestNum,'units': units,'accounts':accounts,'nxtPayRecNo':nxtPayRecNo,'thisPayment':thisPayment,
            'thisPaymentdetails':thisPaymentdetails,'thisInvoice':thisInvoice,'thisRecurringInvoice':thisRecurringInvoice,'thisCreditNote':thisCreditNote,
        }

    return render(request,'zohomodules/payment_recieved/editpage_payment.html',context) 


def checkPaymentNumber_editpage(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        RecInvNo = request.GET['paymentRecievedNo'].upper() 
        cdn_no0 = str(RecInvNo)
        prefix = ''.join(filter(str.isalpha, cdn_no0))       
        
        nextPayRecNo = ""
        lastCdn = Payment_recieved.objects.filter(company = com).last()
        if lastCdn:
            cdn_no = str(lastCdn.payment_number)
            prefix1 = ''.join(filter(str.isalpha, cdn_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, cdn_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nextPayRecNo = prefix1 + padded_rb_num        

        pattern_exists = checkPaymentPattern(prefix)

        if prefix !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Pattern Code already Exists.!'})
        elif Payment_recieved.objects.filter(company = com, payment_number__iexact = RecInvNo).exclude(id=pk).exists():
            return JsonResponse({'status':False, 'message':'Payment Recieved No. already Exists.!'})
        elif Payment_recieved.objects.get(id=pk).payment_number == RecInvNo :
            return JsonResponse({'status':False, 'message':''})
        elif nextPayRecNo != "" and RecInvNo != nextPayRecNo:
            return JsonResponse({'status':False,'valid':True , 'message':'Payment Recieved No. is not continuous.!'})
        else:
            return JsonResponse({'status':True,'valid':True ,'message':'Number is okay.!'})
    else:
       return redirect('/')
       
def update_payment(request,pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        payment_number= request.POST['paymentRecievedNo'].upper()
        if Payment_recieved.objects.filter(company = com, payment_number__iexact = payment_number).exclude(id=pk).exists():
            return JsonResponse({'status':False, 'message':'Payment Recieved No. already Exists.!'})

        if request.method == 'POST':
            payment = Payment_recieved.objects.get(id=pk)
            payment.customer_id= int(request.POST['customerId'])
            payment.customer_email= request.POST['customer_email']
            payment.customer_billingaddress= request.POST['bill_address']
            payment.customer_GSTtype= request.POST['customer_gst_type']
            payment.customer_GSTnumber= request.POST['customer_gstin']
            payment.customer_place_of_supply=request.POST['place_of_supply']
            payment.payment_date = request.POST['start_date']
            payment.reference_number= int(request.POST['reference_number']) 
            payment.payment_number= request.POST['paymentRecievedNo'].upper()
            payment.payment_method = request.POST['payType']
            payment.cheque_number = request.POST['cheque_id'] if request.POST['payType'] == 'Cheque' else '' 
            payment.upi_id = request.POST['upi_id'] if request.POST['payType'] == 'UPI' else ''
            payment.bank_account_number = '' if request.POST['payType'] == 'Cash' or request.POST['payType'] == 'UPI' or request.POST['payType'] == 'Cheque' else request.POST['bnk_id']
            payment.amount_to_apply = request.POST['tamount']
            payment.amount_to_credit = request.POST['tbalance']
            payment.total_payment = request.POST['tpayment']
            payment.save()

            if request.POST['buttonValue'] == 'DRAFT':
                payment.status = "Draft"
            elif request.POST['buttonValue'] == 'SAVE':
                payment.status = "Saved" 
            payment.save()
            
            Payment_details.objects.filter(payment_recieved=pk).delete()

            datee = request.POST.getlist("date[]")
            duedate = request.POST.getlist("duedate[]")
            invoicetype  = request.POST.getlist("invoicetype[]")
            invoiceNumber = request.POST.getlist("invoiceNumber[]")
            invoiceAmount = request.POST.getlist("invoiceAmount[]")
            payment1 = request.POST.getlist("payment[]") 
            balance = request.POST.getlist("balance[]")
            # total = request.POST.getlist("total[]")

            mapped = zip(datee,duedate,invoicetype,invoiceNumber,invoiceAmount,payment1,balance)
            mapped = list(mapped)
            for i in mapped:
                pay = Payment_details(company = com,login_details = com.login_details,payment_recieved= payment,balance = i[6],payment= i[5],invoice_amount = float(i[4]),invoice_number= i[3],invoice_type= i[2],Due_Date = i[1],Date = i[0])
                pay.save()

                 # history
            histry = payment_history(
                company = com,
                login_details= log_details,
                payment_recieved = payment,
                Date= date.today(),
                action = 'Edited',
            )
            histry.save()

            return redirect(payment_view,pk)
        else:
            return redirect(payment_view,pk)  

def paymentPdf(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company
        payment_recieved = get_object_or_404(Payment_recieved, id=id)
        payment = Payment_details.objects.filter(payment_recieved=payment_recieved)
       
        template_path = 'zohomodules/payment_recieved/paymentPdf.html'
        fname = f'Payment_{payment_recieved.payment_number}'    

        # Create context for the template
        context = {'payment_recieved':payment_recieved,'payment': payment, 'cmp': com}

        # Create a Django response object with content type as application/pdf
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename={fname}.pdf'

        # Find the template and render it
        template = get_template(template_path)
        html = template.render(context)

        # Create the PDF
        pisa_status = pisa.CreatePDF(html, dest=response)

        # If there's an error, display it
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/') 


def delete_payment(request, payment_id):
    try:
        # Delete payment received record
        payment_recieved = Payment_recieved.objects.get(pk=payment_id)
        payment_recieved.delete()
        
        # Delete related payment details records
        Payment_details.objects.filter(payment_recieved_id=payment_id).delete()
        
        # Redirect to a success page or desired URL
        return redirect('payment_listout')   
    except Payment_recieved.DoesNotExist:
        # Handle the case where the payment received record does not exist
        return redirect('payment_view')

def add_payment_received_comment(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company

        payment_received = Payment_recieved.objects.get(id=id)
        
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Payment_Comments.objects.create(company=com, payment_recieved=payment_received, comments=cmt)
            return redirect(payment_view, id)
        
        return redirect(payment_view, id)
    
    return redirect('/')(payment_view, id)
    return redirect('/')  

def delete_payment_received_comment(request, id):
    if 'login_id' in request.session:
        cmt = Payment_Comments.objects.get(id=id)
        payment_id = cmt.payment_recieved.id
        cmt.delete()
        return redirect(payment_view, payment_id)
    else:
        return redirect('/')

def convert_payment_received(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        
        if 'login_id' not in request.session:
            return redirect('/')
        
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
            staff = StaffDetails.objects.get(login_details=log_details)
            company = staff.company
            allmodules = ZohoModules.objects.get(company=staff.company)
            dash_details = StaffDetails.objects.get(login_details=log_details, company_approval=1)
            
        elif log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details, superadmin_approval=1, Distributor_approval=1)
            allmodules = ZohoModules.objects.get(company=company, status='New')
        
        payments_received = Payment_recieved.objects.filter(company=company)
        payment_received = Payment_recieved.objects.get(id=id)
        
        
        payment_received.status = 'Saved'
        payment_received.save()
        return redirect('payment_view', pk=id)
           

def importExcel_payment_received(request):
    log_id = request.session.get('login_id')
    if not log_id:
        return redirect('/')

    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        com = CompanyDetails.objects.get(login_details=log_details)
    else:
        com = StaffDetails.objects.get(login_details=log_details).company
    
    if request.method == 'POST' and request.FILES.get('excel_file'):
        excel_file = request.FILES['excel_file']

        # Check if the uploaded file is an Excel file
        if not excel_file.name.endswith('.xlsx'):
            return HttpResponse("Please upload a valid Excel file.")

        # Load the Excel file
        wb = load_workbook(excel_file, data_only=True)

        # Process first sheet (Payment_received)
        first_sheet = wb.sheetnames[0]
        sheet1 = wb[first_sheet]
        data1 = pd.DataFrame(sheet1.values)

        rowNo = 0
        for index, row in data1.iloc[1:].iterrows():
            rowNo += 1
            # Ensure row has enough elements before accessing specific indices
            if len(row) < 23:
                messages.error(request, f'Insufficient data in row {rowNo}.')
                continue

            # Extract data from each row and perform necessary operations
            customer_number = str(row[2])  # Convert to string to avoid potential issues
            payment_date = row[3]
            if isinstance(payment_date, datetime):
                payment_date = payment_date.date()  # Ensure date format
            else:
                try:
                    payment_date = datetime.strptime(payment_date, '%Y-%m-%d').date()  # Parse date if not already in correct format
                except ValueError:
                    messages.error(request, f'Invalid date format in row {rowNo}.')
                    continue

            # Extract other fields as needed

            # Check if customer exists
            customer = Customer.objects.filter(company=com, customer_phone=customer_number).first()
            if not customer:
                messages.error(request, f'Customer in Row No.{rowNo} does not exist.')
                continue

            # Create Payment_received object
            payment_received = Payment_recieved(
                company=com,
                login_details=log_details,
                customer=customer,
                customer_email=row[1],  # Assuming email is in the second column
                customer_billingaddress=row[2],  # Assuming billing address is in the third column
                customer_GSTtype=row[3],  # Assuming GST type is in the fourth column
                customer_GSTnumber=row[4],  # Assuming GST number is in the fifth column
                customer_place_of_supply=row[5],
                payment_date=payment_date,
                reference_number=row[7],
                payment_method=row[8],
                payment_number=row[9],
                cheque_number=row[10],
                upi_id=row[11],
                bank_account_number=row[12],
                amount_to_apply=row[13],
                amount_to_credit=row[14],
                total_payment=row[15],
                status=row[16]
            )
            payment_received.save()

            # Save transaction history
            payment_history.objects.create(
                company=com,
                login_details=log_details,
                payment_received=payment_received,
                action='Created',
                date=payment_date,
                
            )

        # Process second sheet (Payment_details)
        second_sheet = wb.sheetnames[1]
        sheet2 = wb[second_sheet]
        data2 = pd.DataFrame(sheet2.values)

        for index, row in data2.iloc[1:].iterrows():
            # Ensure row has enough elements before accessing specific indices
            if len(row) < 10:
                messages.error(request, f'Insufficient data in row {index}.')
                continue

            # Extract data from each row and perform necessary operations
            payment_received_id = row[2]
            # Extract other fields as needed

            try:
                payment_received = Payment_recieved.objects.get(id=payment_received_id)

                # Create Payment_details object
                payment_details = Payment_details(
                    company=com,
                    login_details=log_details,
                    payment_recieved=payment_received,
                    balance=row[3],
                    payment=row[4],
                    invoice_amount=row[5],
                    invoice_number=row[6],
                    invoice_type=row[7],
                    Due_Date=row[8],
                    Date=row[9]
                )
                payment_details.save()
            except Payment_recieved.DoesNotExist:
                messages.error(request, f'Payment_received with ID {payment_received_id} does not exist.')
                continue

        messages.success(request, 'Import successful')
        return redirect('payment_listout')

    return redirect('payment_listout')


def download_sample_import_file(request):
    # Create sample data for Payment_received model
    payment_received_columns = [
        'SLNO', 'COMPANY', 'LOGIN DETAILS', 'CUSTOMER', 'CUSTOMER EMAIL', 'CUSTOMER BILLING ADDRESS',
        'CUSTOMER GST TYPE', 'CUSTOMER GST NUMBER', 'CUSTOMER PLACE OF SUPPLY', 'PAYMENT DATE', 
        'REFERENCE NUMBER', 'PAYMENT METHOD', 'PAYMENT NUMBER', 'CHEQUE NUMBER', 'UPI ID', 
        'BANK ACCOUNT NUMBER', 'AMOUNT TO APPLY', 'AMOUNT TO CREDIT', 'TOTAL PAYMENT', 'STATUS'
    ]
    payment_received_sample_data = [
        [1, 1, 1, 'Noel', 'noel@gmail.com', 'Address1', 'GSTType1', 'GSTNumber1', 'PlaceOfSupply1',
         '2024-05-16', 12345, 'PaymentMethod1', 'PaymentNumber1', 'ChequeNumber1', 'UPIID1', 'BankAccountNumber1',
         100.00, 50.00, 150.00, 'Paid'],
        # Add more sample data for Payment_received as needed
    ]

    # Create sample data for Payment_details model
    payment_details_columns = [
        'SLNO', 'COMPANY', 'LOGIN DETAILS', 'PAYMENT RECIEVED', 'BALANCE', 'PAYMENT', 'INVOICE AMOUNT',
        'INVOICE NUMBER', 'INVOICE TYPE', 'DUE DATE', 'DATE'
    ]
    payment_details_sample_data = [
        [1, 1, 1, 1, 50.00, 100, 150, 'INV001', 'InvoiceType1', '2024-05-16', '2024-05-16'],
        # Add more sample data for Payment_details as needed
    ]

    # Create the Excel workbook
    wb = Workbook()
    payment_received_sheet = wb.active
    payment_received_sheet.title = 'payment_received'
    payment_details_sheet = wb.create_sheet(title='payment_details')

    # Populate Payment_received sheet
    payment_received_sheet.append(payment_received_columns)
    for row in payment_received_sample_data:
        payment_received_sheet.append(row)

    # Populate Payment_details sheet
    payment_details_sheet.append(payment_details_columns)
    for row in payment_details_sample_data:
        payment_details_sheet.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=sample_import_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response
    
#End

def retainer_invoice_details(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)      
        
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0 
        totalbalance=0
        rec = RetainerInvoice.objects.filter(company=dash_details)
        cust= Customer.objects.filter(company=dash_details)
        
        if rec:
            for s in rec:
                partyName = s.customer_name.customer_display_name
                date = s.retainer_invoice_date

                rbill =s.retainer_invoice_number
                ordrno =s.refrences
                total = s.total_amount

                paid=s.advance
                balance=s.balance
                st=s.is_sent
                totalSales += float(s.total_amount)
                totalbalance += float(s.balance)
                if s.is_sent == 1:
                    st = 'Sent'
                elif s.is_sent == 0:
                    st = 'Draft'
                # elif s.advance > 0:
                #     st = 'partially paid'
                # elif s.advance<=s.total_amount:
                #     st = 'overdue'
                    
                else:
                    st = s.is_sent

                details = {
                    'date': date,
                    'name': partyName,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance, 
                }
                
                reportData.append(details)
                
                totvendr=len(cust)

        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData':reportData,
            'totalbalance':totalbalance,
            'totalSales':totalSales,
            'totcust':totvendr,
            'startDate':None,
            'endDate':None
           
        }
        return render(request,'zohomodules/Reports/retainer_invoice_details.html',context)
    if log_details.user_type=="Staff":
        dash_details = StaffDetails.objects.get(login_details=log_details)      
        
        allmodules= ZohoModules.objects.get(company=dash_details.company,status='New')
        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0 
        totalbalance=0
        rec = RetainerInvoice.objects.filter(company=dash_details.company)
        cust= Customer.objects.filter(company=dash_details.company)
        
        if rec:
            for s in rec:
                partyName = s.customer_name.customer_display_name
                date = s.retainer_invoice_date

                rbill =s.retainer_invoice_number
                ordrno =s.refrences
                total = s.total_amount

                paid=s.advance
                balance=s.balance
                st=s.is_sent
                totalSales += float(s.total_amount)
                totalbalance += float(s.balance)
                if s.is_sent == 1:
                    st = 'Sent'
                elif s.is_sent == 0:
                    st = 'Draft'
                # elif s.advance > 0:
                #     st = 'partially paid'
                # elif s.advance<=s.total_amount:
                #     st = 'overdue'
                    
                else:
                    st = s.is_sent

                details = {
                    'date': date,
                    'name': partyName,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance, 
                }
                
                reportData.append(details)
                
                totvendr=len(cust)

        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData':reportData,
            'totalbalance':totalbalance,
            'totalSales':totalSales,
            'totcust':totvendr,
            'startDate':None,
            'endDate':None
           
        }
        return render(request,'zohomodules/Reports/retainer_invoice_details.html',context)

def Retainer_report_mail(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        if request.method == 'POST':
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            cust = Customer.objects.filter(company=dash_details)
            startDate = request.GET.get('start_date', None)
            endDate = request.GET.get('end_date', None)
            status = request.GET.get('status')
            currentDate = datetime.today()
            reportData = []
            totalSales = 0
            totvendr=0
            totalbalance=0

            rec = RetainerInvoice.objects.filter(company=dash_details)
            cust = Customer.objects.filter(company=dash_details)
            if startDate and endDate:
                rec = rec.filter(retainer_invoice_date__range=[startDate, endDate])
            if status:
                if status == 'Draft':
                    rec = rec.filter(is_sent = 0)
                elif status == 'Sent':
                    rec = rec.filter(is_sent = 1)
                    
            for s in rec:
                partyName = s.customer_name.customer_display_name
                date = s.retainer_invoice_date

                rbill =s.retainer_invoice_number
                ordrno =s.refrences
                total = s.total_amount
                paid=s.advance
                balance=s.balance
                st=s.is_sent
                totalSales += float(s.total_amount)
                totalbalance += float(s.balance)
                if s.is_sent == 0:
                    st = 'Draft'
                elif s.is_sent == 1:
                    st = 'Sent'
                    
                else:
                    st = s.is_sent

                details = {
                    'date': date,
                    'name': partyName,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(cust)

            context = {'details': dash_details, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
            template_path = 'zohomodules/Reports/retainer_invoice_mail.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Retainer Invoice Details'
            subject = f"Retainer Invoice Details"
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Report for Retainer Invoice Details. \n{email_message}\n\n--\nRegards,\n{dash_details.company_name}\n{dash_details.address}\n{dash_details.state} - {dash_details.country}\n{dash_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Report has been shared via email successfully..!')
            return redirect(retainer_invoice_details)
    
    if log_details.user_type=="Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        comp=CompanyDetails.objects.get(id=company_details.company.id)
        allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
        if request.method == 'POST':
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            cust = Customer.objects.filter(company=company_details.company)
            startDate = request.GET.get('start_date', None)
            endDate = request.GET.get('end_date', None)
            status = request.GET.get('status')
            currentDate = datetime.today()
            reportData = []
            totalSales = 0
            totvendr=0
            totalbalance=0

            rec = RetainerInvoice.objects.filter(company=company_details.company)
            cust = Customer.objects.filter(company=company_details.company)


            if startDate and endDate:
                rec = rec.filter(retainer_invoice_date__range=[startDate, endDate])
            if status:
                if status == 'Draft':
                    rec = rec.filter(is_sent = 0)
                elif status == 'Sent':
                    rec = rec.filter(is_sent = 1)  

            for s in rec:
                partyName = s.customer_name.customer_display_name
                date = s.retainer_invoice_date

                rbill =s.retainer_invoice_number
                ordrno =s.refrences
                total = s.total_amount
                paid=s.advance
                balance=s.balance
                st=s.is_sent
                totalSales += float(s.total_amount)
                totalbalance += float(s.balance)
                if s.is_sent == 0:
                    st = 'Draft'
                elif s.is_sent == 1:
                    st = 'Sent'  
                
                else:
                    st = s.is_sent

                details = {
                    'date': date,
                    'name': partyName,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                }
                reportData.append(details)
                totvendr=len(cust)

            context = {'details': company_details, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
            template_path = 'zohomodules/Reports/retainer_invoice_mail.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Retainer Invoice Details'
            subject = f"Retainer Invoice Details"
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Report for Retainer Invoice Details. \n{email_message}\n\n--\nRegards,\n{company_details.company.company_name}\n{company_details.company.address}\n{company_details.company.state} - {company_details.company.country}\n{company_details.company.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Report has been shared via email successfully..!')
            return redirect(retainer_invoice_details)
        
def Retainer_invoice_custom(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    log_details= LoginDetails.objects.get(id=log_id)
    if log_details.user_type=="Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0
        rec = RetainerInvoice.objects.filter(company=dash_details)
        cust = Customer.objects.filter(company=dash_details)
        if startDate and endDate:
            rec = rec.filter(retainer_invoice_date__range=[startDate, endDate])
        if status:
            if status == 'Draft':
                rec = rec.filter(is_sent = 0)
            elif status == 'Sent':
                rec = rec.filter(is_sent = 1)
        for s in rec:
            partyName = s.customer_name.customer_display_name
            date = s.retainer_invoice_date
            rbill =s.retainer_invoice_number
            ordrno =s.refrences
            total = s.total_amount
            paid=s.advance
            balance=s.balance
            st=s.is_sent
            totalSales += float(s.total_amount)
            totalbalance += float(s.balance)
            if s.is_sent == 1:
                st = 'Sent' 
            elif s.is_draft == 1:
                st = 'Draft'
            
            else:
                st = s.is_sent

            details = {
                'date': date,
                'name': partyName,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,    
            }
            reportData.append(details)
            totvendr=len(cust)
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':dash_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData': reportData,
            'totalbalance':totalbalance,
            'totalSales': totalSales, 
            'totcust': totvendr,
            'startDate': startDate,
            'endDate': endDate, 
            'status': status,
        }
        
        return render(request,'zohomodules/Reports/retainer_invoice_details.html',context)
    
    if log_details.user_type=="Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        comp=CompanyDetails.objects.get(id=company_details.company.id)
        allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
        report = request.GET.get('billdate',None)
        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0
        
        rec = RetainerInvoice.objects.filter(company=company_details.company)
        cust = Customer.objects.filter(company=company_details.company)
        if startDate and endDate:
            rec = rec.filter(retainer_invoice_date__range=[startDate, endDate])
        if status:
            if status == 'Draft':
                rec = rec.filter(is_sent = 0)
            elif status == 'Sent':
                rec = rec.filter(is_sent = 1)
        for s in rec:
            partyName = s.customer_name.customer_display_name
            date = s.retainer_invoice_date
            rbill =s.retainer_invoice_number
            ordrno =s.refrences
            total = s.total_amount
            paid=s.advance
            balance=s.balance
            st=s.is_sent
            totalSales += float(s.total_amount)
            totalbalance += float(s.balance)
            if s.is_sent == 1:
                st = 'Sent' 
            elif s.is_draft == 1:
                st = 'Draft'
            
            else:
                st = s.is_sent

            details = {
                'date': date,
                'name': partyName,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,  
            }
            
            reportData.append(details)
            
            totvendr=len(cust)
        
        context={
            'log_id':log_id,
            'log_details':log_details,
            'details':company_details,
            'allmodules': allmodules,
            'rec': rec,
            'reportData': reportData,
            'totalbalance':totalbalance,
            'totalSales': totalSales, 
            'totcust': totvendr,
            'startDate': startDate,
            'endDate': endDate, 
            'status': status,
        }
        
        return render(request,'zohomodules/Reports/retainer_invoice_details.html',context)
        
        
def recurring_bill_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules = ZohoModules.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        Recbill = Recurring_bills.objects.filter(company=cmp)
        vendr = Vendor.objects.filter(company=cmp)
       
        if Recbill:
            for s in Recbill:
                partyName = s.vendor_details.first_name +" "+s.vendor_details.last_name
                date = s.rec_bill_date 
                
                ship_date = s.expiry_date
                end_date = datetime.combine(s.expiry_date, datetime.min.time())
            

                rbill =s.recc_bill_no
                ordrno =s.purchase_order_no
                total = s.total
                paid=s.paid
                balance=s.bal
                st=s.status
                totalSales += float(s.total)
                totalbalance += float(s.bal)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.paid == 0 and end_date>currentDate:
                    st = 'Not paid'
                    
                elif s.paid == s.total:
                    st = 'fully paid'
                
                elif s.paid > 0 and s.paid<s.total and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.paid<=s.total:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(vendr)


        context = {
            'allmodules':allmodules, 'cmp':cmp, 'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totvendr,
            'startDate':None, 'endDate':None , 'details':dash_details,'log_details':log_details
        }
        return render(request,'zohomodules/Reports/recurring_bill_details.html', context)
    else:
        return redirect('/')

def shareREC_billDetailsReportToEmail(request):
   if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules = ZohoModules.objects.get(company_id = cmp,status = 'New')
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Customer.objects.filter(company=cmp)
            
                cust = Customer.objects.filter(company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
             
                currentDate = datetime.today()


                reportData = []
                totalSales = 0
                totvendr=0
                totalbalance=0

                Recbill = Recurring_bills.objects.filter(company=cmp)
                vendr = Vendor.objects.filter(Company=cmp)
       
        
                if startDate and endDate:
                    Recbill = Recbill.filter(date__range=[startDate, endDate])
                    print(Recbill)
                    print("1")
                

                if status:
                    if status == 'Draft':
                        Recbill = Recbill.filter(status = 'Draft')
                    elif status == 'fully paid':
                        Recbill = Recbill.filter(paid=F('grand_total'),status='Save')
                      
                    elif status == 'Not paid':
                        Recbill = Recbill.filter(Q(paid=0)  & Q(expected_shipment_date__gt=currentDate),status='Save')

                    elif status == 'partially paid':
                        Recbill = Recbill.filter(Q(paid__gt=0)  & Q(paid__lt=F('grand_total')) & Q(expected_shipment_date__gt=currentDate),status='Save')
                    
                    elif status == 'overdue':
                        Recbill = Recbill.filter((Q(expected_shipment_date__lte=currentDate) & Q(paid__lt=F('grand_total')) ), status='Save')
                       

                for s in Recbill:
                        partyName = s.vendor_details.first_name +" "+s.vendor_details.last_name
                        date = s.rec_bill_date 
                        
                        ship_date = s.expiry_date
                        end_date = datetime.combine(s.expiry_date, datetime.min.time())
                    

                        rbill =s.recc_bill_no
                        ordrno =s.purchase_order_no
                        total = s.total
                        paid=s.paid
                        balance=s.bal
                        st=s.status
                        totalSales += float(s.total)
                        totalbalance += float(s.bal)
                        if s.status == 'Draft':
                            st = 'Draft'
                        elif s.paid == 0 and end_date>currentDate:
                            st = 'Not paid'
                            
                        elif s.paid == s.total:
                            st = 'fully paid'
                        
                        elif s.paid > 0 and s.paid<s.total and end_date>currentDate:
                            st = 'partially paid'
                        elif end_date<currentDate and s.paid<=s.total:
                            st = 'overdue'
                        
                        else:
                            st = s.status

                        details = {
                            'date': date,
                            'name': partyName,
                            'ship_date':ship_date,
                            'rbill':rbill,
                            'ordrno': ordrno,
                            'total':total,
                            'status':st,
                            'balance':balance,
                            
                            
                    
                }
                reportData.append(details)
                totvendr=len(vendr)

                context = {'cmp': cmp, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
                template_path = 'zohomodules/Reports/recurring_bill_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_rec_bill_Details'
                subject = f"Report_rec_bill_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - recbill Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(recurring_bill_details)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(recurring_bill_details)
            
def delete_retainer_item(request):
    if request.method == 'POST':
        item_id = request.POST.get('item_id')
        try:
            item = Retaineritems.objects.get(id=item_id)
            item.delete()
            return JsonResponse({'success': True})
        except Retaineritems.DoesNotExist:
            return JsonResponse({'success': False, 'error': 'Item does not exist'})
    return JsonResponse({'success': False, 'error': 'Invalid request'})


#---------------- Zoho Final Daybook - Ginto Shaji - Start-------------------->
def dayBookReport(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    currentDate = datetime.today()
    print('currentDate',currentDate)
    
    reportData = []
    totMoneyIn = 0
    totMoneyOut = 0
      
    sOrder = SaleOrder.objects.filter(company=comp_details, sales_order_date = currentDate)
    if sOrder:
        for s in sOrder:
            partyName = s.customer.first_name +" "+s.customer.last_name
            date = s.sales_order_date
            ref = s.sales_order_number
            type = 'Sales Order'
            total = s.grand_total
            mIn = s.grand_total
            mOut = 0
            totMoneyIn += float(s.grand_total)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)
            
            
    inv = invoice.objects.filter(company=comp_details, date = currentDate)
    if inv:
        for i in inv:
            partyName = i.customer.first_name +" "+i.customer.last_name
            date = i.date
            ref = i.invoice_number
            type = 'Invoice'
            total = i.grand_total
            mIn = i.grand_total
            mOut = 0
            totMoneyIn += float(i.grand_total)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details) 
            
            
    recInv = RecurringInvoice.objects.filter(company=comp_details, start_date = currentDate)
    if recInv:
        for r in recInv:
            partyName = r.customer.first_name +" "+r.customer.last_name
            date = r.start_date
            ref = r.rec_invoice_no
            type = 'Recurring Invoice'
            total = r.grandtotal
            mIn = r.grandtotal
            mOut = 0
            totMoneyIn += float(r.grandtotal)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)  
              
            
    rtInv = RetainerInvoice.objects.filter(company=comp_details, retainer_invoice_date = currentDate)
    if rtInv:
        for r in rtInv:
            partyName = r.customer_name.first_name +" "+r.customer_name.last_name
            date = r.retainer_invoice_date
            ref = r.retainer_invoice_number
            type = 'Retainer Invoice'
            total = r.total_amount
            mIn = r.total_amount
            mOut = 0
            totMoneyIn += float(r.total_amount)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)  
    
    
    dbNote = debitnote.objects.filter(company = comp_details, debitnote_date = currentDate)
    if dbNote:
        for d in dbNote:
                partyName = d.vendor.first_name +" "+d.vendor.last_name
                date = d.debitnote_date
                ref = d.debitnote_no
                type = 'Debit Note'
                total = d.grandtotal
                mIn = d.grandtotal
                mOut = 0
                totMoneyIn += float(d.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
                
    mJournal = Journal.objects.filter(company = comp_details, date = currentDate)
    if mJournal:
        for debit in mJournal:
                partyName = ''
                date = debit.date
                ref = debit.journal_no
                type = 'Manual Journal Debit'
                total = debit.total_debit
                mIn = debit.total_debit
                mOut = 0
                totMoneyIn += float(debit.total_debit)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        for credit in mJournal:
                partyName = ''
                date = credit.date
                ref = credit.journal_no
                type = 'Manual Journal Credit'
                total = credit.total_credit
                mOut = credit.total_credit
                mIn = 0
                totMoneyOut += float(credit.total_credit)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
    
    
    pBill = Bill.objects.filter(Company = comp_details, Bill_Date = currentDate)
    if pBill:
        for bill in pBill:
                partyName = bill.Vendor.first_name +" "+bill.Vendor.last_name
                date = bill.Bill_Date
                ref = bill.Bill_Number
                type = 'Purchase Bill'
                total = bill.Grand_Total
                mOut = bill.Grand_Total
                mIn = 0
                totMoneyOut += float(bill.Grand_Total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
    
    
    rBill = Recurring_bills.objects.filter(company = comp_details, rec_bill_date = currentDate)
    if rBill:
        for rbill in rBill:
                partyName = rbill.vendor_details.first_name +" "+rbill.vendor_details.last_name
                date = rbill.rec_bill_date
                ref = rbill.recc_bill_no
                type = 'Recurring Bill'
                total = rbill.total
                mOut = rbill.total
                mIn = 0
                totMoneyOut += float(rbill.total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
               
    
    
    cNote = Credit_Note.objects.filter(company = comp_details, credit_note_date = currentDate)
    if cNote:
        for note in cNote:
                partyName = note.customer.first_name +" "+note.customer.last_name
                date = note.credit_note_date
                ref = note.credit_note_number
                type = 'Credit Note'
                total = note.grand_total
                mOut = note.grand_total
                mIn = 0
                totMoneyOut += float(note.grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
                
    est = Estimate.objects.filter(company=comp_details, estimate_date = currentDate)
    if est:
        for e in est:
            partyName = e.customer.first_name +" "+e.customer.last_name
            date = e.estimate_date
            ref = e.estimate_number
            type = 'Estimate'
            total = e.grand_total
            mIn = e.grand_total
            mOut = 0
            totMoneyIn += float(e.grand_total)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)
            
    pOrder = PurchaseOrder.objects.filter(company = comp_details, purchase_order_date = currentDate)
    if pOrder:
        for p in pOrder:
                partyName =p.vendor.first_name +" "+p.vendor.last_name
                date = p.purchase_order_date
                ref = p.sales_order_number
                type = 'PurchaseOrder'
                total = p.grand_total
                mOut = p.grand_total
                mIn = 0
                totMoneyOut += float(p.grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
    exp = Expense.objects.filter(company = comp_details, date = currentDate)
    if exp:
        for e in exp:
                partyName =e.vendor_name 
                date = e.date
                ref = e.expense_number
                type = 'Expense'
                total = e.amount
                mOut = e.amount
                mIn = 0
                totMoneyOut += float(e.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
    rec_expense = Recurring_Expense.objects.filter(company = comp_details, exp_date = currentDate)
    if rec_expense:
        for rec in rec_expense:
                partyName =rec.vendor.first_name +" "+rec.vendor.last_name
                date = rec.exp_date
                ref = rec.Expense_Number
                type = 'Recurring Expense'
                total = rec.amount
                mOut = rec.amount
                mIn = 0
                totMoneyOut += float(rec.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
    waybill = EwayBill.objects.filter(company=comp_details, start_date = currentDate)
    if waybill:
        for bill in waybill:
            partyName = bill.customer.first_name +" "+bill.customer.last_name
            date = bill.start_date
            ref = bill.eway_bill_number
            type = 'EwayBill'
            total = bill.grandtotal
            mIn = bill.grandtotal
            mOut = 0
            totMoneyIn += float(bill.grandtotal)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)
    
    
    sDetails = SalaryDetails.objects.filter(company = comp_details, salary_date = currentDate)
    if sDetails:
        for s in sDetails:
                partyName =s.employee.first_name +" "+s.employee.last_name
                date = s.salary_date
                ref = ''
                type = 'SalaryDetails'
                total = s.total_amount
                mOut = s.total_amount
                mIn = 0
                totMoneyOut += float(s.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details) 
     
                
    loan_acc = loan_account.objects.filter(company = comp_details, loan_date = currentDate)
    if loan_acc:
        for loan in loan_acc:
                partyName = loan.bank_holder.customer_name
                date = loan.loan_date
                ref = ''
                type = 'Loan Account'
                total = loan.loan_amount
                mIn = loan.loan_amount
                mOut = 0
                totMoneyIn += float(loan.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
  
    loan_acc = loan_account.objects.filter(company = comp_details,loan_date = currentDate)            
    repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date = currentDate, type='EMI paid')           
    if repayment_details:            
        for r in repayment_details:
                partyName =r.loan.bank_holder.customer_name
                date = r.payment_date
                ref = ''
                type = r.type
                total = r.total_amount
                mOut = r.total_amount
                mIn = 0
                totMoneyOut += float(r.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
                
    loan_acc = loan_account.objects.filter(company = comp_details,loan_date = currentDate)            
    repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date = currentDate,  type='Additional Loan')           
    if repayment_details:            
        for r in repayment_details:
                partyName =r.loan.bank_holder.customer_name
                date = r.payment_date
                ref = ''
                type = r.type
                total = r.total_amount
                mIn = r.total_amount
                mOut = 0
                totMoneyIn += float(r.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
                
    emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate = currentDate)
    if emploan:
        for emp in emploan:
                partyName =emp.Employee.first_name +" "+emp.Employee.last_name
                date = emp.Loandate
                ref = ''
                type = 'EmployeeLoan'
                total = emp.LoanAmount
                mOut = emp.LoanAmount
                mIn = 0
                totMoneyOut += float(emp.LoanAmount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details) 
    
    emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate = currentDate)           
    repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date = currentDate,  particular='EMI paid')           
    if repay:            
        for r in repay:
                partyName =r.employee.first_name +" "+r.employee.last_name
                date = r.payment_date
                ref = ''
                type = r.particular
                total = r.total_payment
                mIn = r.total_payment
                mOut = 0
                totMoneyIn += float(r.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
    
        
    emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate = currentDate)           
    repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date = currentDate,  particular='Additional Loan issued')           
    if repay:            
        for r in repay:  
                partyName =r.employee.first_name +" "+r.employee.last_name
                date = r.payment_date
                ref = ''
                type = r.particular
                total = r.total_payment
                mIn = 0
                mOut = r.total_payment
                totMoneyOut += float(r.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)  
      
      
                
    pay = Payment_recieved.objects.filter(company = comp_details, payment_date = currentDate)
    if pay:
        for p in pay:
                partyName =p.customer.first_name +" "+p.customer.last_name
                date = p.payment_date
                ref = p.payment_number
                type = 'Payment Recieved'
                total = p.amount_to_apply
                mOut = 0
                mIn = p.amount_to_apply
                totMoneyIn += float(p.amount_to_apply)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details) 


    challan = Delivery_challan.objects.filter(company = comp_details, challan_date = currentDate)
    if challan:
        for c in challan:
                partyName =c.customer.first_name +" "+c.customer.last_name
                date = c.challan_date
                ref = c.challan_number
                type = 'Delivery Challan'
                total = c.grand_total
                mOut = 0
                mIn = c.grand_total
                totMoneyIn += float(c.grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details) 


    pay = payment_made.objects.filter(company = comp_details, payment_date = currentDate)
    if pay:
        for p in pay:
                partyName =p.vendor.first_name +" "+p.vendor.last_name
                date = p.payment_date
                ref = p.payment_no
                type = 'Payment Made'
                total = p.total
                mOut = p.total
                mIn = 0
                totMoneyOut += float(p.total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)  
                    
                  
    return render(request, 'zohomodules/Reports/Daybook.html', {               
                'allmodules': allmodules,
                'log_details': log_details,              
                'companyName':comp_details.company_name,
                'reportData':reportData,
                'totalMoneyIn':totMoneyIn,
                'totalMoneyOut':totMoneyOut,
                'startDate':None, 
                'endDate':None,
                'currentDate':currentDate.strftime("%d-%m-%Y")
                
            })
    
    
def dayBookReportCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    if request.method == 'GET':
        startDate = request.GET['from_date']
        endDate = request.GET['to_date']
        currentDate = datetime.today()
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        reportData = []
        totMoneyIn = 0
        totMoneyOut = 0

      
    sOrder = SaleOrder.objects.filter(company=comp_details, sales_order_date__range = [startDate, endDate])
    if sOrder:
        for s in sOrder:
            partyName = s.customer.first_name +" "+s.customer.last_name
            date = s.sales_order_date
            ref = s.sales_order_number
            type = 'Sales Order'
            total = s.grand_total
            mIn = s.grand_total
            mOut = 0
            totMoneyIn += float(s.grand_total)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)
            
            
    inv = invoice.objects.filter(company=comp_details, date__range = [startDate, endDate])
    if inv:
        for i in inv:
            partyName = i.customer.first_name +" "+i.customer.last_name
            date = i.date
            ref = i.invoice_number
            type = 'Invoice'
            total = i.grand_total
            mIn = i.grand_total
            mOut = 0
            totMoneyIn += float(i.grand_total)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details) 
            
            
    recInv = RecurringInvoice.objects.filter(company=comp_details, start_date__range = [startDate, endDate])
    if recInv:
        for r in recInv:
            partyName = r.customer.first_name +" "+r.customer.last_name
            date = r.start_date
            ref = r.rec_invoice_no
            type = 'Recurring Invoice'
            total = r.grandtotal
            mIn = r.grandtotal
            mOut = 0
            totMoneyIn += float(r.grandtotal)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)  
              
            
    rtInv = RetainerInvoice.objects.filter(company=comp_details, retainer_invoice_date__range = [startDate, endDate])
    if rtInv:
        for r in rtInv:
            partyName = r.customer_name.first_name +" "+r.customer_name.last_name
            date = r.retainer_invoice_date
            ref = r.retainer_invoice_number
            type = 'Retainer Invoice'
            total = r.total_amount
            mIn = r.total_amount
            mOut = 0
            totMoneyIn += float(r.total_amount)

            details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
            reportData.append(details)  
    
    
    dbNote = debitnote.objects.filter(company = comp_details, debitnote_date__range = [startDate, endDate])
    if dbNote:
        for d in dbNote:
                partyName = d.vendor.first_name +" "+d.vendor.last_name
                date = d.debitnote_date
                ref = d.debitnote_no
                type = 'Debit Note'
                total = d.grandtotal
                mIn = d.grandtotal
                mOut = 0
                totMoneyIn += float(d.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
                
    mJournal = Journal.objects.filter(company = comp_details, date__range = [startDate, endDate])
    if mJournal:
        for debit in mJournal:
                partyName = ''
                date = debit.date
                ref = debit.journal_no
                type = 'Manual Journal Debit'
                total = debit.total_debit
                mIn = debit.total_debit
                mOut = 0
                totMoneyIn += float(debit.total_debit)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        for credit in mJournal:
                partyName = ''
                date = credit.date
                ref = credit.journal_no
                type = 'Manual Journal Credit'
                total = credit.total_credit
                mOut = credit.total_credit
                mIn = 0
                totMoneyOut += float(credit.total_credit)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
    
    
    pBill = Bill.objects.filter(Company = comp_details, Bill_Date__range = [startDate, endDate])
    if pBill:
        for bill in pBill:
                partyName = bill.Vendor.first_name +" "+bill.Vendor.last_name
                date = bill.Bill_Date
                ref = bill.Bill_Number
                type = 'Purchase Bill'
                total = bill.Grand_Total
                mOut = bill.Grand_Total
                mIn = 0
                totMoneyOut += float(bill.Grand_Total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
    
    
    rBill = Recurring_bills.objects.filter(company = comp_details, rec_bill_date__range = [startDate, endDate])
    if rBill:
        for rbill in rBill:
                partyName = rbill.vendor_details.first_name +" "+rbill.vendor_details.last_name
                date = rbill.rec_bill_date
                ref = rbill.recc_bill_no
                type = 'Recurring Bill'
                total = rbill.total
                mOut = rbill.total
                mIn = 0
                totMoneyOut += float(rbill.total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
    
    
    cNote = Credit_Note.objects.filter(company = comp_details, credit_note_date__range = [startDate, endDate])
    if cNote:
        for note in cNote:
                partyName = note.customer.first_name +" "+note.customer.last_name
                date = note.credit_note_date
                ref = note.credit_note_number
                type = 'Credit Note'
                total = note.grand_total
                mOut = note.grand_total
                mIn = 0
                totMoneyOut += float(note.grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
                
    est = Estimate.objects.filter(company=comp_details, estimate_date__range = [startDate, endDate])
    if est:
        for e in est:
            partyName = e.customer.first_name +" "+e.customer.last_name
            date = e.estimate_date
            ref = e.estimate_number
            type = 'Estimate'
            total = e.grand_total
            mIn = e.grand_total
            mOut = 0
            totMoneyIn += float(e.grand_total)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
            
    pOrder = PurchaseOrder.objects.filter(company = comp_details, purchase_order_date__range = [startDate, endDate])
    if pOrder:
        for p in pOrder:
            partyName =p.vendor.first_name +" "+p.vendor.last_name
            date = p.purchase_order_date
            ref = p.sales_order_number
            type = 'PurchaseOrder'
            total = p.grand_total
            mOut = p.grand_total
            mIn = 0
            totMoneyOut += float(p.grand_total)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
            
    exp = Expense.objects.filter(company = comp_details, date__range = [startDate, endDate])
    if exp:
        for e in exp:
            partyName =e.vendor_name 
            date = e.date
            ref = e.expense_number
            type = 'Expense'
            total = e.amount
            mOut = e.amount
            mIn = 0
            totMoneyOut += float(e.amount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
            
    rec_expense = Recurring_Expense.objects.filter(company = comp_details, exp_date__range = [startDate, endDate])
    if rec_expense:
        for rec in rec_expense:
            partyName =rec.vendor.first_name +" "+rec.vendor.last_name
            date = rec.exp_date
            ref = rec.Expense_Number
            type = 'Recurring Expense'
            total = rec.amount
            mOut = rec.amount
            mIn = 0
            totMoneyOut += float(rec.amount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
            
    waybill = EwayBill.objects.filter(company=comp_details, start_date__range = [startDate, endDate])
    if waybill:
        for bill in waybill:
            partyName = bill.customer.first_name +" "+bill.customer.last_name
            date = bill.start_date
            ref = bill.eway_bill_number
            type = 'EwayBill'
            total = bill.grandtotal
            mIn = bill.grandtotal
            mOut = 0
            totMoneyIn += float(bill.grandtotal)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
    
    sDetails = SalaryDetails.objects.filter(company = comp_details, salary_date__range = [startDate, endDate])
    if sDetails:
        for s in sDetails:
            partyName =s.employee.first_name +" "+s.employee.last_name
            date = s.salary_date
            ref = ''
            type = 'SalaryDetails'
            total = s.total_amount
            mOut = s.total_amount
            mIn = 0
            totMoneyOut += float(s.total_amount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
            
    loan_acc = loan_account.objects.filter(company = comp_details, loan_date__range = [startDate, endDate])
    if loan_acc:
        for loan in loan_acc:
            partyName = loan.bank_holder.customer_name
            date = loan.loan_date
            ref = ''
            type = 'Loan Account'
            total = loan.loan_amount
            mIn = loan.loan_amount
            mOut = 0
            totMoneyIn += float(loan.loan_amount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)

    loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
    repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date__range = [startDate, endDate], type='EMI paid')           
    if repayment_details:            
        for r in repayment_details:
            partyName =r.loan.bank_holder.customer_name
            date = r.payment_date
            ref = ''
            type = r.type
            total = r.total_amount
            mOut = r.total_amount
            mIn = 0
            totMoneyOut += float(r.total_amount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)
            
            
    loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
    repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date__range = [startDate, endDate], type='Additional Loan')           
    if repayment_details:            
        for r in repayment_details:
            partyName =r.loan.bank_holder.customer_name
            date = r.payment_date
            ref = ''
            type = r.type
            total = r.total_amount
            mIn = r.total_amount
            mOut = 0
            totMoneyIn += float(r.total_amount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details) 
    
    emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate__range = [startDate, endDate])
    if emploan:
        for emp in emploan:
            partyName =emp.Employee.first_name +" "+emp.Employee.last_name
            date = emp.Loandate
            ref = ''
            type = 'EmployeeLoan'
            total = emp.LoanAmount
            mOut = emp.LoanAmount
            mIn = 0
            totMoneyOut += float(emp.LoanAmount)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details) 

    emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate__range = [startDate, endDate])           
    repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date__range = [startDate, endDate],  particular='EMI paid')           
    if repay:            
        for r in repay:
            partyName =r.employee.first_name +" "+r.employee.last_name
            date = r.payment_date
            ref = ''
            type = r.particular
            total = r.total_payment
            mIn = r.total_payment
            mOut = 0
            totMoneyIn += float(r.total_payment)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)

    
    emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate__range = [startDate, endDate])           
    repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date__range = [startDate, endDate],  particular='Additional Loan issued')           
    if repay:            
        for r in repay:  
            partyName =r.employee.first_name +" "+r.employee.last_name
            date = r.payment_date
            ref = ''
            type = r.particular
            total = r.total_payment
            mIn = 0
            mOut = r.total_payment
            totMoneyOut += float(r.total_payment)

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'moneyIn':mIn,
                'moneyOut':mOut
            }
            reportData.append(details)     
    
    
    pay = Payment_recieved.objects.filter(company = comp_details, payment_date__range = [startDate, endDate])
    if pay:
        for p in pay:
                partyName =p.customer.first_name +" "+p.customer.last_name
                date = p.payment_date
                ref = p.payment_number
                type = 'Payment Recieved'
                total = p.amount_to_apply
                mOut = 0
                mIn = p.amount_to_apply
                totMoneyIn += float(p.amount_to_apply)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details) 


    challan = Delivery_challan.objects.filter(company = comp_details, challan_date__range = [startDate, endDate])
    if challan:
        for c in challan:
                partyName =c.customer.first_name +" "+c.customer.last_name
                date = c.challan_date
                ref = c.challan_number
                type = 'Delivery Challan'
                total = c.grand_total
                mOut = 0
                mIn = c.grand_total
                totMoneyIn += float(c.grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details) 


    pay = payment_made.objects.filter(company = comp_details, payment_date__range = [startDate, endDate])
    if pay:
        for p in pay:
                partyName =p.vendor.first_name +" "+p.vendor.last_name
                date = p.payment_date
                ref = p.payment_no
                type = 'Payment Made'
                total = p.total
                mOut = p.total
                mIn = 0
                totMoneyOut += float(p.total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)         
    
    
    
  
    return render(request, 'zohomodules/Reports/Daybook.html', {               
                'allmodules': allmodules,
                'log_details': log_details,              
                'companyName':comp_details.company_name,
                'reportData':reportData,
                'totalMoneyIn':totMoneyIn,
                'totalMoneyOut':totMoneyOut,
                'startDate':startDate, 
                'endDate':endDate,
                'currentDate':None
                
            })


def shareDayBookReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        # Determine user type and fetch company details
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details=log_details).company

        if request.method == 'POST':
            # Extract email addresses and message from POST data
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            # Extract date range from POST data
            startDate = request.POST['start']
            endDate = request.POST['end']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            if startDate is None and endDate is None:
                currentDate = datetime.today().strftime("%Y-%m-%d")
            else:
                currentDate = None

            reportData = []
            totMoneyIn = 0
            totMoneyOut = 0
            
            sOrder = SaleOrder.objects.filter(company=comp_details, sales_order_date = currentDate)
            if sOrder:
                for s in sOrder:
                    partyName = s.customer.first_name +" "+s.customer.last_name
                    date = s.sales_order_date
                    ref = s.sales_order_number
                    type = 'Sales Order'
                    total = s.grand_total
                    mIn = s.grand_total
                    mOut = 0
                    totMoneyIn += float(s.grand_total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                    
            inv = invoice.objects.filter(company=comp_details, date = currentDate)
            if inv:
                for i in inv:
                    partyName = i.customer.first_name +" "+i.customer.last_name
                    date = i.date
                    ref = i.invoice_number
                    type = 'Invoice'
                    total = i.grand_total
                    mIn = i.grand_total
                    mOut = 0
                    totMoneyIn += float(i.grand_total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                     
            recInv = RecurringInvoice.objects.filter(company=comp_details, start_date = currentDate)
            if recInv:
                for r in recInv:
                    partyName = r.customer.first_name +" "+r.customer.last_name
                    date = r.start_date
                    ref = r.rec_invoice_no
                    type = 'Recurring Invoice'
                    total = r.grandtotal
                    mIn = r.grandtotal
                    mOut = 0
                    totMoneyIn += float(r.grandtotal)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details) 
                        
            rtInv = RetainerInvoice.objects.filter(company=comp_details, retainer_invoice_date = currentDate)
            if rtInv:
                for r in rtInv:
                    partyName = r.customer_name.first_name +" "+r.customer_name.last_name
                    date = r.retainer_invoice_date
                    ref = r.retainer_invoice_number
                    type = 'Retainer Invoice'
                    total = r.total_amount
                    mIn = r.total_amount
                    mOut = 0
                    totMoneyIn += float(r.total_amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)  
       
            dbNote = debitnote.objects.filter(company = comp_details, debitnote_date = currentDate)
            if dbNote:
                for d in dbNote:
                    partyName = d.vendor.first_name +" "+d.vendor.last_name
                    date = d.debitnote_date
                    ref = d.debitnote_no
                    type = 'Debit Note'
                    total = d.grandtotal
                    mIn = d.grandtotal
                    mOut = 0
                    totMoneyIn += float(d.grandtotal)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                               
            mJournal = Journal.objects.filter(company = comp_details, date = currentDate)
            if mJournal:
                for debit in mJournal:
                    partyName = ''
                    date = debit.date
                    ref = debit.journal_no
                    type = 'Manual Journal Debit'
                    total = debit.total_debit
                    mIn = debit.total_debit
                    mOut = 0
                    totMoneyIn += float(debit.total_debit)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)

                for credit in mJournal:
                    partyName = ''
                    date = credit.date
                    ref = credit.journal_no
                    type = 'Manual Journal Credit'
                    total = credit.total_credit
                    mOut = credit.total_credit
                    mIn = 0
                    totMoneyOut += float(credit.total_credit)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
       
            pBill = Bill.objects.filter(Company = comp_details, Bill_Date = currentDate)
            if pBill:
                for bill in pBill:
                    partyName = bill.Vendor.first_name +" "+bill.Vendor.last_name
                    date = bill.Bill_Date
                    ref = bill.Bill_Number
                    type = 'Purchase Bill'
                    total = bill.Grand_Total
                    mOut = bill.Grand_Total
                    mIn = 0
                    totMoneyOut += float(bill.Grand_Total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
    
    
            rBill = Recurring_bills.objects.filter(company = comp_details, rec_bill_date = currentDate)
            if rBill:
                for rbill in rBill:
                    partyName = rbill.vendor_details.first_name +" "+rbill.vendor_details.last_name
                    date = rbill.rec_bill_date
                    ref = rbill.recc_bill_no
                    type = 'Recurring Bill'
                    total = rbill.total
                    mOut = rbill.total
                    mIn = 0
                    totMoneyOut += float(rbill.total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)  
    
            cNote = Credit_Note.objects.filter(company = comp_details, credit_note_date = currentDate)
            if cNote:
                for note in cNote:
                    partyName = note.customer.first_name +" "+note.customer.last_name
                    date = note.credit_note_date
                    ref = note.credit_note_number
                    type = 'Credit Note'
                    total = note.grand_total
                    mOut = note.grand_total
                    mIn = 0
                    totMoneyOut += float(note.grand_total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                              
            est = Estimate.objects.filter(company=comp_details, estimate_date = currentDate)
            if est:
                for e in est:
                    partyName = e.customer.first_name +" "+e.customer.last_name
                    date = e.estimate_date
                    ref = e.estimate_number
                    type = 'Estimate'
                    total = e.grand_total
                    mIn = e.grand_total
                    mOut = 0
                    totMoneyIn += float(e.grand_total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
            
            pOrder = PurchaseOrder.objects.filter(company = comp_details, purchase_order_date = currentDate)
            if pOrder:
                for p in pOrder:
                    partyName =p.vendor.first_name +" "+p.vendor.last_name
                    date = p.purchase_order_date
                    ref = p.sales_order_number
                    type = 'PurchaseOrder'
                    total = p.grand_total
                    mOut = p.grand_total
                    mIn = 0
                    totMoneyOut += float(p.grand_total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                
            exp = Expense.objects.filter(company = comp_details, date = currentDate)
            if exp:
                for e in exp:
                    partyName =e.vendor_name 
                    date = e.date
                    ref = e.expense_number
                    type = 'Expense'
                    total = e.amount
                    mOut = e.amount
                    mIn = 0
                    totMoneyOut += float(e.amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                
            rec_expense = Recurring_Expense.objects.filter(company = comp_details, exp_date = currentDate)
            if rec_expense:
                for rec in rec_expense:
                    partyName =rec.vendor.first_name +" "+rec.vendor.last_name
                    date = rec.exp_date
                    ref = rec.Expense_Number
                    type = 'Recurring Expense'
                    total = rec.amount
                    mOut = rec.amount
                    mIn = 0
                    totMoneyOut += float(rec.amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                
            waybill = EwayBill.objects.filter(company=comp_details, start_date = currentDate)
            if waybill:
                for bill in waybill:
                    partyName = bill.customer.first_name +" "+bill.customer.last_name
                    date = bill.start_date
                    ref = bill.eway_bill_number
                    type = 'EwayBill'
                    total = bill.grandtotal
                    mIn = bill.grandtotal
                    mOut = 0
                    totMoneyIn += float(bill.grandtotal)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
    
            sDetails = SalaryDetails.objects.filter(company = comp_details, salary_date = currentDate)
            if sDetails:
                for s in sDetails:
                    partyName =s.employee.first_name +" "+s.employee.last_name
                    date = s.salary_date
                    ref = ''
                    type = 'SalaryDetails'
                    total = s.total_amount
                    mOut = s.total_amount
                    mIn = 0
                    totMoneyOut += float(s.total_amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details) 
                
            loan_acc = loan_account.objects.filter(company = comp_details, loan_date = currentDate)
            if loan_acc:
                for loan in loan_acc:
                    partyName = loan.bank_holder.customer_name
                    date = loan.loan_date
                    ref = ''
                    type = 'Loan Account'
                    total = loan.loan_amount
                    mIn = loan.loan_amount
                    mOut = 0
                    totMoneyIn += float(loan.loan_amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
  
            loan_acc = loan_account.objects.filter(company = comp_details,loan_date = currentDate)            
            repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date = currentDate, type='EMI paid')           
            if repayment_details:            
                for r in repayment_details:
                    partyName =r.loan.bank_holder.customer_name
                    date = r.payment_date
                    ref = ''
                    type = r.type
                    total = r.total_amount
                    mOut = r.total_amount
                    mIn = 0
                    totMoneyOut += float(r.total_amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                          
            loan_acc = loan_account.objects.filter(company = comp_details,loan_date = currentDate)            
            repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date = currentDate,  type='Additional Loan')           
            if repayment_details:            
                for r in repayment_details:
                    partyName =r.loan.bank_holder.customer_name
                    date = r.payment_date
                    ref = ''
                    type = r.type
                    total = r.total_amount
                    mIn = r.total_amount
                    mOut = 0
                    totMoneyIn += float(r.total_amount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
                     
            emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate = currentDate)
            if emploan:
                for emp in emploan:
                    partyName =emp.Employee.first_name +" "+emp.Employee.last_name
                    date = emp.Loandate
                    ref = ''
                    type = 'EmployeeLoan'
                    total = emp.LoanAmount
                    mOut = emp.LoanAmount
                    mIn = 0
                    totMoneyOut += float(emp.LoanAmount)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details) 
    
            emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate = currentDate)           
            repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date = currentDate,  particular='EMI paid')           
            if repay:            
                for r in repay:
                    partyName =r.employee.first_name +" "+r.employee.last_name
                    date = r.payment_date
                    ref = ''
                    type = r.particular
                    total = r.total_payment
                    mIn = r.total_payment
                    mOut = 0
                    totMoneyIn += float(r.total_payment)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
    
            emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate = currentDate)           
            repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date = currentDate,  particular='Additional Loan issued')           
            if repay:            
                for r in repay:  
                    partyName =r.employee.first_name +" "+r.employee.last_name
                    date = r.payment_date
                    ref = ''
                    type = r.particular
                    total = r.total_payment
                    mIn = 0
                    mOut = r.total_payment
                    totMoneyOut += float(r.total_payment)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)  
            
            pay = Payment_recieved.objects.filter(company = comp_details, payment_date = currentDate)
            if pay:
                for p in pay:
                    partyName =p.customer.first_name +" "+p.customer.last_name
                    date = p.payment_date
                    ref = p.payment_number
                    type = 'Payment Recieved'
                    total = p.amount_to_apply
                    mOut = 0
                    mIn = p.amount_to_apply
                    totMoneyIn += float(p.amount_to_apply)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details) 

            challan = Delivery_challan.objects.filter(company = comp_details, challan_date = currentDate)
            if challan:
                for c in challan:
                    partyName =c.customer.first_name +" "+c.customer.last_name
                    date = c.challan_date
                    ref = c.challan_number
                    type = 'Delivery Challan'
                    total = c.grand_total
                    mOut = 0
                    mIn = c.grand_total
                    totMoneyIn += float(c.grand_total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details) 

            pay = payment_made.objects.filter(company = comp_details, payment_date = currentDate)
            if pay:
                for p in pay:
                    partyName =p.vendor.first_name +" "+p.vendor.last_name
                    date = p.payment_date
                    ref = p.payment_no
                    type = 'Payment Made'
                    total = p.total
                    mOut = p.total
                    mIn = 0
                    totMoneyOut += float(p.total)
                    details = {'date': date,'partyName': partyName,'ref':ref,'type':type,'total':total,'moneyIn':mIn,'moneyOut':mOut}
                    reportData.append(details)
            

            sOrder = SaleOrder.objects.filter(company=comp_details, sales_order_date__range=[startDate, endDate])
            if sOrder:
                for s in sOrder:
                    partyName = s.customer.first_name + " " + s.customer.last_name
                    date = s.sales_order_date
                    ref = s.sales_order_number
                    type = 'Sales Order'
                    total = s.grand_total
                    mIn = s.grand_total
                    mOut = 0
                    totMoneyIn += float(s.grand_total)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref': ref,
                        'type': type,
                        'total': total,
                        'moneyIn': mIn,
                        'moneyOut': mOut
                    }
                    reportData.append(details)

            inv = invoice.objects.filter(company=comp_details, date__range=[startDate, endDate])
            if inv:
                for i in inv:
                        partyName = i.customer.first_name + " " + i.customer.last_name
                        date = i.date
                        ref = i.invoice_number
                        type = 'Invoice'
                        total = i.grand_total
                        mIn = i.grand_total
                        mOut = 0
                        totMoneyIn += float(i.grand_total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                recInv = RecurringInvoice.objects.filter(company=comp_details, start_date__range=[startDate, endDate])
                if recInv:
                    for r in recInv:
                        partyName = r.customer.first_name + " " + r.customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        mIn = r.grandtotal
                        mOut = 0
                        totMoneyIn += float(r.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                rtInv = RetainerInvoice.objects.filter(company=comp_details, retainer_invoice_date__range=[startDate, endDate])
                if rtInv:
                    for r in rtInv:
                        partyName = r.customer_name.first_name + " " + r.customer_name.last_name
                        date = r.retainer_invoice_date
                        ref = r.retainer_invoice_number
                        type = 'Retainer Invoice'
                        total = r.total_amount
                        mIn = r.total_amount
                        mOut = 0
                        totMoneyIn += float(r.total_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                dbNote = debitnote.objects.filter(company=comp_details, debitnote_date__range=[startDate, endDate])
                if dbNote:
                    for d in dbNote:
                        partyName = d.vendor.first_name + " " + d.vendor.last_name
                        date = d.debitnote_date
                        ref = d.debitnote_no
                        type = 'Debit Note'
                        total = d.grandtotal
                        mIn = d.grandtotal
                        mOut = 0
                        totMoneyIn += float(d.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                mJournal = Journal.objects.filter(company=comp_details, date__range=[startDate, endDate])
                if mJournal:
                    for debit in mJournal:
                        partyName = ''
                        date = debit.date
                        ref = debit.journal_no
                        type = 'Manual Journal Debit'
                        total = debit.total_debit
                        mIn = debit.total_debit
                        mOut = 0
                        totMoneyIn += float(debit.total_debit)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                    for credit in mJournal:
                        partyName = ''
                        date = credit.date
                        ref = credit.journal_no
                        type = 'Manual Journal Credit'
                        total = credit.total_credit
                        mOut = credit.total_credit
                        mIn = 0
                        totMoneyOut += float(credit.total_credit)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                pBill = Bill.objects.filter(Company=comp_details, Bill_Date__range=[startDate, endDate])
                if pBill:
                    for bill in pBill:
                        partyName = bill.Vendor.first_name + " " + bill.Vendor.last_name
                        date = bill.Bill_Date
                        ref = bill.Bill_Number
                        type = 'Purchase Bill'
                        total = bill.Grand_Total
                        mOut = bill.Grand_Total
                        mIn = 0
                        totMoneyOut += float(bill.Grand_Total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                rBill = Recurring_bills.objects.filter(company=comp_details, rec_bill_date__range=[startDate, endDate])
                if rBill:
                    for rbill in rBill:
                        partyName = rbill.vendor_details.first_name + " " + rbill.vendor_details.last_name
                        date = rbill.rec_bill_date
                        ref = rbill.recc_bill_no
                        type = 'Recurring Bill'
                        total = rbill.total
                        mOut = rbill.total
                        mIn = 0
                        totMoneyOut += float(rbill.total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)

                cNote = Credit_Note.objects.filter(company=comp_details, credit_note_date__range=[startDate, endDate])
                if cNote:
                    for note in cNote:
                        partyName = note.customer.first_name + " " + note.customer.last_name
                        date = note.credit_note_date
                        ref = note.credit_note_number
                        type = 'Credit Note'
                        total = note.grand_total
                        mOut = note.grand_total
                        mIn = 0
                        totMoneyOut += float(note.grand_total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref': ref,
                            'type': type,
                            'total': total,
                            'moneyIn': mIn,
                            'moneyOut': mOut
                        }
                        reportData.append(details)
                
                est = Estimate.objects.filter(company=comp_details, estimate_date__range = [startDate, endDate])
                if est:
                    for e in est:
                        partyName = e.customer.first_name +" "+e.customer.last_name
                        date = e.estimate_date
                        ref = e.estimate_number
                        type = 'Estimate'
                        total = e.grand_total
                        mIn = e.grand_total
                        mOut = 0
                        totMoneyIn += float(e.grand_total)

                        details = {
                              'date': date,
                              'partyName': partyName,
                              'ref':ref,
                              'type':type,
                              'total':total,
                              'moneyIn':mIn,
                              'moneyOut':mOut
                        }
                        reportData.append(details) 
                        
                pOrder = PurchaseOrder.objects.filter(company = comp_details, purchase_order_date__range = [startDate, endDate])
                if pOrder:
                    for p in pOrder:
                        partyName =p.vendor.first_name +" "+p.vendor.last_name
                        date = p.purchase_order_date
                        ref = p.sales_order_number
                        type = 'PurchaseOrder'
                        total = p.grand_total
                        mOut = p.grand_total
                        mIn = 0
                        totMoneyOut += float(p.grand_total)
            

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)        
                        
                exp = Expense.objects.filter(company = comp_details, date__range = [startDate, endDate])
                if exp:
                    for e in exp:
                        partyName =e.vendor_name 
                        date = e.date
                        ref = e.expense_number
                        type = 'Expense'
                        total = e.amount
                        mOut = e.amount
                        mIn = 0
                        totMoneyOut += float(e.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
                        
                rec_expense = Recurring_Expense.objects.filter(company = comp_details, exp_date__range = [startDate, endDate])
                if rec_expense:
                    for rec in rec_expense:
                        partyName =rec.vendor.first_name +" "+rec.vendor.last_name
                        date = rec.exp_date
                        ref = rec.Expense_Number
                        type = 'Recurring Expense'
                        total = rec.amount
                        mOut = rec.amount
                        mIn = 0
                        totMoneyOut += float(rec.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
            
                waybill = EwayBill.objects.filter(company=comp_details, start_date__range = [startDate, endDate])
                if waybill:
                    for bill in waybill:
                        partyName = bill.customer.first_name +" "+bill.customer.last_name
                        date = bill.start_date
                        ref = bill.eway_bill_number
                        type = 'EwayBill'
                        total = bill.grandtotal
                        mIn = bill.grandtotal
                        mOut = 0
                        totMoneyIn += float(bill.grandtotal)

                        details = {
                           'date': date,
                           'partyName': partyName,
                           'ref':ref,
                           'type':type,
                           'total':total,
                           'moneyIn':mIn,
                           'moneyOut':mOut
                        }
                        reportData.append(details)        
                
                sDetails = SalaryDetails.objects.filter(company = comp_details, salary_date__range = [startDate, endDate])
                if sDetails:
                    for s in sDetails:
                        partyName =s.employee.first_name +" "+s.employee.last_name
                        date = s.salary_date
                        ref = ''
                        type = 'SalaryDetails'
                        total = s.total_amount
                        mOut = s.total_amount
                        mIn = 0
                        totMoneyOut += float(s.total_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details) 
                        
                loan_acc = loan_account.objects.filter(company = comp_details, loan_date__range = [startDate, endDate])
                if loan_acc:
                    for loan in loan_acc:
                        partyName = loan.bank_holder.customer_name
                        date = loan.loan_date
                        ref = ''
                        type = 'Loan Account'
                        total = loan.loan_amount
                        mIn = loan.loan_amount
                        mOut = 0
                        totMoneyIn += float(loan.loan_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
                repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date__range = [startDate, endDate], type='EMI paid')           
                if repayment_details:            
                    for r in repayment_details:
                        partyName =r.loan.bank_holder.customer_name
                        date = r.payment_date
                        ref = ''
                        type = r.type
                        total = r.total_amount
                        mOut = r.total_amount
                        mIn = 0
                        totMoneyOut += float(r.total_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
            
            
                loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
                repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date__range = [startDate, endDate],  type='Additional Loan')           
                if repayment_details:            
                    for r in repayment_details:
                        partyName =r.loan.bank_holder.customer_name
                        date = r.payment_date
                        ref = ''
                        type = r.type
                        total = r.total_amount
                        mIn = r.total_amount
                        mOut = 0
                        totMoneyIn += float(r.total_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
                        
                emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate__range = [startDate, endDate])
                if emploan:
                    for emp in emploan:
                        partyName =emp.Employee.first_name +" "+emp.Employee.last_name
                        date = emp.Loandate
                        ref = ''
                        type = 'EmployeeLoan'
                        total = emp.LoanAmount
                        mOut = emp.LoanAmount
                        mIn = 0
                        totMoneyOut += float(emp.LoanAmount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details) 

                emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate__range = [startDate, endDate])           
                repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date__range = [startDate, endDate],  particular='EMI paid')           
                if repay:            
                    for r in repay:
                        partyName =r.employee.first_name +" "+r.employee.last_name
                        date = r.payment_date
                        ref = ''
                        type = r.particular
                        total = r.total_payment
                        mIn = r.total_payment
                        mOut = 0
                        totMoneyIn += float(r.total_payment)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

    
                emploan = EmployeeLoan.objects.filter(company = comp_details, Loandate__range = [startDate, endDate])           
                repay = EmployeeLoanRepayment.objects.filter(emp__in=emploan,company = comp_details,payment_date__range = [startDate, endDate],  particular='Additional Loan issued')           
                if repay:            
                    for r in repay:  
                        partyName =r.employee.first_name +" "+r.employee.last_name
                        date = r.payment_date
                        ref = ''
                        type = r.particular
                        total = r.total_payment
                        mIn = 0
                        mOut = r.total_payment
                        totMoneyOut += float(r.total_payment)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        } 
                        reportData.append(details)  
                        
                
                pay = Payment_recieved.objects.filter(company = comp_details, payment_date__range = [startDate, endDate])
                if pay:
                    for p in pay:
                        partyName =p.customer.first_name +" "+p.customer.last_name
                        date = p.payment_date
                        ref = p.payment_number
                        type = 'Payment Recieved'
                        total = p.amount_to_apply
                        mOut = 0
                        mIn = p.amount_to_apply
                        totMoneyIn += float(p.amount_to_apply)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details) 


                challan = Delivery_challan.objects.filter(company = comp_details, challan_date__range = [startDate, endDate])
                if challan:
                    for c in challan:
                        partyName =c.customer.first_name +" "+c.customer.last_name
                        date = c.challan_date
                        ref = c.challan_number
                        type = 'Delivery Challan'
                        total = c.grand_total
                        mOut = 0
                        mIn = c.grand_total
                        totMoneyIn += float(c.grand_total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details) 


                pay = payment_made.objects.filter(company = comp_details, payment_date__range = [startDate, endDate])
                if pay:
                    for p in pay:
                        partyName =p.vendor.first_name +" "+p.vendor.last_name
                        date = p.payment_date
                        ref = p.payment_no
                        type = 'Payment Made'
                        total = p.total
                        mOut = p.total
                        mIn = 0
                        totMoneyOut += float(p.total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)               
            
            context = {
                'log_details': log_details,
                'companyName': comp_details.company_name,
                'reportData': reportData,
                'totalMoneyIn': totMoneyIn,
                'totalMoneyOut': totMoneyOut,
                'startDate': startDate,
                'endDate': endDate,
                'currentDate': currentDate
            }

            template_path = 'zohomodules/Reports/DayBook_Pdf.html'
            template = get_template(template_path)

            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)                            
            pdf = result.getvalue()
            filename = 'Report_DayBook'
            subject = "Report_DayBook"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached Report for - Day Book. \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            
            email.from_email = settings.EMAIL_HOST_USER 
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            # messages.success(request, 'Report has been shared via email successfully!')
            return redirect(dayBookReport)

#---------------- Zoho Final Daybook - Ginto Shaji - End-------------------->

def purchase_by_vendor(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        elif log_details.user_type == 'Staff':
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        reportData = []
        totbil = 0
        totRecbil = 0
        totdebNote = 0
        subTot = 0
        subTotWOdeb = 0
        totjour =0

        cust = Vendor.objects.filter(company=cmp)
        for c in cust:
            customerName = c.first_name +" "+c.last_name
            count = 0
            purch = 0
            bil = Bill.objects.filter(Vendor=c.id)
            deb = debitnote.objects.filter(vendor=c.id)
            recbil = Recurring_bills.objects.filter(vendor_details=c.id)
            # recInv = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
            # crd = Credit_Note.objects.filter(customer=c, status = 'Saved')
            

            for i in bil:
                purch += float(i.Grand_Total)
                totbil += float(i.Grand_Total)
                subTot += float(i.Sub_Total)
                subTotWOdeb += float(i.Sub_Total)

            for r in recbil:
                purch += float(r.total)
                totRecbil += float(r.total)
                subTot += float(r.sub_total)
                subTotWOdeb += float(r.sub_total)

            for d in deb:
                purch -= float(d.grandtotal)
                totdebNote += float(d.grandtotal)
                subTot -= float(d.subtotal)
            
            count = len(bil) + len(recbil) + len(deb)
            details = {
                'name': customerName,
                'count':count,
                'purch':purch
            }
            reportData.append(details)
        
        totCust = len(cust)
        totSale = totbil + totRecbil - totdebNote 
        totSaleWOdebNote = totbil + totRecbil 
        context = {
            'allmodules':allmodules, 'details':dash_details,'log_details':log_details , 'cmp':cmp,'reportData':reportData,
            'totalCustomers':totCust, 'totalInvoice':totbil, 'totalRecInvoice':totRecbil, 'totalCreditNote': totdebNote,
            'subtotal':subTot, 'subtotalWOCredit':subTotWOdeb, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOdebNote,
            'startDate':None, 'endDate':None
        }
        return render(request,'zohomodules/Reports/purchase_by_vendor.html',context)
    else:
        return redirect('/')
    
def purchase_by_vendor_mail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        elif log_details.user_type == 'Staff':
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totbil = 0
                totRecbil = 0
                totdebNote = 0
                subTot = 0
                subTotWOdeb = 0

                cust = Vendor.objects.filter(company=cmp)

                for c in cust:
                    customerName = c.first_name + " " + c.last_name
                    count = 0
                    purch = 0

                    if startDate == None or endDate == None:
                        if trans == "all":
                            bil = Bill.objects.filter(Vendor=c.id)
                            recbil = Recurring_bills.objects.filter(vendor_details=c.id)
                            deb = debitnote.objects.filter(vendor=c.id)
                        elif trans == 'Bill':
                            bil = Bill.objects.filter(Vendor=c.id)
                            recbil = None
                            deb = None
                        elif trans == 'Recurring Bill':
                            bil = None
                            recbil = Recurring_bills.objects.filter(vendor_details=c.id)
                            deb = None
                        elif trans == 'Debit Note':
                            bil = None
                            recbil = None
                            deb = debitnote.objects.filter(vendor=c.id)
                    else:
                        if trans == 'all':
                            bil = Bill.objects.filter(Vendor=c.id, Bill_date__range=[startDate, endDate])
                            recbil = Recurring_bills.objects.filter(vendor_details=c.id, rec_bill_date__range=[startDate, endDate])
                            deb = debitnote.objects.filter(vendor=c.id, debitnote_date__range=[startDate, endDate])
                        elif trans == 'Bill':
                            bil = Bill.objects.filter(Vendor=c.id, Bill_date__range=[startDate, endDate])
                            recbil = None
                            deb = None
                        elif trans == 'Recurring Bill':
                            bil = None
                            recbil = Recurring_bills.objects.filter(vendor_details=c.id, rec_bill_date__range=[startDate, endDate])
                            deb = None
                        elif trans == 'Debit Note':
                            bil = None
                            recbil = None
                            deb = debitnote.objects.filter(vendor=c.id, debitnote_date__range=[startDate, endDate])

                    if bil:
                        count += len(bil)
                        for i in bil:
                            purch += float(i.Grand_Total)
                            totbil += float(i.Grand_Total)
                            subTot += float(i.Sub_Total)
                            subTotWOdeb += float(i.Sub_Total)

                    if recbil:
                        count += len(recbil)
                        for r in recbil:
                            purch += float(r.total)
                            totRecbil += float(r.total)
                            subTot += float(r.sub_total)
                            subTotWOdeb += float(r.sub_total)

                    if deb:
                        count += len(deb)
                        for n in deb:
                            purch -= float(n.grandtotal)
                            totdebNote += float(n.grandtotal)
                            subTot -= float(n.subtotal)
                    details = {
                        'name': customerName,
                        'count': count,
                        'sales': purch
                    }

                    reportData.append(details)

                totCust = len(cust)
                totpurch = totbil + totRecbil - totdebNote
                totpurchWOdebNote = totbil + totRecbil

                context = {'reportData': reportData, 'cmp': cmp, 'startDate': startDate, 'endDate': endDate, 'totalCustomers': totCust, 'totalInvoice': totbil, 'totalRecInvoice': totRecbil, 'totalCreditNote': totdebNote, 'subtotal': subTot, 'subtotalWOCredit': subTotWOdeb, 'totalSale': totpurch, 'totalSaleWOCredit': totpurchWOdebNote}
                template_path = 'zohomodules/Reports/purchase_by_vendor_mail.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Purchase by Vendor'
                subject = f"Purchase by vendor"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Purchase by vendor Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Purchase by vendor report details has been shared via email successfully..!')
                return redirect(purchase_by_vendor)
        except Exception as e:
            messages.error(request, f'{e}')
            return redirect(purchase_by_vendor)
        
def purchase_by_vendor_custom(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        elif log_details.user_type == 'Staff':
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totbil = 0
            totRecbil = 0
            totdebNote = 0
            subTot = 0
            subTotWOdeb = 0

            cust = Vendor.objects.filter(company=cmp)


            for c in cust:
                customerName = c.first_name +" "+c.last_name
                count = 0
                purch = 0

                if startDate == None or endDate == None:
                    if trans == "all":
                        bil = Bill.objects.filter(Vendor=c.id)
                        recbil = Recurring_bills.objects.filter(vendor_details=c.id)
                        deb = debitnote.objects.filter(company=c.company)
                    elif trans == 'Bill':
                        bil = Bill.objects.filter(Vendor=c.id)
                        recbil = None
                        deb = None
                    elif trans == 'Recurring Bill':
                        bil = None
                        recbil = Recurring_bills.objects.filter(vendor_details=c.id)
                        deb = None
                    elif trans == 'Debit Note':
                        bil = None
                        recbil = None
                        deb = debitnote.objects.filter(vendor=c.id)
                else:
                    if trans == 'all':
                        bil = Bill.objects.filter(Vendor=c.id, Bill_Date__range=[startDate, endDate])
                        recbil = Recurring_bills.objects.filter(vendor_details=c.id, rec_bill_date__range=[startDate, endDate])
                        deb = debitnote.objects.filter(vendor=c.id, debitnote_date__range=[startDate, endDate])
                    elif trans == 'Bill':
                        bil = Bill.objects.filter(Vendor=c.id, Bill_Date__range=[startDate, endDate])
                        recbil = None
                        deb = None
                    elif trans == 'Recurring Bill':
                        bil = None
                        recbil = Recurring_bills.objects.filter(vendor_details=c.id, rec_bill_date__range=[startDate, endDate])
                        deb = None
                    elif trans == 'Debit Note':
                        bil = None
                        recbil = None
                        deb = debitnote.objects.filter(vendor=c.id, debitnote_date__range=[startDate, endDate])

                if bil:
                    count += len(bil)
                    for i in bil:
                        purch += float(i.Grand_Total)
                        totbil += float(i.Grand_Total)
                        subTot += float(i.Sub_Total)
                        subTotWOdeb += float(i.Sub_Total)

                if recbil:
                    count += len(recbil)
                    for r in recbil:
                        purch += float(r.total)
                        totRecbil += float(r.total)
                        subTot += float(r.sub_total)
                        subTotWOdeb += float(r.sub_total)
                
                if deb:
                    count += len(deb)
                    for n in deb:
                        purch -= float(n.grandtotal)
                        totdebNote += float(n.grandtotal)
                        subTot -= float(n.subtotal)
                
                details = {
                    'name': customerName,
                    'count':count,
                    'purch':purch
                }

                reportData.append(details)

            totCust = len(cust)
            totSale = totbil + totRecbil - totdebNote
            totpurchWOdebNote = totbil + totRecbil

            context = {
                'allmodules':allmodules, 'cmp':cmp,  'reportData':reportData,'totalCustomers':totCust, 'totalInvoice':totbil, 'totalRecInvoice':totRecbil, 'totalCreditNote': totdebNote,
                'subtotal':subTot, 'subtotalWOCredit':subTotWOdeb, 'totalSale':totSale, 'totalSaleWOCredit':totpurchWOdebNote,
                'startDate':startDate, 'endDate':endDate, 'transaction':trans,
            }
            return render(request,'zohomodules/Reports/purchase_by_vendor.html', context)
    else:
        return redirect('/')
        
def expenseRep(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')
    
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=comp_details, status='New')

        currentDate = datetime.today()

        reportData = []
        total_expense = 0

        Jrn = Expense.objects.filter(company=comp_details)
       
        if Jrn.exists():
            for s in Jrn:
                details = {
                    'date': s.date,
                    'expense_no': s.expense_number,
                    'account': s.account,
                    'expense_type': s.expense_type,
                    'payment_method': s.payment_type,
                    'amount': s.amount,
                    'status': s.status,
                }
                total_expense += s.amount
               
                reportData.append(details)

        context = {
            'allmodules': allmodules,
            'reportData': reportData,
            'total_expense': total_expense,
            'startDate': None,
            'endDate': None,
            'details': dash_details,
            'log_details': log_details,
            'Jrn': Jrn,
        }
        return render(request, 'zohomodules/Reports/expenseRep.html', context)
    else:
        return redirect('/')


def expenseDetailsCustomized(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        
        if request.method == 'POST':
            trans = request.POST.get('transactions')
            startDate = request.POST.get('from_date')
            endDate = request.POST.get('to_date')

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            total_expense = 0
            expenses = Expense.objects.filter(company=comp_details)
            
            if startDate or endDate:
                expenses = expenses.filter(date__range=[startDate, endDate])

            if trans == 'draft':
                expenses = expenses.filter(status='draft')
            elif trans == 'save':
                expenses = expenses.filter(status='save')

            for expense in expenses:
                details = {
                    'date': expense.date,
                    'expense_no': expense.expense_number,
                    'account': expense.account,
                    'expense_type': expense.expense_type,
                    'payment_method': expense.payment_type,
                    'amount': expense.amount,
                    'status': expense.status,
                }
                total_expense += expense.amount
                reportData.append(details)

            context = {
                'allmodules': allmodules,
                'reportData': reportData,
                'startDate': startDate,
                'total_expense': total_expense,
                'endDate': endDate,
                'details': dash_details,
                'log_details': log_details,
                'expenses': expenses,
            }
            return render(request, 'zohomodules/Reports/expenseRep.html', context)
        else:
            return redirect('expenseRep')
    else:
        return redirect('/')
        
#---------------------------Recurring Expense Report- Meenu Shaju ------------------------------>
def Recurring_expense_report(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)

        
        allmodules= ZohoModules.objects.get(company = cmp)
        rec_expense = Recurring_Expense.objects.filter(company=cmp)
        total_amount = rec_expense.aggregate(total=Sum('amount'))['total']

        
        total_amount = total_amount or 0

    return render(request,'zohomodules/Reports/Recurring_expense_report.html',{'rec_expense':rec_expense,'allmodules':allmodules,'dash_details':dash_details,'cmp':cmp,'total_amount':total_amount,'details':dash_details})


def customize_expenseReport(request):
        if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                cmp = CompanyDetails.objects.get(login_details = log_details)
                
                
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            else:
                cmp = StaffDetails.objects.get(login_details = log_details).company
                
                dash_details = StaffDetails.objects.get(login_details=log_details)

            if request.method == 'POST':
                from_date = request.POST.get('from_date')
                to_date = request.POST.get('to_date')
                tag = request.POST.get('status')

                
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
                to_date = datetime.strptime(to_date, '%Y-%m-%d')
                allmodules= ZohoModules.objects.get(company = cmp)
                if tag != 'all':

            
                    
                    rec_expense = Recurring_Expense.objects.filter(company=cmp,exp_date__gte = from_date,exp_date__lte= to_date ,activation_tag= tag)
                else:
                    
                    rec_expense = Recurring_Expense.objects.filter(company=cmp,exp_date__gte = from_date,exp_date__lte= to_date )

                total_amount = rec_expense.aggregate(total=Sum('amount'))['total']

                
                total_amount = total_amount or 0

                return render(request,'zohomodules/Reports/Recurring_expense_report.html',{'rec_expense':rec_expense,'allmodules':allmodules,'dash_details':dash_details,'cmp':cmp,'total_amount':total_amount,'from_date':from_date,'to_date':to_date,'details':dash_details})


def recurring_expense_email(request):
    if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                cmp = CompanyDetails.objects.get(login_details = log_details)
                
                
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            else:
                cmp = StaffDetails.objects.get(login_details = log_details).company
                
                dash_details = StaffDetails.objects.get(login_details=log_details)

            if request.method == 'POST':
                from_date = request.POST.get('from_date')
                to_date = request.POST.get('to_date')
                tag = request.POST.get('status')
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                if(from_date and to_date and tag):

                
                    from_date = datetime.strptime(from_date, '%Y-%m-%d')
                    to_date = datetime.strptime(to_date, '%Y-%m-%d')

                
                    allmodules= ZohoModules.objects.get(company = cmp)
                    rec_expense = Recurring_Expense.objects.filter(company=cmp,exp_date__gte = from_date,exp_date__lte= to_date ,activation_tag= tag)
                    total_amount = rec_expense.aggregate(total=Sum('amount'))['total']
                    total_amount = total_amount or 0
                else:
                    rec_expense = Recurring_Expense.objects.filter(company=cmp)
                    total_amount = rec_expense.aggregate(total=Sum('amount'))['total']

                    
                    total_amount = total_amount or 0


                context = {'rec_expense':rec_expense,'dash_details':dash_details,'cmp':cmp,'total_amount':total_amount,'from_date':from_date,'to_date':to_date}
                template_path = 'zohomodules/Reports/recurring_expense_email.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Recurring Expense Details'
                subject = f"Recurring Expense Details - {cmp.company_name}"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Details for - Recurring Expense Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Recurring Expense details has been shared via email successfully..!')
                return redirect(Recurring_expense_report)

#End
# -------------------------------customer and vendor balances--------------------------------
def customerBalances(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
    
    
        
        cust = Customer.objects.filter(company=cmp)
        
        customers_data = []
        total_balance1 = 0 
        invoice_balance1=0
        recurring_invoice_balance1=0
        available_credits1=0
        recurring_invoice_balance=0
        available_credits=0
        total_invoice_balance1=0
        total_invoice_balance=0

        totCust = 0

        # Initialize total balance outside the loop
        for customer in cust:
            customerName = customer.first_name +" "+customer.last_name
            custemail = customer.customer_email
            custfname = customer.first_name
            custlname = customer.last_name
            custphno = customer.customer_mobile

            invoices = invoice.objects.filter(customer=customer, status='Saved')
            recurring_invoices = RecurringInvoice.objects.filter(customer=customer, status='Saved')
            credit_notes = Credit_Note.objects.filter(customer=customer, status='Saved')
            invoice_balance = sum(float(inv.balance) for inv in invoices)
            recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
            total_invoice_balance = invoice_balance + recurring_invoice_balance           
            available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)            
            total_balance = total_invoice_balance - available_credits
            
            # Update the total balance
            total_balance1 += total_balance
            totCust = len(cust)
            invoice_balance1 += invoice_balance
            recurring_invoice_balance1 += recurring_invoice_balance
            available_credits1 += available_credits
            total_invoice_balance1+=total_invoice_balance
            

            customers_data.append({
                'name': customerName, 
                'custemail':custemail,
                'custfname': custfname,
                'custlname': custlname,
                'custphno': custphno,               
                'invoice_balance': total_invoice_balance,
                'available_credits': available_credits,
                'total_balance': total_balance,
            })
        
            context = {
            'cust':cust,
            'customers': customers_data,
            'total_balance1': total_balance1,
            'allmodules':allmodules,
            'details':dash_details,
            'log_details':log_details , 
            'cmp':cmp,
             'totalCustomers':totCust,
             'totalInvoice':invoice_balance1,
             'totalRecInvoice':recurring_invoice_balance1, 
             'totalCreditNote': available_credits1,
             'invoice_balance':total_invoice_balance,
            'available_credits': available_credits,
            'total_invoice_balance':total_invoice_balance1,
            'invoice_c_present': True,
            'cnote_c_present': True,
            'cemail':None, 
            'cfname':'on', 
            'clname':'on', 
            'cphno':None

             }
        
        return render(request, 'zohomodules/Reports/customerbalances.html', context)
    else:
        return redirect('/')
    

def CustomizecustomerBalances(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Customer.objects.filter(company=cmp)

        customers_data = []
        total_balance1 = 0
        invoice_balance1 = 0
        recurring_invoice_balance1 = 0
        available_credits1 = 0
        invoice_balance=0
        total_invoice_balance1 = 0
        totCust = 0
        recurring_invoice_balance = 0
        total_invoice_balance = 0
        available_credits = 0
        total_balance=0

        # Get the start date from POST data with a default value of None
     
        if 'from_date' in request.POST:
            start_date_str = request.POST['from_date']
        else:
            start_date_str = None
        if 'to_date' in request.POST:
            end_date_str = request.POST['to_date']
        else:
            end_date_str = None
        
        

        if 'include_invoice' in request.POST:
            invoice_c = request.POST['include_invoice']
        else:
            invoice_c = ''

        if 'include_cnote' in request.POST:
            cnote_c = request.POST['include_cnote']
        else:
            cnote_c = ''

        if 'transactions' in request.POST:
            name = request.POST['transactions']
        else:
            name = None
       # Handling 'cust_email_show' checkbox
        if 'cust_email_show' in request.POST:
            cemail = request.POST['cust_email_show']
        else:
            cemail = None

        # Handling 'cust_fname_show' checkbox
        if 'cust_fname_show' in request.POST:
            cfname = request.POST['cust_fname_show']
        else:
            cfname = None

        # Handling 'cust_lname_show' checkbox
        if 'cust_lname_show' in request.POST:
            clname = request.POST['cust_lname_show']
        else:
            clname = None

        # Handling 'cust_phone_show' checkbox
        if 'cust_phone_show' in request.POST:
            cphno = request.POST['cust_phone_show']
        else:
            cphno = None

        # Convert start_date and end_date strings to datetime objects
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d') if start_date_str else None
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d') if end_date_str else None

        if name == 'all':
            for customer in cust:
                customerName = customer.first_name + " " + customer.last_name
                custemail = customer.customer_email
                custfname = customer.first_name
                custlname = customer.last_name
                custphno = customer.customer_mobile
                invoices = invoice.objects.filter(customer=customer, status='Saved')
                recurring_invoices = RecurringInvoice.objects.filter(customer=customer, status='Saved')
                credit_notes = Credit_Note.objects.filter(customer=customer, status='Saved')

                # Filter invoices based on start_date and end_date if provided
                if start_date and end_date:
                    invoices = invoices.filter(date__range=[start_date, end_date])
                    recurring_invoices = recurring_invoices.filter(start_date__range=[start_date, end_date])
                    credit_notes = credit_notes.filter(credit_note_date__range=[start_date, end_date])


                # Calculate invoice balance only if 'invoice_c_present' is true
                if invoice_c:
                    invoice_balance = sum(float(inv.balance) for inv in invoices)
                    
                    recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    available_credits = 0 
                    total_balance = total_invoice_balance - available_credits

                if cnote_c:
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    invoice_balance = 0  # Set invoice balance to 0
                    recurring_invoice_balance = 0
                    total_invoice_balance = 0
                    total_balance = total_invoice_balance - available_credits

                if  invoice_c and cnote_c:
                    invoice_balance = sum(float(inv.balance) for inv in invoices)
                    
                    recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    total_balance = total_invoice_balance - available_credits

                    # Update the total balance
                total_balance1 += total_balance
                totCust = len(cust)
                invoice_balance1 += invoice_balance
                recurring_invoice_balance1 += recurring_invoice_balance
                available_credits1 += available_credits
                total_invoice_balance1 += total_invoice_balance

                

                customers_data.append({
                        'name': customerName,
                        'custemail':custemail,
                        'custfname': custfname,
                        'custlname': custlname,
                        'custphno': custphno,
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })

        else:
            for customer in cust:
                customerName = customer.first_name + " " + customer.last_name
                custemail = customer.customer_email
                custfname = customer.first_name
                custlname = customer.last_name
                custphno = customer.customer_mobile

                # Check if the name matches the filter, if provided
                if name and name != customerName:
                    continue


                # Initialize total balance outside the loop
                for customer in cust:
                    customerName = customer.first_name + " " + customer.last_name
                    custemail = customer.customer_email
                    custfname = customer.first_name
                    custlname = customer.last_name
                    custphno = customer.customer_mobile

                    # Check if the name matches the filter, if provided
                    if name and name != customerName:
                        continue

                    invoices = invoice.objects.filter(customer=customer, status='Saved')
                    recurring_invoices = RecurringInvoice.objects.filter(customer=customer, status='Saved')
                    credit_notes = Credit_Note.objects.filter(customer=customer, status='Saved')

                    # Filter invoices based on start_date and end_date if provided
                    if start_date and end_date:
                        invoices = invoices.filter(date__range=[start_date, end_date])
                        recurring_invoices = recurring_invoices.filter(start_date__range=[start_date, end_date])
                        credit_notes = credit_notes.filter(credit_note_date__range=[start_date, end_date])

                    # Calculate invoice balance only if 'bills' is true
                    if invoice_c:
                        invoice_balance = sum(float(inv.balance) for inv in invoices)
                        recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                        total_invoice_balance = invoice_balance + recurring_invoice_balance
                        available_credits = 0  # Set credit note balance to 0
                    if cnote_c:
                        available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                        invoice_balance = 0  # Set invoice balance to 0
                        recurring_invoice_balance = 0
                        total_invoice_balance = 0
                    if cnote_c and invoice_c:
                        invoice_balance = sum(float(inv.balance) for inv in invoices)
                        recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                        total_invoice_balance = invoice_balance + recurring_invoice_balance
                        available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                        
                    total_balance = total_invoice_balance - available_credits
                    # Update the total balance
                    total_balance1 += total_balance
                    totCust = len(cust)
                    invoice_balance1 += invoice_balance
                    recurring_invoice_balance1 += recurring_invoice_balance
                    available_credits1 += available_credits
                    total_invoice_balance1 += total_invoice_balance

                    customers_data.append({
                        'name': customerName,
                        'custemail':custemail,
                        'custfname': custfname,
                        'custlname': custlname,
                        'custphno': custphno,
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })

        context = {
            'cust':cust,
            'customers': customers_data,
            'total_balance1': total_balance1,
            'cmp': cmp,
            'allmodules': allmodules,
            'details':dash_details,
            'log_details':log_details , 

            'totalCustomers': totCust,
            'totalInvoice': invoice_balance1,
            'totalRecInvoice': recurring_invoice_balance1,
            'totalCreditNote': available_credits1,
            'invoice_balance': total_invoice_balance,
            'available_credits': available_credits,
            'total_invoice_balance': total_invoice_balance1,
            'start_date': start_date_str,  # Pass start_date to the template
            'end_date': end_date_str,  # Pass end_date to the template
            'name': name,  # Pass name to the template
            'invoice_c_present': bool(invoice_c),
            'cnote_c_present': bool(cnote_c),
             'cemail':cemail, 'cfname':cfname, 'clname':clname, 'cphno':cphno
        }

        return render(request,'zohomodules/Reports/customerbalances.html', context)
    else:
        return redirect('/')
        

def sharecustomerBalances(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
    
    
        
        cust = Customer.objects.filter(company=cmp) 

        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']        
            startDate = request.POST['start']
            endDate = request.POST['end']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            cust = Customer.objects.filter(company=cmp) 

            customers_data = []
            total_balance1 = 0 
            invoice_balance1=0
            recurring_invoice_balance1=0
            available_credits1=0
            total_invoice_balance1=0

            # Initialize total balance outside the loop
            for customer in cust:
                customerName = customer.first_name +" "+customer.last_name
                customerName = customer.first_name +" "+customer.last_name
                custemail = customer.customer_email
                custfname = customer.first_name
                custlname = customer.last_name
                custphno = customer.customer_mobile

                invoices = invoice.objects.filter(customer=customer, status='Saved')
                recurring_invoices = RecurringInvoice.objects.filter(customer=customer, status='Saved')
                credit_notes = Credit_Note.objects.filter(customer=customer, status='Saved')
                        
                invoice_balance = sum(float(inv.balance) for inv in invoices)
                recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                total_invoice_balance = invoice_balance + recurring_invoice_balance
                
                available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                
                total_balance = total_invoice_balance - available_credits
                
                # Update the total balance
                total_balance1 += total_balance
                totCust = len(cust)
                invoice_balance1 += invoice_balance
                recurring_invoice_balance1 += recurring_invoice_balance
                available_credits1 += available_credits
                total_invoice_balance1+=total_invoice_balance



                customers_data.append({
                    'name': customerName,  
                    'custemail':custemail,
                    'custfname': custfname,
                    'custlname': custlname,
                    'custphno': custphno,              
                    'invoice_balance': total_invoice_balance,
                    'available_credits': available_credits,
                    'total_balance': total_balance,
                })
            
            context = {
                    'cust':cust,
                    'customers': customers_data,
                    'total_balance1': total_balance1,
                    'allmodules':allmodules,
                    'details':dash_details,
                    'log_details':log_details , 
                    'cmp':cmp,
                    'totalCustomers':totCust,
                    'totalInvoice':invoice_balance1,
                    'totalRecInvoice':recurring_invoice_balance1, 
                    'totalCreditNote': available_credits1,
                    'invoice_balance':total_invoice_balance,
                    'available_credits': available_credits,
                    'total_invoice_balance':total_invoice_balance1,
                    'invoice_c_present': True,
                    'cnote_c_present': True,
                    'cemail':None, 
                    'cfname':'on', 
                    'clname':'on', 
                    'cphno':None
                }
        

            template_path = 'zohomodules/Reports/sharecustomerBalancesPDF.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()

            filename = f'customerBalances'
            subject = f"customerBalances"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached customerBalances Reports for\n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'customerBalances Reports has been shared via email successfully..!')
            return redirect(customerBalances)

    
def vendorBalances(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
    
    
        
        cust = Vendor.objects.filter(company=cmp)
        
        customers_data = []
        total_balance1 = 0 
        invoice_balance1=0
        recurring_invoice_balance1=0
        available_credits1=0
        recurring_invoice_balance=0
        available_credits=0
        total_invoice_balance1=0
        total_invoice_balance=0

        totCust = 0

        # Initialize total balance outside the loop
        for customer in cust:
            customerName = customer.first_name +" "+customer.last_name
            custemail = customer.vendor_email
            custfname = customer.first_name
            custlname = customer.last_name
            custphno = customer.mobile

            invoices = Bill.objects.filter(Vendor=customer, Status='Saved')
            recurring_invoices = Recurring_bills.objects.filter(vendor_details=customer, status='save')
            credit_notes = debitnote.objects.filter(vendor=customer, status='Saved')
            invoice_balance = sum(float(inv.Balance) for inv in invoices)
            recurring_invoice_balance = sum(float(rec_inv.bal) for rec_inv in recurring_invoices)
            total_invoice_balance = invoice_balance + recurring_invoice_balance           
            available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)            
            total_balance = total_invoice_balance - available_credits
            
            # Update the total balance
            total_balance1 += total_balance
            totCust = len(cust)
            invoice_balance1 += invoice_balance
            recurring_invoice_balance1 += recurring_invoice_balance
            available_credits1 += available_credits
            total_invoice_balance1+=total_invoice_balance
            

            customers_data.append({
                'name': customerName, 
                'custemail':custemail,
                'custfname': custfname,
                'custlname': custlname,
                'custphno': custphno,               
                'invoice_balance': total_invoice_balance,
                'available_credits': available_credits,
                'total_balance': total_balance,
            })
        
            context = {
            'cust':cust,
            'customers': customers_data,
            'total_balance1': total_balance1,
            'allmodules':allmodules,
            'details':dash_details,
            'log_details':log_details , 
            'cmp':cmp,
            'totalCustomers':totCust,
            'totalInvoice':invoice_balance1,
            'totalRecInvoice':recurring_invoice_balance1, 
            'totalCreditNote': available_credits1,
            'invoice_balance':total_invoice_balance,
            'available_credits': available_credits,
            'total_invoice_balance':total_invoice_balance1,
            'invoice_c_present': True,
            'cnote_c_present': True,
            'cemail':None, 
            'cfname':'on', 
            'clname':'on', 
            'cphno':None

            }
        
        return render(request, 'zohomodules/Reports/vendorBalances.html', context)
    else:
        return redirect('/')
    

def CustomizevendorBalances(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        cust = Vendor.objects.filter(company=cmp)

        customers_data = []
        total_balance1 = 0
        invoice_balance1 = 0
        recurring_invoice_balance1 = 0
        available_credits1 = 0
        invoice_balance=0
        total_invoice_balance1 = 0
        totCust = 0
        recurring_invoice_balance = 0
        total_invoice_balance = 0
        available_credits = 0
        total_balance=0

        # Get the start date from POST data with a default value of None
     
        if 'from_date' in request.POST:
            start_date_str = request.POST['from_date']
        else:
            start_date_str = None
        if 'to_date' in request.POST:
            end_date_str = request.POST['to_date']
        else:
            end_date_str = None
        
        

        if 'include_invoice' in request.POST:
            invoice_c = request.POST['include_invoice']
        else:
            invoice_c = ''

        if 'include_cnote' in request.POST:
            cnote_c = request.POST['include_cnote']
        else:
            cnote_c = ''

        if 'transactions' in request.POST:
            name = request.POST['transactions']
        else:
            name = None
       # Handling 'cust_email_show' checkbox
        if 'cust_email_show' in request.POST:
            cemail = request.POST['cust_email_show']
        else:
            cemail = None

        # Handling 'cust_fname_show' checkbox
        if 'cust_fname_show' in request.POST:
            cfname = request.POST['cust_fname_show']
        else:
            cfname = None

        # Handling 'cust_lname_show' checkbox
        if 'cust_lname_show' in request.POST:
            clname = request.POST['cust_lname_show']
        else:
            clname = None

        # Handling 'cust_phone_show' checkbox
        if 'cust_phone_show' in request.POST:
            cphno = request.POST['cust_phone_show']
        else:
            cphno = None

        # Convert start_date and end_date strings to datetime objects
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d') if start_date_str else None
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d') if end_date_str else None

        if name == 'all':
            for customer in cust:
                customerName = customer.first_name + " " + customer.last_name
                custemail = customer.vendor_email
                custfname = customer.first_name
                custlname = customer.last_name
                custphno = customer.mobile
                invoices = Bill.objects.filter(Vendor=customer, Status='Saved')
                recurring_invoices = Recurring_bills.objects.filter(vendor_details=customer, status='save')
                credit_notes = debitnote.objects.filter(vendor=customer, status='Saved')

                # Filter invoices based on start_date and end_date if provided
                if start_date and end_date:
                    invoices = invoices.filter(Bill_Date__range=[start_date, end_date])
                    recurring_invoices = recurring_invoices.filter(rec_bill_date__range=[start_date, end_date])
                    credit_notes = credit_notes.filter(debitnote_date__range=[start_date, end_date])


                # Calculate invoice balance only if 'invoice_c_present' is true
                if invoice_c:
                    invoice_balance = sum(float(inv.Balance) for inv in invoices)
                    
                    recurring_invoice_balance = sum(float(rec_inv.bal) for rec_inv in recurring_invoices)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    available_credits = 0 
                    total_balance = total_invoice_balance - available_credits

                if cnote_c:
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    invoice_balance = 0  # Set invoice balance to 0
                    recurring_invoice_balance = 0
                    total_invoice_balance = 0
                    total_balance = total_invoice_balance - available_credits

                if  invoice_c and cnote_c:
                    invoice_balance = sum(float(inv.Balance) for inv in invoices)
                    
                    recurring_invoice_balance = sum(float(rec_inv.bal) for rec_inv in recurring_invoices)
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    total_balance = total_invoice_balance - available_credits

                    # Update the total balance
                total_balance1 += total_balance
                totCust = len(cust)
                invoice_balance1 += invoice_balance
                recurring_invoice_balance1 += recurring_invoice_balance
                available_credits1 += available_credits
                total_invoice_balance1 += total_invoice_balance

                

                customers_data.append({
                        'name': customerName,
                        'custemail':custemail,
                        'custfname': custfname,
                        'custlname': custlname,
                        'custphno': custphno,
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })

        else:
            for customer in cust:
                customerName = customer.first_name + " " + customer.last_name
                custemail = customer.vendor_email
                custfname = customer.first_name
                custlname = customer.last_name
                custphno = customer.mobile

                # Check if the name matches the filter, if provided
                if name and name != customerName:
                    continue


                # Initialize total balance outside the loop
                for customer in cust:
                    customerName = customer.first_name + " " + customer.last_name
                    custemail = customer.vendor_email
                    custfname = customer.first_name
                    custlname = customer.last_name
                    custphno = customer.mobile

                    # Check if the name matches the filter, if provided
                    if name and name != customerName:
                        continue

                    invoices = Bill.objects.filter(Vendor=customer, Status='Saved')
                    recurring_invoices = Recurring_bills.objects.filter(vendor_details=customer, status='save')
                    credit_notes = debitnote.objects.filter(vendor=customer, status='Saved')

                    # Filter invoices based on start_date and end_date if provided
                    if start_date and end_date:
                        invoices = invoices.filter(Bill_Date__range=[start_date, end_date])
                        recurring_invoices = recurring_invoices.filter(rec_bill_date__range=[start_date, end_date])
                        credit_notes = credit_notes.filter(debitnote_date__range=[start_date, end_date])
                    # Calculate invoice balance only if 'bills' is true
                    if invoice_c:
                        invoice_balance = sum(float(inv.Balance) for inv in invoices)
                        recurring_invoice_balance = sum(float(rec_inv.bal) for rec_inv in recurring_invoices)
                        total_invoice_balance = invoice_balance + recurring_invoice_balance
                        available_credits = 0  # Set credit note balance to 0
                    if cnote_c:
                        available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                        invoice_balance = 0  # Set invoice balance to 0
                        recurring_invoice_balance = 0
                        total_invoice_balance = 0
                    if cnote_c and invoice_c:
                        invoice_balance = sum(float(inv.Balance) for inv in invoices)
                        recurring_invoice_balance = sum(float(rec_inv.bal) for rec_inv in recurring_invoices)
                        total_invoice_balance = invoice_balance + recurring_invoice_balance
                        available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                        
                    total_balance = total_invoice_balance - available_credits
                    # Update the total balance
                    total_balance1 += total_balance
                    totCust = len(cust)
                    invoice_balance1 += invoice_balance
                    recurring_invoice_balance1 += recurring_invoice_balance
                    available_credits1 += available_credits
                    total_invoice_balance1 += total_invoice_balance

                    customers_data.append({
                        'name': customerName,
                        'custemail':custemail,
                        'custfname': custfname,
                        'custlname': custlname,
                        'custphno': custphno,
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })

        context = {
            'cust':cust,
            'customers': customers_data,
            'total_balance1': total_balance1,
            'cmp': cmp,
            'allmodules': allmodules,
            'details':dash_details,
            'log_details':log_details , 

            'totalCustomers': totCust,
            'totalInvoice': invoice_balance1,
            'totalRecInvoice': recurring_invoice_balance1,
            'totalCreditNote': available_credits1,
            'invoice_balance': total_invoice_balance,
            'available_credits': available_credits,
            'total_invoice_balance': total_invoice_balance1,
            'start_date': start_date_str,  # Pass start_date to the template
            'end_date': end_date_str,  # Pass end_date to the template
            'name': name,  # Pass name to the template
            'invoice_c_present': bool(invoice_c),
            'cnote_c_present': bool(cnote_c),
             'cemail':cemail, 'cfname':cfname, 'clname':clname, 'cphno':cphno
        }

        return render(request,'zohomodules/Reports/vendorBalances.html', context)
    else:
        return redirect('/')
        

def sharevendorBalances(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
    
    
        
        cust = Vendor.objects.filter(company=cmp) 

        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']        
            startDate = request.POST['start']
            endDate = request.POST['end']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            cust = Vendor.objects.filter(company=cmp) 

            customers_data = []
            total_balance1 = 0 
            invoice_balance1=0
            recurring_invoice_balance1=0
            available_credits1=0
            total_invoice_balance1=0

            # Initialize total balance outside the loop
            for customer in cust:
                customerName = customer.first_name +" "+customer.last_name
                custemail = customer.vendor_email
                custfname = customer.first_name
                custlname = customer.last_name
                custphno = customer.mobile

                invoices = Bill.objects.filter(Vendor=customer, Status='Saved')
                recurring_invoices = Recurring_bills.objects.filter(vendor_details=customer, status='save')
                credit_notes = debitnote.objects.filter(vendor=customer, status='Saved')
                        
                invoice_balance = sum(float(inv.Balance) for inv in invoices)
                recurring_invoice_balance = sum(float(rec_inv.bal) for rec_inv in recurring_invoices)
                total_invoice_balance = invoice_balance + recurring_invoice_balance
                
                available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                
                total_balance = total_invoice_balance - available_credits
                
                # Update the total balance
                total_balance1 += total_balance
                totCust = len(cust)
                invoice_balance1 += invoice_balance
                recurring_invoice_balance1 += recurring_invoice_balance
                available_credits1 += available_credits
                total_invoice_balance1+=total_invoice_balance



                customers_data.append({
                    'name': customerName,  
                    'custemail':custemail,
                    'custfname': custfname,
                    'custlname': custlname,
                    'custphno': custphno,              
                    'invoice_balance': total_invoice_balance,
                    'available_credits': available_credits,
                    'total_balance': total_balance,
                })
            
            context = {
                    'cust':cust,
                    'customers': customers_data,
                    'total_balance1': total_balance1,
                    'allmodules':allmodules,
                    'details':dash_details,
                    'log_details':log_details , 
                    'cmp':cmp,
                    'totalCustomers':totCust,
                    'totalInvoice':invoice_balance1,
                    'totalRecInvoice':recurring_invoice_balance1, 
                    'totalCreditNote': available_credits1,
                    'invoice_balance':total_invoice_balance,
                    'available_credits': available_credits,
                    'total_invoice_balance':total_invoice_balance1,
                    'invoice_c_present': True,
                    'cnote_c_present': True,
                    'cemail':None, 
                    'cfname':'on', 
                    'clname':'on', 
                    'cphno':None
                }
        

            template_path = 'zohomodules/Reports/vendorbalancepdf.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()

            filename = f'vendorbalance'
            subject = f"vendorbalance"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached vendor balance Reports for\n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'vendor balance Reports has been shared via email successfully..!')
            return redirect(vendorBalances)
            
#End

def payment_received_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)
    payment = Payment_recieved.objects.filter(company = cmp)
    return render(request,'zohomodules/Reports/Payments_Received_Summary.html',{'allmodules':allmodules,'payment':payment,'details':dash_details,'log_details':log_details})
    
def share_payment_received_summary_ToEmail(request):
   if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                totalCount = request.POST['count']
                totalCustomer = request.POST['totalCustomer']
                totalAmount = request.POST['totalAmount']
                start_date = request.POST.get('start_date') or None
                end_date = request.POST.get('end_date') or None
                statuss = request.POST.get('statusVal')

                if start_date != None and end_date != None:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = debitnote.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]) & Q(status=statuss))
                    else:
                        itms = debitnote.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]))
                else:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = debitnote.objects.filter(company=com,status=statuss)
                    else:
                        itms = debitnote.objects.filter(company=com)
                    

                context = { 'credit':itms,'cmp':com,'companyName':com.company_name,'totalAmount':totalAmount,
                           'totalCount':totalCount,'totalCustomer':totalCustomer,'start_date':start_date,'end_date':end_date}
                
                template_path = 'zohomodules/Reports/payment_received_summary_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Credit_Note_Details'
                subject = f"Credit_Note_Details"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Credit Note for   \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'payment_received_summary has been shared via email successfully..!')
                return redirect(payment_received_summary)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(payment_received_summary)    


def payment_made_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)
    allmodules= ZohoModules.objects.get(company = cmp)
    payment = payment_made.objects.filter(company = cmp)
    return render(request,'zohomodules/Reports/payments_made_summary.html',{'allmodules':allmodules,'payment':payment,'details':dash_details,'log_details':log_details})


def share_paymentmade_summaryToEmail(request):
   if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                totalCount = request.POST['count']
                totalCustomer = request.POST['totalCustomer']
                totalAmount = request.POST['totalAmount']
                start_date = request.POST.get('start_date') or None
                end_date = request.POST.get('end_date') or None
                statuss = request.POST.get('statusVal')

                if start_date != None and end_date != None:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = debitnote.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]) & Q(status=statuss))
                    else:
                        itms = debitnote.objects.filter(Q(company=com) & Q(credit_note_date__range=[start_date, end_date]))
                else:
                    if statuss == 'Saved' or statuss == 'Draft':
                        itms = debitnote.objects.filter(company=com,status=statuss)
                    else:
                        itms = debitnote.objects.filter(company=com)
                    

                context = { 'credit':itms,'cmp':com,'companyName':com.company_name,'totalAmount':totalAmount,
                           'totalCount':totalCount,'totalCustomer':totalCustomer,'start_date':start_date,'end_date':end_date}
                
                template_path = 'zohomodules/Reports/payment_made_summary_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Credit_Note_Details'
                subject = f"Credit_Note_Details"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Credit Note for   \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'payment_made_summary has been shared via email successfully..!')
                return redirect(payment_made_summary)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(payment_made_summary)
            
#---------------- Zoho Final Loan Report - Ginto Shaji - Start-------------------->
def LoanReport(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    reportData = []
    totAmount = 0
    totBalance = 0
    
    loan_acc = loan_account.objects.filter(company = comp_details)
    if loan_acc:
        for loan in loan_acc:
                partyName = loan.bank_holder.customer_name
                date = loan.loan_date
                type = 'Loan Account'
                total = loan.loan_amount
                balance=loan.balance
                totAmount += float(loan.loan_amount)
                totBalance += float(loan.balance)
                details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                reportData.append(details)
  
    loan_acc = loan_account.objects.filter(company = comp_details)            
    repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details, type='EMI paid')           
    if repayment_details:            
        for r in repayment_details:
                partyName =r.loan.bank_holder.customer_name
                date = r.payment_date
                type = r.type
                total = r.total_amount
                balance=r.balance
                totAmount += float(r.total_amount)
                totBalance += float(r.balance)
                details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                reportData.append(details)
                
                
    loan_acc = loan_account.objects.filter(company = comp_details)            
    repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,type='Additional Loan')           
    if repayment_details:            
        for r in repayment_details:
                partyName =r.loan.bank_holder.customer_name
                date = r.payment_date
                type = r.type
                total = r.total_amount
                balance=r.balance
                totAmount += float(r.total_amount)
                totBalance += float(r.balance)
                details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                reportData.append(details)
            
    return render(request, 'zohomodules/Reports/Loanreport.html', {               
                'allmodules': allmodules,
                'log_details': log_details,              
                'companyName':comp_details.company_name,
                'reportData':reportData,
                'totAmount':totAmount,
                'totBalance':totBalance,
                'startDate':None, 
                'endDate':None,          
            })
    
    
def LoanReportCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    if request.method == 'GET':
        startDate = request.GET['from_date']
        endDate = request.GET['to_date']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        reportData = []
        totAmount = 0
        totBalance = 0
        
        loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])
        if loan_acc:
            for loan in loan_acc:
                partyName = loan.bank_holder.customer_name
                date = loan.loan_date
                type = 'Loan Account'
                total = loan.loan_amount
                balance=loan.balance
                totAmount += float(loan.loan_amount)
                totBalance += float(loan.balance)
                details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                reportData.append(details)
  
        loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
        repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details, payment_date__range = [startDate, endDate], type='EMI paid')           
        if repayment_details:             
            for r in repayment_details:
                partyName =r.loan.bank_holder.customer_name
                date = r.payment_date
                type = r.type
                total = r.total_amount
                balance=r.balance
                totAmount += float(r.total_amount)
                totBalance += float(r.balance)
                details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                reportData.append(details)
                             
        loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
        repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date__range = [startDate, endDate] , type='Additional Loan')           
        if repayment_details:            
            for r in repayment_details:
                partyName =r.loan.bank_holder.customer_name
                date = r.payment_date
                type = r.type
                total = r.total_amount
                balance=r.balance
                totAmount += float(r.total_amount)
                totBalance += float(r.balance)
                details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                reportData.append(details)
    
    return render(request, 'zohomodules/Reports/Loanreport.html', {               
                'allmodules': allmodules,
                'log_details': log_details,              
                'companyName':comp_details.company_name,
                'reportData':reportData,
                'totAmount':totAmount,
                'totBalance':totBalance,
                'startDate':startDate, 
                'endDate':endDate,              
            })    
 
        
from datetime import datetime

def shareLoanReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        # Determine user type and fetch company details
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details=log_details).company

        if request.method == 'POST':
            # Extract email addresses and message from POST data
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            # Extract date range from POST data
            startDate = request.POST['start']
            endDate = request.POST['end']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totAmount = 0
            totBalance = 0
            
        if startDate == None or endDate == None:
            
            loan_acc = loan_account.objects.filter(company = comp_details)
            if loan_acc:
                for loan in loan_acc:
                    partyName = loan.bank_holder.customer_name
                    date = loan.loan_date
                    type = 'Loan Account'
                    total = loan.loan_amount
                    balance=loan.balance
                    totAmount += float(loan.loan_amount)
                    totBalance += float(loan.balance)
                    details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                    reportData.append(details)
  
            loan_acc = loan_account.objects.filter(company = comp_details)            
            repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details, type='EMI paid')           
            if repayment_details:            
                for r in repayment_details:
                    partyName =r.loan.bank_holder.customer_name
                    date = r.payment_date
                    type = r.type
                    total = r.total_amount
                    balance=r.balance
                    totAmount += float(r.total_amount)
                    totBalance += float(r.balance)
                    details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                    reportData.append(details)
                             
            loan_acc = loan_account.objects.filter(company = comp_details)            
            repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,type='Additional Loan')           
            if repayment_details:            
                for r in repayment_details:
                    partyName =r.loan.bank_holder.customer_name
                    date = r.payment_date
                    type = r.type
                    total = r.total_amount
                    balance=r.balance
                    totAmount += float(r.total_amount)
                    totBalance += float(r.balance)
                    details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}            
                    reportData.append(details)
        else:
                
            loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])
            if loan_acc:
                for loan in loan_acc:
                    partyName = loan.bank_holder.customer_name
                    date = loan.loan_date
                    type = 'Loan Account'
                    total = loan.loan_amount
                    balance=loan.balance
                    totAmount += float(loan.loan_amount)
                    totBalance += float(loan.balance)
                    details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                    reportData.append(details)
  
            loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
            repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details, payment_date__range = [startDate, endDate], type='EMI paid')           
            if repayment_details:             
                for r in repayment_details:
                    partyName =r.loan.bank_holder.customer_name
                    date = r.payment_date
                    type = r.type
                    total = r.total_amount
                    balance=r.balance
                    totAmount += float(r.total_amount)
                    totBalance += float(r.balance)
                    details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                    reportData.append(details)
                             
            loan_acc = loan_account.objects.filter(company = comp_details,loan_date__range = [startDate, endDate])            
            repayment_details = LoanRepayemnt.objects.filter(loan__in=loan_acc, company = comp_details,payment_date__range = [startDate, endDate] , type='Additional Loan')           
            if repayment_details:            
                for r in repayment_details:
                    partyName =r.loan.bank_holder.customer_name
                    date = r.payment_date
                    type = r.type
                    total = r.total_amount
                    balance=r.balance
                    totAmount += float(r.total_amount)
                    totBalance += float(r.balance)
                    details = {'date': date,'partyName': partyName,'type':type,'total':total,'balance':balance}
                    reportData.append(details)        
        
        
        context = {
                'log_details': log_details,
                'companyName': comp_details.company_name,
                'reportData': reportData,
                'totAmount':totAmount,
                'totBalance':totBalance,
                'startDate': startDate,
                'endDate': endDate,
        }

        template_path = 'zohomodules/Reports/LoanReport_Pdf.html'
        template = get_template(template_path)

        html = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)                            
        pdf = result.getvalue()
        filename = 'Loan_Report'
        subject = "Loan_Report"
        email = EmailMsg(
            subject,
            f"Hi,\nPlease find the attached Report for - Loan Report. \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}",
            from_email=settings.EMAIL_HOST_USER,
            to=emails_list
        )
            
        email.from_email = settings.EMAIL_HOST_USER 
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        # messages.success(request, 'Report has been shared via email successfully!')
        return redirect(LoanReport)

#---------------- Zoho Final Loan Report - Ginto Shaji - End-------------------->

###payment_made##########
def payment_mades(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        payments = payment_made.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        context = {
             'allmodules':allmodules, 'details':dash_details, 'payments':payments
        }
        return render(request,'zohomodules/payment_made/payment_listout.html', context)
    else:
        return redirect('/')

def payment_made_add(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details

        allmodules= ZohoModules.objects.get(company=company,status='New')
        banks = Banking.objects.filter(company=company)
        vendors = Vendor.objects.filter(company=company)
        
        payments=Company_Payment_Term.objects.filter(company_id = company)
        latest_paymade = payment_made.objects.filter(company =company).order_by('-id').first()

        new_number = int(latest_paymade.reference_no) + 1 if latest_paymade else 1

        if payment_made_Reference.objects.filter(company = company).exists():
            deleted = payment_made_Reference.objects.get(company =company)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtpmade = ""
        lastpmade = payment_made.objects.filter(company=company).last()

        if lastpmade:
            p_no = str(lastpmade.payment_no)
            numbers = []
            stri = []
            for word in p_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            p_num = int(num) + 1
            if num[0] == 0:
                nxtpmade = st + num.zfill(len(num)) 
            else:
                nxtpmade = st + str(p_num).zfill(len(num))
        else:
            nxtpmade = 'PM001'
     

        context = {
                'refno':new_number,
                'payno':nxtpmade,
                'details': dash_details,
                'allmodules': allmodules,
                'banks':banks,
                'vendors':vendors,
                'payments':payments,
                'company':company,
        }
        return render(request,'zohomodules/payment_made/payment_add.html',context)
    else:
        return redirect('/')

def vendor_paymentmade(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        

       
        if request.method=="POST":
            vendor_data=Vendor()
            vendor_data.login_details=log_details
            vendor_data.company=dash_details
            vendor_data.title = request.POST.get('salutation')
            vendor_data.first_name=request.POST['first_name']
            vendor_data.last_name=request.POST['last_name']
            vendor_data.company_name=request.POST['company_name']
            vendor_data.vendor_display_name=request.POST['v_display_name']
            vendor_data.vendor_email=request.POST['vendor_email']
            vendor_data.phone=request.POST['w_phone']
            vendor_data.mobile=request.POST['m_phone']
            vendor_data.skype_name_number=request.POST['skype_number']
            vendor_data.designation=request.POST['designation']
            vendor_data.department=request.POST['department']
            vendor_data.website=request.POST['website']
            vendor_data.gst_treatment=request.POST['gst']
            vendor_data.vendor_status="Active"
            vendor_data.remarks=request.POST['remarks']
            vendor_data.current_balance=request.POST['opening_bal']

            x=request.POST['gst']
            if x=="Unregistered Business-not Registered under GST":
                vendor_data.pan_number=request.POST['pan_number']
                vendor_data.gst_number="null"
            else:
                vendor_data.gst_number=request.POST['gst_number']
                vendor_data.pan_number=request.POST['pan_number']

            vendor_data.source_of_supply=request.POST['source_supply']
            vendor_data.currency=request.POST['currency']
            print(vendor_data.currency)
            op_type=request.POST.get('op_type')
            if op_type is not None:
                vendor_data.opening_balance_type=op_type
            else:
                vendor_data.opening_balance_type='Opening Balance not selected'
    
            vendor_data.opening_balance=request.POST['opening_bal']
            vendor_data.payment_term=Company_Payment_Term.objects.get(id=request.POST['payment_terms'])

           
            vendor_data.billing_attention=request.POST['battention']
            vendor_data.billing_country=request.POST['bcountry']
            vendor_data.billing_address=request.POST['baddress']
            vendor_data.billing_city=request.POST['bcity']
            vendor_data.billing_state=request.POST['bstate']
            vendor_data.billing_pin_code=request.POST['bzip']
            vendor_data.billing_phone=request.POST['bphone']
            vendor_data.billing_fax=request.POST['bfax']
            vendor_data.shipping_attention=request.POST['sattention']
            vendor_data.shipping_country=request.POST['s_country']
            vendor_data.shipping_address=request.POST['saddress']
            vendor_data.shipping_city=request.POST['scity']
            vendor_data.shipping_state=request.POST['sstate']
            vendor_data.shipping_pin_code=request.POST['szip']
            vendor_data.shipping_phone=request.POST['sphone']
            vendor_data.shipping_fax=request.POST['sfax']
            vendor_data.save()
            print(vendor_data)
           # ................ Adding to History table...........................
            
            vendor_history_obj=VendorHistory()
            vendor_history_obj.company=dash_details
            vendor_history_obj.login_details=log_details
            vendor_history_obj.vendor=vendor_data
            vendor_history_obj.date=date.today()
            vendor_history_obj.action='Completed'
            vendor_history_obj.save()

    # .......................................................adding to remaks table.....................
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
            rdata=Vendor_remarks_table()
            rdata.remarks=request.POST['remarks']
            rdata.company=dash_details
            rdata.vendor=vdata
            rdata.save()

            print(rdata)
     #...........................adding multiple rows of table to model  ........................................................  
        
            title =request.POST.getlist('tsalutation[]')
            first_name =request.POST.getlist('tfirst_name[]')
            last_name =request.POST.getlist('tlast_name[]')
            email =request.POST.getlist('tEmail[]')
            work_phone =request.POST.getlist('tWorkPhone[]')
            mobile =request.POST.getlist('tMobilePhone[]')
            skype_name_number =request.POST.getlist('tSkype[]')
            designation =request.POST.getlist('tDesignation[]')
            department =request.POST.getlist('tDepartment[]') 
            vdata=Vendor.objects.get(id=vendor_data.id)
            vendor=vdata
           
           
            if len(title)==len(first_name)==len(last_name)==len(email)==len(work_phone)==len(mobile)==len(skype_name_number)==len(designation)==len(department):
                mapped2=zip(title,first_name,last_name,email,work_phone,mobile,skype_name_number,designation,department)
                mapped2=list(mapped2)
                print(mapped2)
                for ele in mapped2:
                    created = VendorContactPerson.objects.get_or_create(title=ele[0],first_name=ele[1],last_name=ele[2],email=ele[3],
                        work_phone=ele[4],mobile=ele[5],skype_name_number=ele[6],designation=ele[7],department=ele[8],company=dash_details,vendor=vendor)
                
        
        
            return JsonResponse({'status':True})
        else:
            return JsonResponse({'status':False})
        
def reloadvendor(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        options = {}
        option_objects = Vendor.objects.filter(company = com, vendor_status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
    
def payment_vendor_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        vendId = request.POST['id']
        vend = Vendor.objects.get(id = vendId,company=cmp)
        bills = Bill.objects.filter(Vendor=vend,Company=cmp)
        recurring_bills = Recurring_bills.objects.filter(vendor_details=vend,company=cmp)
        debit_notes = debitnote.objects.filter(vendor=vend,company=cmp)
       
        data = []
        data.append({
                'type': 'Opening Balance',
                'date': timezone.now().date(),
                'bill_number':'Nil',
                'balance_amount': vend.opening_balance ,
                
            })
        for bill in bills:
            data.append({
                'type': 'Bill',
                'date': bill.Bill_Date,
                'bill_number': bill.Bill_Number,
                'balance_amount': bill.Balance,
                
            })

        for recurring_bill in recurring_bills:
            print("rec_bill_date:", recurring_bill.rec_bill_date)
            print("recc_bill_no:", recurring_bill.recc_bill_no)
            print("bal:", recurring_bill.bal)
            formatted_date = recurring_bill.rec_bill_date.strftime("%Y-%m-%d")
            data.append({
                'type': 'Recurring Bill',
                'date':formatted_date ,
                'bill_number': recurring_bill.recc_bill_no,
                'balance_amount': recurring_bill.bal,
                
            })

        for debit_note in debit_notes:
            data.append({
                'type': 'Debit Note',
                'date': debit_note.debitnote_date,
                'bill_number': debit_note.debitnote_no,
                'balance_amount': debit_note.balance,
                
            })
        
        

        if vend:
            context = {
             'data':data,'status':True, 'id':vend.id, 'email':vend.vendor_email, 'gstType':vend.gst_treatment,'shipState':vend.source_of_supply,'gstin':False if vend.gst_number == "" or vend.gst_number == None or vend.gst_number == 'null' else True, 'gstNo':vend.gst_number,
                'street':vend.billing_address, 'city':vend.billing_city, 'state':vend.billing_state, 'country':vend.billing_country, 'pincode':vend.billing_pin_code
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')
       
def vendor_Pterm(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            staff_details=StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=staff_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)        
        if request.method == 'POST':
            terms = request.POST.get('name')
            day = request.POST.get('days')
            normalized_data = terms.replace(" ", "")
            pay_tm = add_space_before_first_digit(normalized_data)
            ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=dash_details)
            ptr.save()
            payterms_obj = Company_Payment_Term.objects.filter(company=dash_details).values('id', 'term_name')


            payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name']} for pay_terms in payterms_obj]
            response_data = {
            "message": "success",
            'payment_list':payment_list,
            }
            return JsonResponse(response_data)

        else:
            return JsonResponse({'error': 'Invalid request'}, status=400)     
            
def payment_bankaccount(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        bankId = request.GET['id']
        bnk = Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.bnk_acno})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def add_paymentmade(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        if request.method == 'POST':
            payNum = request.POST['payment_no']

            if payment_made.objects.filter(company = com, payment_no__iexact = payNum).exists():
                res = f'<script>alert("Payment Number `{payNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vend_id = request.POST['vendId']
            vendor = Vendor.objects.get(id=vend_id)

            pay = payment_made(
                company = com,
                login_details = com.login_details,
                vendor =vendor,
                vendor_email = request.POST['vendor_email'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['vendor_gst_type'],
                gstin = request.POST['vendor_gstin'],
                source_of_supply  = request.POST['source_of_supply'],
                reference_no = request.POST['reference_number'],
                payment_no = payNum,
                payment_date= request.POST['date'],
    
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],

                balance = 0.0 if request.POST['totalbal'] == "" else float(request.POST['totalbal']),
                total = 0.0 if request.POST['totalamt'] == "" else float(request.POST['totalamt']),
                description = request.POST['note'],
                terms_and_conditions = request.POST['terms']
            )

            pay.save()

            if len(request.FILES) != 0:
                pay.document=request.FILES.get('file')
            pay.save()

            if 'Draft' in request.POST:
                pay.status = "Draft"
            elif "Saved" in request.POST:
                pay.status = "Saved" 
            pay.save()

            types = request.POST.getlist('ptype[]')
            dates = request.POST.getlist('pdate[]')
            bill_numbers = request.POST.getlist('billnum[]')
            balance_amounts = request.POST.getlist('bal[]')
            payment_amounts = request.POST.getlist('payment[]')
            print("Creating payment_made_bills instance...")
            print("Type:", types)
            print("Date:", dates)
            print("Bill Number:",bill_numbers)
            print("Balance Amount:", balance_amounts)
            print("Payment Amount:", payment_amounts )
            for t, d, bn, ba, pa in zip(types, dates, bill_numbers, balance_amounts, payment_amounts):
                
                payment_made_bills.objects.create(
                    payment_made=pay,
                    company=com,
                    login_details=com.login_details,
                    vendor=vendor,
                    bill_type=t,  
                    bill_number=bn,
                    date=d,
                    amount_due=ba,
                    payment=pa,
                    )

            payment_made_History.objects.create(
                company = com,
                login_details = log_details,
                payment_made = pay,
                action = 'Created'
            )

            return redirect(payment_mades)
        else:
            return redirect(payment_made_add)
    else:
       return redirect('/')

def checkPayNumber(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        PayNo = request.GET['payment_no']

        
        nxtPay = ""
        lastPay = payment_made.objects.filter(company = com).last()
        if lastPay:
            pay_no = str(lastPay.payment_no)
            numbers = []
            stri = []
            for word in pay_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            pay_num = int(num) + 1
            if num[0] == 0:
                nxtPay = st + num.zfill(len(num)) 
            else:
                nxtPay = st + str(pay_num).zfill(len(num))
       

        PatternStr = []
        for word in PayNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j
        
        if payment_made.objects.filter(company = com, payment_no__iexact = PayNo).exists():
            return JsonResponse({'status':False, 'message':'Payment Made No. already Exists.!'})
        elif nxtPay != "" and PayNo != nxtPay:
            return JsonResponse({'status':False, 'message':'Payment Made No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def payment_overview(request, id): 
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        payment = payment_made.objects.get(id = id)
        paybills= payment_made_bills.objects.filter(payment_made = payment)
        paymade = payment_made.objects.filter(company = cmp)
        cmts =payment_made_Comments.objects.filter(payment_made = payment)
        hist = payment_made_History.objects.filter(payment_made = payment)
        last_history = payment_made_History.objects.filter(payment_made = payment).last()
        created = payment_made_History.objects.get(payment_made = payment, action = 'Created')

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'payment':payment, 'paybills': paybills, 'allpays':paymade, 'comments':cmts, 'history':hist, 'last_history':last_history, 'created':created,
        }
        return render(request, 'zohomodules/payment_made/payment_overview.html', context)
    else:
        return redirect('/')

def addPaymentMadeComment(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        pay_made = payment_made.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            payment_made_Comments.objects.create(company = com, payment_made= pay_made, comments = cmt)
            return redirect(payment_overview, id)
        return redirect(payment_overview, id)
    return redirect('/')

def deletePaymentmadeComment(request,id):
    if 'login_id' in request.session:
        cmt = payment_made_Comments.objects.get(id = id)
        payId = cmt.payment_made.id
        cmt.delete()
        return redirect(payment_overview, payId)
    else:
        return redirect('/')

def pmade_attachfile(request, id):
    if 'login_id' in request.session:
        pay = payment_made.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            pay.document = request.FILES.get('file')
            pay.save()

        return redirect(payment_overview, id)
    else:
        return redirect('/')

def delete_paymentmade(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        payMade = payment_made.objects.get( id = id)
        
        payment_made_bills.objects.filter(payment_made = payMade).delete()

        if payment_made_Reference.objects.filter(company = com).exists():
            deleted = payment_made_Reference.objects.get(company = com)
            if int(payMade.reference_no) > int(deleted.reference_number):
                deleted.reference_number = payMade.reference_no
                deleted.save()
        else:
            payment_made_Reference.objects.create(company = com, login_details = com.login_details, reference_number = payMade.reference_no)
        
        payMade.delete()
        return redirect(payment_mades)

def sharepaymentEmail(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        pay = payment_made.objects.get(id = id)
        bills = payment_made_bills.objects.filter(payment_made = pay)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'payMade':pay, 'payMadeBills':bills,'cmp':com}
                template_path = 'zohomodules/payment_made/payment_made_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Payment_Made_{pay.payment_no}'
                subject = f"Payment_Made_{pay.payment_no}"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Payment Made for - Payment_Made-{pay.payment_no}. \n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Payment_Made details has been shared via email successfully..!')
                return redirect(payment_overview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(payment_overview,id)

def convert_paymade(request,id):
    if 'login_id' in request.session:
        pay = payment_made.objects.get(id = id)
        pay.status = 'Saved'
        pay.save()
        return redirect(payment_overview, id)
    else:
        return redirect('/')

def payment_Made_Pdf(request,id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
        
        pay = payment_made.objects.get(id = id)
        bills = payment_made_bills.objects.filter(payment_made = pay)
    
        context = {'payMade':pay, 'payMadeBills':bills,'cmp':com}
        
        template_path = 'zohomodules/payment_made/payment_made_pdf.html'
        fname = 'Payment_Made_'+pay.payment_no
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def edit_payment_made(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
       
        vend = Vendor.objects.filter(company = cmp, vendor_status = 'Active')
        bnk = Banking.objects.filter(company = cmp)
        payments=Company_Payment_Term.objects.filter(company_id = cmp)
        payment = payment_made.objects.get(id = id)
        payBills = payment_made_bills.objects.filter(payment_made =payment )

        context = {
            'cmp':cmp,'allmodules':allmodules, 'details':dash_details, 'vendors': vend,'pTerms':payments, 'banks':bnk,
            'payment':payment, 'payBills': payBills,
        }
        return render(request, 'zohomodules/payment_made/payment_made_edit.html', context)
    else:
        return redirect('/')

def update_paymentmade(request, id):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company

        pay_made = payment_made.objects.get(id = id)
        if request.method == 'POST':
            payNum = request.POST['payment_no']
            pay_made.vendor = Vendor.objects.get(id = request.POST['vendId'])
            pay_made.vendor_email = request.POST['vendor_email']
            pay_made.billing_address = request.POST['bill_address']
            pay_made.gst_type = request.POST['vendor_gst_type']
            pay_made.gstin = request.POST['vendor_gstin']
            pay_made.source_of_supply_of_supply = request.POST['source_of_supply']
            pay_made.reference_no = request.POST['reference_number']
            pay_made.payment_no = payNum
            pay_made.payment_date = request.POST['date']
            pay_made.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            pay_made.cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            pay_made.upi_number = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            pay_made.account_number = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            pay_made.balance = 0.0 if request.POST['totalbal'] == "" else float(request.POST['totalbal'])
            pay_made.total = 0.0 if request.POST['totalamt'] == "" else float(request.POST['totalamt'])
            pay_made.description = request.POST['note']
            pay_made.terms_and_conditions = request.POST['terms']

            if len(request.FILES) != 0:
                pay_made.document=request.FILES.get('file')
            pay_made.save()

            types = request.POST.getlist('ptype[]')
            dates = request.POST.getlist('pdate[]')
            bill_numbers = request.POST.getlist('billnum[]')
            balance_amounts = request.POST.getlist('bal[]')
            payment_amounts = request.POST.getlist('payment[]')
            payment_made_bills.objects.filter(payment_made=pay_made).delete()
            for t, d, bn, ba, pa in zip(types, dates, bill_numbers, balance_amounts, payment_amounts):
                payment_made_bills.objects.create(
                    payment_made=pay_made,
                    company=com,
                    login_details=com.login_details,
                    vendor=pay_made.vendor, 
                    bill_type=t,  
                    bill_number=bn,
                    date=d,
                    amount_due=ba,
                    payment=pa
                )


            payment_made_History.objects.create(
                company = com,
                login_details = log_details,
                payment_made = pay_made,
                action = 'Edited'
            )

            return redirect(payment_overview, id)
        else:
            return redirect(payment_overview, id)
    else:
       return redirect('/')



def download_paymentmade_SampleImportFile(request):
    payMad_table_data = [['SLNO', 'VENDOR', 'DATE', 'SOURCE OF SUPPLY', 'PM NO', 'DESCRIPTION', 'TOTAL AMOUNT', 'BALANCE'],
                         ['1', 'Kevin Debryne', '2024-03-20', '[KL]-Kerala', 'PM100', ' ', '1050', '1000']]
    bill_table_data = [['PM NO', 'TYPE', 'DATE', 'BILL NUMBER', 'BALANCE AMOUNT', 'PAYMENT'],
                       ['1', 'Test Item 1', '2024-03-20', 'RB01', '1000', '100']]

    wb = Workbook()

    sheet1 = wb.active
    sheet1.title = 'payment_made'
    sheet2 = wb.create_sheet(title='Payment_made_details')

    # Populate the sheets with data
    for row in payMad_table_data:
        sheet1.append(row)

    for row in bill_table_data:
        sheet2.append(row)

    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=payment_made_sample_file.xlsx'

    # Save the workbook to the response
    wb.save(response)

    return response

def import_payment_madeFromExcel(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company 

        current_datetime = timezone.now()
        dateToday = current_datetime.date()

        if request.method == "POST" and 'excel_file' in request.FILES:
            excel_file = request.FILES['excel_file']
            wb = load_workbook(excel_file)

            # Check for 'payment_made' sheet
            if 'payment_made' not in wb.sheetnames:
                messages.error(request, '`payment_made` sheet not found.! Please check.')
                return redirect(payment_mades)

            # Check for 'Payment_made_details' sheet
            if 'Payment_made_details' not in wb.sheetnames:
                messages.error(request, '`Payment_made_details` sheet not found.! Please check.')
                return redirect(payment_mades)

            # Validate 'payment_made' sheet columns
            ws = wb['payment_made']
            pay_made_columns = ['SLNO', 'VENDOR', 'DATE', 'SOURCE OF SUPPLY', 'PM NO', 'DESCRIPTION', 'TOTAL AMOUNT', 'BALANCE']
            pay_made_sheet = [cell.value for cell in ws[1]]
            if pay_made_sheet != pay_made_columns:
                messages.error(request, '`payment_made` sheet column names or order is not in the required format.! Please check.')
                return redirect(payment_mades)

            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, vendor, date, source_of_supply, pmno, description, totalamount, balance = row
                if None in [slno, vendor, date, source_of_supply, pmno, totalamount, balance]:
                    messages.error(request, '`payment_made` sheet entries missing required fields.! Please check.')
                    return redirect(payment_mades)

            # Validate 'Payment_made_details' sheet columns
            ws = wb['Payment_made_details']
            bills_columns = ['PM NO', 'TYPE', 'DATE', 'BILL NUMBER', 'BALANCE AMOUNT', 'PAYMENT']
            bills_sheet = [cell.value for cell in ws[1]]
            if bills_sheet != bills_columns:
                messages.error(request, '`Payment_made_details` sheet column names or order is not in the required format.! Please check.')
                return redirect(payment_mades)

            for row in ws.iter_rows(min_row=2, values_only=True):
                pm_no, type, date, billnumber, balanceamount, payment = row
                if None in [pm_no, type, date, billnumber, balanceamount, payment]:
                    messages.error(request, '`Payment_made_details` sheet entries missing required fields.! Please check.')
                    return redirect(payment_mades)

            # Import data from 'payment_made' sheet
            incorrect_data = []
            existing_pattern = []
            ws = wb['payment_made']
            for row in ws.iter_rows(min_row=2, values_only=True):
                slno, vendor, date, source_of_supply, pmno, description, totalamount, balance = row
                pm_No = slno
                if slno is None:
                    continue
                latest_pay = payment_made.objects.filter(company = com).order_by('-id').first()
                
                new_number = int(latest_pay.reference_no) + 1 if latest_pay else 1

                if payment_made_Reference.objects.filter(company = com).exists():
                    deleted = payment_made_Reference.objects.get(company = com)
                    
                    if deleted:
                        while int(deleted.reference_number) >= new_number:
                            new_number+=1
                

                vend = vendor.split(' ')
                if len(vend) > 2:
                    vend[1] = vend[1] + ' ' + ' '.join(vend[2:])
                    vend = vend[:2]
                    fName = vend[0]
                    lName = vend[1]
                else:
                    fName = vend[0]
                    lName = vend[1]

              
                email = ""
                gstType = ""
                gstIn = ""
                adrs = ""

                if lName == "":  
                    if not Vendor.objects.filter(company=com, first_name=fName, last_name=lName).exists():
                        print('No Vendor1')
                        incorrect_data.append(slno)
                        continue
                    try:
                        v = Vendor.objects.filter(company=com, first_name=fName, last_name=lName).first()
                        email = v.vendor_email
                        gstType = v.gst_treatment
                        gstIn = v.gst_number
                        adrs = f"{v.billing_address}, {v.billing_city}\n{v.billing_state}\n{v.billing_country}\n{v.billing_pin_code}" 
                    except Exception as e:
                        print(f"Error: {e}")

                elif fName != "" and lName != "":  
                    if not Vendor.objects.filter(company=com, first_name=fName, last_name=lName).exists():
                        print('No Vendor2')
                        incorrect_data.append(slno)
                        continue
                    try:
                        v = Vendor.objects.filter(company=com, first_name=fName, last_name=lName).first()
                        email = v.vendor_email
                        gstType = v.gst_treatment
                        gstIn = v.gst_number
                        adrs = f"{v.billing_address}, {v.billing_city}\n{v.billing_state}\n{v.billing_country}\n{v.billing_pin_code}"
                    except Exception as e:
                        print(f"Error: {e}")


                if not date:
                    date = dateToday
                else:
                    date = datetime.strptime(date, '%Y-%m-%d').date()

                while payment_made.objects.filter(company = com, payment_no__iexact = pmno).exists():
                    pmno = checkPayNumber(pmno)

                payMade = payment_made(
                    company=com,
                    login_details=com.login_details,
                    vendor=None if v is None else v,
                    vendor_email=email,
                    billing_address=adrs,
                    gst_type=gstType,
                    gstin=gstIn,
                    payment_date=date,
                    source_of_supply=source_of_supply,
                    reference_no=new_number,
                    payment_no= pm_No,
                    payment_method=None,
                    cheque_number=None,
                    upi_number=None,
                    account_number=None,
                    total=float(totalamount),
                    balance=float(balance),
                    description=description,
                    status="Draft"
                )
                payMade.save()

                payment_made_History.objects.create(
                    company=com,
                    login_details=log_details,
                    payment_made=payMade,
                    action='Created'
                )

                # Import data from 'Payment_made_details' sheet
                ws_bills = wb['Payment_made_details']
                for row in ws_bills.iter_rows(min_row=2, values_only=True):
                    pm_no, type, date, billnumber, balanceamount, payment = row
                    if int(pm_no) == int(slno):
                        payment_made_bills.objects.create(
                            company=com,
                            login_details=com.login_details,
                            payment_made=payMade,
                            bill_type=type,
                            date=date,
                            bill_number=billnumber,
                            amount_due=float(balanceamount),
                            payment=float(payment)
                        )

            messages.success(request, 'Data imported successfully.!')
            return redirect(payment_mades)

        return redirect(payment_mades)
    return redirect('/')
####################end####################
#-------------------Bank Statement Report---Meenu Shaju start---------------------------
def bank_statement_report(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)

        
        allmodules= ZohoModules.objects.get(company = cmp)
        bank = Banking.objects.filter(company=cmp)
        
        bank_statement = BankTransaction.objects.filter(company=cmp)
        total_amount = bank_statement.aggregate(total=Sum('trans_adj_amount'))['total']

        
        total_amount = total_amount or 0

        return render(request,'zohomodules/Reports/bank_statement_report.html',{'allmodules':allmodules,'details':dash_details,'bank_statement':bank_statement,'total_amount':total_amount,'bank':bank,'cmp':cmp})


def customize_bankstatement(request):
    if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                cmp = CompanyDetails.objects.get(login_details = log_details)
                
                
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            else:
                cmp = StaffDetails.objects.get(login_details = log_details).company
                
                dash_details = StaffDetails.objects.get(login_details=log_details)

            if request.method == 'POST':
                from_date = request.POST.get('from_date')
                to_date = request.POST.get('to_date')
                bank_id = request.POST.get('bank')
                

                
                from_date = datetime.strptime(from_date, '%Y-%m-%d')
                to_date = datetime.strptime(to_date, '%Y-%m-%d')
                
                allmodules= ZohoModules.objects.get(company = cmp)
                if bank_id !=  '0':
                    bank_statement = BankTransaction.objects.filter(company=cmp,trans_adj_date__gte = from_date,trans_adj_date__lte = to_date,banking=bank_id)
                else:
                    bank_statement = BankTransaction.objects.filter(company=cmp,trans_adj_date__gte = from_date,trans_adj_date__lte = to_date)

                total_amount = bank_statement.aggregate(total=Sum('trans_adj_amount'))['total']

                
                total_amount = total_amount or 0
                bank = Banking.objects.filter(company=cmp)

                return render(request,'zohomodules/Reports/bank_statement_report.html',{'allmodules':allmodules,'details':dash_details,'bank_statement':bank_statement,'total_amount':total_amount,'bank':bank,'cmp':cmp,'from_date':from_date,'to_date':to_date})


def bank_statement_email(request):
    if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                cmp = CompanyDetails.objects.get(login_details = log_details)
                
                
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            else:
                cmp = StaffDetails.objects.get(login_details = log_details).company
                
                dash_details = StaffDetails.objects.get(login_details=log_details)

            if request.method == 'POST':
                bank_id = request.POST.get('hiddenbank')
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                
                if bank_id:
                
                        bank_statement = BankTransaction.objects.filter(company=cmp, banking=bank_id)
                        total_amount = bank_statement.aggregate(total=Sum('trans_adj_amount'))['total']

                        
                        total_amount = total_amount or 0
                else:
                        bank_statement = BankTransaction.objects.filter(company=cmp)
                        total_amount = bank_statement.aggregate(total=Sum('trans_adj_amount'))['total']

                        
                        total_amount = total_amount or 0

                
                context = {'bank_statement':bank_statement,'total_amount':total_amount}
                template_path = 'zohomodules/Reports/bank_statement_email.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Bank Statement Details'
                subject = f"Bank Statement Details - {cmp.company_name}"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Details for - Bank Statement Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Bank Statement details has been shared via email successfully..!')
                return redirect(bank_statement_report)

#End

def low_stock_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        # Fetch items related to the company
        items = Items.objects.filter(company=cmp)
        
        for item in items:
            item.stock_value = (item.current_stock) * (item.opening_stock_per_unit)

        context = {
            'cmp': cmp,
            'details': dash_details,
            'log_details': log_details,
            'items': items,
            'allmodules': allmodules
        }
        return render(request, 'zohomodules/Reports/low_stock_summary.html', context)
    else:
        # Handle the case when the user is not logged in
        return redirect('/')


def customize_low_stock_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        # Get date range from request and convert to timezone-aware datetime objects
        from_date_str = request.GET.get('from_date')
        to_date_str = request.GET.get('to_date')

        if from_date_str and to_date_str:
            from_date = timezone.make_aware(datetime.combine(parse_date(from_date_str), datetime.min.time()))
            to_date = timezone.make_aware(datetime.combine(parse_date(to_date_str), datetime.max.time()))
        else:
            from_date = None
            to_date = None

        # Fetch items related to the company and filter by date if provided
        if from_date and to_date:
            items = Items.objects.filter(company=cmp, date__range=[from_date, to_date])
        else:
            items = Items.objects.filter(company=cmp)

        # Calculate stock value for each item
        for item in items:
            item.stock_value = item.current_stock * item.opening_stock_per_unit

        context = {
            'cmp': cmp,
            'details': dash_details,
            'log_details': log_details,
            'items': items,
            'allmodules': allmodules,
            'from_date': from_date_str,
            'to_date': to_date_str,
        }
        return render(request, 'zohomodules/Reports/low_stock_summary.html', context)
    else:
        # Handle the case when the user is not logged in
        return redirect('/')


def shareLowStockSummaryToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)


            allmodules = ZohoModules.objects.filter(company=cmp, status='New')

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

               
                from_date = request.POST['start']
                to_date = request.POST['end']
               

                
                if from_date and to_date:
                    items = Items.objects.filter(company=cmp, date__range=[from_date, to_date])
                else:
                    items = Items.objects.filter(company=cmp)

                # Calculate stock value for each item
                for item in items:
                    item.stock_value = item.current_stock * item.opening_stock_per_unit

                context = {
                    'cmp': cmp,
                    'details': dash_details,
                    'log_details': log_details,
                    'items': items,
                    'allmodules': allmodules,
                    'from_date': from_date,
                    'to_date': to_date,
                }
                template_path = 'zohomodules/Reports/lowstocksummarypdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'low stock summary report'
                subject = f"low stock summary Report"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Low Stock Summary Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report details has been shared via email successfully..!')
                return redirect(low_stock_summary)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(low_stock_summary)
            
#---------------------------------- AGING SUMMARY ----------------------------------#
def load_aging_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)
    age_interval = 4
    day_interval = 15

    first_interval = 1
    last_interval = day_interval
    interval_data = []
    day_count = []
    for i in range(age_interval):
        if i == age_interval -1 :
            interval_data.append(f'> {first_interval - 1} DAYS')
        else:
            interval_data.append(f'{first_interval} - {last_interval} DAYS')
        first_interval = last_interval + 1
        last_interval += day_interval
        day_count.append(first_interval)
    
    cust = Customer.objects.filter(company = cmp)
    reportData = []
    total_matrix = []
    total_matrix += [0] * age_interval
    total_current = 0
    final_balance = 0
    cust_no = 0

    for c in cust:
        current = 0
        custemail = c.customer_email
        custfname = c.first_name
        custlname = c.last_name
        custphno = c.customer_mobile
        day_matrix = []
        day_matrix += [0] * age_interval
        invo = invoice.objects.filter(customer=c, status = 'Saved')
        rinvo = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
        for i in invo:
            if float(i.balance) > 0: 
                days = int((i.expiration_date - date.today()).days)
                if days <= 0:
                    days = days*-1
                    if days == 0:
                        current += float(i.balance)
                    else:
                        for index in range(age_interval):
                            if days < day_count[index]:
                                day_matrix[index] += i.balance
                                break
                        else:
                            day_matrix[-1] += i.balance
        
        for i in rinvo:
            if float(i.balance) > 0: 
                days = int((i.end_date - date.today()).days)
                if days <= 0:
                    days = days*-1
                    if days == 0:
                        current += float(i.balance)
                    else:
                        for index in range(age_interval):
                            if days < day_count[index]:
                                day_matrix[index] += i.balance
                                break
                        else:
                            day_matrix[-1] += i.balance
        
        total_balance = current + sum(day_matrix)
        final_balance += total_balance
        total_current += current
        total_matrix = [x + y for x, y in zip(total_matrix, day_matrix)]
        if total_balance != 0:
            details = {
                'current': current,
                'custemail':custemail,
                'custfname': custfname,
                'custlname': custlname,
                'custphno': custphno,
                'day_matrix': day_matrix,
                'total_balance':total_balance
            }
            reportData.append(details)
            cust_no += 1

    context = {'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'interval_data':interval_data, 'reportData':reportData, 
               'cust_no':cust_no, 'total_current':total_current, 'final_balance':final_balance, "total_matrix":total_matrix, 'startDate':None, 'endDate':None, 
               'aging_by':'inv_due_date', 'age_interval':age_interval, 'day_interval':day_interval, 'show_by':'inv_amt', 'cemail':None, 'cfname':'on', 'clname':'on', 
               'cphno':None}
    return render(request, 'zohomodules/Reports/aging_summary.html', context)

def customize_aging_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)
    startDate = request.GET['from_date']
    endDate = request.GET['to_date']
    if startDate == "":
        startDate = None
    if endDate == "":
        endDate = None

    aging_by = request.GET.get('aging_by')
    if aging_by == '' or aging_by == None:
        aging_by = 'inv_due_date'

    age_interval = int(request.GET['age_interval'])

    if age_interval == 0:
        age_interval = 4

    try:
        day_interval = int(request.GET['day_interval'])
    except:
        day_interval = 15

    try:
        show_by = request.GET['show_by']
    except:
        show_by = 'inv_amt'

    if 'cust_email_show' in request.GET:
        cemail = request.GET['cust_email_show']
    else:
        cemail = None

    if 'cust_fname_show' in request.GET:
        cfname = request.GET['cust_fname_show']
    else:
        cfname = None

    if 'cust_lname_show' in request.GET:
        clname = request.GET['cust_lname_show']
    else:
        clname = None

    if 'cust_phone_show' in request.GET:
        cphno = request.GET['cust_phone_show']
    else:
        cphno = None

    first_interval = 1
    last_interval = day_interval
    interval_data = []
    day_count = []
    for i in range(age_interval):
        if i == age_interval -1 :
            interval_data.append(f'> {first_interval - 1} Days')
        else:
            interval_data.append(f'{first_interval} - {last_interval} Days')
        first_interval = last_interval + 1
        last_interval += day_interval
        day_count.append(first_interval)
    
    cust = Customer.objects.filter(company = cmp)
    reportData = []
    total_matrix = []
    total_matrix += [0] * age_interval
    total_current = 0
    final_balance = 0
    cust_no = 0

    for c in cust:
        current = 0
        custemail = c.customer_email
        custfname = c.first_name
        custlname = c.last_name
        custphno = c.customer_mobile
        day_matrix = []
        day_matrix += [0] * age_interval
        if startDate and endDate:
            if aging_by == 'inv_due_date':
                invo = invoice.objects.filter(customer=c, expiration_date__range = [startDate, endDate], status = 'Saved')
                rinvo = RecurringInvoice.objects.filter(customer=c, end_date__range = [startDate, endDate], status = 'Saved')
            else:
                invo = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                rinvo = RecurringInvoice.objects.filter(customer=c, start_date__range = [startDate, endDate], status = 'Saved')
        else:
            invo = invoice.objects.filter(customer=c, status = 'Saved')
            rinvo = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
        for i in invo:
            if float(i.balance) > 0: 
                if aging_by == 'inv_due_date':
                    days = int((i.expiration_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                        if days == 0:
                            if show_by == 'inv_amt':
                                current += float(i.balance)
                            else:
                                current += 1
                        else:
                            for index in range(age_interval):
                                if days < day_count[index]:
                                    if show_by == 'inv_amt':
                                        day_matrix[index] += i.balance
                                    else:
                                        day_matrix[index] += 1
                                    break
                            else:
                                if show_by == 'inv_amt':
                                    day_matrix[-1] += i.balance
                                else:
                                    day_matrix[-1] += 1

                elif aging_by == 'inv_date':
                    days = int((date.today() - i.date).days)
                    if days <= 0:
                        days = days*-1
                    if days == 0:
                        if show_by == 'inv_amt':
                            current += float(i.balance)
                        else:
                            current += 1
                    else:
                        for index in range(age_interval):
                            if days < day_count[index]:
                                if show_by == 'inv_amt':
                                    day_matrix[index] += i.balance
                                else:
                                    day_matrix[index] += 1
                                break
                        else:
                            if show_by == 'inv_amt':
                                day_matrix[-1] += i.balance
                            else:
                                day_matrix[-1] += 1

        for i in rinvo:
            if float(i.balance) > 0: 
                if aging_by == 'inv_due_date':
                    days = int((i.end_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                        if days == 0:
                            if show_by == 'inv_amt':
                                current += float(i.balance)
                            else:
                                current += 1
                        else:
                            for index in range(age_interval):
                                if days < day_count[index]:
                                    if show_by == 'inv_amt':
                                        day_matrix[index] += i.balance
                                    else:
                                        day_matrix[index] += 1
                                    break
                            else:
                                if show_by == 'inv_amt':
                                    day_matrix[-1] += i.balance
                                else:
                                    day_matrix[-1] += 1

                elif aging_by == 'inv_date':
                    days = int((i.start_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                    if days == 0:
                        if show_by == 'inv_amt':
                            current += float(i.balance)
                        else:
                            current += 1
                    else:
                        for index in range(age_interval):
                            if days < day_count[index]:
                                if show_by == 'inv_amt':
                                    day_matrix[index] += i.balance
                                else:
                                    day_matrix[index] += 1
                                break
                        else:
                            if show_by == 'inv_amt':
                                day_matrix[-1] += i.balance
                            else:
                                day_matrix[-1] += 1

        total_balance = current + sum(day_matrix)
        final_balance += total_balance
        total_current += current
        total_matrix = [x + y for x, y in zip(total_matrix, day_matrix)]

        if total_balance != 0:
            details = {
                'custemail':custemail,
                'custfname': custfname,
                'custlname': custlname,
                'custphno': custphno,
                'current': current,
                'day_matrix': day_matrix,
                'total_balance':total_balance
            }
            reportData.append(details)
            cust_no += 1

    context = {'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'interval_data':interval_data, 'reportData':reportData, 
               'cust_no':cust_no, 'total_current':total_current, 'final_balance':final_balance, 'total_matrix':total_matrix, 'startDate': startDate, 
               'endDate':endDate, 'aging_by':aging_by, 'age_interval':age_interval, 'day_interval':day_interval, 'show_by':show_by, 'cemail':cemail, 
               'cfname':cfname, 'clname':clname, 'cphno':cphno}
    return render(request, 'zohomodules/Reports/aging_summary.html', context)

def share_aging_summary(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    try:
        if request.method == 'GET':
            emails_string = request.GET.get('email_ids')

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.GET.get('email_message')
            # print(emails_list)

            startDate = request.GET.get('from_date')
            endDate = request.GET.get('to_date')
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            aging_by = request.GET.get('aging_by')
            if aging_by == '' or aging_by == None:
                aging_by = 'inv_due_date'

            age_interval = int(request.GET.get('age_interval'))

            if age_interval == 0:
                age_interval = 4

            try:
                day_interval = int(request.GET.get('day_interval'))
            except:
                day_interval = 15

            try:
                show_by = request.GET.get('show_by')
            except:
                show_by = 'inv_amt'

            first_interval = 1
            last_interval = day_interval
            interval_data = []
            day_count = []
            for i in range(age_interval):
                if i == age_interval - 1 :
                    interval_data.append(f'> {first_interval - 1} Days')
                else:
                    interval_data.append(f'{first_interval} - {last_interval} Days')
                first_interval = last_interval + 1
                last_interval += day_interval
                day_count.append(first_interval)

            cust = Customer.objects.filter(company = cmp)
            reportData = []
            total_matrix = []
            total_matrix += [0] * age_interval
            total_current = 0
            final_balance = 0
            cust_no = 0

            for c in cust:
                current = 0
                custfname = c.first_name
                custlname = c.last_name
                day_matrix = []
                day_matrix += [0] * age_interval
                if startDate and endDate:
                    if aging_by == 'inv_due_date':
                        invo = invoice.objects.filter(customer=c, expiration_date__range = [startDate, endDate], status = 'Saved')
                        rinvo = RecurringInvoice.objects.filter(customer=c, end_date__range = [startDate, endDate], status = 'Saved')
                    else:
                        invo = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                        rinvo = RecurringInvoice.objects.filter(customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                else:
                    invo = invoice.objects.filter(customer=c, status = 'Saved')
                    rinvo = RecurringInvoice.objects.filter(customer=c, status = 'Saved')

                for i in invo:
                    if float(i.balance) > 0: 
                        if aging_by == 'inv_due_date':
                            days = int((i.expiration_date - date.today()).days)
                            if days <= 0:
                                days = days*-1
                                if days == 0:
                                    if show_by == 'inv_amt':
                                        current += float(i.balance)
                                    else:
                                        current += 1
                                else:
                                    for index in range(age_interval):
                                        if days < day_count[index]:
                                            if show_by == 'inv_amt':
                                                day_matrix[index] += i.balance
                                            else:
                                                day_matrix[index] += 1
                                            break
                                    else:
                                        if show_by == 'inv_amt':
                                            day_matrix[-1] += i.balance
                                        else:
                                            day_matrix[-1] += 1

                        elif aging_by == 'inv_date':
                            days = int((date.today() - i.date).days)
                            if days <= 0:
                                days = days*-1
                            if days == 0:
                                if show_by == 'inv_amt':
                                    current += float(i.balance)
                                else:
                                    current += 1
                            else:
                                for index in range(age_interval):
                                    if days < day_count[index]:
                                        if show_by == 'inv_amt':
                                            day_matrix[index] += i.balance
                                        else:
                                            day_matrix[index] += 1
                                        break
                                else:
                                    if show_by == 'inv_amt':
                                        day_matrix[-1] += i.balance
                                    else:
                                        day_matrix[-1] += 1

                for i in rinvo:
                    if float(i.balance) > 0: 
                        if aging_by == 'inv_due_date':
                            days = int((i.end_date - date.today()).days)
                            if days <= 0:
                                days = days*-1
                                if days == 0:
                                    if show_by == 'inv_amt':
                                        current += float(i.balance)
                                    else:
                                        current += 1
                                else:
                                    for index in range(age_interval):
                                        if days < day_count[index]:
                                            if show_by == 'inv_amt':
                                                day_matrix[index] += i.balance
                                            else:
                                                day_matrix[index] += 1
                                            break
                                    else:
                                        if show_by == 'inv_amt':
                                            day_matrix[-1] += i.balance
                                        else:
                                            day_matrix[-1] += 1
                        elif aging_by == 'inv_date':
                            days = int((date.today() - i.start_date).days)
                            if days <= 0:
                                days = days*-1
                            if days == 0:
                                if show_by == 'inv_amt':
                                    current += float(i.balance)
                                else:
                                    current += 1
                            else:
                                for index in range(age_interval):
                                    if days < day_count[index]:
                                        if show_by == 'inv_amt':
                                            day_matrix[index] += i.balance
                                        else:
                                            day_matrix[index] += 1
                                        break
                                else:
                                    if show_by == 'inv_amt':
                                        day_matrix[-1] += i.balance
                                    else:
                                        day_matrix[-1] += 1

                total_balance = current + sum(day_matrix)
                final_balance += total_balance
                total_current += current
                total_matrix = [x + y for x, y in zip(total_matrix, day_matrix)]

                if total_balance != 0:
                    details = {
                        'custfname': custfname,
                        'custlname': custlname,
                        'current': current,
                        'day_matrix': day_matrix,
                        'total_balance':total_balance
                    }
                    reportData.append(details)
                    cust_no += 1

            context = {'com':cmp, 'cmp':cmp, 'interval_data':interval_data, 'reportData':reportData, 'cust_no':cust_no, 'total_current':total_current,
                'final_balance':final_balance, 'total_matrix':total_matrix, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 
                'age_interval':age_interval, 'day_interval':day_interval, 'show_by':show_by}

            template_path = 'zohomodules/Reports/aging_summary_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
            pdf = result.getvalue()
            filename = f'Aging Summary.pdf'
            subject = f"Sharing Aging Summary"
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Aging Summary. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)
            message = 'Report has been shared via email successfully..!'
            return JsonResponse({'message':message})
    except Exception as e:
        message = 'Report cannot be send'
        return JsonResponse({'message':message})
        
#End
#---------------------------------- AGING DETAILS ----------------------------------#
def load_aging_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)
        
    allmodules= ZohoModules.objects.get(company = cmp)

    age_interval = 4
    day_interval = 15

    first_interval = 1
    last_interval = day_interval
    interval_data = ['Current']
    day_count = [1]
    for i in range(age_interval):
        if i == age_interval -1 :
            interval_data.append(f'> {first_interval - 1} DAYS')
        else:
            interval_data.append(f'{first_interval} - {last_interval} DAYS')
        first_interval = last_interval + 1
        last_interval += day_interval
        day_count.append(first_interval)

    cust = Customer.objects.filter(company = cmp)
    final_data_dict = {}

    for c in cust:
        invo = invoice.objects.filter(customer=c, status = 'Saved')
        rinvo = RecurringInvoice.objects.filter(customer=c, status = 'Saved')
        for i in invo:
            if float(i.balance) > 0: 
                days = int((i.expiration_date - date.today()).days)
                if days <= 0:
                    days = days*-1
                    for index in range(len(interval_data)):
                        if days < day_count[index]:
                            if interval_data[index] not in final_data_dict:
                                final_data_dict[interval_data[index]] = [[i.expiration_date]]
                                final_data_dict[interval_data[index]][0].append(i.invoice_number)
                                final_data_dict[interval_data[index]][0].append('Overdue')
                                final_data_dict[interval_data[index]][0].append([i.customer.first_name + ' ' + i.customer.last_name])
                                final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][0].append(i.grand_total)
                                final_data_dict[interval_data[index]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[index]])
                                final_data_dict[interval_data[index]].append([i.expiration_date])
                                final_data_dict[interval_data[index]][index_count].append(i.invoice_number)
                                final_data_dict[interval_data[index]][index_count].append('Overdue')
                                final_data_dict[interval_data[index]][index_count].append([i.customer.first_name + ' ' + i.customer.last_name])
                                final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][index_count].append(i.grand_total)
                                final_data_dict[interval_data[index]][index_count].append(i.balance)
                            break
                    else:
                        if interval_data[-1] not in final_data_dict:
                            final_data_dict[interval_data[-1]] = [[i.expiration_date]]
                            final_data_dict[interval_data[-1]][0].append(i.invoice_number)
                            final_data_dict[interval_data[-1]][0].append('Overdue')
                            final_data_dict[interval_data[-1]][0].append([i.customer.first_name + ' ' + i.customer.last_name])
                            final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][0].append(i.grand_total)
                            final_data_dict[interval_data[-1]][0].append(i.balance)
                        else:
                            index_count = len(final_data_dict[interval_data[-1]])
                            final_data_dict[interval_data[-1]].append([i.expiration_date])
                            final_data_dict[interval_data[-1]][index_count].append(i.invoice_number)
                            final_data_dict[interval_data[-1]][index_count].append('Overdue')
                            final_data_dict[interval_data[-1]][index_count].append([i.customer.first_name + ' ' + i.customer.last_name])
                            final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][index_count].append(i.grand_total)
                            final_data_dict[interval_data[-1]][index_count].append(i.balance)

        for i in rinvo:
            if float(i.balance) > 0: 
                days = int((i.end_date - date.today()).days)
                if days <= 0:
                    days = days*-1
                    for index in range(len(interval_data)):
                        if days < day_count[index]:
                            if interval_data[index] not in final_data_dict:
                                final_data_dict[interval_data[index]] = [[i.end_date]]
                                final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                final_data_dict[interval_data[index]][0].append('Overdue')
                                final_data_dict[interval_data[index]][0].append([i.customer.first_name + ' ' + i.customer.last_name])
                                final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                final_data_dict[interval_data[index]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[index]])
                                final_data_dict[interval_data[index]].append([i.end_date])
                                final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                final_data_dict[interval_data[index]][index_count].append('Overdue')
                                final_data_dict[interval_data[index]][index_count].append([i.customer.first_name + ' ' + i.customer.last_name])
                                final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[index]][index_count].append(i.balance)
                            break
                    else:
                        if interval_data[-1] not in final_data_dict:
                            final_data_dict[interval_data[-1]] = [[i.end_date]]
                            final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                            final_data_dict[interval_data[-1]][0].append('Overdue')
                            final_data_dict[interval_data[-1]][0].append([i.customer.first_name + ' ' + i.customer.last_name])
                            final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                            final_data_dict[interval_data[-1]][0].append(i.balance)
                        else:
                            index_count = len(final_data_dict[interval_data[-1]])
                            final_data_dict[interval_data[-1]].append([i.end_date])
                            final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                            final_data_dict[interval_data[-1]][index_count].append('Overdue')
                            final_data_dict[interval_data[-1]][index_count].append([i.customer.first_name + ' ' + i.customer.last_name])
                            final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                            final_data_dict[interval_data[-1]][index_count].append(i.balance)

    final_grandtotal = 0
    final_balance = 0
    final_total_dict = []
    for key,value in final_data_dict.items():
        total_grandtotal = 0
        total_balance = 0
        for item in value:
            total_grandtotal += float(item[5])
            final_grandtotal += float(item[5])
            total_balance += float(item[6])
            final_balance += float(item[6])
        final_total_dict.append([key, total_grandtotal, total_balance])
        
    context = {
        'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'final_balance':final_balance, 'startDate':None, 'endDate':None, 
        'aging_by':'inv_due_date', 'cust':cust, 'age_interval':age_interval, 'final_data_dict':final_data_dict, 'day_interval':day_interval, 'cemail':None, 
        'cfname':'on', 'clname':'on', 'cphno':None, 'final_total_dict':final_total_dict, 'final_grandtotal':final_grandtotal, 'cust_name':'all'
    }
    return render(request,'zohomodules/Reports/aging_details.html', context)

def customize_aging_details(request):
    if 'login_id' in request.session:
            log_id = request.session['login_id']
            log_details= LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Company':
                cmp = CompanyDetails.objects.get(login_details = log_details)
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            else:
                cmp = StaffDetails.objects.get(login_details = log_details).company
                dash_details = StaffDetails.objects.get(login_details=log_details)
        
    allmodules= ZohoModules.objects.get(company = cmp)

    startDate = request.GET['from_date']
    endDate = request.GET['to_date']
    if startDate == "":
        startDate = None
    if endDate == "":
        endDate = None

    aging_by = request.GET.get('aging_by')
    if aging_by == '' or aging_by == None:
        aging_by = 'inv_due_date'

    age_interval = int(request.GET['age_interval'])

    if age_interval == 0:
        age_interval = 4

    try:
        day_interval = int(request.GET['day_interval'])
    except:
        day_interval = 15

    cust_name = request.GET['cust_name']

    if 'cust_email_show' in request.GET:
        cemail = request.GET['cust_email_show']
    else:
        cemail = None

    if 'cust_fname_show' in request.GET:
        cfname = request.GET['cust_fname_show']
    else:
        cfname = None

    if 'cust_lname_show' in request.GET:
        clname = request.GET['cust_lname_show']
    else:
        clname = None

    if 'cust_phone_show' in request.GET:
        cphno = request.GET['cust_phone_show']
    else:
        cphno = None

    first_interval = 1
    last_interval = day_interval
    interval_data = ['Current']
    day_count = [1]
    for i in range(age_interval):
        if i == age_interval -1 :
            interval_data.append(f'> {first_interval - 1} DAYS')
        else:
            interval_data.append(f'{first_interval} - {last_interval} DAYS')
        first_interval = last_interval + 1
        last_interval += day_interval
        day_count.append(first_interval)

    if cust_name == 'all':
        cust = Customer.objects.filter(company = cmp)
    else:
        cust = Customer.objects.filter(company = cmp, id=cust_name)
    final_data_dict = {}

    for c in cust:
        if startDate and endDate:
            if aging_by == 'inv_due_date':
                invo = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                rinvo = RecurringInvoice.objects.filter(customer=c, end_date__range = [startDate, endDate], status = 'Saved')
            else:
                invo = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                rinvo = RecurringInvoice.objects.filter(customer=c, start_date__range = [startDate, endDate], status = 'Saved')
        else:
            invo = invoice.objects.filter(customer=c, status = 'Saved')
            rinvo = RecurringInvoice.objects.filter(customer=c, status = 'Saved')

        for i in invo:
            if float(i.balance) > 0: 
                days = int((i.expiration_date - date.today()).days)
                if aging_by == 'inv_due_date':
                    if days <= 0:
                        days = days*-1
                        for index in range(len(interval_data)):
                            if days < day_count[index]:
                                if interval_data[index] not in final_data_dict:
                                    final_data_dict[interval_data[index]] = [[i.expiration_date]]
                                    final_data_dict[interval_data[index]][0].append(i.invoice_number)
                                    final_data_dict[interval_data[index]][0].append('Overdue')
                                    final_data_dict[interval_data[index]][0].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.customer_email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.customer_mobile)
                                    final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][0].append(i.grand_total)
                                    final_data_dict[interval_data[index]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[index]])
                                    final_data_dict[interval_data[index]].append([i.expiration_date])
                                    final_data_dict[interval_data[index]][index_count].append(i.invoice_number)
                                    final_data_dict[interval_data[index]][index_count].append('Overdue')
                                    final_data_dict[interval_data[index]][index_count].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_mobile)
                                    final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][index_count].append(i.grand_total)
                                    final_data_dict[interval_data[index]][index_count].append(i.balance)
                                break
                        else:
                            if interval_data[-1] not in final_data_dict:
                                final_data_dict[interval_data[-1]] = [[i.expiration_date]]
                                final_data_dict[interval_data[-1]][0].append(i.invoice_number)
                                final_data_dict[interval_data[-1]][0].append('Overdue')
                                final_data_dict[interval_data[-1]][0].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][0].append(i.grand_total)
                                final_data_dict[interval_data[-1]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[-1]])
                                final_data_dict[interval_data[-1]].append([i.expiration_date])
                                final_data_dict[interval_data[-1]][index_count].append(i.invoice_number)
                                final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                final_data_dict[interval_data[-1]][index_count].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][index_count].append(i.grand_total)
                                final_data_dict[interval_data[-1]][index_count].append(i.balance)
                elif aging_by == 'inv_date':
                    days = int((i.invoice_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                    for index in range(len(interval_data)):
                        if days < day_count[index]:
                            if interval_data[index] not in final_data_dict:
                                final_data_dict[interval_data[index]] = [[i.invoice_date]]
                                final_data_dict[interval_data[index]][0].append(i.invoice_number)
                                if int((i.expiration_date - date.today()).days) > 0:
                                    final_data_dict[interval_data[index]][0].append('On Time')
                                else:
                                    final_data_dict[interval_data[index]][0].append('Overdue')
                                final_data_dict[interval_data[index]][0].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][0].append(i.grand_total)
                                final_data_dict[interval_data[index]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[index]])
                                final_data_dict[interval_data[index]].append([i.invoice_date])
                                final_data_dict[interval_data[index]][index_count].append(i.invoice_number)
                                if int((i.expiration_date - date.today()).days) > 0:
                                    final_data_dict[interval_data[index]][index_count].append('On Time')
                                else:
                                    final_data_dict[interval_data[index]][index_count].append('Overdue')
                                final_data_dict[interval_data[index]][index_count].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][index_count].append(i.grand_total)
                                final_data_dict[interval_data[index]][index_count].append(i.balance)
                            break
                    else:
                        if interval_data[-1] not in final_data_dict:
                            final_data_dict[interval_data[-1]] = [[i.invoice_date]]
                            final_data_dict[interval_data[-1]][0].append(i.invoice_number)
                            if int((i.expiration_date - date.today()).days) > 0:
                                final_data_dict[interval_data[-1]][0].append('On Time')
                            else:
                                final_data_dict[interval_data[-1]][0].append('Overdue')
                            final_data_dict[interval_data[-1]][0].append([])
                            if cfname and clname:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                            if cfname and not clname:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name)
                            if clname and not cfname:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.last_name)
                            if cemail:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_email)
                            if cphno:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_mobile)
                            final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][0].append(i.grand_total)
                            final_data_dict[interval_data[-1]][0].append(i.balance)
                        else:
                            index_count = len(final_data_dict[interval_data[-1]])
                            final_data_dict[interval_data[-1]].append([i.invoice_date])
                            final_data_dict[interval_data[-1]][index_count].append(i.invoice_number)
                            if int((i.expiration_date - date.today()).days) > 0:
                                final_data_dict[interval_data[-1]][index_count].append('On Time')
                            else:
                                final_data_dict[interval_data[-1]][index_count].append('Overdue')
                            final_data_dict[interval_data[-1]][index_count].append([])
                            if cfname and clname:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                            if cfname and not clname:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name)
                            if clname and not cfname:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.last_name)
                            if cemail:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_email)
                            if cphno:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_mobile)
                            final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][index_count].append(i.grand_total)
                            final_data_dict[interval_data[-1]][index_count].append(i.balance)

        for i in rinvo:
            if float(i.balance) > 0: 
                days = int((i.end_date - date.today()).days)
                if aging_by == 'inv_due_date':
                    if days <= 0:
                        days = days*-1
                        for index in range(len(interval_data)):
                            if days < day_count[index]:
                                if interval_data[index] not in final_data_dict:
                                    final_data_dict[interval_data[index]] = [[i.end_date]]
                                    final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                    final_data_dict[interval_data[index]][0].append('Overdue')
                                    final_data_dict[interval_data[index]][0].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.customer_email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][0][3].append(i.customer.customer_mobile)
                                    final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[index]])
                                    final_data_dict[interval_data[index]].append([i.end_date])
                                    final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                    final_data_dict[interval_data[index]][index_count].append('Overdue')
                                    final_data_dict[interval_data[index]][index_count].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_mobile)
                                    final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][index_count].append(i.balance)
                                break
                        else:
                            if interval_data[-1] not in final_data_dict:
                                final_data_dict[interval_data[-1]] = [[i.end_date]]
                                final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                final_data_dict[interval_data[-1]][0].append('Overdue')
                                final_data_dict[interval_data[-1]][0].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[-1]])
                                final_data_dict[interval_data[-1]].append([i.end_date])
                                final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                final_data_dict[interval_data[-1]][index_count].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][index_count].append(i.balance)
                elif aging_by == 'inv_date':
                    days = int((i.start_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                    for index in range(len(interval_data)):
                        if days < day_count[index]:
                            if interval_data[index] not in final_data_dict:
                                final_data_dict[interval_data[index]] = [[i.start_date]]
                                final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                if int((i.end_date - date.today()).days) > 0:
                                    final_data_dict[interval_data[index]][0].append('On Time')
                                else:
                                    final_data_dict[interval_data[index]][0].append('Overdue')
                                final_data_dict[interval_data[index]][0].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[index]][0][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                final_data_dict[interval_data[index]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[index]])
                                final_data_dict[interval_data[index]].append([i.start_date])
                                final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                if int((i.end_date - date.today()).days) > 0:
                                    final_data_dict[interval_data[index]][index_count].append('On Time')
                                else:
                                    final_data_dict[interval_data[index]][index_count].append('Overdue')
                                final_data_dict[interval_data[index]][index_count].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_email)
                                if cphno:
                                    final_data_dict[interval_data[index]][index_count][3].append(i.customer.customer_mobile)
                                final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[index]][index_count].append(i.balance)
                            break
                    else:
                        if interval_data[-1] not in final_data_dict:
                            final_data_dict[interval_data[-1]] = [[i.start_date]]
                            final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                            if int((i.end_date - date.today()).days) > 0:
                                final_data_dict[interval_data[-1]][0].append('On Time')
                            else:
                                final_data_dict[interval_data[-1]][0].append('Overdue')
                            final_data_dict[interval_data[-1]][0].append([])
                            if cfname and clname:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                            if cfname and not clname:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.first_name)
                            if clname and not cfname:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.last_name)
                            if cemail:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_email)
                            if cphno:
                                final_data_dict[interval_data[-1]][0][3].append(i.customer.customer_mobile)
                            final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                            final_data_dict[interval_data[-1]][0].append(i.balance)
                        else:
                            index_count = len(final_data_dict[interval_data[-1]])
                            final_data_dict[interval_data[-1]].append([i.start_date])
                            final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                            if int((i.end_date - date.today()).days) > 0:
                                final_data_dict[interval_data[-1]][index_count].append('On Time')
                            else:
                                final_data_dict[interval_data[-1]][index_count].append('Overdue')
                            final_data_dict[interval_data[-1]][index_count].append([])
                            if cfname and clname:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name + ' ' + i.customer.last_name)
                            if cfname and not clname:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.first_name)
                            if clname and not cfname:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.last_name)
                            if cemail:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_email)
                            if cphno:
                                final_data_dict[interval_data[-1]][index_count][3].append(i.customer.customer_mobile)
                            final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                            final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                            final_data_dict[interval_data[-1]][index_count].append(i.balance)

    final_grandtotal = 0
    final_balance = 0
    final_total_dict = []
    for key,value in final_data_dict.items():
        total_grandtotal = 0
        total_balance = 0
        for item in value:
            total_grandtotal += float(item[5])
            final_grandtotal += float(item[5])
            total_balance += float(item[6])
            final_balance += float(item[6])
        final_total_dict.append([key, total_grandtotal, total_balance])
    cust = Customer.objects.filter(company = cmp)
    context = {
        'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'final_data_dict':final_data_dict, 'final_grandtotal':final_grandtotal,
        'final_balance':final_balance, 'cust':cust, 'final_balance':final_balance, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 
        'age_interval':age_interval, 'final_total_dict':final_total_dict,'day_interval':day_interval, 'cemail':cemail, 'cfname':cfname, 'clname':clname, 
        'cphno':cphno, 'cust_name':cust_name
    }
    return render(request, 'zohomodules/Reports/aging_details.html', context)

def share_aging_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)
        
    try:
        if request.method == 'GET':
            emails_string = request.GET.get('email_ids')

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.GET.get('email_message')
            # print(emails_list)

            startDate = request.GET.get('from_date')
            endDate = request.GET.get('to_date')
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            aging_by = request.GET.get('aging_by')
            if aging_by == '' or aging_by == None:
                aging_by = 'inv_due_date'

            age_interval = int(request.GET.get('age_interval'))

            if age_interval == 0:
                age_interval = 4

            try:
                day_interval = int(request.GET.get('day_interval'))
            except:
                day_interval = 15
            
            cust_name = request.GET.get('cust_name')

            first_interval = 1
            last_interval = day_interval
            interval_data = ['Current']
            day_count = [1]
            for i in range(age_interval):
                if i == age_interval - 1 :
                    interval_data.append(f'> {first_interval - 1} Days')
                else:
                    interval_data.append(f'{first_interval} - {last_interval} Days')
                first_interval = last_interval + 1
                last_interval += day_interval
                day_count.append(first_interval)

            if cust_name == 'all':
                cust = Customer.objects.filter(company = cmp)
            else:
                cust = Customer.objects.filter(company = cmp, id=cust_name)
            final_data_dict = {}

            for c in cust:
                if startDate and endDate:
                    if aging_by == 'inv_due_date':
                        invo = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                        rinvo = RecurringInvoice.objects.filter(customer=c, end_date__range = [startDate, endDate], status = 'Saved')
                    else:
                        invo = invoice.objects.filter(customer=c, date__range = [startDate, endDate], status = 'Saved')
                        rinvo = RecurringInvoice.objects.filter(customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                else:
                    invo = invoice.objects.filter(customer=c, status = 'Saved')
                    rinvo = RecurringInvoice.objects.filter(customer=c, status = 'Saved')

                for i in invo:
                    if float(i.balance) > 0: 
                        days = int((i.expiration_date - date.today()).days)
                        if aging_by == 'inv_due_date':
                            if days <= 0:
                                days = days*-1
                                for index in range(len(interval_data)):
                                    if days < day_count[index]:
                                        if interval_data[index] not in final_data_dict:
                                            final_data_dict[interval_data[index]] = [[i.expiration_date]]
                                            final_data_dict[interval_data[index]][0].append(i.invoice_number)
                                            final_data_dict[interval_data[index]][0].append('Overdue')
                                            final_data_dict[interval_data[index]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                            final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][0].append(i.grand_total)
                                            final_data_dict[interval_data[index]][0].append(i.balance)
                                        else:
                                            index_count = len(final_data_dict[interval_data[index]])
                                            final_data_dict[interval_data[index]].append([i.expiration_date])
                                            final_data_dict[interval_data[index]][index_count].append(i.invoice_number)
                                            final_data_dict[interval_data[index]][index_count].append('Overdue')
                                            final_data_dict[interval_data[index]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                            final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][index_count].append(i.grand_total)
                                            final_data_dict[interval_data[index]][index_count].append(i.balance)
                                        break
                                else:
                                    if interval_data[-1] not in final_data_dict:
                                        final_data_dict[interval_data[-1]] = [[i.expiration_date]]
                                        final_data_dict[interval_data[-1]][0].append(i.invoice_number)
                                        final_data_dict[interval_data[-1]][0].append('Overdue')
                                        final_data_dict[interval_data[-1]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][0].append(i.grand_total)
                                        final_data_dict[interval_data[-1]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[-1]])
                                        final_data_dict[interval_data[-1]].append([i.expiration_date])
                                        final_data_dict[interval_data[-1]][index_count].append(i.invoice_number)
                                        final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                        final_data_dict[interval_data[-1]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][index_count].append(i.grand_total)
                                        final_data_dict[interval_data[-1]][index_count].append(i.balance)
                        elif aging_by == 'inv_date':
                            days = int((i.invoice_date - date.today()).days)
                            if days <= 0:
                                days = days*-1
                            for index in range(len(interval_data)):
                                if days < day_count[index]:
                                    if interval_data[index] not in final_data_dict:
                                        final_data_dict[interval_data[index]] = [[i.invoice_date]]
                                        final_data_dict[interval_data[index]][0].append(i.invoice_number)
                                        if int((i.expiration_date - date.today()).days) > 0:
                                            final_data_dict[interval_data[index]][0].append('On Time')
                                        else:
                                            final_data_dict[interval_data[index]][0].append('Overdue')
                                        final_data_dict[interval_data[index]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][0].append(i.grand_total)
                                        final_data_dict[interval_data[index]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[index]])
                                        final_data_dict[interval_data[index]].append([i.invoice_date])
                                        final_data_dict[interval_data[index]][index_count].append(i.invoice_number)
                                        if int((i.expiration_date - date.today()).days) > 0:
                                            final_data_dict[interval_data[index]][index_count].append('On Time')
                                        else:
                                            final_data_dict[interval_data[index]][index_count].append('Overdue')
                                        final_data_dict[interval_data[index]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][index_count].append(i.grand_total)
                                        final_data_dict[interval_data[index]][index_count].append(i.balance)
                                    break
                            else:
                                if interval_data[-1] not in final_data_dict:
                                    final_data_dict[interval_data[-1]] = [[i.invoice_date]]
                                    final_data_dict[interval_data[-1]][0].append(i.invoice_number)
                                    if int((i.expiration_date - date.today()).days) > 0:
                                        final_data_dict[interval_data[-1]][0].append('On Time')
                                    else:
                                        final_data_dict[interval_data[-1]][0].append('Overdue')
                                    final_data_dict[interval_data[-1]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][0].append(i.grand_total)
                                    final_data_dict[interval_data[-1]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[-1]])
                                    final_data_dict[interval_data[-1]].append([i.invoice_date])
                                    final_data_dict[interval_data[-1]][index_count].append(i.invoice_number)
                                    if int((i.expiration_date - date.today()).days) > 0:
                                        final_data_dict[interval_data[-1]][index_count].append('On Time')
                                    else:
                                        final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                    final_data_dict[interval_data[-1]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][index_count].append(i.grand_total)
                                    final_data_dict[interval_data[-1]][index_count].append(i.balance)

                for i in rinvo:
                    if float(i.balance) > 0: 
                        days = int((i.end_date - date.today()).days)
                        if aging_by == 'inv_due_date':
                            if days <= 0:
                                days = days*-1
                                for index in range(len(interval_data)):
                                    if days < day_count[index]:
                                        if interval_data[index] not in final_data_dict:
                                            final_data_dict[interval_data[index]] = [[i.end_date]]
                                            final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                            final_data_dict[interval_data[index]][0].append('Overdue')
                                            final_data_dict[interval_data[index]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                            final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                            final_data_dict[interval_data[index]][0].append(i.balance)
                                        else:
                                            index_count = len(final_data_dict[interval_data[index]])
                                            final_data_dict[interval_data[index]].append([i.end_date])
                                            final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                            final_data_dict[interval_data[index]][index_count].append('Overdue')
                                            final_data_dict[interval_data[index]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                            final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                            final_data_dict[interval_data[index]][index_count].append(i.balance)
                                        break
                                else:
                                    if interval_data[-1] not in final_data_dict:
                                        final_data_dict[interval_data[-1]] = [[i.end_date]]
                                        final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                        final_data_dict[interval_data[-1]][0].append('Overdue')
                                        final_data_dict[interval_data[-1]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                        final_data_dict[interval_data[-1]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[-1]])
                                        final_data_dict[interval_data[-1]].append([i.end_date])
                                        final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                        final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                        final_data_dict[interval_data[-1]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                        final_data_dict[interval_data[-1]][index_count].append(i.balance)
                        elif aging_by == 'inv_date':
                            days = int((i.start_date - date.today()).days)
                            if days <= 0:
                                days = days*-1
                            for index in range(len(interval_data)):
                                if days < day_count[index]:
                                    if interval_data[index] not in final_data_dict:
                                        final_data_dict[interval_data[index]] = [[i.start_date]]
                                        final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                        if int((i.end_date - date.today()).days) > 0:
                                            final_data_dict[interval_data[index]][0].append('On Time')
                                        else:
                                            final_data_dict[interval_data[index]][0].append('Overdue')
                                        final_data_dict[interval_data[index]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                        final_data_dict[interval_data[index]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[index]])
                                        final_data_dict[interval_data[index]].append([i.start_date])
                                        final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                        if int((i.end_date - date.today()).days) > 0:
                                            final_data_dict[interval_data[index]][index_count].append('On Time')
                                        else:
                                            final_data_dict[interval_data[index]][index_count].append('Overdue')
                                        final_data_dict[interval_data[index]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                        final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                        final_data_dict[interval_data[index]][index_count].append(i.balance)
                                    break
                            else:
                                if interval_data[-1] not in final_data_dict:
                                    final_data_dict[interval_data[-1]] = [[i.start_date]]
                                    final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                    if int((i.end_date - date.today()).days) > 0:
                                        final_data_dict[interval_data[-1]][0].append('On Time')
                                    else:
                                        final_data_dict[interval_data[-1]][0].append('Overdue')
                                    final_data_dict[interval_data[-1]][0].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[-1]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[-1]])
                                    final_data_dict[interval_data[-1]].append([i.start_date])
                                    final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                    if int((i.end_date - date.today()).days) > 0:
                                        final_data_dict[interval_data[-1]][index_count].append('On Time')
                                    else:
                                        final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                    final_data_dict[interval_data[-1]][index_count].append(i.customer.first_name + ' ' + i.customer.last_name)
                                    final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[-1]][index_count].append(i.balance)

            final_grandtotal = 0
            final_balance = 0
            final_total_dict = []
            for key,value in final_data_dict.items():
                total_grandtotal = 0
                total_balance = 0
                for item in value:
                    total_grandtotal += float(item[5])
                    final_grandtotal += float(item[5])
                    total_balance += float(item[6])
                    final_balance += float(item[6])
                final_total_dict.append([key, total_grandtotal, total_balance])
            cust = Customer.objects.filter(company = cmp)

            context = {
                'cmp':cmp, 'final_data_dict':final_data_dict, 'final_grandtotal':final_grandtotal, 'final_balance':final_balance, 'cust':cust, 
                'final_balance':final_balance, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 'age_interval':age_interval, 
                'final_total_dict':final_total_dict, 'day_interval':day_interval, 
            }

            template_path = 'zohomodules/Reports/aging_details_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
            pdf = result.getvalue()
            filename = f'Aging Details.pdf'
            subject = f"Sharing Aging Details"
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Aging Details. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            message = 'Report has been shared via email successfully..!'
            return JsonResponse({'message':message})
    except Exception as e:
        message = 'Report cannot be send'
        return JsonResponse({'message':message})
        
#End

# Employee loan details
def employee_loan_report_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        elif log_details.user_type == 'Staff':
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)
        reportData = []
        totalloan =0
        totalbalance =0
        
        emp = payroll_employee.objects.filter(company=cmp)
        for c in emp:
            employeeName = c.first_name +" "+c.last_name
            empid = c.emp_number
            emploan = EmployeeLoan.objects.filter(Employee=c)
            for e in emploan:
                loan = float(e.LoanAmount)
                date = e.Loandate
                exdate = e.Expiry_date
                balance = float(e.balance)
            
                details = {
                    'name': employeeName,
                    'employee':emploan,
                    'loan':loan,
                    'date':date,
                    'expdate':exdate,
                    'balance':balance,
                    'id':empid,
                }
                reportData.append(details)
                totalloan = loan+totalloan
                totalbalance = balance+totalbalance
        context = {
            'allmodules':allmodules, 'details':dash_details,'log_details':log_details , 'cmp':cmp,'reportData':reportData,
            'totloan':totalloan,'startDate':None, 'endDate':None,'totbalance':totalbalance,
        }
        return render(request,'zohomodules/Reports/employee_loan_details.html',context)
    else:
        return redirect('/')
    
def employee_loan_custom(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
            dash_details = CompanyDetails.objects.get(login_details=log_details)
    
    allmodules= ZohoModules.objects.get(company=comp_details)
    
    if request.method == 'GET':
        startDate = request.GET['from_date']
        endDate = request.GET['to_date']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        reportData = []
        totAmount = 0
        totBalance = 0
        
        emploan = EmployeeLoan.objects.filter(company = comp_details,Loandate__range = [startDate, endDate])
        if emploan:
            for loan in emploan:
                partyName = loan.Employee.first_name+" "+loan.Employee.last_name
                date = loan.Loandate
                type = 'Loan Account'
                total = loan.LoanAmount
                balance=loan.balance
                empid=loan.Employee.emp_number
                expdate=loan.Expiry_date
                totAmount += float(loan.LoanAmount)
                totBalance += float(loan.balance)
                details = {'date': date,'name': partyName,'type':type,'loan':total,'balance':balance,'id':empid,'expdate':expdate}
                reportData.append(details)
  
    return render(request,'zohomodules/Reports/employee_loan_details.html', {               
                'allmodules': allmodules,
                'log_details': log_details,              
                'reportData':reportData,
                'totloan':totAmount,
                'totbalance':totBalance,
                'startDate':startDate, 
                'endDate':endDate,
                'comp_details':comp_details,
                'details':dash_details,              
            })    

def employee_loan_details_mail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details=log_details).company
            dash_details = CompanyDetails.objects.get(login_details=log_details)

        if request.method == 'POST':   
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            startDate = request.POST['start']
            endDate = request.POST['end']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totAmount = 0
            totBalance = 0
            
        if startDate == None or endDate == None:
            
            loan_acc = EmployeeLoan.objects.filter(company = comp_details)
            if loan_acc:
                for loan in loan_acc:
                    partyName = loan.Employee.first_name+" "+loan.Employee.last_name
                    date = loan.Loandate
                    type = 'Loan Account'
                    total = loan.LoanAmount
                    balance=loan.balance
                    empid=loan.Employee.emp_number
                    expdate=loan.Expiry_date
                    totAmount += float(loan.LoanAmount)
                    totBalance += float(loan.balance)
                    details = {'date': date,'name': partyName,'type':type,'loan':total,'balance':balance,'id':empid,'expdate':expdate}
                    reportData.append(details)
  
                
            loan_acc = EmployeeLoan.objects.filter(company = comp_details,Loandate__range = [startDate, endDate])
            if loan_acc:
                for loan in loan_acc:
                    partyName = loan.Employee.first_name+" "+loan.Employee.last_name
                    date = loan.Loandate
                    type = 'Loan Account'
                    total = loan.LoanAmount
                    balance=loan.balance
                    empid=loan.Employee.emp_number
                    expdate=loan.Expiry_date
                    totAmount += float(loan.LoanAmount)
                    totBalance += float(loan.balance)
                    details = {'date': date,'name': partyName,'type':type,'loan':total,'balance':balance,'id':empid,'expdate':expdate}
                    reportData.append(details) 
        
        
        context = {
                'log_details': log_details,
                'companyName': comp_details.company_name,
                'reportData': reportData,
                'totloan':totAmount,
                'totbalance':totBalance,
                'startDate': startDate,
                'endDate': endDate,
                'comp_details':comp_details,
                'details':dash_details,  
        }

        template_path = 'zohomodules/Reports/employee_loan_report_mail.html'
        template = get_template(template_path)

        html = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)                            
        pdf = result.getvalue()
        filename = 'Loan_Report'
        subject = "Loan_Report"
        email = EmailMsg(
            subject,
            f"Hi,\nPlease find the attached Report for - Loan Report. \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}",
            from_email=settings.EMAIL_HOST_USER,
            to=emails_list
        )
            
        email.from_email = settings.EMAIL_HOST_USER 
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        return redirect(employee_loan_report_details)
        
#End

def e_way_bill_report(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        bills = EwayBill.objects.filter(company=cmp)
        allmodules = ZohoModules.objects.get(company=cmp)

        context = {
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'cmp': cmp,
            'bills': bills
        }
    else:
        
        return redirect('login')  

    return render(request, 'zohomodules/e_way_bill_report.html', context)

def e_waybillsCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details=log_details).company

        allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        data = Customer.objects.filter(company=comp_details)

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)
            
            # Convert empty strings to None
            startDate = startDate if startDate else None
            endDate = endDate if endDate else None

            bill = EwayBill.objects.filter(company=comp_details)

            if startDate and endDate:
                bill = bill.filter(start_date__range=[startDate, endDate])

            # Filter based on the transaction type
            if trans == 'sent':
                bill = bill.filter(status='Saved')
            elif trans == 'draft':
                bill = bill.filter(status='Draft')
            elif trans == 'all':
                pass  # Do not filter, get all e-way bills
            elif trans:  # If trans is an invalid value
                bill = EwayBill.objects.none()  # Empty queryset

            totalCustomer = bill.values('customer').distinct().count()

            context = {
                'bill': bill,
                'log_details': log_details,
                'allmodules': allmodules,
                'startDate': startDate,
                'endDate': endDate,
                'transaction': trans,
                'totalCustomer': totalCustomer,
                'companyName': comp_details.company_name,
            }
            return render(request, 'zohomodules/e_way_bill_customized.html', context)
        else:
            return redirect('/')
    else:
        return redirect('/')
    
def eway_bill_report_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                bill = EwayBill.objects.filter(company=cmp)

                context = {'cmp': cmp, 'startDate': startDate, 'endDate': endDate, 'bill': bill}
                template_path = 'zohomodules/e_way_bill_Pdf.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'E-way Bill Report'
                subject = 'E-way Bill Report'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached E-way bill report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                print(bill)

                messages.success(request, 'E-way bill report details have been shared via email successfully!')
                return redirect(e_way_bill_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(e_way_bill_report)

def eway_bill_coustomize_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                trans = request.GET.get('transactions', None)
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                bill = EwayBill.objects.filter(company=cmp)

                if startDate and endDate:
                    bill = bill.filter(start_date__range=[startDate, endDate])

                if trans == 'saved':
                    bill = bill.filter(status='Save', convert_to_invoice__isnull=True, convert_to_recurringinvoice__isnull=True)
                elif trans == 'draft':
                    bill = bill.filter(status='Draft', convert_to_invoice__isnull=True, convert_to_recurringinvoice__isnull=True)
                elif trans == 'Converted_to_Invoice':
                    bill = bill.filter(convert_to_invoice__isnull=False)
                elif trans == 'Converted_to_RecurringInvoice':
                    bill = bill.filter(convert_to_recurringinvoice__isnull=False)

                totalCustomer = bill.values('customer').distinct().count()

                context = {
                    'bill': bill,
                    'log_details': log_details,
                    
                    'startDate': startDate,
                    'endDate': endDate,
                    'transaction': trans,
                    'totalCustomer': totalCustomer,
                    'companyName': cmp.company_name,
                }
                template_path = 'zohomodules/e_way_coustomize_Pdf.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'E-way Bill Report'
                subject = 'E-way Bill Report'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached E-way bill report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                

                messages.success(request, 'E-way bill report details have been shared via email successfully!')
                return redirect(e_waybillsCustomized)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(e_waybillsCustomized)
            
def purchase_by_item(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        # Retrieve data for bill items
        bill_items_summary = BillItems.objects.filter(Company=cmp).values('item_id__item_name', 'item_name').annotate(
            total_count=Sum('qty'),
            price=Sum('total') / Sum('qty'),
        )

# Retrieve data for recurring bill items
        recurring_bill_items_summary = RecurrItemsList.objects.filter(recurr_bill_id__company=cmp).values('item_id__item_name', 'item_name').annotate(
             total_count=Sum('qty'),
             price=Sum('total') / Sum('qty'),
            )




        # Retrieve data for debit note items
        debit_note_items_summary = debitnote_item.objects.filter(company=cmp).values('item__item_name').annotate(
            total_count=Sum('quantity'),
            price=Sum('total') / Sum('quantity'),
        )

        # Combine summaries
        combined_summary = list(bill_items_summary) + list(recurring_bill_items_summary) + list(debit_note_items_summary)

        # Aggregate combined summary data to get unique items with total counts and prices
        unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

        for summary in combined_summary:
           item_name = summary.get('item_id__item_name')
           if item_name:
              unique_items[item_name]['total_count'] += summary.get('total_count', 0)
              unique_items[item_name]['price'] += summary.get('price', 0)
           else:
              item_name = summary.get('item__item_name')
              if item_name:
                 unique_items[item_name]['total_count'] += summary.get('total_count', 0)
                 unique_items[item_name]['price'] += summary.get('price', 0)


        # Calculate total amounts
        for item_name, item_info in unique_items.items():
            item_info['total_amount'] = item_info['total_count'] * item_info['price']

        # Convert unique items dictionary to a list
        combined_summary_with_total_qty = [
            {'item_name': item_name, **item_info}
            for item_name, item_info in unique_items.items()
        ]



        total_combined_items = len(unique_items)

        grand_total_bills = Bill.objects.filter(Company=cmp).aggregate(grand_total=Sum('Grand_Total'))['grand_total']
        recurring_bills = Recurring_bills.objects.filter(company=cmp)
        grand_total_recurring_bills = recurring_bills.aggregate(grand_total=Sum('total'))['grand_total']
        debit_notes = debitnote.objects.filter(company=cmp)
        grand_total_debit_notes = debit_notes.aggregate(grand_total=Sum('grandtotal'))['grand_total']
        total_subtotal_bills = Bill.objects.filter(Company=cmp).aggregate(total_subtotal=Sum('Sub_Total'))['total_subtotal']
        total_subtotal_recurring_bills = recurring_bills.aggregate(total_subtotal=Sum('sub_total'))['total_subtotal']
       
        grand_total_recurring_bills = Decimal(grand_total_recurring_bills or 0)
        grand_total_debit_notes = Decimal(grand_total_debit_notes or 0)
        total_subtotal_bills = Decimal(total_subtotal_bills or 0)
        total_subtotal_recurring_bills = Decimal(total_subtotal_recurring_bills or 0)
        grand_total_bills = Decimal(grand_total_bills or 0)

        # Calculate the total sale
        total_purchase = (grand_total_bills + grand_total_recurring_bills) - grand_total_debit_notes
        total_with_debitnote = (grand_total_bills + grand_total_recurring_bills ) + grand_total_debit_notes
        
        context = {
            'total_combined_items': total_combined_items,
            'combined_summary_with_total_qty': combined_summary_with_total_qty,
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'grand_total_recurring_bills': grand_total_recurring_bills,
            'grand_total_debit_notes': grand_total_debit_notes,
            'total_subtotal_bills': total_subtotal_bills,
            'total_subtotal_recurring_bills': total_subtotal_recurring_bills,
            'grand_total_bills': grand_total_bills,   # Total of subtotal from Recurring_bills
            'total_purchase': total_purchase,
            'total_with_debitnote': total_with_debitnote
        }

        return render(request, 'zohomodules/Reports/purchase_by_item.html', context)
    else:
        return redirect('/')
    

def customize_purchasebyitem(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)
        
        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')
            
            from_date = datetime.strptime(from_date, '%Y-%m-%d')
            to_date = datetime.strptime(to_date, '%Y-%m-%d')
            
            bills = Bill.objects.filter(Company=cmp, Bill_Date__range=[from_date, to_date])
            recurring_bills = Recurring_bills.objects.filter(company=cmp, rec_bill_date__range=[from_date, to_date])
            debit_notes = debitnote.objects.filter(company=cmp, debitnote_date__range=[from_date, to_date])
        else:
            bills = Bill.objects.filter(Company=cmp)
            recurring_bills = Recurring_bills.objects.filter(company=cmp)
            debit_notes = debitnote.objects.filter(company=cmp)
        
        # Retrieve data for bill items
        bill_items_summary = BillItems.objects.filter(Bills__Company=cmp, Bills__Bill_Date__range=[from_date, to_date]) \
                            .values('item_id__item_name', 'item_name') \
                            .annotate(total_count=Sum('qty'),
                                      price=Sum('total') / Sum('qty'))
        
        # Retrieve data for recurring bill items
        recurring_bill_items_summary = RecurrItemsList.objects.filter(recurr_bill_id__company=cmp,
                                                                       recurr_bill_id__rec_bill_date__range=[from_date, to_date]) \
                                        .values('item_id__item_name', 'item_name') \
                                        .annotate(total_count=Sum('qty'),
                                                  price=Sum('total') / Sum('qty'))
        
        # Retrieve data for debit note items
        debit_note_items_summary = debitnote_item.objects.filter(debit_note__company=cmp, debit_note__debitnote_date__range=[from_date, to_date]) \
                                     .values('item__item_name') \
                                     .annotate(total_count=Sum('quantity'),
                                               price=Sum('total') / Sum('quantity'))

        # Combine summaries
        combined_summary = list(bill_items_summary) + list(recurring_bill_items_summary) + list(debit_note_items_summary)

        # Aggregate combined summary data to get unique items with total counts and prices
        unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

        for summary in combined_summary:
           item_name = summary.get('item_id__item_name')
           if item_name:
              unique_items[item_name]['total_count'] += summary.get('total_count', 0)
              unique_items[item_name]['price'] += summary.get('price', 0)
           else:
              item_name = summary.get('item__item_name')
              if item_name:
                 unique_items[item_name]['total_count'] += summary.get('total_count', 0)
                 unique_items[item_name]['price'] += summary.get('price', 0)

        # Calculate total amounts
        for item_name, item_info in unique_items.items():
            item_info['total_amount'] = item_info['total_count'] * item_info['price']

        # Convert unique items dictionary to a list
        combined_summary_with_total_qty = [
            {'item_name': item_name, **item_info}
            for item_name, item_info in unique_items.items()
        ]

        total_combined_items = len(unique_items)
        grand_total_bills = bills.aggregate(grand_total=Sum('Grand_Total'))['grand_total']
        grand_total_recurring_bills = recurring_bills.aggregate(grand_total=Sum('total'))['grand_total']
        grand_total_debit_notes = debit_notes.aggregate(grand_total=Sum('grandtotal'))['grand_total']
        total_subtotal_bills = bills.aggregate(total_subtotal=Sum('Sub_Total'))['total_subtotal']
        total_subtotal_recurring_bills = recurring_bills.aggregate(total_subtotal=Sum('sub_total'))['total_subtotal']

        grand_total_recurring_bills = Decimal(grand_total_recurring_bills or 0)
        grand_total_debit_notes = Decimal(grand_total_debit_notes or 0)
        total_subtotal_bills = Decimal(total_subtotal_bills or 0)
        total_subtotal_recurring_bills = Decimal(total_subtotal_recurring_bills or 0)
        grand_total_bills = Decimal(grand_total_bills or 0)

        total_purchase = (grand_total_bills + grand_total_recurring_bills) - grand_total_debit_notes
        total_with_debitnote = (grand_total_bills + grand_total_recurring_bills) + grand_total_debit_notes

        context = {
            'total_combined_items': total_combined_items,
            'combined_summary_with_total_qty': combined_summary_with_total_qty,
            'cmp': cmp,
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'grand_total_bills': grand_total_bills,
            'grand_total_recurring_bills': grand_total_recurring_bills,
            'grand_total_debit_notes': grand_total_debit_notes,
            'total_subtotal_bills': total_subtotal_bills,
            'total_subtotal_recurring_bills': total_subtotal_recurring_bills,
            'total_purchase': total_purchase,
            'total_with_debitnote': total_with_debitnote,
            'from_date': from_date,
            'to_date': to_date,
            'debit_notes': debit_notes,  # Add debit notes to context
        }
        return render(request, 'zohomodules/Reports/purchase_by_item.html', context)
    else:
        return redirect('/')


def purchase_by_item_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.filter(company=cmp, status='New')

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                from_date = request.POST['start']
                to_date = request.POST['end']

                if from_date and to_date:
                    from_date = timezone.make_aware(datetime.strptime(from_date, '%Y-%m-%d'))
                    to_date = timezone.make_aware(datetime.strptime(to_date, '%Y-%m-%d'))

                    print("Parsed from_date:", from_date)
                    print("Parsed to_date:", to_date)
                   
                    bills = Bill.objects.filter(Company=cmp, Bill_Date__range=[from_date, to_date])
                    recurring_bills = Recurring_bills.objects.filter(company=cmp, rec_bill_date__range=[from_date, to_date])
                    debit_notes = debitnote.objects.filter(company=cmp, debitnote_date__range=[from_date, to_date])
                else:
                    bills = Bill.objects.filter(Company=cmp)
                    recurring_bills = Recurring_bills.objects.filter(company=cmp)
                    debit_notes = debitnote.objects.filter(company=cmp)

                bill_items_summary = BillItems.objects.filter(Bills__Company=cmp, Bills__Bill_Date__range=[from_date, to_date]) \
                            .values('item_id__item_name') \
                            .annotate(total_count=Sum('qty'),
                                      price=Sum('total') / Sum('qty'))
        
                recurring_bill_items_summary = RecurrItemsList.objects.filter(recurr_bill_id__company=cmp,
                                                                       recurr_bill_id__rec_bill_date__range=[from_date, to_date]) \
                                        .values('item_id__item_name') \
                                        .annotate(total_count=Sum('qty'),
                                                  price=Sum('total') / Sum('qty'))
        
                debit_note_items_summary = debitnote_item.objects.filter(debit_note__company=cmp, debit_note__debitnote_date__range=[from_date, to_date]) \
                                     .values('item__item_name') \
                                     .annotate(total_count=Sum('quantity'),
                                               price=Sum('total') / Sum('quantity'))

                combined_summary = list(bill_items_summary) + list(recurring_bill_items_summary) + list(debit_note_items_summary)

                unique_items = defaultdict(lambda: {'total_count': 0, 'price': 0})

                for summary in combined_summary:
                    item_name = summary.get('item_id__item_name')
                    if item_name:
                       unique_items[item_name]['total_count'] += summary.get('total_count', 0)
                       unique_items[item_name]['price'] += summary.get('price', 0)
                    else:
                       item_name = summary.get('item__item_name')
                       if item_name:
                          unique_items[item_name]['total_count'] += summary.get('total_count', 0)
                          unique_items[item_name]['price'] += summary.get('price', 0)

                for item_name, item_info in unique_items.items():
                    item_info['total_amount'] = item_info['total_count'] * item_info['price']

                combined_summary_with_total_qty = [
                    {'item_name': item_name, **item_info}
                    for item_name, item_info in unique_items.items()
                ]

                total_combined_items = len(unique_items)

                grand_total_bills = bills.aggregate(grand_total=Sum('Grand_Total'))['grand_total']
                grand_total_recurring_bills = recurring_bills.aggregate(grand_total=Sum('total'))['grand_total']
                grand_total_debit_notes = debit_notes.aggregate(grand_total=Sum('grandtotal'))['grand_total']
                total_subtotal_bills = bills.aggregate(total_subtotal=Sum('Sub_Total'))['total_subtotal']
                total_subtotal_recurring_bills = recurring_bills.aggregate(total_subtotal=Sum('sub_total'))['total_subtotal']

                grand_total_recurring_bills = Decimal(grand_total_recurring_bills or 0)
                grand_total_debit_notes = Decimal(grand_total_debit_notes or 0)
                total_subtotal_bills = Decimal(total_subtotal_bills or 0)
                total_subtotal_recurring_bills = Decimal(total_subtotal_recurring_bills or 0)
                grand_total_bills = Decimal(grand_total_bills or 0)

                total_purchase = (grand_total_bills + grand_total_recurring_bills) - grand_total_debit_notes
                total_with_debitnote = (grand_total_bills + grand_total_recurring_bills) + grand_total_debit_notes

                context = {
                    'total_combined_items': total_combined_items,
                    'combined_summary_with_total_qty': combined_summary_with_total_qty,
                    'grand_total_bills': grand_total_bills,
                    'grand_total_recurring_bills': grand_total_recurring_bills,
                    'grand_total_debit_notes': grand_total_debit_notes,
                    'total_subtotal_bills': total_subtotal_bills,
                    'total_subtotal_recurring_bills': total_subtotal_recurring_bills,
                    'total_purchase': total_purchase,
                    'total_with_debitnote': total_with_debitnote,
                    'from_date': from_date if 'from_date' in locals() else None,
                    'to_date': to_date if 'to_date' in locals() else None,
                    'debit_notes': debit_notes,
                    'cmp': cmp,
                    'details': dash_details,
                    'log_details': log_details,
                }

                template_path = 'zohomodules/Reports/purchase_by_item_pdf.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Purchase_item_report'
                subject = 'Purchase item report'

                email_body = (
                    f"Hi,\n\n"
                    f"Please find the attached Sales By Report.\n\n"
                    f"{email_message}\n\n"
                    f"--\n"
                    f"Regards,\n"
                    f"{cmp.company_name}\n"
                    f"{cmp.address}\n"
                    f"{cmp.state} - {cmp.country}\n"
                    f"{cmp.contact}"
                )

                email = EmailMsg(subject, email_body, from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales By Report details have been shared via email successfully!')
                return redirect(purchase_by_item)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(purchase_by_item)
            
            
def cashflowreport(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        reportData = []
        totCashIn = 0
        totCashOut = 0
        bal = 0

        cash = CashInHand.objects.filter(company=dash_details)
        # bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
        inv = invoice.objects.filter(company = dash_details, status__iexact='Saved',payment_method__iexact='Cash', advanced_paid__gt = 0)
        crdNt = Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0)
        recInv = RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0)
        sordr= SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash').exclude(advanced_paid=0)
        rtInv= retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash").exclude(retainer__advance=0)

        bill= Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash').exclude(Advance_amount_Paid=0)
        rcrbl= Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash').exclude(paid=0)
        pordr= PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash').exclude(advanced_paid=0)
        dbtnt= debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0)
        
        empLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED")
        empAddLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED")
        lnRpy = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID")

        loanAcc = loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash')
        lonAddAcc = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan")
        lonAccEmi = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid")

        pay_recieved=Payment_recieved.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(total_payment=0)
        pay_made=payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(total=0)

        expense = Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash')
        rec_expense = Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash')


        if cash:
            for cs in cash:
                if cs.adjustment == 'Add Cash':
                    partyName = ""
                    date = cs.date
                    ref = ""
                    type = 'ADD CASH'
                    mIn = cs.amount
                    mOut = 0
                    totCashIn += float(cs.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)
                else:
                    partyName = ""
                    date = cs.date
                    ref = ""
                    type = 'REDUCE CASH'
                    mIn = 0
                    mOut = cs.amount
                    totCashOut += float(cs.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

        if inv:
            for i in inv:
                partyName = i.customer.first_name + " " + i.customer.last_name
                date = i.date
                ref = i.invoice_number
                type = 'INVOICE'
                mIn = i.advanced_paid
                mOut = 0
                totCashIn += float(i.advanced_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if crdNt:
            for cr in crdNt:
                partyName = cr.customer.first_name +" "+ cr.customer.last_name
                date = cr.credit_note_date
                ref = cr.credit_note_number
                type = 'CREDIT NOTE'
                mOut = cr.advance_paid
                mIn = 0
                totCashOut += float(cr.advance_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if recInv:
            for rc in recInv:
                partyName = rc.customer.first_name +" "+ rc.customer.last_name
                date = rc.start_date
                ref = rc.rec_invoice_no
                type = 'RECURRING INVOICE'
                mIn = rc.advance_paid
                mOut = 0
                totCashIn += float(rc.advance_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
        
        if sordr:
            for so in sordr:
                partyName = so.customer.first_name +" "+ so.customer.last_name
                date = so.sales_order_date
                ref = so.sales_order_number
                type = 'SALES ORDER'
                mIn = so.advanced_paid
                mOut = 0
                totCashIn += float(so.advanced_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rtInv:
            for rt in rtInv:
                partyName = rt.retainer.customer_name.first_name+" "+ rt.retainer.customer_name.last_name
                date = rt.retainer.retainer_invoice_date
                ref = rt.retainer.retainer_invoice_number
                type = 'RETAINER INVOICE'
                mIn = rt.retainer.advance
                mOut = 0
                totCashIn += float(rt.retainer.advance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
        
        if bill:
            for bl in bill:
                partyName = bl.Vendor.first_name +" "+ bl.Vendor.last_name
                date = bl.Bill_Date
                ref = bl.Bill_Number
                type = 'BILL'
                mOut = bl.Advance_amount_Paid
                mIn = 0
                totCashOut += float(bl.Advance_amount_Paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rcrbl:
            for rb in rcrbl:
                partyName = rb.vend_name
                date = rb.rec_bill_date
                ref = rb.recc_bill_no
                type = 'RECURRING BILL'
                mOut = rb.paid
                mIn = 0
                totCashOut += float(rb.paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pordr:
            for po in pordr:
                partyName = po.vendor.first_name +" "+ po.vendor.last_name
                date = po.purchase_order_date
                ref = po.sales_order_number
                type = 'PURCHASE ORDER'
                mOut = po.advanced_paid
                mIn = 0
                totCashOut += float(po.advanced_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if dbtnt:
            for db in dbtnt:
                partyName = db.vendor.first_name +" "+ db.vendor.last_name
                date = db.debitnote_date
                ref = db.debitnote_no
                type = 'DEBIT NOTE'
                mIn = db.advance_paid
                mOut = 0
                totCashIn += float(db.advance_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if empLoan:
            for ln in empLoan:
                partyName = ln.employee.first_name +" "+ ln.employee.last_name
                date = ln.emp.Loandate
                ref = ""
                type = 'EMPLOYEE LOAN'
                mOut = ln.principal_amount
                mIn = 0
                totCashOut += float(ln.principal_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if empAddLoan:
            for al in empAddLoan:
                partyName = al.employee.first_name +" "+ al.employee.last_name
                date = al.payment_date
                ref = ""
                type = 'EMPLOYEE ADDITIONAL LOAN'
                mOut = al.total_payment
                mIn = 0
                totCashOut += float(al.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lnRpy:
            for lr in lnRpy:
                partyName = lr.employee.first_name +" "+ lr.employee.last_name
                date = lr.payment_date
                ref = ""
                type = 'EMI PAID'
                mIn = lr.total_payment
                mOut = 0
                totCashIn += float(lr.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if loanAcc:
            for la in loanAcc:
                partyName = la.bank_holder.customer_name
                date = la.loan_date
                ref = ""
                type = 'LOAN'
                mOut = 0
                mIn = la.loan_amount
                totCashIn += float(la.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lonAddAcc:
            for l in lonAddAcc:
                partyName = l.loan.bank_holder.customer_name
                date = l.payment_date
                ref = ""
                type = 'ADDITIONAL LOAN'
                mOut = 0
                mIn = l.total_amount
                totCashIn += float(l.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lonAccEmi:
            for le in lonAccEmi:
                partyName = le.loan.bank_holder.customer_name
                date = le.payment_date
                ref = ""
                type = 'EMI PAID'
                mIn = 0
                mOut = le.total_amount
                totCashOut += float(le.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pay_recieved:
            for pr in pay_recieved:
                partyName = pr.customer.first_name+" "+pr.customer.last_name
                date = pr.payment_date
                ref = pr.payment_number
                type = 'PAYMENT RECEIVED'
                mOut = 0
                mIn = pr.total_payment
                totCashIn += float(pr.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pay_made:
            for pm in pay_made:
                partyName = pm.vendor.first_name+" "+pm.vendor.last_name
                date = pm.payment_date
                ref = pm.payment_no
                type = 'PAYMENT MADE'
                mIn = 0
                mOut = pm.total
                totCashOut += float(pm.total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if expense:
            for ex in expense:
                partyName = ex.vendor_name
                date = ex.date
                ref = ex.expense_number
                type = 'EXPENSE'
                mIn = 0
                mOut = ex.amount
                totCashOut += float(ex.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rec_expense:
            for rex in rec_expense:
                partyName = rex.vendor.first_name+" "+rex.vendor.last_name
                date = rex.exp_date
                ref = rex.Expense_Number
                type = 'RECURRING EXPENSE'
                mIn = 0
                mOut = rex.amount
                totCashOut += float(rex.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        bal = totCashIn - totCashOut

        context = {
            'allmodules':allmodules, 'details': dash_details, 'reportData':reportData, 'totalCashIn':totCashIn, 'totalCashOut':totCashOut, 'BALANCE':bal,
            'startDate':None, 'endDate':None
        }
        return render(request,'zohomodules/Reports/cashflowreport.html', context)
    else:
        return redirect('/')


def cashflowreport_customized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details).company
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules= ZohoModules.objects.get(company=dash_details,status='New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            currentDate = datetime.today()
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

        reportData = []
        totCashIn = 0
        totCashOut = 0
        bal = 0

        cash = CashInHand.objects.filter(company=dash_details,date__range = [startDate, endDate])
        # bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
        inv = invoice.objects.filter(company = dash_details, status__iexact='Saved',payment_method__iexact='Cash', advanced_paid__gt = 0,date__range = [startDate, endDate])
        crdNt = Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0,credit_note_date__range = [startDate, endDate])
        recInv = RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0,start_date__range = [startDate, endDate])
        sordr= SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash',sales_order_date__range = [startDate, endDate]).exclude(advanced_paid=0)
        rtInv= retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash",retainer__retainer_invoice_date__range = [startDate, endDate]).exclude(retainer__advance=0)

        bill= Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash',Bill_Date__range = [startDate, endDate]).exclude(Advance_amount_Paid=0)
        rcrbl= Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash',rec_bill_date__range = [startDate, endDate]).exclude(paid=0)
        pordr= PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash',purchase_order_date__range = [startDate, endDate]).exclude(advanced_paid=0)
        dbtnt= debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash',debitnote_date__range = [startDate, endDate]).exclude(advance_paid=0)
        
        empLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED",emp__Loandate__range = [startDate, endDate])
        empAddLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED",payment_date__range = [startDate, endDate])
        lnRpy = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID",payment_date__range = [startDate, endDate])

        loanAcc = loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash',loan_date__range = [startDate, endDate])
        lonAddAcc = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan",payment_date__range = [startDate, endDate])
        lonAccEmi = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid",payment_date__range = [startDate, endDate])

        pay_recieved=Payment_recieved.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash',payment_date__range = [startDate, endDate]).exclude(total_payment=0)
        pay_made=payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash',payment_date__range = [startDate, endDate]).exclude(total=0)

        expense = Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash',date__range = [startDate, endDate])
        rec_expense = Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash',exp_date__range = [startDate, endDate])


        if cash:
            for cs in cash:
                if cs.adjustment == 'Add Cash':
                    partyName = ""
                    date = cs.date
                    ref = ""
                    type = 'ADD CASH'
                    mIn = cs.amount
                    mOut = 0
                    totCashIn += float(cs.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)
                else:
                    partyName = ""
                    date = cs.date
                    ref = ""
                    type = 'REDUCE CASH'
                    mIn = 0
                    mOut = cs.amount
                    totCashOut += float(cs.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

        if inv:
            for i in inv:
                partyName = i.customer.first_name + " " + i.customer.last_name
                date = i.date
                ref = i.invoice_number
                type = 'INVOICE'
                mIn = i.advanced_paid
                mOut = 0
                totCashIn += float(i.advanced_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if crdNt:
            for cr in crdNt:
                partyName = cr.customer.first_name +" "+ cr.customer.last_name
                date = cr.credit_note_date
                ref = cr.credit_note_number
                type = 'CREDIT NOTE'
                mOut = cr.advance_paid
                mIn = 0
                totCashOut += float(cr.advance_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if recInv:
            for rc in recInv:
                partyName = rc.customer.first_name +" "+ rc.customer.last_name
                date = rc.start_date
                ref = rc.rec_invoice_no
                type = 'RECURRING INVOICE'
                mIn = rc.advance_paid
                mOut = 0
                totCashIn += float(rc.advance_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
        
        if sordr:
            for so in sordr:
                partyName = so.customer.first_name +" "+ so.customer.last_name
                date = so.sales_order_date
                ref = so.sales_order_number
                type = 'SALES ORDER'
                mIn = so.advanced_paid
                mOut = 0
                totCashIn += float(so.advanced_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rtInv:
            for rt in rtInv:
                partyName = rt.retainer.customer_name.first_name+" "+ rt.retainer.customer_name.last_name
                date = rt.retainer.retainer_invoice_date
                ref = rt.retainer.retainer_invoice_number
                type = 'RETAINER INVOICE'
                mIn = rt.retainer.advance
                mOut = 0
                totCashIn += float(rt.retainer.advance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)
        
        if bill:
            for bl in bill:
                partyName = bl.Vendor.first_name +" "+ bl.Vendor.last_name
                date = bl.Bill_Date
                ref = bl.Bill_Number
                type = 'BILL'
                mOut = bl.Advance_amount_Paid
                mIn = 0
                totCashOut += float(bl.Advance_amount_Paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rcrbl:
            for rb in rcrbl:
                partyName = rb.vend_name
                date = rb.rec_bill_date
                ref = rb.recc_bill_no
                type = 'RECURRING BILL'
                mOut = rb.paid
                mIn = 0
                totCashOut += float(rb.paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pordr:
            for po in pordr:
                partyName = po.vendor.first_name +" "+ po.vendor.last_name
                date = po.purchase_order_date
                ref = po.sales_order_number
                type = 'PURCHASE ORDER'
                mOut = po.advanced_paid
                mIn = 0
                totCashOut += float(po.advanced_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if dbtnt:
            for db in dbtnt:
                partyName = db.vendor.first_name +" "+ db.vendor.last_name
                date = db.debitnote_date
                ref = db.debitnote_no
                type = 'DEBIT NOTE'
                mIn = db.advance_paid
                mOut = 0
                totCashIn += float(db.advance_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if empLoan:
            for ln in empLoan:
                partyName = ln.employee.first_name +" "+ ln.employee.last_name
                date = ln.emp.Loandate
                ref = ""
                type = 'EMPLOYEE LOAN'
                mOut = ln.principal_amount
                mIn = 0
                totCashOut += float(ln.principal_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if empAddLoan:
            for al in empAddLoan:
                partyName = al.employee.first_name +" "+ al.employee.last_name
                date = al.payment_date
                ref = ""
                type = 'EMPLOYEE ADDITIONAL LOAN'
                mOut = al.total_payment
                mIn = 0
                totCashOut += float(al.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lnRpy:
            for lr in lnRpy:
                partyName = lr.employee.first_name +" "+ lr.employee.last_name
                date = lr.payment_date
                ref = ""
                type = 'EMI PAID'
                mIn = lr.total_payment
                mOut = 0
                totCashIn += float(lr.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if loanAcc:
            for la in loanAcc:
                partyName = la.bank_holder.customer_name
                date = la.loan_date
                ref = ""
                type = 'LOAN'
                mOut = 0
                mIn = la.loan_amount
                totCashIn += float(la.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lonAddAcc:
            for l in lonAddAcc:
                partyName = l.loan.bank_holder.customer_name
                date = l.payment_date
                ref = ""
                type = 'ADDITIONAL LOAN'
                mOut = 0
                mIn = l.total_amount
                totCashIn += float(l.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lonAccEmi:
            for le in lonAccEmi:
                partyName = le.loan.bank_holder.customer_name
                date = le.payment_date
                ref = ""
                type = 'EMI PAID'
                mIn = 0
                mOut = le.total_amount
                totCashOut += float(le.total_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pay_recieved:
            for pr in pay_recieved:
                partyName = pr.customer.first_name+" "+pr.customer.last_name
                date = pr.payment_date
                ref = pr.payment_number
                type = 'PAYMENT RECEIVED'
                mOut = 0
                mIn = pr.total_payment
                totCashIn += float(pr.total_payment)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pay_made:
            for pm in pay_made:
                partyName = pm.vendor.first_name+" "+pm.vendor.last_name
                date = pm.payment_date
                ref = pm.payment_no
                type = 'PAYMENT MADE'
                mIn = 0
                mOut = pm.total
                totCashOut += float(pm.total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if expense:
            for ex in expense:
                partyName = ex.vendor_name
                date = ex.date
                ref = ex.expense_number
                type = 'EXPENSE'
                mIn = 0
                mOut = ex.amount
                totCashOut += float(ex.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rec_expense:
            for rex in rec_expense:
                partyName = rex.vendor.first_name+" "+rex.vendor.last_name
                date = rex.exp_date
                ref = rex.Expense_Number
                type = 'RECURRING EXPENSE'
                mIn = 0
                mOut = rex.amount
                totCashOut += float(rex.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        bal = totCashIn - totCashOut

        context = {
            'allmodules':allmodules,
            'details': dash_details, 
            'reportData':reportData, 
            'totalCashIn':totCashIn, 
            'totalCashOut':totCashOut, 
            'BALANCE':bal,
            'startDate':startDate, 
            'endDate':endDate,
            'currentDate':None,
            'log_details': log_details,              
        }
               
        return render(request,'zohomodules/Reports/cashflowreport.html', context)
    else:
        return redirect('/')


def shareCashFlowReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        # Determine user type and fetch company details
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            dash_details = StaffDetails.objects.get(login_details=log_details).company

        if request.method == 'POST':
            # Extract email addresses and message from POST data
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            # Extract date range from POST data
            startDate = request.POST['start']
            endDate = request.POST['end']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            if startDate is None and endDate is None:
                currentDate = datetime.today().strftime("%d-%m-%Y")
            else:
                currentDate = None

            reportData = []
            totCashIn = 0
            totCashOut = 0
            bal = 0

            if startDate is None and endDate is None:

                cash = CashInHand.objects.filter(company=dash_details)
                # bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                inv = invoice.objects.filter(company = dash_details, status__iexact='Saved',payment_method__iexact='Cash', advanced_paid__gt = 0)
                crdNt = Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0)
                recInv = RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0)
                sordr= SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash').exclude(advanced_paid=0)
                rtInv= retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash").exclude(retainer__advance=0)

                bill= Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash').exclude(Advance_amount_Paid=0)
                rcrbl= Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash').exclude(paid=0)
                pordr= PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash').exclude(advanced_paid=0)
                dbtnt= debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash').exclude(advance_paid=0)
                
                empLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED")
                empAddLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED")
                lnRpy = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID")

                loanAcc = loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash')
                lonAddAcc = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan")
                lonAccEmi = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid")

                pay_recieved=Payment_recieved.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(total_payment=0)
                pay_made=payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash').exclude(total=0)

                expense = Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash')
                rec_expense = Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash')
            
            else:

                cash = CashInHand.objects.filter(company=dash_details,date__range = [startDate, endDate])
                # bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                inv = invoice.objects.filter(company = dash_details, status__iexact='Saved',payment_method__iexact='Cash', advanced_paid__gt = 0,date__range = [startDate, endDate])
                crdNt = Credit_Note.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0,credit_note_date__range = [startDate, endDate])
                recInv = RecurringInvoice.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash', advance_paid__gt = 0,start_date__range = [startDate, endDate])
                sordr= SaleOrder.objects.filter(company=dash_details,status__iexact='Save',payment_method__iexact='Cash',sales_order_date__range = [startDate, endDate]).exclude(advanced_paid=0)
                rtInv= retainer_payment_details.objects.filter(retainer__company=dash_details,retainer__is_sent=True,payment_opt="Cash",retainer__retainer_invoice_date__range = [startDate, endDate]).exclude(retainer__advance=0)

                bill= Bill.objects.filter(Company=dash_details,Status__iexact="Save",Payment_Method__iexact='Cash',Bill_Date__range = [startDate, endDate]).exclude(Advance_amount_Paid=0)
                rcrbl= Recurring_bills.objects.filter(company=dash_details,status__iexact='save',payment_type__iexact='Cash',rec_bill_date__range = [startDate, endDate]).exclude(paid=0)
                pordr= PurchaseOrder.objects.filter(company=dash_details,status__iexact="Save",payment_method__iexact='Cash',purchase_order_date__range = [startDate, endDate]).exclude(advanced_paid=0)
                dbtnt= debitnote.objects.filter(company=dash_details,status__iexact='Saved',payment_method__iexact='Cash',debitnote_date__range = [startDate, endDate]).exclude(advance_paid=0)
                
                empLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="LOAN ISSUED",emp__Loandate__range = [startDate, endDate])
                empAddLoan = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="ADDITIONAL LOAN ISSUED",payment_date__range = [startDate, endDate])
                lnRpy = EmployeeLoanRepayment.objects.filter(company=dash_details,payment_method__iexact='Cash',particular__iexact="EMI PAID",payment_date__range = [startDate, endDate])

                loanAcc = loan_account.objects.filter(company=dash_details,status__iexact="Active",payment_method__iexact='Cash',loan_date__range = [startDate, endDate])
                lonAddAcc = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="Additional Loan",payment_date__range = [startDate, endDate])
                lonAccEmi = LoanRepayemnt.objects.filter(company=dash_details,payment_method__iexact='Cash',type__iexact="EMI paid",payment_date__range = [startDate, endDate])

                pay_recieved=Payment_recieved.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash',payment_date__range = [startDate, endDate]).exclude(total_payment=0)
                pay_made=payment_made.objects.filter(company=dash_details,status__iexact="Saved",payment_method__iexact='Cash',payment_date__range = [startDate, endDate]).exclude(total=0)

                expense = Expense.objects.filter(company=dash_details,status__iexact="Save",payment_type__iexact='Cash',date__range = [startDate, endDate])
                rec_expense = Recurring_Expense.objects.filter(company=dash_details,status__iexact="Active",Payment_Method__iexact='Cash',exp_date__range = [startDate, endDate])


            if cash:
                for cs in cash:
                    if cs.adjustment == 'Add Cash':
                        partyName = ""
                        date = cs.date
                        ref = ""
                        type = 'ADD CASH'
                        mIn = cs.amount
                        mOut = 0
                        totCashIn += float(cs.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
                    else:
                        partyName = ""
                        date = cs.date
                        ref = ""
                        type = 'REDUCE CASH'
                        mIn = 0
                        mOut = cs.amount
                        totCashOut += float(cs.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

            if inv:
                for i in inv:
                    partyName = i.customer.first_name + " " + i.customer.last_name
                    date = i.date
                    ref = i.invoice_number
                    type = 'INVOICE'
                    mIn = i.advanced_paid
                    mOut = 0
                    totCashIn += float(i.advanced_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if crdNt:
                for cr in crdNt:
                    partyName = cr.customer.first_name +" "+ cr.customer.last_name
                    date = cr.credit_note_date
                    ref = cr.credit_note_number
                    type = 'CREDIT NOTE'
                    mOut = cr.advance_paid
                    mIn = 0
                    totCashOut += float(cr.advance_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if recInv:
                for rc in recInv:
                    partyName = rc.customer.first_name +" "+ rc.customer.last_name
                    date = rc.start_date
                    ref = rc.rec_invoice_no
                    type = 'RECURRING INVOICE'
                    mIn = rc.advance_paid
                    mOut = 0
                    totCashIn += float(rc.advance_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)
            
            if sordr:
                for so in sordr:
                    partyName = so.customer.first_name +" "+ so.customer.last_name
                    date = so.sales_order_date
                    ref = so.sales_order_number
                    type = 'SALES ORDER'
                    mIn = so.advanced_paid
                    mOut = 0
                    totCashIn += float(so.advanced_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if rtInv:
                for rt in rtInv:
                    partyName = rt.retainer.customer_name.first_name+" "+ rt.retainer.customer_name.last_name
                    date = rt.retainer.retainer_invoice_date
                    ref = rt.retainer.retainer_invoice_number
                    type = 'RETAINER INVOICE'
                    mIn = rt.retainer.advance
                    mOut = 0
                    totCashIn += float(rt.retainer.advance)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)
            
            if bill:
                for bl in bill:
                    partyName = bl.Vendor.first_name +" "+ bl.Vendor.last_name
                    date = bl.Bill_Date
                    ref = bl.Bill_Number
                    type = 'BILL'
                    mOut = bl.Advance_amount_Paid
                    mIn = 0
                    totCashOut += float(bl.Advance_amount_Paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if rcrbl:
                for rb in rcrbl:
                    partyName = rb.vend_name
                    date = rb.rec_bill_date
                    ref = rb.recc_bill_no
                    type = 'RECURRING BILL'
                    mOut = rb.paid
                    mIn = 0
                    totCashOut += float(rb.paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if pordr:
                for po in pordr:
                    partyName = po.vendor.first_name +" "+ po.vendor.last_name
                    date = po.purchase_order_date
                    ref = po.sales_order_number
                    type = 'PURCHASE ORDER'
                    mOut = po.advanced_paid
                    mIn = 0
                    totCashOut += float(po.advanced_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if dbtnt:
                for db in dbtnt:
                    partyName = db.vendor.first_name +" "+ db.vendor.last_name
                    date = db.debitnote_date
                    ref = db.debitnote_no
                    type = 'DEBIT NOTE'
                    mIn = db.advance_paid
                    mOut = 0
                    totCashIn += float(db.advance_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if empLoan:
                for ln in empLoan:
                    partyName = ln.employee.first_name +" "+ ln.employee.last_name
                    date = ln.emp.Loandate
                    ref = ""
                    type = 'EMPLOYEE LOAN'
                    mOut = ln.principal_amount
                    mIn = 0
                    totCashOut += float(ln.principal_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if empAddLoan:
                for al in empAddLoan:
                    partyName = al.employee.first_name +" "+ al.employee.last_name
                    date = al.payment_date
                    ref = ""
                    type = 'EMPLOYEE ADDITIONAL LOAN'
                    mOut = al.total_payment
                    mIn = 0
                    totCashOut += float(al.total_payment)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if lnRpy:
                for lr in lnRpy:
                    partyName = lr.employee.first_name +" "+ lr.employee.last_name
                    date = lr.payment_date
                    ref = ""
                    type = 'EMI PAID'
                    mIn = lr.total_payment
                    mOut = 0
                    totCashIn += float(lr.total_payment)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if loanAcc:
                for la in loanAcc:
                    partyName = la.bank_holder.customer_name
                    date = la.loan_date
                    ref = ""
                    type = 'LOAN'
                    mOut = 0
                    mIn = la.loan_amount
                    totCashIn += float(la.loan_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if lonAddAcc:
                for l in lonAddAcc:
                    partyName = l.loan.bank_holder.customer_name
                    date = l.payment_date
                    ref = ""
                    type = 'ADDITIONAL LOAN'
                    mOut = 0
                    mIn = l.total_amount
                    totCashIn += float(l.total_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if lonAccEmi:
                for le in lonAccEmi:
                    partyName = le.loan.bank_holder.customer_name
                    date = le.payment_date
                    ref = ""
                    type = 'EMI PAID'
                    mIn = 0
                    mOut = le.total_amount
                    totCashOut += float(le.total_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if pay_recieved:
                for pr in pay_recieved:
                    partyName = pr.customer.first_name+" "+pr.customer.last_name
                    date = pr.payment_date
                    ref = pr.payment_number
                    type = 'PAYMENT RECEIVED'
                    mOut = 0
                    mIn = pr.total_payment
                    totCashIn += float(pr.total_payment)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if pay_made:
                for pm in pay_made:
                    partyName = pm.vendor.first_name+" "+pm.vendor.last_name
                    date = pm.payment_date
                    ref = pm.payment_no
                    type = 'PAYMENT MADE'
                    mIn = 0
                    mOut = pm.total
                    totCashOut += float(pm.total)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if expense:
                for ex in expense:
                    partyName = ex.vendor_name
                    date = ex.date
                    ref = ex.expense_number
                    type = 'EXPENSE'
                    mIn = 0
                    mOut = ex.amount
                    totCashOut += float(ex.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if rec_expense:
                for rex in rec_expense:
                    partyName = rex.vendor.first_name+" "+rex.vendor.last_name
                    date = rex.exp_date
                    ref = rex.Expense_Number
                    type = 'RECURRING EXPENSE'
                    mIn = 0
                    mOut = rex.amount
                    totCashOut += float(rex.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

           

            
            context = {
                'log_details': log_details,
                'companyName': dash_details.company_name,
                'reportData': reportData,
                'totalMoneyIn': totCashIn,
                'totalMoneyOut': totCashOut,
                'startDate': startDate,
                'endDate': endDate,
                'currentDate': currentDate
            }
            

            template_path = 'zohomodules/Reports/cash_flow_Pdf.html'
            template = get_template(template_path)

            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)                            
            pdf = result.getvalue()
            filename = 'Report_CashFlow'
            subject = "Report_CashFlow"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached Report for - Cash Flow. \n{email_message}\n\n--\nRegards,\n{dash_details.company_name}\n{dash_details.address}\n{dash_details.state} - {dash_details.country}\n{dash_details.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            
            email.from_email = settings.EMAIL_HOST_USER 
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            # messages.success(request, 'Report has been shared via email successfully!')
            return redirect(cashflowreport)
            
            
def sales_item_discount_details(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp
        else:
            staff_details = StaffDetails.objects.get(login_details=log_details)
            cmp = staff_details.company
            dash_details = staff_details

        allmodules = ZohoModules.objects.get(company=cmp)
        items = Items.objects.filter(company=cmp)

        reportData = []
        totamt = 0
        totdiscount = 0

        for i in items:
            qIn = 0
            qOut = 0
            discount = 0
            amt = 0

            name = i.item_name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            minstock = i.minimum_stock_to_maintain
            stock_unit_rate = i.opening_stock_per_unit

            invItems = invoiceitems.objects.filter(Items=i)
            recInvItems = Reccurring_Invoice_item.objects.filter(item=i)
            retInvItems = Retaineritems.objects.filter(item=i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)
                    discount += itm.discount
                    amt += itm.total

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)
                    discount += itm.discount
                    amt += itm.total

            if retInvItems:
                for itm in retInvItems:
                    qOut += int(itm.quantity)
                    
                    amt += itm.amount

            totamt += qOut
            totdiscount += discount

            billItems = PurchaseOrderItems.objects.filter(item=i)
            recBillItems = RecurrItemsList.objects.filter(item_id=i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.quantity)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.total_qty)

            closingQty = bQty - qOut + qIn

            det = {
                'name': name,
                'minstock': minstock,
                'stock_unit_rate': stock_unit_rate,
                'bQty': bQty,
                'qtyIn': qIn,
                'qtyOut': qOut,
                'cQty': closingQty,
                'discount': discount,
                'pAmount': pAmt,
                'sAmount': sAmt,
                'amt': amt,
            }
            reportData.append(det)

        context = {
            'allmodules': allmodules,
            'com': cmp,  # Assuming 'com' is supposed to be 'cmp'
            'cmp': cmp,
            'data': reportData,  # Corrected 'data' to 'reportData'
            'reportData': reportData,
            'startDate': None,
            'endDate': None,
            'totamt': totamt,
            'totdiscount': totdiscount,
            'details': dash_details,
            'log_details': log_details,
        }

        return render(request, 'zohomodules/Reports/sales_item_discount_details.html', context)
    else:
        return redirect('/')
    
    
def share_sales_item_Discount_ReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp
        else:
            staff_details = StaffDetails.objects.get(login_details=log_details)
            cmp = staff_details.company
            dash_details = staff_details

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                items = Items.objects.filter(company=cmp)
                allmodules = ZohoModules.objects.get(company=cmp)
                reportData = []
                totamt = 0
                totdiscount = 0

                for i in items:
                    qIn = 0
                    qOut = 0
                    discount = 0
                    amt = 0

                    name = i.item_name
                    bQty = int(i.opening_stock)
                    pAmt = i.purchase_price
                    sAmt = i.selling_price
                    minstock = i.minimum_stock_to_maintain
                    stock_unit_rate = i.opening_stock_per_unit

                    invItems = invoiceitems.objects.filter(Items=i)
                    recInvItems = Reccurring_Invoice_item.objects.filter(item=i)
                    retInvItems = Retaineritems.objects.filter(item=i)

                    if invItems:
                        for itm in invItems:
                            qOut += int(itm.quantity)
                            discount += itm.discount
                            amt += itm.total

                    if recInvItems:
                        for itm in recInvItems:
                            qOut += int(itm.quantity)
                            discount += itm.discount
                            amt += itm.total

                    if retInvItems:
                        for itm in retInvItems:
                            qOut += int(itm.quantity)
                            amt += itm.amount

                    totamt += qOut
                    totdiscount += discount

                    billItems = PurchaseOrderItems.objects.filter(item=i)
                    recBillItems = RecurrItemsList.objects.filter(item_id=i)

                    if billItems:
                        for itm in billItems:
                            qIn += int(itm.quantity)

                    if recBillItems:
                        for itm in recBillItems:
                            qIn += int(itm.total_qty)

                    closingQty = bQty - qOut + qIn

                    det = {
                        'name': name,
                        'minstock': minstock,
                        'stock_unit_rate': stock_unit_rate,
                        'bQty': bQty,
                        'qtyIn': qIn,
                        'qtyOut': qOut,
                        'cQty': closingQty,
                        'discount': discount,
                        'pAmount': pAmt,
                        'sAmount': sAmt,
                        'amt': amt,
                    }
                    reportData.append(det)

                context = {
                    'allmodules': allmodules,
                    'com': cmp,
                    'cmp': cmp,
                    'data': reportData,
                    'reportData': reportData,
                    'startDate': None,
                    'endDate': None,
                    'totamt': totamt,
                    'totdiscount': totdiscount,
                    'details': dash_details,
                    'log_details': log_details,
                }

                template_path = 'zohomodules/Reports/sales_item_discount_pdf.html'
                template = get_template(template_path)
                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                if pdf.err:
                    raise Exception('Error creating PDF document')

                pdf = result.getvalue()
                filename = f'Report__sales_item_Discount_Details.pdf'
                subject = "Report_sales_item_Discount_Details"
                body = f"Hi,\nPlease find the attached Report for - sales item Discount Report.\n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}"

                email = EmailMultiAlternatives(
                    subject,
                    body,
                    settings.EMAIL_HOST_USER,
                    emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully!')
                return redirect(sales_item_discount_details)
        except Exception as e:
            print(e)
            messages.error(request, str(e))
            return redirect(sales_item_discount_details)
            
            
def estimatedetails(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)

       
        allmodules= ZohoModules.objects.get(company = cmp)
        reportData = Estimate.objects.filter(company=cmp)
        total_sales_amount = reportData.aggregate(grand_total=Sum('grand_total'))['grand_total']
        totalCustomer =  reportData.values('customer').distinct().count()
       
       

        
        context = {
        'allmodules':allmodules, 'details':dash_details,'log_details':log_details,'cmp':cmp,'totalCustomer':totalCustomer,'total_sales_amount':total_sales_amount, 'reportData': reportData,}
        return render(request, 'zohomodules/Reports/estimate.html', context)
    else:
        return redirect('/')
        
def shareEstimateReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company
        a= Estimate.objects.filter(company=com)  


        if request.method == 'POST':
            emails_string = request.POST.get('email_ids', '')
            emails_list = [email.strip() for email in emails_string.split(',') if email.strip()]
            email_message = request.POST.get('email_message', '')
            totalCustomer = request.POST.get('count', '')  
            total_sales_amount = request.POST.get('total_sales','')
            start_date = request.POST.get('start_date')
            end_date = request.POST.get('end_date')

            if start_date and end_date:
                itms = Estimate.objects.filter(Q(company=com) & Q(estimate_date__range=[start_date, end_date]))
            else:
                itms = Estimate.objects.filter(company=com)
            total_sales_amount =a.aggregate(grand_total=Sum('grand_total'))['grand_total']
            totalCustomer = Customer.objects.filter(company=com).count()
       

            context = {
                'reportData': itms,
                'cmp': com,
                'companyName': com.company_name,
                'total_sales_amount': total_sales_amount,
                'totalCustomer': totalCustomer,
                'start_date': start_date,
                'end_date': end_date
            }
            

            template_path = 'zohomodules/Reports/Estimate_Details_pdf.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()

            filename = f'Estimate  Details'
            subject = f"Estimate Details"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached Estimate details for\n{email_message}\n\n--\nRegards,\n{com.company_name}\n{com.address}\n{com.state} - {com.country}\n{com.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

           
            return redirect(estimatedetails)
 
    return redirect(estimatedetails)
    
def estimatereportcustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
             
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
             
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=comp_details,status='New')
        data = Customer.objects.filter(company=comp_details)  

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            est = Estimate.objects.filter(company=comp_details)  

            if startDate and endDate:
                est = est.filter(estimate_date__range=[startDate, endDate])


            if trans == 'saved':
                est = est.filter(status='Saved',converted_to_invoice__isnull=True,converted_to_recurring_invoice__isnull=True,converted_to_sales_order__isnull=True)
            elif trans == 'draft':
                est = est.filter(status='Draft',converted_to_invoice__isnull=True,converted_to_recurring_invoice__isnull=True,converted_to_sales_order__isnull=True)
            elif trans == 'Converted_to_Invoice':
                est= est.filter(converted_to_invoice__isnull=False)
            elif trans == 'Converted_to_RecurringInvoice':
                est = est.filter(converted_to_recurring_invoice__isnull=False)
            elif trans == 'Converted_to_salesorder':
                est= est.filter(converted_to_sales_order__isnull=False)
            elif trans == 'all':
                est=est
            
            
                
            total_sales_amount = est.aggregate(total_sales=Sum('grand_total'))['total_sales'] or 0

            # Count unique customers based on the filtered sales orders
            totalCustomer = est.values('customer').distinct().count()

            context = {
                'reportData': est,
                'log_details': log_details,
                'allmodules': allmodules,
                'startDate': startDate, 
                'endDate': endDate, 
                'transaction': trans,
                'total_sales_amount': total_sales_amount,
                'totalCustomer': totalCustomer,
                'cmp':comp_details.company_name,
                'details':dash_details 
            }
            return render(request,'zohomodules/Reports/estimate.html', context)
        else:
           return redirect('/')
           
           
#---------------- Zoho Final Party Report by item - Ginto Shaji - Start-------------------->
def PartyReportByItem(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    items=Items.objects.filter(company=comp_details)
    
    reportData = []
    
    return render(request, 'zohomodules/Reports/PartyReportByItem.html', {               
                'allmodules': allmodules,
                'log_details': log_details,              
                'companyName':comp_details.company_name,
                'reportData':reportData,
                'items':items,
                'startDate':None, 
                'endDate':None,          
            })
    
def PartyReportByItemCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details = log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details = log_details).company
    
    allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            itm = request.GET['item_details']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            if itm != "0":
                item = Items.objects.get(id = itm)
            else:
                messages.warning(request, 'Select an item.!')
                return redirect(PartyReportByItem)

            if item:
                itemId = item.id
                itemName = item.item_name
            else:
                itemName = None
                itemId = None

            items =Items.objects.filter(company = comp_details)
            cust = Customer.objects.filter(company = comp_details)
            vend = Vendor.objects.filter(company = comp_details)

            if startDate is None or endDate is None:
                reportData = []
                totSales = 0
                totPurchase = 0
                
                for c in cust:
                    sales = 0
                    name = c.first_name+' '+c.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price
                    
                    sordr= SaleOrder.objects.filter(company = comp_details, customer = c)
                    for s in sordr:
                        soItems = SalesOrderItems.objects.filter(sales_order= s, item = item)
                        for it in soItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                        
                    inv = invoice.objects.filter(company = comp_details, customer = c)
                    for iv in inv:
                        invItems = invoiceitems.objects.filter(invoice = iv, Items = item)
                        for it in invItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                            
                    recInv = RecurringInvoice.objects.filter(company = comp_details, customer = c)
                    for rec in recInv:
                        recItems = Reccurring_Invoice_item.objects.filter(reccuring_invoice= rec, item = item)
                        for it in recItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                            
                    rtInv = RetainerInvoice.objects.filter(company = comp_details, customer_name = c)
                    for rt in rtInv:
                        rtItems = Retaineritems.objects.filter(retainer = rt, item = item)
                        for it in rtItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                
                    det = {
                       'name': name,
                       'salesQty':sales,
                       'sAmount':sAmt,
                       'pAmount':pAmt,
                       'purchaseQty': 0
                    }
                    reportData.append(det)
            
                for v in vend:
                    purchase = 0
                    name = v.first_name+' '+v.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price

                    pordr= PurchaseOrder.objects.filter(company = comp_details, vendor = v)
                    for p in pordr:
                        poItems = PurchaseOrderItems.objects.filter(purchase_order = p, item = item)
                        for it in poItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)
                    
                    bill= Bill.objects.filter(Company = comp_details, Vendor = v)
                    for b in bill:
                        billItems = BillItems.objects.filter(Bills = b, item_id = item)
                        for it in billItems:
                            purchase += int(it.qty)
                            totPurchase += int(it.qty)
        
                    rcrbl= Recurring_bills.objects.filter(company = comp_details, vendor_details = v)
                    for rc in rcrbl:
                        rcItems = RecurrItemsList.objects.filter(recurr_bill_id = rc, item_id = item)
                        for it in rcItems:
                            purchase += int(it.qty)
                            totPurchase += int(it.qty)
                         
                    det = {
                        'name': name,
                        'salesQty': 0,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': purchase
                    }
                    reportData.append(det)
        
            else:
                reportData = []
                totSales = 0
                totPurchase = 0
                
                for c in cust:
                    sales = 0
                    name = c.first_name+' '+c.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price
                    
                    sordr= SaleOrder.objects.filter(company = comp_details, customer = c,sales_order_date__range=[startDate, endDate])
                    for s in sordr:
                        soItems = SalesOrderItems.objects.filter(sales_order= s, item = item)
                        for it in soItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                        
                    inv = invoice.objects.filter(company = comp_details, customer = c,date__range=[startDate, endDate])
                    for iv in inv:
                        invItems = invoiceitems.objects.filter(invoice = iv, Items = item)
                        for it in invItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                            
                    recInv = RecurringInvoice.objects.filter(company = comp_details, customer = c,start_date__range=[startDate, endDate])
                    for rec in recInv:
                        recItems = Reccurring_Invoice_item.objects.filter(reccuring_invoice= rec, item = item)
                        for it in recItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                            
                    rtInv = RetainerInvoice.objects.filter(company = comp_details, customer_name = c,created_at__range=[startDate, endDate])
                    for rt in rtInv:
                        rtItems = Retaineritems.objects.filter(retainer = rt, item = item)
                        for it in rtItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                
                    det = {
                        'name': name,
                        'salesQty':sales,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': 0
                    }
                    reportData.append(det)
                    
                for v in vend:
                    purchase = 0
                    name = v.first_name+' '+v.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price
                    
                    pordr= PurchaseOrder.objects.filter(company = comp_details, vendor = v,purchase_order_date__range=[startDate, endDate])
                    for p in pordr:
                        poItems = PurchaseOrderItems.objects.filter(purchase_order = p, item = item)
                        for it in poItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)
                    
                    bill= Bill.objects.filter(Company = comp_details, Vendor = v,Bill_Date__range=[startDate, endDate])
                    for b in bill:
                        billItems = BillItems.objects.filter(Bills = b, item_id = item)
                        for it in billItems:
                            purchase += int(it.qty)
                            totPurchase += int(it.qty)
        
                    rcrbl= Recurring_bills.objects.filter(company = comp_details, vendor_details = v,rec_bill_date__range=[startDate, endDate])
                    for rc in rcrbl:
                       rcItems = RecurrItemsList.objects.filter(recurr_bill_id = rc, item_id = item)
                       for it in rcItems:
                           purchase += int(it.qty)
                           totPurchase += int(it.qty)
                         
                    det = {
                        'name': name,
                        'salesQty': 0,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': purchase
                    }
                    reportData.append(det)
                           
    context = {
            'allmodules': allmodules,'log_details': log_details,'companyName':comp_details.company_name,'items':items,
            'reportData':reportData, 'totalSales':totSales, 'totalPurchase':totPurchase,
            'startDate':startDate, 'endDate':endDate, 'itemName': itemName, 'itemDetails':itemId
            }
    return render(request,'zohomodules/Reports/PartyReportByItem.html', context)

def sharePartyReportByItemToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        # Determine user type and fetch company details
        if log_details.user_type == 'Company':
            comp_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            comp_details = StaffDetails.objects.get(login_details=log_details).company

        if request.method == 'POST':
            # Extract email addresses and message from POST data
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            startDate = request.POST['start']
            endDate = request.POST['end']
            itm = request.POST['item_details']
            
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            
            item_query = Items.objects.filter(company=comp_details)
            
            if item_query.exists():
                itemName = item_query.first().item_name
            else:
                itemName = None

            cust = Customer.objects.filter(company=comp_details)
            vend = Vendor.objects.filter(company=comp_details)
            
            reportData = []
            totSales = 0
            totPurchase = 0
            
            if startDate is None or endDate is None:
                if item_query.exists():
                    for c in cust:
                        sales = 0
                        name = f"{c.first_name} {c.last_name}"
                        
                        for item in item_query:
                            sAmt = item.selling_price
                            pAmt = item.purchase_price
                            
                            sordr = SaleOrder.objects.filter(company=comp_details, customer=c)
                            for s in sordr:
                                soItems = SalesOrderItems.objects.filter(sales_order=s, item=item)
                                for it in soItems:
                                    sales += int(it.quantity)
                                    totSales += int(it.quantity)
                                
                            inv = invoice.objects.filter(company=comp_details, customer=c)
                            for iv in inv:
                                invItems = invoiceitems.objects.filter(invoice=iv, item=item)
                                for it in invItems:
                                    sales += int(it.quantity)
                                    totSales += int(it.quantity)
                                    
                            recInv = RecurringInvoice.objects.filter(company=comp_details, customer=c)
                            for rec in recInv:
                                recItems = Reccurring_Invoice_item.objects.filter(recurring_invoice=rec, item=item)
                                for it in recItems:
                                    sales += int(it.quantity)
                                    totSales += int(it.quantity)
                                    
                            rtInv = RetainerInvoice.objects.filter(company=comp_details, customer_name=c)
                            for rt in rtInv:
                                rtItems = Retaineritems.objects.filter(retainer=rt, item=item)
                                for it in rtItems:
                                    sales += int(it.quantity)
                                    totSales += int(it.quantity)
                    
                        det = {
                           'name': name,
                           'salesQty': sales,
                           'sAmount': sAmt,
                           'pAmount': pAmt,
                           'purchaseQty': 0
                        }
                        reportData.append(det)
                
                    for v in vend:
                        purchase = 0
                        name = f"{v.title} {v.first_name} {v.last_name}"
                        
                        for item in item_query:
                            sAmt = item.selling_price
                            pAmt = item.purchase_price

                            pordr = PurchaseOrder.objects.filter(company=comp_details, vendor=v)
                            for p in pordr:
                                poItems = PurchaseOrderItems.objects.filter(purchase_order=p, item=item)
                                for it in poItems:
                                    purchase += int(it.quantity)
                                    totPurchase += int(it.quantity)
                            
                            bill = Bill.objects.filter(Company_id=comp_details, Vendor=v)
                            for b in bill:
                                billItems = BillItems.objects.filter(Bills=b, item_id=item)
                                for it in billItems:
                                    purchase += int(it.qty)
                                    totPurchase += int(it.qty)
                
                            rcrbl = Recurring_bills.objects.filter(company=comp_details, vendor_details=v)
                            for rc in rcrbl:
                                rcItems = RecurrItemsList.objects.filter(recurring_bill_id=rc, item=item)
                                for it in rcItems:
                                    purchase += int(it.qty)
                                    totPurchase += int(it.qty)
                             
                        det = {
                            'name': name,
                            'salesQty': 0,
                            'sAmount': sAmt,
                            'pAmount': pAmt,
                            'purchaseQty': purchase
                        }
                        reportData.append(det)
            else:
                for c in cust:
                    sales = 0
                    name = f"{c.first_name} {c.last_name}"
                    
                    for item in item_query:
                        sAmt = item.selling_price
                        pAmt = item.purchase_price
                        
                        sordr = SaleOrder.objects.filter(company=comp_details, customer=c, sales_order_date__range=[startDate, endDate])
                        for s in sordr:
                            soItems = SalesOrderItems.objects.filter(sales_order=s, item=item)
                            for it in soItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                            
                        inv = invoice.objects.filter(company=comp_details, customer=c, date__range=[startDate, endDate])
                        for iv in inv:
                            invItems = invoiceitems.objects.filter(invoice=iv, item=item)
                            for it in invItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                                
                        recInv = RecurringInvoice.objects.filter(company=comp_details, customer=c, start_date__range=[startDate, endDate])
                        for rec in recInv:
                            recItems = Reccurring_Invoice_item.objects.filter(recurring_invoice=rec, item=item)
                            for it in recItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                                
                        rtInv = RetainerInvoice.objects.filter(company=comp_details, customer_name=c, created_at__range=[startDate, endDate])
                        for rt in rtInv:
                            rtItems = Retaineritems.objects.filter(retainer=rt, item=item)
                            for it in rtItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                
                    det = {
                        'name': name,
                        'salesQty': sales,
                        'sAmount': sAmt,
                        'pAmount': pAmt,
                        'purchaseQty': 0
                    }
                    reportData.append(det)
                    
                for v in vend:
                    purchase = 0
                    name = f"{v.first_name} {v.last_name}"
                    
                    for item in item_query:
                        sAmt = item.selling_price
                        pAmt = item.purchase_price
                        
                        pordr = PurchaseOrder.objects.filter(company=comp_details, vendor=v, purchase_order_date__range=[startDate, endDate])
                        for p in pordr:
                            poItems = PurchaseOrderItems.objects.filter(purchase_order=p, item=item)
                            for it in poItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)
                        
                        bill = Bill.objects.filter(Company_id=comp_details, Vendor=v, Bill_Date__range=[startDate, endDate])
                        for b in bill:
                            billItems = BillItems.objects.filter(Bills=b, item_id=item)
                            for it in billItems:
                                purchase += int(it.qty)
                                totPurchase += int(it.qty)
            
                        rcrbl = Recurring_bills.objects.filter(company=comp_details, vendor_details=v, rec_bill_date__range=[startDate, endDate])
                        for rc in rcrbl:
                           rcItems = RecurrItemsList.objects.filter(recurring_bill_id=rc, item=item)
                           for it in rcItems:
                               purchase += int(it.qty)
                               totPurchase += int(it.qty)
                             
                    det = {
                        'name': name,
                        'salesQty': 0,
                        'sAmount': sAmt,
                        'pAmount': pAmt,
                        'purchaseQty': purchase
                    }
                    reportData.append(det)
        
        context = {
                'log_details': log_details,
                'companyName': comp_details.company_name,
                'reportData': reportData,
                'totalSales': totSales,
                'totalPurchase': totPurchase,
                'startDate': startDate,
                'endDate': endDate, 
                'itemName': itemName
        }

        template_path = 'zohomodules/Reports/PartyReportByItemPdf.html'
        template = get_template(template_path)

        html = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)                            
        pdf = result.getvalue()
        filename = 'Report_PartyReportByItem'
        subject = "Report_PartyReportByItem"
        email = EmailMsg(
            subject,
            f"Hi,\nPlease find the attached Report for - Party Report By Item . \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}",
            from_email=settings.EMAIL_HOST_USER,
            to=emails_list
        )
            
        email.from_email = settings.EMAIL_HOST_USER 
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        return redirect('PartyReportByItem')

#---------------- Zoho Final Party Report by item - Ginto Shaji - End-------------------->

#---------------------------------- GSTR-1 ----------------------------------#
def load_gstr_one(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)
    reportData = []
    cNotedata = []

    inv = invoice.objects.filter(company = cmp)
    if inv:
        for i in inv:
            partyName = i.customer.first_name +" "+i.customer.last_name
            date = i.date
            ref = i.invoice_number
            type = 'Invoice'
            total = i.grand_total
            paid =i.advanced_paid
            balance=i.balance
            gstin=i.customer_GSTnumber
            invoice_no=i.invoice_number
            igst=i.IGST
            sgst=i.SGST
            cgst=i.CGST
            place_of_supply=i.customer_place_of_supply
            subtotal=i.sub_total
            tax_amount=i.tax_amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'invoice_no':invoice_no,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
            }
            reportData.append(details)

    recInv = RecurringInvoice.objects.filter(company = cmp)
    if recInv:
        for r in recInv:
            partyName = r.customer.first_name +" "+r.customer.last_name
            date = r.start_date
            ref = r.rec_invoice_no
            type = 'Recurring Invoice'
            total = r.grandtotal
            paid =r.advance_paid
            balance=r.balance
            gstin=r.gstin
            igst=r.igst
            sgst=r.sgst
            cgst=r.cgst
            place_of_supply=r.place_of_supply
            subtotal=r.subtotal
            tax_amount=r.tax_amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                
            }
            reportData.append(details)

    cNote = Credit_Note.objects.filter(company = cmp)
    if cNote:
        for note in cNote:
            partyName = note.customer.first_name +" "+note.customer.last_name
            date = note.credit_note_date
            ref = note.credit_note_number
            ctype = 'Credit Note'
            total = note.grand_total
            balance = note.balance
            paid = note.advance_paid
            gstin=note.customer_gst_number
            if note.customer_place_of_supply == '[KL]-Kerala':
                igst = 0.0
            else:
                igst= note.taxAmount_igst
            sgst=note.sgst
            cgst=note.cgst
            place_of_supply=note.customer_place_of_supply
            subtotal=note.sub_total

            tax_amount=note.taxAmount_igst
            invoice_number=note.invoice_number
            invoice_type=note.invoice_type
            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':ctype,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                'invoice_number':invoice_number,
                'invoice_type':invoice_type
                
            }
            cNotedata.append(details)

    context = {'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'reportData':reportData,'cNotedata':cNotedata, 'rtype':'all',
    'startDate':None, 'endDate':None}
    return render(request, 'zohomodules/Reports/gstr1.html', context)

def customize_gstr_one(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)

    startDate = request.GET['from_date']
    endDate = request.GET['to_date']
    rtype = request.GET['status']
    if startDate == "":
        startDate = None
    if endDate == "":
        endDate = None
    reportData = []
    cNotedata = []

    if startDate and endDate:
        inv = invoice.objects.filter(company = cmp, date__range = [startDate, endDate])
        recInv = RecurringInvoice.objects.filter(company = cmp, start_date__range = [startDate, endDate])
        cNote = Credit_Note.objects.filter(company = cmp, credit_note_date__range = [startDate, endDate])
    else:
        inv = invoice.objects.filter(company = cmp)
        recInv = RecurringInvoice.objects.filter(company = cmp)
        cNote = Credit_Note.objects.filter(company = cmp)

    if rtype == 'with GSTIN':
        inv = inv.exclude(customer_GSTnumber = '')
        inv = inv.exclude(customer_GSTnumber = 'null')
        recInv = recInv.exclude(gstin = '')
        recInv = recInv.exclude(gstin = 'null')
        cNote = cNote.exclude(customer_gst_number = '')
        cNote = cNote.exclude(customer_gst_number = 'null')

    if rtype == 'without GSTIN':
        inv = inv.filter(Q(customer_GSTnumber = '') | Q(customer_GSTnumber = 'null'))
        recInv = recInv.filter(Q(gstin = '') | Q(gstin = 'null'))
        cNote = cNote.filter(Q(customer_gst_number = '') | Q(customer_gst_number = 'null'))

    if inv:
        for i in inv:
            partyName = i.customer.first_name +" "+i.customer.last_name
            date = i.date
            ref = i.invoice_number
            type = 'Invoice'
            total = i.grand_total
            paid =i.advanced_paid
            balance=i.balance
            gstin=i.customer_GSTnumber
            invoice_no=i.invoice_number
            igst=i.IGST
            sgst=i.SGST
            cgst=i.CGST
            place_of_supply=i.customer_place_of_supply
            subtotal=i.sub_total
            tax_amount=i.tax_amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'invoice_no':invoice_no,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
            }
            reportData.append(details)

    if recInv:
        for r in recInv:
            partyName = r.customer.first_name +" "+r.customer.last_name
            date = r.start_date
            ref = r.rec_invoice_no
            type = 'Recurring Invoice'
            total = r.grandtotal
            paid =r.advance_paid
            balance=r.balance
            gstin=r.gstin
            igst=r.igst
            sgst=r.sgst
            cgst=r.cgst
            place_of_supply=r.place_of_supply
            subtotal=r.subtotal
            tax_amount=r.tax_amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                
            }
            reportData.append(details)

    if cNote:
        for note in cNote:
            partyName = note.customer.first_name +" "+note.customer.last_name
            date = note.credit_note_date
            ref = note.credit_note_number
            ctype = 'Credit Note'
            total = note.grand_total
            balance = note.balance
            paid = note.advance_paid
            gstin=note.customer_gst_number
            if note.customer_place_of_supply == '[KL]-Kerala':
                igst = 0.0
            else:
                igst= note.taxAmount_igst
            sgst=note.sgst
            cgst=note.cgst
            place_of_supply=note.customer_place_of_supply
            subtotal=note.sub_total

            tax_amount=note.taxAmount_igst
            invoice_number=note.invoice_number
            invoice_type=note.invoice_type
            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':ctype,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                'invoice_number':invoice_number,
                'invoice_type':invoice_type
                
            }
            cNotedata.append(details)

    context = {'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'reportData':reportData,'cNotedata':cNotedata, 'rtype':rtype, 
               'startDate':startDate, 'endDate':endDate}
    return render(request, 'zohomodules/Reports/gstr1.html', context)

def share_gstr_one(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    try:
        emails_string = request.GET.get('email_ids')

        # Split the string by commas and remove any leading or trailing whitespace
        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.GET.get('email_message')
        startDate = request.GET.get('from_date')
        endDate = request.GET.get('to_date')
        rtype = request.GET.get('status')
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None
        reportData = []
        cNotedata = []

        if startDate and endDate:
            inv = invoice.objects.filter(company = cmp, date__range = [startDate, endDate])
            recInv = RecurringInvoice.objects.filter(company = cmp, start_date__range = [startDate, endDate])
            cNote = Credit_Note.objects.filter(company = cmp, credit_note_date__range = [startDate, endDate])
        else:
            inv = invoice.objects.filter(company = cmp)
            recInv = RecurringInvoice.objects.filter(company = cmp)
            cNote = Credit_Note.objects.filter(company = cmp)

        if rtype == 'with GSTIN':
            inv = inv.exclude(customer_GSTnumber = '')
            inv = inv.exclude(customer_GSTnumber = 'null')
            recInv = recInv.exclude(gstin = '')
            recInv = recInv.exclude(gstin = 'null')
            cNote = cNote.exclude(customer_gst_number = '')
            cNote = cNote.exclude(customer_gst_number = 'null')

        if rtype == 'without GSTIN':
            inv = inv.filter(Q(customer_GSTnumber = '') | Q(customer_GSTnumber = 'null'))
            recInv = recInv.filter(Q(gstin = '') | Q(gstin = 'null'))
            cNote = cNote.filter(Q(customer_gst_number = '') | Q(customer_gst_number = 'null'))

        if inv:
            for i in inv:
                partyName = i.customer.first_name +" "+i.customer.last_name
                date = i.date
                ref = i.invoice_number
                type = 'Invoice'
                total = i.grand_total
                paid =i.advanced_paid
                balance=i.balance
                gstin=i.customer_GSTnumber
                invoice_no=i.invoice_number
                igst=i.IGST
                sgst=i.SGST
                cgst=i.CGST
                place_of_supply=i.customer_place_of_supply
                subtotal=i.sub_total
                tax_amount=i.tax_amount

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'invoice_no':invoice_no,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                }
                reportData.append(details)

        if recInv:
            for r in recInv:
                partyName = r.customer.first_name +" "+r.customer.last_name
                date = r.start_date
                ref = r.rec_invoice_no
                type = 'Recurring Invoice'
                total = r.grandtotal
                paid =r.advance_paid
                balance=r.balance
                gstin=r.gstin
                igst=r.igst
                sgst=r.sgst
                cgst=r.cgst
                place_of_supply=r.place_of_supply
                subtotal=r.subtotal
                tax_amount=r.tax_amount

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    
                }
                reportData.append(details)

        if cNote:
            for note in cNote:
                partyName = note.customer.first_name +" "+note.customer.last_name
                date = note.credit_note_date
                ref = note.credit_note_number
                ctype = 'Credit Note'
                total = note.grand_total
                balance = note.balance
                paid = note.advance_paid
                gstin=note.customer_gst_number
                if note.customer_place_of_supply == '[KL]-Kerala':
                    igst = 0.0
                else:
                    igst= note.taxAmount_igst
                sgst=note.sgst
                cgst=note.cgst
                place_of_supply=note.customer_place_of_supply
                subtotal=note.sub_total

                tax_amount=note.taxAmount_igst
                invoice_number=note.invoice_number
                invoice_type=note.invoice_type
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':ctype,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    'invoice_number':invoice_number,
                    'invoice_type':invoice_type
                    
                }
                cNotedata.append(details)

        context = {'cmp':cmp, 'reportData':reportData,'cNotedata':cNotedata, 'rtype':rtype}
        template_path = 'zohomodules/Reports/gstr1_pdf.html'
        template = get_template(template_path)

        html  = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
        pdf = result.getvalue()
        filename = f'GSTR1.pdf'
        subject = f"Sharing GSTR1"
        email = EmailMsg(subject, f"Hi,\nPlease find the attached GSTR1 Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)
        message = 'Report has been shared via email successfully..!'
        return JsonResponse({'message':message})
    except Exception as e:
        message = 'Report cannot be send'
        return JsonResponse({'message':message})
        
#End
# --------------------outstanding receivables---------------------------#
def outstanding_receivables(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules = ZohoModules.objects.get(company=cmp)

  
    customers = Customer.objects.filter(company=cmp)

    
    customer_data = []
    for customer in customers:
        
        regular_invoices = invoice.objects.filter(customer=customer, company=cmp,status = 'Saved')
        invoice_numbers = [(inv.invoice_number, float(inv.balance)) for inv in regular_invoices if float(inv.balance) > 0]

       
        recurring_invoices = RecurringInvoice.objects.filter(customer=customer, company=cmp,status = 'Saved')
        rec_invoice_numbers = [(rec_inv.rec_invoice_no, float(rec_inv.balance)) for rec_inv in recurring_invoices if float(rec_inv.balance) > 0]

       
        retainer_invoices = RetainerInvoice.objects.filter(customer_name=customer, company=cmp, is_sent=1)
        retainer_invoice_numbers = [(ret_inv.retainer_invoice_number, float(ret_inv.balance)) for ret_inv in retainer_invoices if float(ret_inv.balance) > 0]

      
        invoice_pending_amount = sum([float(inv.balance) for inv in regular_invoices if float(inv.balance) > 0])
        invoice_pending_count = sum([1 for inv in regular_invoices if float(inv.balance) > 0])

        
        rec_invoice_pending_amount = sum([float(rec_inv.balance) for rec_inv in recurring_invoices if float(rec_inv.balance) > 0])
        rec_invoice_pending_count = sum([1 for rec_inv in recurring_invoices if float(rec_inv.balance) > 0])

     
        retainer_invoice_pending_amount = sum([float(ret_inv.balance) for ret_inv in retainer_invoices if float(ret_inv.balance) > 0])
        retainer_invoice_pending_count = sum([1 for ret_inv in retainer_invoices if float(ret_inv.balance) > 0])

      
        total_pending_amount = (
            invoice_pending_amount + rec_invoice_pending_amount + retainer_invoice_pending_amount
        )
        total_pending_count = (
            invoice_pending_count + rec_invoice_pending_count + retainer_invoice_pending_count
        )

        if total_pending_amount > 0:
            customer_data.append({
                'customer': customer,
                'invoice_numbers': invoice_numbers,
                'rec_invoice_numbers': rec_invoice_numbers,
                'retainer_invoice_numbers': retainer_invoice_numbers,
                'pending_amount': total_pending_amount,
                'pending_count': total_pending_count,
            })

    return render(request, 'zohomodules/Reports/outstanding_receivable.html', {
        'allmodules': allmodules,
        'details': dash_details,
        'log_details': log_details,
        'customer_data': customer_data,
        'customers':customers,
        'cmp':cmp
        
    })

def outstanding_receivables_customized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        if request.method == 'GET':
            startDate = request.GET.get('from_date')
            endDate = request.GET.get('to_date')
            customer_filter = request.GET.get('customer', 'all')

            if not startDate:
                startDate = None
            if not endDate:
                endDate = None

            customers = Customer.objects.filter(company=cmp)
            filtered_customers = customers

            if customer_filter != 'all':
                customer_names = customer_filter.split()
                filtered_customers = customers.filter(first_name__icontains=customer_names[0], last_name__icontains=customer_names[1])

            customer_data = []
            for customer in filtered_customers:
                regular_invoices = invoice.objects.filter(customer=customer, company=cmp,status = 'Saved')
                if startDate and endDate:
                    regular_invoices = regular_invoices.filter(date__range=[startDate, endDate])
                invoice_numbers = [(inv.invoice_number, float(inv.balance)) for inv in regular_invoices if float(inv.balance) > 0]


                recurring_invoices = RecurringInvoice.objects.filter(customer=customer, company=cmp,status = 'Saved')
                if startDate and endDate:
                    recurring_invoices = recurring_invoices.filter(start_date__range=[startDate, endDate])
              
                rec_invoice_numbers = [(rec_inv.rec_invoice_no, float(rec_inv.balance)) for rec_inv in recurring_invoices if float(rec_inv.balance) > 0]

                retainer_invoices = RetainerInvoice.objects.filter(customer_name=customer, company=cmp,is_sent=1)
                if startDate and endDate:
                    retainer_invoices = retainer_invoices.filter(retainer_invoice_date__range=[startDate, endDate])
               
                retainer_invoice_numbers = [(ret_inv.retainer_invoice_number, float(ret_inv.balance)) for ret_inv in retainer_invoices if float(ret_inv.balance) > 0]

                invoice_pending_amount = sum([float(inv.balance) for inv in regular_invoices if float(inv.balance) > 0])
                invoice_pending_count = sum([1 for inv in regular_invoices if float(inv.balance) > 0])

        
                rec_invoice_pending_amount = sum([float(rec_inv.balance) for rec_inv in recurring_invoices if float(rec_inv.balance) > 0])
                rec_invoice_pending_count = sum([1 for rec_inv in recurring_invoices if float(rec_inv.balance) > 0])

     
                retainer_invoice_pending_amount = sum([float(ret_inv.balance) for ret_inv in retainer_invoices if float(ret_inv.balance) > 0])
                retainer_invoice_pending_count = sum([1 for ret_inv in retainer_invoices if float(ret_inv.balance) > 0])
                total_pending_amount = (
                    invoice_pending_amount + rec_invoice_pending_amount + retainer_invoice_pending_amount
                )
                total_pending_count = (
                    invoice_pending_count + rec_invoice_pending_count + retainer_invoice_pending_count
                )

                if total_pending_amount > 0:
                    customer_data.append({
                        'customer': customer,
                        'invoice_numbers': invoice_numbers,
                        'rec_invoice_numbers': rec_invoice_numbers,
                        'retainer_invoice_numbers': retainer_invoice_numbers,
                        'pending_amount': total_pending_amount,
                        'pending_count': total_pending_count,
                    })

            return render(request, 'zohomodules/Reports/outstanding_receivable.html', {
                'allmodules': allmodules,
                'details': dash_details,
                'log_details': log_details,
                'customer_data': customer_data,
                'startDate': startDate,
                'endDate': endDate,
                'customer_filter': customer_filter,
                'customers': customers,
                'cmp':cmp
            })
    return redirect('/')


def shareaccountreceivables(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=cmp)

        if request.method == 'POST':
            emails_string = request.POST.get('email_ids')
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST.get('email_message', '')

            startDate = request.POST.get('start')
            endDate = request.POST.get('end')

            if not startDate:
                startDate = None
            if not endDate:
                endDate = None

            trans = request.POST.get('transaction', '').split(',')
            trans = [name.strip() for name in trans if name.strip()]
            print("Transactions:", trans)

            customer_data = []

            if not trans or (len(trans) == 1 and trans[0].lower() == 'all'):
                customers = Customer.objects.filter(company=cmp)
            else:
                filtered_customers = []
                for name in trans:
                    try:
                        first_name, last_name = name.split()
                        filtered_customers.extend(Customer.objects.filter(company=cmp, first_name__icontains=first_name, last_name__icontains=last_name))
                    except ValueError:
                        continue
                customers = filtered_customers

            for customer in customers:
                regular_invoices = invoice.objects.filter(customer=customer, company=cmp, status='Saved')
                if startDate and endDate:
                    regular_invoices = regular_invoices.filter(date__range=[startDate, endDate])
                invoice_numbers = [(inv.invoice_number, float(inv.balance)) for inv in regular_invoices if float(inv.balance) > 0]

                recurring_invoices = RecurringInvoice.objects.filter(customer=customer, company=cmp, status='Saved')
                if startDate and endDate:
                    recurring_invoices = recurring_invoices.filter(start_date__range=[startDate, endDate])
                rec_invoice_numbers = [(rec_inv.rec_invoice_no, float(rec_inv.balance)) for rec_inv in recurring_invoices if float(rec_inv.balance) > 0]

                retainer_invoices = RetainerInvoice.objects.filter(customer_name=customer, company=cmp, is_sent=1)
                if startDate and endDate:
                    retainer_invoices = retainer_invoices.filter(retainer_invoice_date__range=[startDate, endDate])
                retainer_invoice_numbers = [(ret_inv.retainer_invoice_number, float(ret_inv.balance)) for ret_inv in retainer_invoices if float(ret_inv.balance) > 0]

                invoice_pending_amount = sum([float(inv.balance) for inv in regular_invoices if float(inv.balance) > 0])
                invoice_pending_count = sum([1 for inv in regular_invoices if float(inv.balance) > 0])

                rec_invoice_pending_amount = sum([float(rec_inv.balance) for rec_inv in recurring_invoices if float(rec_inv.balance) > 0])
                rec_invoice_pending_count = sum([1 for rec_inv in recurring_invoices if float(rec_inv.balance) > 0])

                retainer_invoice_pending_amount = sum([float(ret_inv.balance) for ret_inv in retainer_invoices if float(ret_inv.balance) > 0])
                retainer_invoice_pending_count = sum([1 for ret_inv in retainer_invoices if float(ret_inv.balance) > 0])

                total_pending_amount = invoice_pending_amount + rec_invoice_pending_amount + retainer_invoice_pending_amount
                total_pending_count = invoice_pending_count + rec_invoice_pending_count + retainer_invoice_pending_count

                if total_pending_amount > 0:
                    customer_data.append({
                        'customer': customer,
                        'invoice_numbers': invoice_numbers,
                        'rec_invoice_numbers': rec_invoice_numbers,
                        'retainer_invoice_numbers': retainer_invoice_numbers,
                        'pending_amount': total_pending_amount,
                        'pending_count': total_pending_count,
                    })

            print("Customer Data:", customer_data)

            context = {
                'allmodules': allmodules,
                'details': dash_details,
                'log_details': log_details,
                'customer_data': customer_data,
                'customers': customers,
                'cmp': cmp,
                'startDate': startDate,
                'endDate': endDate,
            }

            template_path = 'zohomodules/Reports/outstanding_receivables_Pdf.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()

            if not pdf:
                raise Exception("Error generating PDF")

            filename = 'Outstanding_Receivables.pdf'
            subject = "Outstanding Receivables"

            email = EmailMessage(
                subject,
                f"Hi,\nPlease find the attached Outstanding Receivables Reports.\n\n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                settings.EMAIL_HOST_USER,
                emails_list
            )

            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Outstanding Receivables Reports have been shared via email successfully!')
            return redirect('outstanding_receivables')
            
#End

def outstanding_payables(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)
    
        allmodules = ZohoModules.objects.get(company=cmp)

        # Retrieve vendors with outstanding balances
        outstanding_vendors = []

        # Assuming Bill and Recurring_bills models have a 'vendor' foreign key
        bills = Bill.objects.filter(Company=cmp, Balance__gt=0)
        rec_bills = Recurring_bills.objects.filter(company=cmp, bal__gt=0)

        vendors = set()
        for bill in bills:
            vendors.add(bill.Vendor)
        for rec_bill in rec_bills:
            vendors.add(rec_bill.vendor_details)

        for vendor in vendors:
            pending_amount = Decimal(0)
            pending_bills = 0
            vendor_bill_details = []

            vendor_bills = bills.filter(Vendor=vendor)
            vendor_rec_bills = rec_bills.filter(vendor_details=vendor)

            for bill in vendor_bills:
                pending_amount += Decimal(bill.Balance)
                pending_bills += 1
                vendor_bill_details.append({
                    'bill_number': bill.Bill_Number,
                    'amount': bill.Balance,
                    'date':bill.Bill_Date
                })

            for rec_bill in vendor_rec_bills:
                pending_amount += Decimal(rec_bill.bal)
                pending_bills += 1
                vendor_bill_details.append({
                    'bill_number': rec_bill.recc_bill_no,
                    'amount': rec_bill.bal,
                    'date':rec_bill.rec_bill_date
                })

            outstanding_vendors.append({
                'particulars': vendor.vendor_display_name,
                'name_of_group': 'Accounts Payable',
                'pending_amount': pending_amount,
                'pending_bills': pending_bills,
                'bill_details': vendor_bill_details,
                'vendor_id': vendor.id  # Assuming vendor model has an 'id' field
            })

        return render(request, 'zohomodules/Reports/outstanding_payables.html', {
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'outstanding_vendors': outstanding_vendors
        })

    else:
        return redirect('outstanding_payables')  # Redirect to login if not authenticated
    
    
    
def share_Outstanding_PayablesToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp
        else:
            staff_details = StaffDetails.objects.get(login_details=log_details)
            cmp = staff_details.company
            dash_details = staff_details

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                items = Items.objects.filter(company=cmp)
                allmodules = ZohoModules.objects.get(company=cmp)

                # Retrieve vendors with outstanding balances
                outstanding_vendors = []

                # Assuming Bill and Recurring_bills models have a 'vendor' foreign key
                bills = Bill.objects.filter(Company=cmp, Balance__gt=0)
                rec_bills = Recurring_bills.objects.filter(company=cmp, bal__gt=0)

                vendors = set()
                for bill in bills:
                    vendors.add(bill.Vendor)
                for rec_bill in rec_bills:
                    vendors.add(rec_bill.vendor_details)

                for vendor in vendors:
                    pending_amount = Decimal(0)
                    pending_bills = 0
                    vendor_bill_details = []

                    vendor_bills = bills.filter(Vendor=vendor)
                    vendor_rec_bills = rec_bills.filter(vendor_details=vendor)

                    for bill in vendor_bills:
                        pending_amount += Decimal(bill.Balance)
                        pending_bills += 1
                        vendor_bill_details.append({
                            'bill_number': bill.Bill_Number,
                            'amount': bill.Balance,
                            'date': bill.Bill_Date
                        })

                    for rec_bill in vendor_rec_bills:
                        pending_amount += Decimal(rec_bill.bal)
                        pending_bills += 1
                        vendor_bill_details.append({
                            'bill_number': rec_bill.recc_bill_no,
                            'amount': rec_bill.bal,
                            'date': rec_bill.rec_bill_date
                        })

                    outstanding_vendors.append({
                        'particulars': vendor.vendor_display_name,
                        'name_of_group': 'Accounts Payable',
                        'pending_amount': pending_amount,
                        'pending_bills': pending_bills,
                        'bill_details': vendor_bill_details,
                        'vendor_id': vendor.id  # Assuming vendor model has an 'id' field
                    })

                context = {
                    'allmodules': allmodules,
                    'details': dash_details,
                    'log_details': log_details,
                    'outstanding_vendors': outstanding_vendors
                }

                template_path = 'zohomodules/Reports/Outstanding_Payables_pdf.html'
                template = get_template(template_path)
                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                if pdf.err:
                    raise Exception('Error creating PDF document')

                pdf = result.getvalue()
                filename = f'Report__Outstanding_Payables.pdf'
                subject = "Report_Outstanding_Payables"
                body = f"Hi,\nPlease find the attached Report for - Outstanding_Payables Report.\n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}"

                email = EmailMultiAlternatives(
                    subject,
                    body,
                    settings.EMAIL_HOST_USER,
                    emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully!')
                return redirect(outstanding_payables)
        except Exception as e:
            print(e)
            messages.error(request, str(e))
            return redirect(outstanding_payables)
            
            
#--------------------Sales summary HSN Report start ----------Meenu Shaju--------------------
def sales_summary_hsn(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)

        # rec = RecurringInvoice.objects.filter(company = cmp)
        allmodules= ZohoModules.objects.get(company = cmp)
        recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp).values('item__hsn_code').annotate(
        item_hsn=Max('item__hsn_code'),
        tax_rate=F('tax_rate'),
        item_total=Sum('total'),
        calculated_tax=Sum('total') * F('tax_rate') / 100,
        
         )
        
        invoice_items_summary = invoiceitems.objects.filter(company=cmp).values('Items__hsn_code').annotate(
        item_hsn=Max('Items__hsn_code'),
        tax_rate=F('tax_rate'),
        item_total=Sum('total'),
        calculated_tax=Sum('total') * F('tax_rate') / 100,
        
        
        )
        
        retainer_items_summary = Retaineritems.objects.filter(company=cmp).values('item__hsn_code').annotate(
        item_hsn=Max('item__hsn_code'),
        tax_rate=Cast(F('rate'), output_field=FloatField()),
        item_total=Cast(Sum(Cast('amount', output_field=FloatField())), output_field=FloatField()),
        calculated_tax=Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
    )
        
       

        recurring_total = sum(item['item_total'] for item in recurring_items_summary)
        invoice_total = sum(item['item_total'] for item in invoice_items_summary)
        retainer_total = sum(item['item_total'] for item in retainer_items_summary)
    
        grand_total = recurring_total + invoice_total + retainer_total
        

        combined_summary = list(recurring_items_summary) + list(invoice_items_summary) + list(retainer_items_summary)
        unique_items = defaultdict(lambda: {'tax_rate': 0, 'item_total': 0, 'calculated_tax': 0})

        
        for summary in combined_summary:
            item_hsn = summary['item_hsn']
            
            unique_items[item_hsn]['tax_rate'] += summary['tax_rate']
            unique_items[item_hsn]['item_total'] += summary['item_total']
            unique_items[item_hsn]['calculated_tax'] += summary['calculated_tax']

        
        unique_items = dict(unique_items)
        return render(request, 'zohomodules/Reports/sales_summary_hsn.html', {'details': dash_details, 'allmodules': allmodules, 'cmp': cmp})

def customize_hsn(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company = cmp)
        if request.method == 'POST':
            from_date = request.POST.get('from_date')
            to_date = request.POST.get('to_date')
            place = request.POST.get('place')
            from_date = datetime.strptime(from_date, '%Y-%m-%d')
            to_date = datetime.strptime(to_date, '%Y-%m-%d')
            if place == cmp.state:
                recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__start_date__gte = from_date,reccuring_invoice__start_date__lte = to_date,company__state = F('reccuring_invoice__place_of_supply')).values('item__hsn_code').annotate(
                item_hsn=Max('item__hsn_code'),
                tax_rate=F('tax_rate'),
                item_total=Sum('total'),
                calculated_tax=Sum('total') * F('tax_rate') / 100,
                cgst=(Sum('total') * F('tax_rate') / 100) / 2,
                sgst=(Sum('total') * F('tax_rate') / 100) / 2,
                igst=V(0.0, output_field=FloatField())
                
                
                )
                
                invoice_items_summary = invoiceitems.objects.filter(company=cmp,invoice__date__gte = from_date,invoice__date__lte = to_date,company__state = F('invoice__customer_place_of_supply')).values('Items__hsn_code').annotate(
                item_hsn=Max('Items__hsn_code'),
                tax_rate=F('tax_rate'),
                item_total=Sum('total'),
                calculated_tax=Sum('total') * F('tax_rate') / 100,
                cgst=(Sum('total') * F('tax_rate') / 100) / 2,
                sgst=(Sum('total') * F('tax_rate') / 100) / 2,
                igst=V(0.0, output_field=FloatField())
                
                
                )
                
                retainer_items_summary = Retaineritems.objects.filter(company=cmp,retainer__retainer_invoice_date__gte = from_date,retainer__retainer_invoice_date__lte=to_date,company__state = F('retainer__customer_placesupply')).values('item__hsn_code').annotate(
                item_hsn=Max('item__hsn_code'),
                tax_rate=Cast(F('rate'), output_field=FloatField()),
                item_total=Cast(Sum(Cast('amount', output_field=FloatField())), output_field=FloatField()),
                calculated_tax=Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
                cgst=Cast((Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100) / 2, output_field=FloatField()),
                sgst=Cast((Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100) / 2, output_field=FloatField()),
                igst=V(0.0, output_field=FloatField())
            )

            else:
                recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__start_date__gte = from_date,reccuring_invoice__start_date__lte = to_date,reccuring_invoice__place_of_supply = place).values('item__hsn_code').annotate(
                    item_hsn=Max('item__hsn_code'),
                    tax_rate=F('tax_rate'),
                    item_total=Sum('total'),
                    calculated_tax=Sum('total') * F('tax_rate') / 100,
                    cgst=V(0.0, output_field=FloatField()),
                    sgst=V(0.0, output_field=FloatField()),
                    igst=Sum('total') * F('tax_rate') / 100,
                    
                    )
                    
                invoice_items_summary = invoiceitems.objects.filter(company=cmp,invoice__date__gte = from_date,invoice__date__lte = to_date,invoice__customer_place_of_supply = place).values('Items__hsn_code').annotate(
                    item_hsn=Max('Items__hsn_code'),
                    tax_rate=F('tax_rate'),
                    item_total=Sum('total'),
                    calculated_tax=Sum('total') * F('tax_rate') / 100,
                    cgst=V(0.0, output_field=FloatField()),
                    sgst=V(0.0, output_field=FloatField()),
                    igst=Sum('total') * F('tax_rate') / 100,
                    
                    
                    )
                    
                retainer_items_summary = Retaineritems.objects.filter(company=cmp,retainer__retainer_invoice_date__gte = from_date,retainer__retainer_invoice_date__lte=to_date,retainer__customer_placesupply = place).values('item__hsn_code').annotate(
                    item_hsn=Max('item__hsn_code'),
                    tax_rate=Cast(F('rate'), output_field=FloatField()),
                    item_total=Cast(Sum(Cast('amount', output_field=FloatField())), output_field=FloatField()),
                    calculated_tax=Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
                    igst =Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
                    cgst=V(0.0, output_field=FloatField()),
                    sgst=V(0.0, output_field=FloatField()),
                )

            recurring_total = sum(item['item_total'] for item in recurring_items_summary)
            invoice_total = sum(item['item_total'] for item in invoice_items_summary)
            retainer_total = sum(item['item_total'] for item in retainer_items_summary)
        
            grand_total = recurring_total + invoice_total + retainer_total
            

            combined_summary = list(recurring_items_summary) + list(invoice_items_summary) + list(retainer_items_summary)
            unique_items = defaultdict(lambda: {'tax_rate': 0, 'item_total': 0, 'calculated_tax': 0,'igst': 0, 'cgst': 0, 'sgst': 0})

            
            for summary in combined_summary:
                item_hsn = summary['item_hsn']
            
                unique_items[item_hsn]['tax_rate'] += summary['tax_rate']
                unique_items[item_hsn]['item_total'] += summary['item_total']
                unique_items[item_hsn]['calculated_tax'] += summary['calculated_tax']
                unique_items[item_hsn]['igst'] += summary['igst']
                unique_items[item_hsn]['cgst'] += summary['cgst']
                unique_items[item_hsn]['sgst'] += summary['sgst']

            
            unique_items = dict(unique_items)
            return render(request, 'zohomodules/Reports/sales_summary_hsn.html', {'details': dash_details, 'allmodules': allmodules, 'cmp': cmp,'combined_summary':unique_items,'grand_total':grand_total,'from_date':from_date,'to_date':to_date,'place':place})
        

def sale_hsn_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            
            
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            
            dash_details = StaffDetails.objects.get(login_details=log_details)
        allmodules= ZohoModules.objects.get(company = cmp)
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            from_date = request.POST.get('hiddenfrom')
            print('from',from_date)
            
            to_date = request.POST.get('hiddento')
            place = request.POST.get('hiddenplace')
            from_date = datetime.strptime(from_date, '%Y-%m-%d')
            to_date = datetime.strptime(to_date, '%Y-%m-%d')
            if place == cmp.state:
                recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__start_date__gte = from_date,reccuring_invoice__start_date__lte = to_date,company__state = F('reccuring_invoice__place_of_supply')).values('item__hsn_code').annotate(
                item_hsn=Max('item__hsn_code'),
                tax_rate=F('tax_rate'),
                item_total=Sum('total'),
                calculated_tax=Sum('total') * F('tax_rate') / 100,
                cgst=(Sum('total') * F('tax_rate') / 100) / 2,
                sgst=(Sum('total') * F('tax_rate') / 100) / 2,
                igst=V(0.0, output_field=FloatField())
                
                
                )
                
                invoice_items_summary = invoiceitems.objects.filter(company=cmp,invoice__date__gte = from_date,invoice__date__lte = to_date,company__state = F('invoice__customer_place_of_supply')).values('Items__hsn_code').annotate(
                item_hsn=Max('Items__hsn_code'),
                tax_rate=F('tax_rate'),
                item_total=Sum('total'),
                calculated_tax=Sum('total') * F('tax_rate') / 100,
                cgst=(Sum('total') * F('tax_rate') / 100) / 2,
                sgst=(Sum('total') * F('tax_rate') / 100) / 2,
                igst=V(0.0, output_field=FloatField())
                
                
                )
                
                retainer_items_summary = Retaineritems.objects.filter(company=cmp,retainer__retainer_invoice_date__gte = from_date,retainer__retainer_invoice_date__lte=to_date,company__state = F('retainer__customer_placesupply')).values('item__hsn_code').annotate(
                item_hsn=Max('item__hsn_code'),
                tax_rate=Cast(F('rate'), output_field=FloatField()),
                item_total=Cast(Sum(Cast('amount', output_field=FloatField())), output_field=FloatField()),
                calculated_tax=Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
                cgst=Cast((Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100) / 2, output_field=FloatField()),
                sgst=Cast((Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100) / 2, output_field=FloatField()),
                igst=V(0.0, output_field=FloatField())
            )

            else:
                recurring_items_summary = Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__start_date__gte = from_date,reccuring_invoice__start_date__lte = to_date,reccuring_invoice__place_of_supply = place).values('item__hsn_code').annotate(
                    item_hsn=Max('item__hsn_code'),
                    tax_rate=F('tax_rate'),
                    item_total=Sum('total'),
                    calculated_tax=Sum('total') * F('tax_rate') / 100,
                    cgst=V(0.0, output_field=FloatField()),
                    sgst=V(0.0, output_field=FloatField()),
                    igst=Sum('total') * F('tax_rate') / 100,
                    
                    )
                    
                invoice_items_summary = invoiceitems.objects.filter(company=cmp,invoice__date__gte = from_date,invoice__date__lte = to_date,invoice__customer_place_of_supply = place).values('Items__hsn_code').annotate(
                    item_hsn=Max('Items__hsn_code'),
                    tax_rate=F('tax_rate'),
                    item_total=Sum('total'),
                    calculated_tax=Sum('total') * F('tax_rate') / 100,
                    cgst=V(0.0, output_field=FloatField()),
                    sgst=V(0.0, output_field=FloatField()),
                    igst=Sum('total') * F('tax_rate') / 100,
                    
                    
                    )
                    
                retainer_items_summary = Retaineritems.objects.filter(company=cmp,retainer__retainer_invoice_date__gte = from_date,retainer__retainer_invoice_date__lte=to_date,retainer__customer_placesupply = place).values('item__hsn_code').annotate(
                    item_hsn=Max('item__hsn_code'),
                    tax_rate=Cast(F('rate'), output_field=FloatField()),
                    item_total=Cast(Sum(Cast('amount', output_field=FloatField())), output_field=FloatField()),
                    calculated_tax=Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
                    igst =Cast(Sum(Cast('amount', output_field=FloatField())) * F('rate') / 100, output_field=FloatField()),
                    cgst=V(0.0, output_field=FloatField()),
                    sgst=V(0.0, output_field=FloatField()),
                )

            recurring_total = sum(item['item_total'] for item in recurring_items_summary)
            invoice_total = sum(item['item_total'] for item in invoice_items_summary)
            retainer_total = sum(item['item_total'] for item in retainer_items_summary)
        
            grand_total = recurring_total + invoice_total + retainer_total
            

            combined_summary = list(recurring_items_summary) + list(invoice_items_summary) + list(retainer_items_summary)
            unique_items = defaultdict(lambda: {'tax_rate': 0, 'item_total': 0, 'calculated_tax': 0,'igst': 0, 'cgst': 0, 'sgst': 0})

            
            for summary in combined_summary:
                item_hsn = summary['item_hsn']
            
                unique_items[item_hsn]['tax_rate'] += summary['tax_rate']
                unique_items[item_hsn]['item_total'] += summary['item_total']
                unique_items[item_hsn]['calculated_tax'] += summary['calculated_tax']
                unique_items[item_hsn]['igst'] += summary['igst']
                unique_items[item_hsn]['cgst'] += summary['cgst']
                unique_items[item_hsn]['sgst'] += summary['sgst']

        
            unique_items = dict(unique_items)
            context = {'cmp': cmp,'combined_summary':unique_items,'grand_total':grand_total,'from_date':from_date,'to_date':to_date,'place':place}
            template_path = 'zohomodules/Reports/sale_hsn_email.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Sales Summary By HSN Details'
            subject = f"Sale Summary By HSN Details - {cmp.company_name}"
            from django.core.mail import EmailMessage as EmailMsg
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Details for - Sale Summary Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Report details has been shared via email successfully..!')
            return redirect(sales_summary_hsn)

#End

# ashikhvu----------------------------All partei report--------------------------------------
def all_parties(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
    else:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=login_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        cmp = dash_details.company
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        cmp = dash_details

    allmodules= ZohoModules.objects.get(company=cmp,status='New')

    customers = Customer.objects.filter(company=cmp)
    vendors = Vendor.objects.filter(company=cmp)
    
    ret_inv = RetainerInvoice.objects.filter(company=cmp)
    recurr_bill = Recurring_bills.objects.filter(company=cmp)

    transaction = request.POST.get('transactions')

    if request.method == 'POST':
        startDate = request.POST.get('from_date')
        endDate = request.POST.get('to_date')
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None
        
        cust_transactions = list(
            invoiceitems.objects.filter(company=cmp,invoice__customer__in=customers,invoice__date__range=[startDate,endDate]).annotate(object_customer_id=F('invoice__customer'),object_type=Value("Invoice",output_field=CharField()),object_number=F('invoice__invoice_number'),object_date=F("invoice__date"),object_total=F('invoice__sub_total'),object_balance=F('invoice__balance'))
        )+list(
            SalesOrderItems.objects.filter(company=cmp,sales_order__customer__in=customers,sales_order__sales_order_date__range=[startDate,endDate]).annotate(object_customer_id=F('sales_order__customer'),object_type=Value("Sales Order",output_field=CharField()),object_number=F('sales_order__sales_order_number'),object_date=F("sales_order__sales_order_date"),object_total=F('sales_order__grand_total'),object_balance=F('sales_order__balance'))
        )+list(
            Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__customer__in=customers,reccuring_invoice__start_date__range=[startDate,endDate]).annotate(object_customer_id=F('reccuring_invoice__customer'),object_type=Value("Recurring Invoice",output_field=CharField()),object_number=F('reccuring_invoice__rec_invoice_no'),object_date=F("reccuring_invoice__start_date"),object_total=F('reccuring_invoice__grandtotal'),object_balance=F('reccuring_invoice__balance'))
        )+list(
            Retaineritems.objects.filter(retainer__in=ret_inv,retainer__customer_name__in=customers,retainer__retainer_invoice_date__range=[startDate,endDate]).annotate(object_customer_id=F('retainer__customer_name'),object_type=Value("Retainer Invoice",output_field=CharField()),object_number=F('retainer__retainer_invoice_number'),object_date=F("retainer__retainer_invoice_date"),object_total=F('retainer__total_amount'),object_balance=F('retainer__balance'))
        )+list(
            Credit_Note_Items.objects.filter(company=cmp,credit_note__customer__in=customers,credit_note__credit_note_date__range=[startDate,endDate]).annotate(object_customer_id=F('credit_note__customer'),object_type=Value("Credit Note",output_field=CharField()),object_number=F('credit_note__credit_note_number'),object_date=F("credit_note__credit_note_date"),object_total=F('credit_note__grand_total'),object_balance=F('credit_note__balance'))
        )+list(
            Delivery_challan_item.objects.filter(company=cmp,delivery_challan__customer__in=customers,delivery_challan__challan_date__range=[startDate,endDate]).annotate(object_customer_id=F('delivery_challan__customer'),object_type=Value("Delivery Challan",output_field=CharField()),object_number=F('delivery_challan__challan_number'),object_date=F("delivery_challan__challan_date"),object_total=F('delivery_challan__grand_total'),object_balance=F('delivery_challan__balance'))
        )


        vendor_transactions = list(
            BillItems.objects.filter(Company=cmp,Bills__Vendor__in=vendors,Bills__Bill_Date__range=[startDate,endDate]).annotate(object_vendor_id=F('Bills__Vendor'),object_type=Value("Purchase Bill",output_field=CharField()),object_number=F('Bills__Bill_Number'),object_date=F("Bills__Bill_Date"),object_total=F('Bills__Grand_Total'),object_balance=F('Bills__Balance'))
        )+list(
            RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,recurr_bill_id__vendor_details__in=vendors,recurr_bill_id__rec_bill_date__range=[startDate,endDate]).annotate(object_vendor_id=F('recurr_bill_id__vendor_details'),object_type=Value("Recurring Bill",output_field=CharField()),object_number=F('recurr_bill_id__recc_bill_no'),object_date=F("recurr_bill_id__rec_bill_date"),object_total=F('recurr_bill_id__total'),object_balance=F('recurr_bill_id__bal'))
        )+list(
            debitnote_item.objects.filter(company=cmp,debit_note__vendor__in=vendors,debit_note__debitnote_date__range=[startDate,endDate]).annotate(object_vendor_id=F('debit_note__vendor'),object_type=Value("Debit Note",output_field=CharField()),object_number=F('debit_note__debitnote_no'),object_date=F("debit_note__debitnote_date"),object_total=F('debit_note__grandtotal'),object_balance=F('debit_note__balance'))
        )+list(
            PurchaseOrderItems.objects.filter(company=cmp,purchase_order__vendor__in=vendors,purchase_order__purchase_order_date__range=[startDate,endDate]).annotate(object_vendor_id=F('purchase_order__vendor'),object_type=Value("Purchase Order",output_field=CharField()),object_number=Value('',output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_total=F('purchase_order__grand_total'),object_balance=F('purchase_order__balance'))
        )
    else:
        startDate=''
        endDate=''
        cust_transactions = list(
            invoiceitems.objects.filter(company=cmp,invoice__customer__in=customers).annotate(object_customer_id=F('invoice__customer'),object_type=Value("Invoice",output_field=CharField()),object_number=F('invoice__invoice_number'),object_date=F("invoice__date"),object_total=F('invoice__sub_total'),object_balance=F('invoice__balance'))
        )+list(
            SalesOrderItems.objects.filter(company=cmp,sales_order__customer__in=customers).annotate(object_customer_id=F('sales_order__customer'),object_type=Value("Sales Order",output_field=CharField()),object_number=F('sales_order__sales_order_number'),object_date=F("sales_order__sales_order_date"),object_total=F('sales_order__grand_total'),object_balance=F('sales_order__balance'))
        )+list(
            Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__customer__in=customers).annotate(object_customer_id=F('reccuring_invoice__customer'),object_type=Value("Recurring Invoice",output_field=CharField()),object_number=F('reccuring_invoice__rec_invoice_no'),object_date=F("reccuring_invoice__start_date"),object_total=F('reccuring_invoice__grandtotal'),object_balance=F('reccuring_invoice__balance'))
        )+list(
            Retaineritems.objects.filter(retainer__in=ret_inv,retainer__customer_name__in=customers).annotate(object_customer_id=F('retainer__customer_name'),object_type=Value("Retainer Invoice",output_field=CharField()),object_number=F('retainer__retainer_invoice_number'),object_date=F("retainer__retainer_invoice_date"),object_total=F('retainer__total_amount'),object_balance=F('retainer__balance'))
        )+list(
            Credit_Note_Items.objects.filter(company=cmp,credit_note__customer__in=customers).annotate(object_customer_id=F('credit_note__customer'),object_type=Value("Credit Note",output_field=CharField()),object_number=F('credit_note__credit_note_number'),object_date=F("credit_note__credit_note_date"),object_total=F('credit_note__grand_total'),object_balance=F('credit_note__balance'))
        )+list(
            Delivery_challan_item.objects.filter(company=cmp,delivery_challan__customer__in=customers).annotate(object_customer_id=F('delivery_challan__customer'),object_type=Value("Delivery Challan",output_field=CharField()),object_number=F('delivery_challan__challan_number'),object_date=F("delivery_challan__challan_date"),object_total=F('delivery_challan__grand_total'),object_balance=F('delivery_challan__balance'))
        )


        vendor_transactions = list(
            BillItems.objects.filter(Company=cmp,Bills__Vendor__in=vendors).annotate(object_vendor_id=F('Bills__Vendor'),object_type=Value("Purchase Bill",output_field=CharField()),object_number=F('Bills__Bill_Number'),object_date=F("Bills__Bill_Date"),object_total=F('Bills__Grand_Total'),object_balance=F('Bills__Balance'))
        )+list(
            RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,recurr_bill_id__vendor_details__in=vendors).annotate(object_vendor_id=F('recurr_bill_id__vendor_details'),object_type=Value("Recurring Bill",output_field=CharField()),object_number=F('recurr_bill_id__recc_bill_no'),object_date=F("recurr_bill_id__rec_bill_date"),object_total=F('recurr_bill_id__total'),object_balance=F('recurr_bill_id__bal'))
        )+list(
            debitnote_item.objects.filter(company=cmp,debit_note__vendor__in=vendors).annotate(object_vendor_id=F('debit_note__vendor'),object_type=Value("Debit Note",output_field=CharField()),object_number=F('debit_note__debitnote_no'),object_date=F("debit_note__debitnote_date"),object_total=F('debit_note__grandtotal'),object_balance=F('debit_note__balance'))
        )+list(
            PurchaseOrderItems.objects.filter(company=cmp,purchase_order__vendor__in=vendors).annotate(object_vendor_id=F('purchase_order__vendor'),object_type=Value("Purchase Order",output_field=CharField()),object_number=Value('',output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_total=F('purchase_order__grand_total'),object_balance=F('purchase_order__balance'))
        )

    total_receivable=0
    cust_array = []
    for cust in customers:
        tot_balance=0
        for tran in cust_transactions:
            if cust.id == tran.object_customer_id:
                tot_balance += float(tran.object_balance) 
        total_receivable += float(tot_balance)
        cust_array.append({
            "party_name": cust.first_name+" "+cust.last_name,
            "email":cust.customer_email,
            "phone":cust.customer_mobile,
            "receivable":tot_balance,
            "payable":0,
            "credit_limit":cust.credit_limit,
        })

    total_payable=0
    vend_array = []
    for vend in vendors:
        tot_balance=0
        for tran in vendor_transactions:
            if vend.id == tran.object_vendor_id:
                tot_balance += float(tran.object_balance) 
        total_payable += float(tot_balance)
        vend_array.append({
            "party_name": vend.first_name+" "+vend.last_name,
            "email":vend.vendor_email,
            "phone":vend.mobile,
            "receivable":0,
            "payable":tot_balance,
            "credit_limit":vend.credit_limit,
        }) 

    
    if transaction == "account_payable":
        all_parties=cust_array
    elif transaction == "account_receivable":
        all_parties=vend_array
    else:
        all_parties = cust_array+vend_array
    
    context = {
        'cmp':cmp,
        'log_details': dash_details,
        'allmodules': allmodules,
        'all_parties':all_parties,
        'total_receivable':total_receivable,
        'total_payable':total_payable,
        'startDate':startDate,
        'endDate':endDate,
    }
    return render(request, 'zohomodules/Reports/all_parties.html',context)
    
    
def all_parties_ReportToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                customers = Customer.objects.filter(company=cmp)
                vendors = Vendor.objects.filter(company=cmp)
                
                ret_inv = RetainerInvoice.objects.filter(company=cmp)
                recurr_bill = Recurring_bills.objects.filter(company=cmp)

                transaction = request.POST.get('transactions')

                if startDate and endDate:
                    
                    cust_transactions = list(
                        invoiceitems.objects.filter(company=cmp,invoice__customer__in=customers,invoice__date__range=[startDate,endDate]).annotate(object_customer_id=F('invoice__customer'),object_type=Value("Invoice",output_field=CharField()),object_number=F('invoice__invoice_number'),object_date=F("invoice__date"),object_total=F('invoice__sub_total'),object_balance=F('invoice__balance'))
                    )+list(
                        SalesOrderItems.objects.filter(company=cmp,sales_order__customer__in=customers,sales_order__sales_order_date__range=[startDate,endDate]).annotate(object_customer_id=F('sales_order__customer'),object_type=Value("Sales Order",output_field=CharField()),object_number=F('sales_order__sales_order_number'),object_date=F("sales_order__sales_order_date"),object_total=F('sales_order__grand_total'),object_balance=F('sales_order__balance'))
                    )+list(
                        Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__customer__in=customers,reccuring_invoice__start_date__range=[startDate,endDate]).annotate(object_customer_id=F('reccuring_invoice__customer'),object_type=Value("Recurring Invoice",output_field=CharField()),object_number=F('reccuring_invoice__rec_invoice_no'),object_date=F("reccuring_invoice__start_date"),object_total=F('reccuring_invoice__grandtotal'),object_balance=F('reccuring_invoice__balance'))
                    )+list(
                        Retaineritems.objects.filter(retainer__in=ret_inv,retainer__customer_name__in=customers,retainer__retainer_invoice_date__range=[startDate,endDate]).annotate(object_customer_id=F('retainer__customer_name'),object_type=Value("Retainer Invoice",output_field=CharField()),object_number=F('retainer__retainer_invoice_number'),object_date=F("retainer__retainer_invoice_date"),object_total=F('retainer__total_amount'),object_balance=F('retainer__balance'))
                    )+list(
                        Credit_Note_Items.objects.filter(company=cmp,credit_note__customer__in=customers,credit_note__credit_note_date__range=[startDate,endDate]).annotate(object_customer_id=F('credit_note__customer'),object_type=Value("Credit Note",output_field=CharField()),object_number=F('credit_note__credit_note_number'),object_date=F("credit_note__credit_note_date"),object_total=F('credit_note__grand_total'),object_balance=F('credit_note__balance'))
                    )+list(
                        Delivery_challan_item.objects.filter(company=cmp,delivery_challan__customer__in=customers,delivery_challan__challan_date__range=[startDate,endDate]).annotate(object_customer_id=F('delivery_challan__customer'),object_type=Value("Delivery Challan",output_field=CharField()),object_number=F('delivery_challan__challan_number'),object_date=F("delivery_challan__challan_date"),object_total=F('delivery_challan__grand_total'),object_balance=F('delivery_challan__balance'))
                    )


                    vendor_transactions = list(
                        BillItems.objects.filter(Company=cmp,Bills__Vendor__in=vendors,Bills__Bill_Date__range=[startDate,endDate]).annotate(object_vendor_id=F('Bills__Vendor'),object_type=Value("Purchase Bill",output_field=CharField()),object_number=F('Bills__Bill_Number'),object_date=F("Bills__Bill_Date"),object_total=F('Bills__Grand_Total'),object_balance=F('Bills__Balance'))
                    )+list(
                        RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,recurr_bill_id__vendor_details__in=vendors,recurr_bill_id__rec_bill_date__range=[startDate,endDate]).annotate(object_vendor_id=F('recurr_bill_id__vendor_details'),object_type=Value("Recurring Bill",output_field=CharField()),object_number=F('recurr_bill_id__recc_bill_no'),object_date=F("recurr_bill_id__rec_bill_date"),object_total=F('recurr_bill_id__total'),object_balance=F('recurr_bill_id__bal'))
                    )+list(
                        debitnote_item.objects.filter(company=cmp,debit_note__vendor__in=vendors,debit_note__debitnote_date__range=[startDate,endDate]).annotate(object_vendor_id=F('debit_note__vendor'),object_type=Value("Debit Note",output_field=CharField()),object_number=F('debit_note__debitnote_no'),object_date=F("debit_note__debitnote_date"),object_total=F('debit_note__grandtotal'),object_balance=F('debit_note__balance'))
                    )+list(
                        PurchaseOrderItems.objects.filter(company=cmp,purchase_order__vendor__in=vendors,purchase_order__purchase_order_date__range=[startDate,endDate]).annotate(object_vendor_id=F('purchase_order__vendor'),object_type=Value("Purchase Order",output_field=CharField()),object_number=Value('',output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_total=F('purchase_order__grand_total'),object_balance=F('purchase_order__balance'))
                    )
                else:
                    startDate=''
                    endDate=''
                    cust_transactions = list(
                        invoiceitems.objects.filter(company=cmp,invoice__customer__in=customers).annotate(object_customer_id=F('invoice__customer'),object_type=Value("Invoice",output_field=CharField()),object_number=F('invoice__invoice_number'),object_date=F("invoice__date"),object_total=F('invoice__sub_total'),object_balance=F('invoice__balance'))
                    )+list(
                        SalesOrderItems.objects.filter(company=cmp,sales_order__customer__in=customers).annotate(object_customer_id=F('sales_order__customer'),object_type=Value("Sales Order",output_field=CharField()),object_number=F('sales_order__sales_order_number'),object_date=F("sales_order__sales_order_date"),object_total=F('sales_order__grand_total'),object_balance=F('sales_order__balance'))
                    )+list(
                        Reccurring_Invoice_item.objects.filter(company=cmp,reccuring_invoice__customer__in=customers).annotate(object_customer_id=F('reccuring_invoice__customer'),object_type=Value("Recurring Invoice",output_field=CharField()),object_number=F('reccuring_invoice__rec_invoice_no'),object_date=F("reccuring_invoice__start_date"),object_total=F('reccuring_invoice__grandtotal'),object_balance=F('reccuring_invoice__balance'))
                    )+list(
                        Retaineritems.objects.filter(retainer__in=ret_inv,retainer__customer_name__in=customers).annotate(object_customer_id=F('retainer__customer_name'),object_type=Value("Retainer Invoice",output_field=CharField()),object_number=F('retainer__retainer_invoice_number'),object_date=F("retainer__retainer_invoice_date"),object_total=F('retainer__total_amount'),object_balance=F('retainer__balance'))
                    )+list(
                        Credit_Note_Items.objects.filter(company=cmp,credit_note__customer__in=customers).annotate(object_customer_id=F('credit_note__customer'),object_type=Value("Credit Note",output_field=CharField()),object_number=F('credit_note__credit_note_number'),object_date=F("credit_note__credit_note_date"),object_total=F('credit_note__grand_total'),object_balance=F('credit_note__balance'))
                    )+list(
                        Delivery_challan_item.objects.filter(company=cmp,delivery_challan__customer__in=customers).annotate(object_customer_id=F('delivery_challan__customer'),object_type=Value("Delivery Challan",output_field=CharField()),object_number=F('delivery_challan__challan_number'),object_date=F("delivery_challan__challan_date"),object_total=F('delivery_challan__grand_total'),object_balance=F('delivery_challan__balance'))
                    )


                    vendor_transactions = list(
                        BillItems.objects.filter(Company=cmp,Bills__Vendor__in=vendors).annotate(object_vendor_id=F('Bills__Vendor'),object_type=Value("Purchase Bill",output_field=CharField()),object_number=F('Bills__Bill_Number'),object_date=F("Bills__Bill_Date"),object_total=F('Bills__Grand_Total'),object_balance=F('Bills__Balance'))
                    )+list(
                        RecurrItemsList.objects.filter(recurr_bill_id__in=recurr_bill,recurr_bill_id__vendor_details__in=vendors).annotate(object_vendor_id=F('recurr_bill_id__vendor_details'),object_type=Value("Recurring Bill",output_field=CharField()),object_number=F('recurr_bill_id__recc_bill_no'),object_date=F("recurr_bill_id__rec_bill_date"),object_total=F('recurr_bill_id__total'),object_balance=F('recurr_bill_id__bal'))
                    )+list(
                        debitnote_item.objects.filter(company=cmp,debit_note__vendor__in=vendors).annotate(object_vendor_id=F('debit_note__vendor'),object_type=Value("Debit Note",output_field=CharField()),object_number=F('debit_note__debitnote_no'),object_date=F("debit_note__debitnote_date"),object_total=F('debit_note__grandtotal'),object_balance=F('debit_note__balance'))
                    )+list(
                        PurchaseOrderItems.objects.filter(company=cmp,purchase_order__vendor__in=vendors).annotate(object_vendor_id=F('purchase_order__vendor'),object_type=Value("Purchase Order",output_field=CharField()),object_number=Value('',output_field=CharField()),object_date=F("purchase_order__purchase_order_date"),object_total=F('purchase_order__grand_total'),object_balance=F('purchase_order__balance'))
                    )

                total_receivable=0
                cust_array = []
                for cust in customers:
                    tot_balance=0
                    for tran in cust_transactions:
                        if cust.id == tran.object_customer_id:
                            tot_balance += float(tran.object_balance) 
                    total_receivable += float(tot_balance)
                    cust_array.append({
                        "party_name": cust.first_name+" "+cust.last_name,
                        "email":cust.customer_email,
                        "phone":cust.customer_mobile,
                        "receivable":tot_balance,
                        "payable":0,
                        "credit_limit":cust.credit_limit,
                    })

                total_payable=0
                vend_array = []
                for vend in vendors:
                    tot_balance=0
                    for tran in vendor_transactions:
                        if vend.id == tran.object_vendor_id:
                            tot_balance += float(tran.object_balance) 
                    total_payable += float(tot_balance)
                    vend_array.append({
                        "party_name": vend.first_name+" "+vend.last_name,
                        "email":vend.vendor_email,
                        "phone":vend.mobile,
                        "receivable":0,
                        "payable":tot_balance,
                        "credit_limit":vend.credit_limit,
                    }) 

                
                if transaction == "account_payable":
                    all_parties=cust_array
                elif transaction == "account_receivable":
                    all_parties=vend_array
                else:
                    all_parties = cust_array+vend_array

                context = {
                    'cmp': cmp,
                    'all_parties':all_parties,
                    'total_receivable':total_receivable,
                    'total_payable':total_payable,
                    'startDate':startDate,
                    'endDate':endDate,
                }
                template_path = 'zohomodules/Reports/all_parties_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                print('for loop executed')
                for i in emails_list:
                    print(i)
                result = BytesIO()

                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                
                filename = f'All Parties Report'
                subject = f"All Parties Report"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached All Parties Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'All Parties Report details has been shared via email successfully..!')
                return redirect('all_parties')
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect('all_parties')
            
#End

#---------------------------------- GSTR-2 ----------------------------------#    
def load_gstr_two(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)
    reportData = []
    cNotedata = []

    bill = Bill.objects.filter(Company = cmp)
    if bill:
        for i in bill:
            partyName = i.Vendor.first_name +" "+i.Vendor.last_name
            date = i.Bill_Date
            ref = i.Bill_Number
            type = 'Bill'
            total = i.Grand_Total
            paid =i.Advance_amount_Paid
            balance=i.Balance
            gstin=i.Vendor.gst_number
            invoice_no=i.Bill_Number
            igst=i.IGST
            sgst=i.SGST
            cgst=i.CGST
            place_of_supply=i.Vendor.source_of_supply
            subtotal=i.Sub_Total
            tax_amount=i.Tax_Amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'invoice_no':invoice_no,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
            }
            reportData.append(details)

    recbill = Recurring_bills.objects.filter(company = cmp)
    if recbill:
        for r in recbill:
            partyName = r.vendor_details.first_name +" "+r.vendor_details.last_name
            date = r.rec_bill_date
            ref = r.recc_bill_no
            type = 'Recurring Bill'
            total = r.total
            paid =r.paid
            balance=r.bal
            gstin=r.vend_gst_no
            igst=r.igst
            sgst=r.sgst
            cgst=r.cgst
            place_of_supply=r.vend_source_of_supply
            subtotal=r.sub_total
            tax_amount=r.tax_amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                
            }
            reportData.append(details)

    dnote = debitnote.objects.filter(company = cmp)
    if dnote:
        for note in dnote:
            partyName = note.vendor.first_name +" "+note.vendor.last_name
            date = note.debitnote_date
            ref = note.debitnote_no
            ctype = 'Debit Note'
            total = note.grandtotal
            balance = note.balance
            paid = note.advance_paid
            gstin=note.gstin
            igst= note.igst
            sgst=note.sgst
            cgst=note.cgst
            place_of_supply=note.place_of_supply
            subtotal=note.subtotal

            tax_amount=note.tax_amount
            bill_number=note.bill_no
            bill_type=note.bill_type
            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':ctype,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                'bill_number':bill_number,
                'bill_type':bill_type
                
            }
            cNotedata.append(details)

    context = {'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'reportData':reportData,'cNotedata':cNotedata, 'rtype':'all',
    'startDate':None, 'endDate':None}
    return render(request, 'zohomodules/Reports/gstr2.html', context)

def customize_gstr_two(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    allmodules= ZohoModules.objects.get(company = cmp)

    startDate = request.GET['from_date']
    endDate = request.GET['to_date']
    rtype = request.GET['status']
    if startDate == "":
        startDate = None
    if endDate == "":
        endDate = None
    reportData = []
    cNotedata = []

    if startDate and endDate:
        bill = Bill.objects.filter(Company = cmp, Bill_Date__range = [startDate, endDate])
        recbill = Recurring_bills.objects.filter(company = cmp, rec_bill_date__range = [startDate, endDate])
        dnote = debitnote.objects.filter(company = cmp, debitnote_date__range = [startDate, endDate])
    else:
        bill = Bill.objects.filter(Company = cmp)
        recbill = Recurring_bills.objects.filter(company = cmp)
        dnote = debitnote.objects.filter(company = cmp)

    if rtype == 'with GSTIN':
        bill = bill.exclude(Vendor__gst_number = '')
        bill = bill.exclude(Vendor__gst_number = 'null')
        recbill = recbill.exclude(vend_gst_no = '')
        recbill = recbill.exclude(vend_gst_no = 'null')
        dnote = dnote.exclude(gstin = '')
        dnote = dnote.exclude(gstin = 'null')

    if rtype == 'without GSTIN':
        bill = bill.filter(Q(Vendor__gst_number = '') | Q(Vendor__gst_number = 'null'))
        recbill = recbill.filter(Q(vend_gst_no = '') | Q(vend_gst_no = 'null'))
        dnote = dnote.filter(Q(gstin = '') | Q(gstin = 'null'))

    if bill:
        for i in bill:
            partyName = i.Vendor.first_name +" "+i.Vendor.last_name
            date = i.Bill_Date
            ref = i.Bill_Number
            type = 'Bill'
            total = i.Grand_Total
            paid =i.Advance_amount_Paid
            balance=i.Balance
            gstin=i.Vendor.gst_number
            invoice_no=i.Bill_Number
            igst=i.IGST
            sgst=i.SGST
            cgst=i.CGST
            place_of_supply=i.Vendor.source_of_supply
            subtotal=i.Sub_Total
            tax_amount=i.Tax_Amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'invoice_no':invoice_no,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
            }
            reportData.append(details)

    if recbill:
        for r in recbill:
            partyName = r.vendor_details.first_name +" "+r.vendor_details.last_name
            date = r.rec_bill_date
            ref = r.recc_bill_no
            type = 'Recurring Bill'
            total = r.total
            paid =r.paid
            balance=r.bal
            gstin=r.vend_gst_no
            igst=r.igst
            sgst=r.sgst
            cgst=r.cgst
            place_of_supply=r.vend_source_of_supply
            subtotal=r.sub_total
            tax_amount=r.tax_amount

            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':type,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                
            }
            reportData.append(details)

    if dnote:
        for note in dnote:
            partyName = note.vendor.first_name +" "+note.vendor.last_name
            date = note.debitnote_date
            ref = note.debitnote_no
            ctype = 'Debit Note'
            total = note.grandtotal
            balance = note.balance
            paid = note.advance_paid
            gstin=note.gstin
            igst= note.igst
            sgst=note.sgst
            cgst=note.cgst
            place_of_supply=note.place_of_supply
            subtotal=note.subtotal

            tax_amount=note.tax_amount
            bill_number=note.bill_no
            bill_type=note.bill_type
            details = {
                'date': date,
                'partyName': partyName,
                'ref':ref,
                'type':ctype,
                'total':total,
                'paid':paid,
                'balance':balance,
                'gstin':gstin,
                'igst':igst,
                'sgst':sgst,
                'cgst':cgst,
                'place_of_supply':place_of_supply,
                'subtotal':subtotal,
                'tax_amount':tax_amount,
                'bill_number':bill_number,
                'bill_type':bill_type
                
            }
            cNotedata.append(details)

    context = {'allmodules':allmodules, 'details':dash_details,'log_details':log_details, 'cmp':cmp, 'reportData':reportData,'cNotedata':cNotedata, 'rtype':rtype, 
               'startDate':startDate, 'endDate':endDate}
    return render(request, 'zohomodules/Reports/gstr2.html', context)

def share_gstr_two(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

    try:
        emails_string = request.GET.get('email_ids')

        # Split the string by commas and remove any leading or trailing whitespace
        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.GET.get('email_message')
        startDate = request.GET.get('from_date')
        endDate = request.GET.get('to_date')
        rtype = request.GET.get('status')
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None
        reportData = []
        cNotedata = []

        if startDate and endDate:
            bill = Bill.objects.filter(Company = cmp, Bill_Date__range = [startDate, endDate])
            recbill = Recurring_bills.objects.filter(company = cmp, rec_bill_date__range = [startDate, endDate])
            dnote = debitnote.objects.filter(company = cmp, debitnote_date__range = [startDate, endDate])
        else:
            bill = Bill.objects.filter(Company = cmp)
            recbill = Recurring_bills.objects.filter(company = cmp)
            dnote = debitnote.objects.filter(company = cmp)

        if rtype == 'with GSTIN':
            bill = bill.exclude(Vendor__gst_number = '')
            bill = bill.exclude(Vendor__gst_number = 'null')
            recbill = recbill.exclude(vend_gst_no = '')
            recbill = recbill.exclude(vend_gst_no = 'null')
            dnote = dnote.exclude(gstin = '')
            dnote = dnote.exclude(gstin = 'null')

        if rtype == 'without GSTIN':
            bill = bill.filter(Q(Vendor__gst_number = '') | Q(Vendor__gst_number = 'null'))
            recbill = recbill.filter(Q(vend_gst_no = '') | Q(vend_gst_no = 'null'))
            dnote = dnote.filter(Q(gstin = '') | Q(gstin = 'null'))

        if bill:
            for i in bill:
                partyName = i.Vendor.first_name +" "+i.Vendor.last_name
                date = i.Bill_Date
                ref = i.Bill_Number
                type = 'Bill'
                total = i.Grand_Total
                paid =i.Advance_amount_Paid
                balance=i.Balance
                gstin=i.Vendor.gst_number
                invoice_no=i.Bill_Number
                igst=i.IGST
                sgst=i.SGST
                cgst=i.CGST
                place_of_supply=i.Vendor.source_of_supply
                subtotal=i.Sub_Total
                tax_amount=i.Tax_Amount

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'invoice_no':invoice_no,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                }
                reportData.append(details)

        if recbill:
            for r in recbill:
                partyName = r.vendor_details.first_name +" "+r.vendor_details.last_name
                date = r.rec_bill_date
                ref = r.recc_bill_no
                type = 'Recurring Bill'
                total = r.total
                paid =r.paid
                balance=r.bal
                gstin=r.vend_gst_no
                igst=r.igst
                sgst=r.sgst
                cgst=r.cgst
                place_of_supply=r.vend_source_of_supply
                subtotal=r.sub_total
                tax_amount=r.tax_amount

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    
                }
                reportData.append(details)

        if dnote:
            for note in dnote:
                partyName = note.vendor.first_name +" "+note.vendor.last_name
                date = note.debitnote_date
                ref = note.debitnote_no
                ctype = 'Debit Note'
                total = note.grandtotal
                balance = note.balance
                paid = note.advance_paid
                gstin=note.gstin
                igst= note.igst
                sgst=note.sgst
                cgst=note.cgst
                place_of_supply=note.place_of_supply
                subtotal=note.subtotal

                tax_amount=note.tax_amount
                bill_number=note.bill_no
                bill_type=note.bill_type
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':ctype,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    'bill_number':bill_number,
                    'bill_type':bill_type
                    
                }
                cNotedata.append(details)


        context = {'cmp':cmp, 'reportData':reportData,'cNotedata':cNotedata, 'rtype':rtype}
        template_path = 'zohomodules/Reports/gstr2_pdf.html'
        template = get_template(template_path)

        html  = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
        pdf = result.getvalue()
        filename = f'GSTR2.pdf'
        subject = f"Sharing GSTR2"
        email = EmailMsg(subject, f"Hi,\nPlease find the attached GSTR2 Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)
        message = 'Report has been shared via email successfully..!'
        return JsonResponse({'message':message})
    except Exception as e:
        message = 'Report cannot be send'
        return JsonResponse({'message':message})
     
#End
def sale_order_item_details(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        items = SalesOrderItems.objects.all()
        item_dict = {}

        for item in items:
            item_name = Items.objects.get(id=item.item_id).item_name
            if item_name in item_dict:
                item_dict[item_name]['quantity'] += item.quantity
                item_dict[item_name]['price'] += item.price
            else:
                item_dict[item_name] = {
                    'quantity': item.quantity,
                    'price': item.price
                }

        allmodules = ZohoModules.objects.get(company=cmp)

        context = {
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'cmp': cmp,
            'items': item_dict
        }
    else:
        return redirect('/')

    return render(request, 'zohomodules/sales_order/sale_order_item_details.html', context)


def sale_order_item_details_customized(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)

            items = SalesOrderItems.objects.all()

            if startDate and endDate:
                items = items.filter(sales_order__sales_order_date__range=[startDate, endDate])
            
            if trans == 'save':
                items = items.filter(sales_order__status='Save')
            elif trans == 'draft':
                items = items.filter(sales_order__status='Draft')
            elif trans == 'all':
                pass
            elif trans:
                items = SalesOrderItems.objects.none()

            # Aggregate items by item_name
            aggregated_items = {}
            for item in items:
                item_name = Items.objects.get(id=item.item_id).item_name
                if item_name in aggregated_items:
                    aggregated_items[item_name]['quantity'] += item.quantity
                    aggregated_items[item_name]['price'] += item.price
                else:
                    aggregated_items[item_name] = {
                        'quantity': item.quantity,
                        'price': item.price
                    }

            # Create a list of aggregated items for the context
            aggregated_item_list = [
                {'item_name': name, 'quantity': details['quantity'], 'price': details['price']}
                for name, details in aggregated_items.items()
            ]

            allmodules = ZohoModules.objects.get(company=cmp)
            context = {
                'allmodules': allmodules,
                'details': dash_details,
                'log_details': log_details,
                'startDate': startDate,
                'endDate': endDate,
                'transaction': trans,
                'companyName': cmp.company_name,
                'cmp': cmp,
                'items': aggregated_item_list
            }
    else:
        return redirect('/')

    return render(request, 'zohomodules/sales_order/sale_order_itemcustomized.html', context)


def sales_order_item_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                items = SalesOrderItems.objects.all()  # Query all SalesOrderItems
                aggregated_items = {}

                # Aggregate items by item name
                for item in items:
                    item_name = Items.objects.get(id=item.item_id).item_name
                    if item_name in aggregated_items:
                        # If item already exists, update quantity and amount
                        aggregated_items[item_name]['quantity'] += item.quantity
                        aggregated_items[item_name]['amount'] += item.quantity * item.price
                    else:
                        # Otherwise, initialize item in aggregated_items
                        aggregated_items[item_name] = {
                            'quantity': item.quantity,
                            'price': item.price,
                            'amount': item.quantity * item.price
                        }

                # Create a list of aggregated items for the context
                aggregated_item_list = [
                    {'item_name': name, 'quantity': details['quantity'], 'price': details['price'], 'amount': details['amount']}
                    for name, details in aggregated_items.items()
                ]

                context = {
                    'cmp': cmp,
                    'startDate': startDate,
                    'endDate': endDate,
                    'items': aggregated_item_list,
                    'log_details': log_details,
                    'companyName': cmp.company_name,
                }
                template_path = 'zohomodules/sales_order/sales_order_item_email.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Sales order item details'
                subject = 'Sales order item details'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Sales order item details report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales order item details report details have been shared via email successfully!')
                return redirect(sale_order_item_details)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(sale_order_item_details)


def sales_order_item_emailcustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                trans = request.GET.get('transactions', None)
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                items = SalesOrderItems.objects.all()

                if startDate and endDate:
                    items = items.filter(sales_order__sales_order_date__range=[startDate, endDate])
                
                if trans == 'save':
                    items = items.filter(sales_order__status='Save')
                elif trans == 'draft':
                    items = items.filter(sales_order__status='Draft')
                elif trans == 'all':
                    pass
                elif trans:
                    items = SalesOrderItems.objects.none()

                # Aggregate items by item_name
                aggregated_items = {}
                for item in items:
                    item_name = Items.objects.get(id=item.item_id).item_name
                    item.amount = item.quantity * item.price  # Calculate amount for the item
                    if item_name in aggregated_items:
                        aggregated_items[item_name]['quantity'] += item.quantity
                        aggregated_items[item_name]['price'] += item.price
                    else:
                        aggregated_items[item_name] = {
                            'quantity': item.quantity,
                            'price': item.price,
                            'amount': item.amount  # Include amount in aggregated items
                        }

                # Create a list of aggregated items for the context
                aggregated_item_list = [
                    {'item_name': name, 'quantity': details['quantity'], 'price': details['price'], 'amount': details['amount']}
                    for name, details in aggregated_items.items()
                ]

                allmodules = ZohoModules.objects.get(company=cmp)
                context = {
                    'allmodules': allmodules,
                    'details': dash_details,
                    'log_details': log_details,
                    'startDate': startDate,
                    'endDate': endDate,
                    'transaction': trans,
                    'companyName': cmp.company_name,
                    'cmp': cmp,
                    'items': aggregated_item_list
                }
                template_path = 'zohomodules/sales_order/sales_order_item_emailcustomized.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Sales order item details'
                subject = 'Sales order item details'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Sales order item details report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales order item details report details have been shared via email successfully!')
                return redirect(sale_order_item_details)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(sale_order_item_details)
            
#-------------------------Item report by party---Abhinand T K------------------#
def item_report_by_party(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            company = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = company)
        customers = Customer.objects.filter(company = company, customer_status="Active")
        vendors = Vendor.objects.filter(company=company, vendor_status = "Active")
        


        context = {'allmodules':allmodules, 'details':dash_details, 'company':company,'log_details':log_details,
        'customers':customers, 'vendors':vendors}



        
        return render(request, 'zohomodules/Reports/item_report_by_party.html', context)


def item_report_by_party_customized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            company = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company = company)
        customers = Customer.objects.filter(company = company, customer_status="Active")
        vendors = Vendor.objects.filter(company=company, vendor_status = "Active")

        if request.method == 'POST':
            startDate = request.POST['from_date']
            endDate = request.POST['to_date']
            party_type = request.POST['type_of_party']
            party_id = request.POST['party_id']


            date_format = "%Y-%m-%d"

            start_date = datetime.strptime(startDate, date_format)
            end_date = datetime.strptime(endDate, date_format)





            item_list = Items.objects.filter(company=company)
            item_report = {}

            total_sales_quantity = 0
            total_purchase_quantity = 0
            total_sales_amount = 0
            total_purchase_amount = 0
            
            j = 0
            for i in item_list:
                sales_quantity = 0
                sales_amount = 0
                purchase_quantity = 0
                purchase_amount = 0

                if party_type == '1':
                    party = Customer.objects.get(id=party_id)

                    invoice_list = invoice.objects.filter(company=company,date__range=[start_date, end_date])
                    for invoice_l in invoice_list:

                        inv_items = invoiceitems.objects.filter(invoice=invoice_l)

                        for inv_i in inv_items:
                            if inv_i.invoice.customer == party:
                                if inv_i.Items == i:
                                    sales_quantity = sales_quantity + inv_i.quantity
                                    # sales_amount = sales_amount + inv_i.total
                                    sales_amount = sales_amount + inv_i.quantity * i.selling_price

                    rec_inv_list = RecurringInvoice.objects.filter(company=company, start_date__range=[start_date, end_date])
                    for rec_inv_l in rec_inv_list:

                        rec_items = Reccurring_Invoice_item.objects.filter(reccuring_invoice=rec_inv_l)
                        
                        for rec_i in rec_items:
                            if rec_i.reccuring_invoice.customer == party:
                                if rec_i.item == i:
                                    sales_quantity = sales_quantity + rec_i.quantity
                                    # sales_amount = sales_amount + rec_i.total
                                    sales_amount = sales_amount + rec_i.quantity * i.selling_price


                    ret_list = RetainerInvoice.objects.filter(company=company, created_at__range=[start_date, end_date])
                    for ret_l in ret_list:
                        ret_items = Retaineritems.objects.filter(retainer=ret_l)
                        for ret_i in ret_items:
                            if ret_i.retainer.customer_name == party:
                                if ret_i.item == i:
                                    sales_quantity = sales_quantity + ret_i.quantity
                                    # sales_amount = sales_amount + ret_i.total_amount
                                    sales_amount = sales_amount + ret_i.quantity * i.selling_price

                    total_sales_quantity = total_sales_quantity + sales_quantity
                    total_sales_amount = total_sales_amount + sales_amount
                
                if party_type == '2':
                    party = Vendor.objects.get(id=party_id)
                    bill_list = Bill.objects.filter(Company=company,Bill_Date__range=[start_date, end_date])
                    for bill_l in bill_list:
                        bill_items = BillItems.objects.filter(Bills=bill_l)
                        for bill_i in bill_items:
                            if bill_i.Bills.Vendor == party:
                                if bill_i.item_id == i:
                                    purchase_quantity = purchase_quantity + bill_i.qty
                                    # purchase_amount = purchase_amount + bill_i.total
                                    purchase_amount = purchase_amount + bill_i.qty * i.purchase_price

                    recc_bills = Recurring_bills.objects.filter(company=company,rec_bill_date__range = [start_date, end_date])
                    for recc_b in recc_bills:
                        rec_bill_items = RecurrItemsList.objects.filter(recurr_bill_id=recc_b)
                        for rec_bill_i in rec_bill_items:
                            if rec_bill_i.recurr_bill_id.vendor_details == party:
                                if rec_bill_i.item_id == i:
                                    purchase_quantity = purchase_quantity + rec_bill_i.qty
                                    # purchase_amount = purchase_amount + rec_bill_i.total
                                    purchase_amount = purchase_amount + rec_bill_i.qty * i.purchase_price

                    total_purchase_quantity = total_purchase_quantity + purchase_quantity
                    total_purchase_amount = total_purchase_amount + purchase_amount

                item_report[j] = [i.item_name, sales_quantity, sales_amount, purchase_quantity, purchase_amount]
                sales_quantity = 0
                sales_amount = 0
                purchase_quantity = 0
                purchase_amount = 0
                j = j + 1



        context = {'allmodules':allmodules, 'details':dash_details, 'company':company,'log_details':log_details,'item_report':item_report,
        'customers':customers, 'vendors':vendors, 'party':party, 'start_date':start_date, 'end_date':end_date,
        'total_sales_quantity': total_sales_quantity, 'total_purchase_quantity':total_purchase_quantity,
        'party_id':party_id,'party_type':party_type,'total_sales_amount':total_sales_amount,
        'total_purchase_amount':total_purchase_amount}



        return render(request, 'zohomodules/Reports/item_report_by_party.html', context)


def shareItemReportByPartyToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            company = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            company = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        customers = Customer.objects.filter(company = company, customer_status="Active")
        vendors = Vendor.objects.filter(company=company, vendor_status = "Active")

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                startDate = request.POST['start_date']
                endDate = request.POST['end_date']
                party_id = request.POST['party_id']
                party_type = request.POST['party_type']
        

                date_format = "%Y-%m-%d"

                start_date = datetime.strptime(startDate, date_format).date()
                end_date = datetime.strptime(endDate, date_format).date()

        


                item_list = Items.objects.filter(company=company)
                item_report = {}

                total_sales_quantity = 0
                total_purchase_quantity = 0
                total_sales_amount = 0
                total_purchase_amount = 0
                
                j = 0
                for i in item_list:
                    sales_quantity = 0
                    sales_amount = 0
                    purchase_quantity = 0
                    purchase_amount = 0

                    if party_type == '1':
                        party = Customer.objects.get(id=party_id)

                        invoice_list = invoice.objects.filter(company=company,date__range=[start_date, end_date])
                        for invoice_l in invoice_list:

                            inv_items = invoiceitems.objects.filter(invoice=invoice_l)

                            for inv_i in inv_items:
                                if inv_i.invoice.customer == party:
                                    if inv_i.Items == i:
                                        sales_quantity = sales_quantity + inv_i.quantity
                                        # sales_amount = sales_amount + inv_i.total
                                        sales_amount = sales_amount + inv_i.quantity * i.selling_price

                        rec_inv_list = RecurringInvoice.objects.filter(company=company, start_date__range=[start_date, end_date])
                        for rec_inv_l in rec_inv_list:

                            rec_items = Reccurring_Invoice_item.objects.filter(reccuring_invoice=rec_inv_l)
                            
                            for rec_i in rec_items:
                                if rec_i.reccuring_invoice.customer == party:
                                    if rec_i.item == i:
                                        sales_quantity = sales_quantity + rec_i.quantity
                                        # sales_amount = sales_amount + rec_i.total
                                        sales_amount = sales_amount + rec_i.quantity * i.selling_price


                        ret_list = RetainerInvoice.objects.filter(company=company, created_at__range=[start_date, end_date])
                        for ret_l in ret_list:
                            ret_items = Retaineritems.objects.filter(retainer=ret_l)
                            for ret_i in ret_items:
                                if ret_i.retainer.customer_name == party:
                                    if ret_i.item == i:
                                        sales_quantity = sales_quantity + ret_i.quantity
                                        # sales_amount = sales_amount + ret_i.total_amount
                                        sales_amount = sales_amount + ret_i.quantity * i.selling_price

                        total_sales_quantity = total_sales_quantity + sales_quantity
                        total_sales_amount = total_sales_amount + sales_amount
                    
                    if party_type == '2':
                        party = Vendor.objects.get(id=party_id)
                        bill_list = Bill.objects.filter(Company=company,Bill_Date__range=[start_date, end_date])
                        for bill_l in bill_list:
                            bill_items = BillItems.objects.filter(Bills=bill_l)
                            for bill_i in bill_items:
                                if bill_i.Bills.Vendor == party:
                                    if bill_i.item_id == i:
                                        purchase_quantity = purchase_quantity + bill_i.qty
                                        # purchase_amount = purchase_amount + bill_i.total
                                        purchase_amount = purchase_amount + bill_i.qty * i.purchase_price

                        recc_bills = Recurring_bills.objects.filter(company=company,rec_bill_date__range = [start_date, end_date])
                        for recc_b in recc_bills:
                            rec_bill_items = RecurrItemsList.objects.filter(recurr_bill_id=recc_b)
                            for rec_bill_i in rec_bill_items:
                                if rec_bill_i.recurr_bill_id.vendor_details == party:
                                    if rec_bill_i.item_id == i:
                                        purchase_quantity = purchase_quantity + rec_bill_i.qty
                                        # purchase_amount = purchase_amount + rec_bill_i.total
                                        purchase_amount = purchase_amount + rec_bill_i.qty * i.purchase_price

                        total_purchase_quantity = total_purchase_quantity + purchase_quantity
                        total_purchase_amount = total_purchase_amount + purchase_amount

                    item_report[j] = [i.item_name, sales_quantity, sales_amount, purchase_quantity, purchase_amount]
                    sales_quantity = 0
                    sales_amount = 0
                    purchase_quantity = 0
                    purchase_amount = 0
                    j = j + 1



                context = {'details':dash_details, 'company':company,'log_details':log_details,'item_report':item_report,
                    'customers':customers, 'vendors':vendors, 'party':party, 'start_date':start_date, 'end_date':end_date,
                    'total_sales_quantity': total_sales_quantity, 'total_purchase_quantity':total_purchase_quantity,
                    'party_id':party_id,'party_type':party_type,'total_sales_amount':total_sales_amount, 'total_purchase_amount':total_purchase_amount}



                template_path = 'zohomodules/Reports/item_report_by_party_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Item Report By Party'
                subject = f"Item Report By Party"
                # from django.core.mail import EmailMessage as EmailMsg
                email = EmailMultiAlternatives(subject, f"Hi,\nPlease find the attached Item Report By Party. \n{email_message}\n\n--\nRegards,\n{company.company_name}\n{company.address}\n{company.state} - {company.country}\n{company.contact}", settings.EMAIL_HOST_USER, emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)


                return JsonResponse({'status':True, 'message':'Sales By Report details has been shared via email successfully..!'})
        except Exception as e:
            print(e)
            return JsonResponse({'status':False, 'message':'Error while sending Email.!'})

#--------------------------End-------------------------------------------------#

def all_transactions(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)
            
        allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        
        reportData = []
        total_amount = 0
        total_balance = 0

        transactions = []

        # Fetching data from different models and populating transactions list

        # Invoices
        invoices = invoice.objects.filter(company=comp_details)
        for inv in invoices:
            transactions.append({
                'date': inv.date,
                'party_name': inv.customer.first_name + " " + inv.customer.last_name,
                'type': 'Invoice',
                'type_number': inv.invoice_number,
                'total_amount': inv.grand_total,
                'amount_paid': inv.advanced_paid,
                'balance': inv.balance
            })

        # Estimates
        estimates = Estimate.objects.filter(company=comp_details)
        for est in estimates:
            transactions.append({
                'date': est.estimate_date,
                'party_name': est.customer.first_name + " " + est.customer.last_name,
                'type': 'Estimate',
                'type_number': est.estimate_number,
                'total_amount': est.grand_total,
                'amount_paid': 0,  # Assuming no payment made for estimates initially
                'balance': 0  # Similarly, no balance for estimates initially
            })

        # Recurring Invoices
        rec_invoices = RecurringInvoice.objects.filter(company=comp_details)
        for rec_inv in rec_invoices:
            transactions.append({
                'date': rec_inv.start_date,
                'party_name': rec_inv.customer.first_name + " " + rec_inv.customer.last_name,
                'type': 'Recurring Invoice',
                'type_number': rec_inv.rec_invoice_no,
                'total_amount': rec_inv.grandtotal,
                'amount_paid': rec_inv.advance_paid,
                'balance': rec_inv.balance
            })

        # Purchase Orders
        purchase_orders = PurchaseOrder.objects.filter(company=comp_details)
        for order in purchase_orders:
            transactions.append({
                'date': order.purchase_order_date,
                'party_name': order.vendor.first_name + " " + order.vendor.last_name,
                'type': 'Purchase Order',
                'type_number': order.sales_order_number,
                'total_amount': order.grand_total,
                'amount_paid': order.advanced_paid,
                'balance': order.balance
            })

        # Debit Notes
        debit_notes = debitnote.objects.filter(company=comp_details)
        for note in debit_notes:
            transactions.append({
                'date': note.debitnote_date,
                'party_name': note.vendor.first_name + " " + note.vendor.last_name,
                'type': 'Debit Note',
                'type_number': note.debitnote_no,
                'total_amount': note.grandtotal,
                'amount_paid': note.advance_paid,
                'balance': note.balance
            })

        # Credit Notes
        credit_notes = Credit_Note.objects.filter(company=comp_details)
        for credit_note in credit_notes:
            transactions.append({
                'date': credit_note.credit_note_date,
                'party_name': credit_note.customer.first_name + " " + credit_note.customer.last_name,
                'type': 'Credit Note',
                'type_number': credit_note.credit_note_number,
                'total_amount': credit_note.grand_total,
                'amount_paid': credit_note.advance_paid,
                'balance': credit_note.balance
            })

        # Retainer Invoices
        retainer_invoices = RetainerInvoice.objects.filter(company=comp_details)
        for retainer_inv in retainer_invoices:
            transactions.append({
                'date': retainer_inv.retainer_invoice_date,
                'party_name': retainer_inv.customer_name.first_name + " " + retainer_inv.customer_name.last_name,
                'type': 'Retainer Invoice',
                'type_number': retainer_inv.retainer_invoice_number,
                'total_amount': retainer_inv.total_amount,
                'amount_paid': retainer_inv.paid,
                'balance': retainer_inv.balance
            })

        # Recurring Bills
        recurring_bills = Recurring_bills.objects.filter(company=comp_details)
        for recurring_bill in recurring_bills:
            transactions.append({
                'date': recurring_bill.rec_bill_date,
                'party_name': recurring_bill.vend_name,
                'type': 'Recurring Bill',
                'type_number': recurring_bill.recc_bill_no,
                'total_amount': recurring_bill.total,
                'amount_paid': recurring_bill.paid,
                'balance': recurring_bill.bal
            })

        # Payment Received
        payment_received = Payment_recieved.objects.filter(company=comp_details)
        for payment in payment_received:
            transactions.append({
                'date': payment.payment_date,
                'party_name': payment.customer.first_name + " " + payment.customer.last_name,
                'type': 'Payment Received',
                'type_number': payment.payment_number,
                'total_amount': payment.amount_to_apply,
                'amount_paid': payment.total_payment,
                'balance': payment.amount_to_credit
            })

        # Payment Made
        paymentmade = payment_made.objects.filter(company=comp_details)
        for payment in paymentmade:
            transactions.append({
                'date': payment.payment_date,
                'party_name': payment.vendor.first_name + " " + payment.vendor.last_name,
                'type': 'Payment Made',
                'type_number': payment.payment_no,
                'total_amount': payment.total,
                'amount_paid': payment.balance,
                'balance': 0
            })

        # Bills
        bills = Bill.objects.filter(Company=comp_details)
        for bill in bills:
            transactions.append({
                'date': bill.Bill_Date,
                'party_name': bill.Vendor.first_name + " " + bill.Vendor.last_name,
                'type': 'Bill',
                'type_number': bill.Bill_Number,
                'total_amount': bill.Grand_Total,
                'amount_paid': bill.Advance_amount_Paid,
                'balance': bill.Balance
            })

        # Sale Orders
        sale_orders = SaleOrder.objects.filter(company=comp_details)
        for sale_order in sale_orders:
            transactions.append({
                'date': sale_order.sales_order_date,
                'party_name': sale_order.customer.first_name + " " + sale_order.customer.last_name,
                'type': 'Sale Order',
                'type_number': sale_order.sales_order_number,
                'total_amount': sale_order.grand_total,
                'amount_paid': sale_order.advanced_paid,
                'balance': sale_order.balance
            })

        # Delivery Challans
        delivery_challans = Delivery_challan.objects.filter(company=comp_details)
        for challan in delivery_challans:
            transactions.append({
                'date': challan.challan_date,
                'party_name': challan.customer.first_name + " " + challan.customer.last_name,
                'type': 'Delivery Challan',
                'type_number': challan.challan_number,
                'total_amount': challan.grand_total,
                'amount_paid': challan.advance,
                'balance': challan.balance
            })

        #Expense

        expenses = Expense.objects.filter(company=comp_details)
        for exp in expenses:
            transactions.append({
                'date':exp.date,
                'party_name':exp.customer_name,
                'type':exp.expense_type,
                'type_number':exp.expense_number,
                'total_amount':exp.amount,
                'amount_paid':0,
                'balance':0
            }) 


       
        for transaction in transactions:
            total_amount += float(transaction['total_amount'])
            total_balance += float(transaction['balance'])

        # Format total amount and total balance to display two decimal places

        # Sort transactions by date
        
        

        context = {
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'comp_details': comp_details,
            'transactions': transactions,
            'total_amount': total_amount,
            'total_balance': total_balance,
            'startDate': None,
            'endDate': None,
        }

        return render(request, 'zohomodules/Reports/all_transactions.html', context)


def customized_transaction(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=comp_details, status='New')

        start_date = request.POST.get('from_date')
        end_date = request.POST.get('to_date')
        transaction_type = request.POST.get('transactions')

        if start_date == "":
            start_date = None
        if end_date == "":
            end_date = None

        reportData = []
        total_amount = 0
        total_balance = 0

        date_filter = {'__range': [start_date, end_date]} if start_date and end_date else {}

        if transaction_type == 'all':
            # Fetch all transactions
            transactions = []

            # Fetch transactions for each type and append to the transactions list

            # Bills
            bills = Bill.objects.filter(Company=comp_details, Bill_Date__range=[start_date, end_date]).order_by('Bill_Date')
            for bills in bills:
                transactions.append({
                    'date': bills.Bill_Date,
                    'party_name': f"{bills.Vendor.first_name} {bills.Vendor.last_name}",
                    'type': 'Bill',
                    'type_number': bills.Bill_Number,
                    'total_amount': bills.Grand_Total,
                    'amount_paid': bills.Advance_amount_Paid,
                    'balance': bills.Balance
                })

            credit_notes = Credit_Note.objects.filter(company=comp_details, credit_note_date__range=[start_date, end_date]).order_by('credit_note_date')
            for credit_note in credit_notes:
                transactions.append({
                    'date': credit_note.credit_note_date,
                    'party_name': f"{credit_note.customer.first_name} {credit_note.customer.last_name}",
                    'type': 'Credit Note',
                    'type_number': credit_note.credit_note_number,
                    'total_amount': credit_note.grand_total,
                    'amount_paid': credit_note.advance_paid,
                    'balance': credit_note.balance
                })

            # Invoices
            invoices = invoice.objects.filter(company=comp_details, date__range=[start_date, end_date]).order_by('date')
            for invoices in invoices:
                transactions.append({
                    'date': invoices.date,
                    'party_name': f"{invoices.customer.first_name} {invoices.customer.last_name}",
                    'type': 'Invoice',
                    'type_number': invoices.invoice_number,
                    'total_amount': invoices.grand_total,
                    'amount_paid': invoices.advanced_paid,
                    'balance': invoices.balance
                })

            # Estimates
            estimates = Estimate.objects.filter(company=comp_details, estimate_date__range=[start_date, end_date]).order_by('estimate_date')
            for estimate in estimates:
                transactions.append({
                    'date': estimate.estimate_date,
                    'party_name': f"{estimate.customer.first_name} {estimate.customer.last_name}",
                    'type': 'Estimate',
                    'type_number': estimate.estimate_number,
                    'total_amount': estimate.grand_total,
                    'amount_paid': 0,  # Assuming no payment made for estimates initially
                    'balance': 0  # Similarly, no balance for estimates initially
                })



            # Sale Orders
            sale_orders = SaleOrder.objects.filter(company=comp_details, sales_order_date__range=[start_date, end_date]).order_by('sales_order_date')
            for sale_order in sale_orders:
                transactions.append({
                    'date': sale_order.sales_order_date,
                    'party_name': f"{sale_order.customer.first_name} {sale_order.customer.last_name}",
                    'type': 'Sale Order',
                    'type_number': sale_order.sales_order_number,
                    'total_amount': sale_order.grand_total,
                    'amount_paid': sale_order.advanced_paid,
                    'balance': sale_order.balance
                })

            # Purchase Orders
            purchase_orders = PurchaseOrder.objects.filter(company=comp_details, purchase_order_date__range=[start_date, end_date]).order_by('purchase_order_date')
            for purchase_order in purchase_orders:
                transactions.append({
                    'date': purchase_order.purchase_order_date,
                    'party_name': f"{purchase_order.vendor.first_name} {purchase_order.vendor.last_name}",
                    'type': 'Purchase Order',
                    'type_number': purchase_order.sales_order_number,
                    'total_amount': purchase_order.grand_total,
                    'amount_paid': purchase_order.advanced_paid,
                    'balance': purchase_order.balance
                })

            # Retainer Invoices
            retainer_invoices = RetainerInvoice.objects.filter(company=comp_details, retainer_invoice_date__range=[start_date, end_date]).order_by('retainer_invoice_date')
            for retainer_invoice in retainer_invoices:
                transactions.append({
                    'date': retainer_invoice.retainer_invoice_date,
                    'party_name': f"{retainer_invoice.customer_name.first_name} {retainer_invoice.customer_name.last_name}",
                    'type': 'Retainer Invoice',
                    'type_number': retainer_invoice.retainer_invoice_number,
                    'total_amount': retainer_invoice.total_amount,
                    'amount_paid': retainer_invoice.paid,
                    'balance': retainer_invoice.balance
                })

            # Recurring Invoices
            recurring_invoices = RecurringInvoice.objects.filter(company=comp_details, start_date__range=[start_date, end_date]).order_by('start_date')
            for recurring_invoice in recurring_invoices:
                transactions.append({
                    'date': recurring_invoice.start_date,
                    'party_name': f"{recurring_invoice.customer.first_name} {recurring_invoice.customer.last_name}",
                    'type': 'Recurring Invoice',
                    'type_number': recurring_invoice.rec_invoice_no,
                    'total_amount': recurring_invoice.grandtotal,
                    'amount_paid': recurring_invoice.advance_paid,
                    'balance': recurring_invoice.balance
                })

            # Payment Received
            payments_received = Payment_recieved.objects.filter(company=comp_details, payment_date__range=[start_date, end_date]).order_by('payment_date')
            for payment in payments_received:
                transactions.append({
                    'date': payment.payment_date,
                    'party_name': f"{payment.customer.first_name} {payment.customer.last_name}",
                    'type': 'Payment Received',
                    'type_number': payment.payment_number,
                    'total_amount': payment.amount_to_apply,
                    'amount_paid': payment.total_payment,
                    'balance': payment.amount_to_credit
                })

            # Payment Made
            payments_made = payment_made.objects.filter(company=comp_details, payment_date__range=[start_date, end_date]).order_by('payment_date')
            for payment in payments_made:
                transactions.append({
                    'date': payment.payment_date,
                    'party_name': f"{payment.vendor.first_name} {payment.vendor.last_name}",
                    'type': 'Payment Made',
                    'type_number': payment.payment_no,
                    'total_amount': payment.total,
                    'amount_paid': payment.balance,
                    'balance': 0  # Assuming balance is zero once payment is made
                })

            # Delivery Challans
            delivery_challans = Delivery_challan.objects.filter(company=comp_details, challan_date__range=[start_date, end_date]).order_by('challan_date')
            for challan in delivery_challans:
                transactions.append({
                    'date': challan.challan_date,
                    'party_name': f"{challan.customer.first_name} {challan.customer.last_name}",
                    'type': 'Delivery Challan',
                    'type_number': challan.challan_number,
                    'total_amount': challan.grand_total,
                    'amount_paid': challan.advance,
                    'balance': challan.balance
                })

            # Expenses
            expenses = Expense.objects.filter(company=comp_details, date__range=[start_date, end_date]).order_by('date')
            for expense in expenses:
                transactions.append({
                    'date': expense.date,
                    'party_name': expense.customer_name,
                    'type': expense.expense_type,
                    'type_number': expense.expense_number,
                    'total_amount': expense.amount,
                    'amount_paid': 0,  # Assuming no payment made initially for expenses
                    'balance': 0  # Assuming no balance initially for expenses
                })

            # Recurring Bills
            recurring_bills = Recurring_bills.objects.filter(company=comp_details, rec_bill_date__range=[start_date, end_date]).order_by('rec_bill_date')
            for recurring_bill in recurring_bills:
                transactions.append({
                    'date': recurring_bill.rec_bill_date.strftime('%d-%m-%Y'),
                    'party_name': f"{recurring_bill.vendor_details.first_name} {recurring_bill.vendor_details.last_name} ",
                    'type': 'Recurring Bill',
                    'type_number': recurring_bill.recc_bill_no,
                    'total_amount': recurring_bill.total,
                    'amount_paid': recurring_bill.paid,
                    'balance': recurring_bill.bal
                })

            # Debit Notes
            debit_notes = debitnote.objects.filter(company=comp_details, debitnote_date__range=[start_date, end_date]).order_by('debitnote_date')
            for debit_note in debit_notes:
                transactions.append({
                    'date': debit_note.debitnote_date,
                    'party_name': f"{debit_note.vendor.first_name} {debit_note.vendor.last_name}",
                    'type': 'Debit Note',
                    'type_number': debit_note.debitnote_no,
                    'total_amount': debit_note.grand_total,
                    'amount_paid': debit_note.advance_paid,
                    'balance': debit_note.balance
                })    

            # Add similar blocks for other transaction types like saleorder, purchase order, retainer invoice , recurring invoice , payment recieved, payment made , deliery challan

            # Calculate total amount and total balance
            for transaction in transactions:
                total_amount += float(transaction['total_amount'])
                total_balance += float(transaction['balance'])

           
        else:
            # Fetch transactions for the selected type only
            transactions = []
            if transaction_type == 'Bill':
                bills = Bill.objects.filter(Company=comp_details, Bill_Date__range=[start_date, end_date]).order_by('Bill_Date')
                for bill in bills:
                    transactions.append({
                        'date': bill.Bill_Date,
                        'party_name': f"{bill.Vendor.first_name} {bill.Vendor.last_name}",
                        'type': 'Bill',
                        'type_number': bill.Bill_Number,
                        'total_amount': bill.Grand_Total,
                        'amount_paid': bill.Advance_amount_Paid,
                        'balance': bill.Balance
                    })
            elif transaction_type == 'Credit Note':
                credit_notes = Credit_Note.objects.filter(company=comp_details, credit_note_date__range=[start_date, end_date]).order_by('credit_note_date')
                for credit_note in credit_notes:
                    transactions.append({
                        'date': credit_note.credit_note_date,
                        'party_name': f"{credit_note.customer.first_name} {credit_note.customer.last_name}",
                        'type': 'Credit Note',
                        'type_number': credit_note.credit_note_number,
                        'total_amount': credit_note.grand_total,
                        'amount_paid': credit_note.advance_paid,
                        'balance': credit_note.balance
                    })
            elif transaction_type == 'Invoice':
                invoices = invoice.objects.filter(company=comp_details, date__range=[start_date, end_date]).order_by('date')
                for inv in invoices:
                    transactions.append({
                        'date': inv.date,
                        'party_name': f"{inv.customer.first_name} {inv.customer.last_name}",
                        'type': 'Invoice',
                        'type_number': inv.invoice_number,
                        'total_amount': inv.grand_total,
                        'amount_paid': inv.advanced_paid,
                        'balance': inv.balance
                    })
            elif transaction_type == 'Estimate':
                estimates = Estimate.objects.filter(company=comp_details, estimate_date__range=[start_date, end_date]).order_by('estimate_date')
                for estimate in estimates:
                    transactions.append({
                        'date': estimate.estimate_date,
                        'party_name': f"{estimate.customer.first_name} {estimate.customer.last_name}",
                        'type': 'Estimate',
                        'type_number': estimate.estimate_number,
                        'total_amount': estimate.grand_total,
                        'amount_paid': 0,  # Assuming no payment made for estimates initially
                        'balance': 0  # Similarly, no balance for estimates initially
                    })
            elif transaction_type == 'Sale Order':
                sale_orders = SaleOrder.objects.filter(company=comp_details, sales_order_date__range=[start_date, end_date]).order_by('sales_order_date')
                for sale_order in sale_orders:
                    transactions.append({
                        'date': sale_order.sales_order_date,
                        'party_name': f"{sale_order.customer.first_name} {sale_order.customer.last_name}",
                        'type': 'Sale Order',
                        'type_number': sale_order.sales_order_number,
                        'total_amount': sale_order.grand_total,
                        'amount_paid': sale_order.advanced_paid,
                        'balance': sale_order.balance
                    })
            elif transaction_type == 'Purchase Order':
                purchase_orders = PurchaseOrder.objects.filter(company=comp_details, purchase_order_date__range=[start_date, end_date]).order_by('purchase_order_date')
                for purchase_order in purchase_orders:
                    transactions.append({
                        'date': purchase_order.purchase_order_date,
                        'party_name': f"{purchase_order.vendor.first_name} {purchase_order.vendor.last_name}",
                        'type': 'Purchase Order',
                        'type_number': purchase_order.sales_order_number,
                        'total_amount': purchase_order.grand_total,
                        'amount_paid': purchase_order.advanced_paid,
                        'balance': purchase_order.balance
                    })
            elif transaction_type == 'Retainer Invoice':
                retainer_invoices = RetainerInvoice.objects.filter(company=comp_details, retainer_invoice_date__range=[start_date, end_date]).order_by('retainer_invoice_date')
                for retainer_invoice in retainer_invoices:
                    transactions.append({
                        'date': retainer_invoice.retainer_invoice_date,
                        'party_name': f"{retainer_invoice.customer_name.first_name} {retainer_invoice.customer_name.last_name}",
                        'type': 'Retainer Invoice',
                        'type_number': retainer_invoice.retainer_invoice_number,
                        'total_amount': retainer_invoice.total_amount,
                        'amount_paid': retainer_invoice.paid,
                        'balance': retainer_invoice.balance
                    })
            elif transaction_type == 'Recurring Invoice':
                recurring_invoices = RecurringInvoice.objects.filter(company=comp_details, start_date__range=[start_date, end_date]).order_by('start_date')
                for recurring_invoice in recurring_invoices:
                    transactions.append({
                        'date': recurring_invoice.start_date,
                        'party_name': f"{recurring_invoice.customer.first_name} {recurring_invoice.customer.last_name}",
                        'type': 'Recurring Invoice',
                        'type_number': recurring_invoice.rec_invoice_no,
                        'total_amount': recurring_invoice.grandtotal,
                        'amount_paid': recurring_invoice.advance_paid,
                        'balance': recurring_invoice.balance
                    })
            elif transaction_type == 'Payment Received':
                payments_received = Payment_recieved.objects.filter(company=comp_details, payment_date__range=[start_date, end_date]).order_by('payment_date')
                for payment in payments_received:
                    transactions.append({
                        'date': payment.payment_date,
                        'party_name': f"{payment.customer.first_name} {payment.customer.last_name}",
                        'type': 'Payment Received',
                        'type_number': payment.payment_number,
                        'total_amount': payment.amount_to_apply,
                        'amount_paid': payment.total_payment,
                        'balance': payment.amount_to_credit
                    })
            elif transaction_type == 'Payment Made':
                payments_made = payment_made.objects.filter(company=comp_details, payment_date__range=[start_date, end_date]).order_by('payment_date')
                for payment in payments_made:
                    transactions.append({
                        'date': payment.payment_date,
                        'party_name': f"{payment.vendor.first_name} {payment.vendor.last_name}",
                        'type': 'Payment Made',
                        'type_number': payment.payment_no,
                        'total_amount': payment.total,
                        'amount_paid': payment.balance,
                        'balance': 0  # Assuming balance is zero once payment is made
                    })
            elif transaction_type == 'Delivery Challan':
                delivery_challans = Delivery_challan.objects.filter(company=comp_details, challan_date__range=[start_date, end_date]).order_by('challan_date')
                for challan in delivery_challans:
                    transactions.append({
                        'date': challan.challan_date,
                        'party_name': f"{challan.customer.first_name} {challan.customer.last_name}",
                        'type': 'Delivery Challan',
                        'type_number': challan.challan_number,
                        'total_amount': challan.grand_total,
                        'amount_paid': challan.advance,
                        'balance': challan.balance
                    })
            elif transaction_type == 'Expense':
                expenses = Expense.objects.filter(company=comp_details, date__range=[start_date, end_date]).order_by('date')
                for expense in expenses:
                    transactions.append({
                        'date': expense.date,
                        'party_name': expense.customer_name,
                        'type': expense.expense_type,
                        'type_number': expense.expense_number,
                        'total_amount': expense.amount,
                        'amount_paid': 0,  # Assuming no payment made initially for expenses
                        'balance': 0  # Assuming no balance initially for expenses
                    })
            elif transaction_type == 'Recurring Bill':
                recurring_bills = Recurring_bills.objects.filter(company=comp_details, rec_bill_date__range=[start_date, end_date]).order_by('rec_bill_date')
                for recurring_bill in recurring_bills:
                    transactions.append({
                        'date': recurring_bill.rec_bill_date,
                        'party_name': f"{recurring_bill.vend_name} ",
                        'type': 'Recurring Bill',
                        'type_number': recurring_bill.recc_bill_no,
                        'total_amount': recurring_bill.total,
                        'amount_paid': recurring_bill.paid,
                        'balance': recurring_bill.bal
                    })
            elif transaction_type == 'Debit Note':
                debit_notes = debitnote.objects.filter(company=comp_details, debitnote_date__range=[start_date, end_date]).order_by('debitnote_date')
                for debit_note in debit_notes:
                    transactions.append({
                        'date': debit_note.debitnote_date,
                        'party_name': f"{debit_note.vendor.first_name} {debit_note.vendor.last_name}",
                        'type': 'Debit Note',
                        'type_number': debit_note.debitnote_no,
                        'total_amount': debit_note.grandtotal,
                        'amount_paid': debit_note.advance_paid,
                        'balance': debit_note.balance
                    })
            reportData.extend(transactions)

        for transaction in reportData:
            total_amount += float(transaction['total_amount'])
            total_balance += float(transaction['balance'])

       

        context = {
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'comp_details': comp_details,
            'transactions': transactions,
            'startDate': start_date,
            'endDate': end_date,
            'transaction_type': transaction_type,
            'total_amount': format(total_amount, '.2f'),
            'total_balance': format(total_balance, '.2f')
        }

        return render(request, 'zohomodules/Reports/all_transactions.html',context)
        
        
#-------------------Arya E.R--------Bill Details---------------------------#
def BilldetailsReport(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0


        vendr = Vendor.objects.filter(company=comp_details).values('id')

        bill = Bill.objects.filter(Vendor__in=vendr)
        # vendr = Vendor.objects.filter(company=comp_details)
        
        if bill:
            for s in bill:
                partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                date = s.Bill_Date
                ship_date = s.Due_Date
                end_date = datetime.combine(s.Due_Date, datetime.min.time())

                rbill =s.Bill_Number
                ordrno =s.Purchase_Order_Number
                total = s.Grand_Total
                paid=s.Advance_amount_Paid 
                balance=s.Balance
                st=s.Status
                totalSales += float(s.Grand_Total)
                totalbalance += float(s.Balance)

                if s.Status == 'Draft':
                    st = 'Draft'
                elif int(s.Advance_amount_Paid) == 0 and end_date>currentDate:
                    st = 'Not paid'
                        
                elif int(s.Advance_amount_Paid) == int(s.Grand_Total):
                    st = 'fully paid'
                    
                elif int(s.Advance_amount_Paid) > 0 and int(s.Advance_amount_Paid)<int(s.Grand_Total) and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and int(s.Advance_amount_Paid)<=int(s.Grand_Total):
                    st = 'overdue'
                    
                else:
                    st = s.Status
               

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(vendr)


        context = {
            
            'details':dash_details,'log_details':log_details,'bill':bill,'vendr':vendr,
            'allmodules':allmodules,'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totvendr,
            'startDate':None, 'endDate':None,
        }
        return render(request,'zohomodules/Reports/Billdetails_Report.html', context)
    else:
        return redirect('/')


def billdetailsCustomized(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
        report = request.GET.get('billdate',None)

        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        
        vendr = Vendor.objects.filter(company=comp_details).values('id')
        bill = Bill.objects.filter(Vendor__in=vendr)       
        
        # if startDate:
        #     bill = bill.filter(Bill_Date__gte=startDate)
        # if endDate:
        #     bill = bill.filter(Due_Date__lte=endDate)    
        
        if report:
            if report=='billdate':
                bill = bill.filter(Bill_Date__range=[startDate, endDate])
    
            if report=='shipdate':
                bill = bill.filter(Due_Date__range=[startDate, endDate])
         

        if status:
            if status == 'Draft':
                bill = bill.filter(Status = 'Draft')
            elif status == 'fully paid':
                bill = bill.filter(Advance_amount_Paid=F('Grand_Total') , Status='fully paid')
                
            elif status == 'Not paid':
                bill = bill.filter(Q(Advance_amount_Paid=0.00)  & Q(Due_Date__gt=currentDate) & Q(Status='Not paid'))

            elif status == 'partially paid':

                bill = bill.filter(Q(Advance_amount_Paid__gt=0.00)  & Q(Advance_amount_Paid__lt=F('Grand_Total')) & Q(Due_Date__gt=currentDate) & Q(Status='partially paid'))
            elif status == 'overdue':
                bill = bill.filter((Q(Due_Date__lte=currentDate) | Q(Advance_amount_Paid__lt=F('Grand_Total')) | Q(Advance_amount_Paid=0)) & Q(Status='overdue'))

        for s in bill:
            partyName = s.Vendor.first_name +" "+s.Vendor.last_name
            date = s.Bill_Date
            ship_date = s.Due_Date
            end_date = datetime.combine(s.Due_Date, datetime.min.time())

            rbill =s.Bill_Number
            ordrno =s.Purchase_Order_Number
            total = s.Grand_Total
            paid=s.Advance_amount_Paid 
            balance=s.Balance
            st=s.Status
            totalSales += float(s.Grand_Total)
            totalbalance += float(s.Balance)

            if s.Status == 'Draft':
                st = 'Draft'
            elif int(s.Advance_amount_Paid) == 0 and end_date>currentDate:
                st = 'Not paid'
                
            elif int(s.Advance_amount_Paid) == int(s.Grand_Total):
                st = 'fully paid'
            
            elif int(s.Advance_amount_Paid) > 0 and int(s.Advance_amount_Paid)<int(s.Grand_Total) and end_date>currentDate:
                st = 'partially paid'
            elif end_date<currentDate and int(s.Advance_amount_Paid)<=int(s.Grand_Total):
                st = 'overdue'
            
            else:
                st = s.Status

                    
            

            details = {
                'date': date,
                'name': partyName,
                'ship_date':ship_date,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,
                
                
                
            }
            reportData.append(details)
            totvendr=len(vendr)

        context = {
            'allmodules': allmodules,'reportData': reportData,'totalbalance':totalbalance,'details':dash_details,'log_details':log_details,'bill':bill,'vendr':vendr,
            'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status,'billdate':report
        }
        return render(request, 'zohomodules/Reports/Billdetails_Report.html', context)
    else:
        return redirect('/')  

def Share_billDetailsReportToEmail(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                # cust = Fin_Customers.objects.filter(Company=cmp)
            
                # cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                

                currentDate = datetime.today()


                reportData = []
                totalSales = 0
                totvendr=0
                totalbalance=0
                report=0

                vendr = Vendor.objects.filter(company=comp_details).values('id')
                bill = Bill.objects.filter(Vendor__in=vendr)      
        
                # if startDate and endDate:
                #     bill = bill.filter(Bill_Date__range=[startDate, endDate])          

                if report:
                    if report=='billdate':
                        bill = bill.filter(Bill_Date__range=[startDate, endDate])
            
                    if report=='shipdate':
                        bill = bill.filter(Due_Date__range=[startDate, endDate])
            

                if status:
                    if status == 'Draft':
                        bill = bill.filter(Status = 'Draft')
                    elif status == 'fully paid':
                        bill = bill.filter(Advance_amount_Paid=F('Grand_Total') ,Status='fully paid')
                        
                    elif status == 'Not paid':
                        bill = bill.filter(Q(Advance_amount_Paid=0.00)  & Q(Due_Date__gt=currentDate) & Q(Status='Not paid'))

                    elif status == 'partially paid':

                        bill = bill.filter(Q(Advance_amount_Paid__gt=0.00)  & Q(Advance_amount_Paid__lt=F('Grand_Total')) & Q(Due_Date__gt=currentDate) & Q(Status='partially paid'))
                    elif status == 'overdue':
                        bill = bill.filter((Q(Due_Date__lte=currentDate) | Q(Advance_amount_Paid__lt=F('Grand_Total')) | Q(Advance_amount_Paid=0)) & Q(Status='overdue'))


                for s in bill:
                    partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                    date = s.Bill_Date
                    ship_date = s.Due_Date
                    end_date = datetime.combine(s.Due_Date, datetime.min.time())

                    rbill =s.Bill_Number
                    ordrno =s.Purchase_Order_Number
                    total = s.Grand_Total
                    paid=s.Advance_amount_Paid 
                    balance=s.Balance
                    st=s.Status
                    totalSales += float(s.Grand_Total)
                    totalbalance += float(s.Balance)  

                    if s.Status == 'Draft':
                        st = 'Draft'
                    elif int(s.Advance_amount_Paid) == 0 and end_date>currentDate:
                        st = 'Not paid'
                        
                    elif int(s.Advance_amount_Paid) == int(s.Grand_Total):
                        st = 'fully paid'
                    
                    elif int(s.Advance_amount_Paid) > 0 and int(s.Advance_amount_Paid)<int(s.Grand_Total) and end_date>currentDate:
                        st = 'partially paid'
                    elif end_date<currentDate and int(s.Advance_amount_Paid)<=int(s.Grand_Total):
                        st = 'overdue'
                    
                    else:
                        st = s.Status
                                                
                                                                  
                    details = {
                        'date': date,
                        'name': partyName,
                        'ship_date':ship_date,
                        'rbill':rbill,
                        'ordrno': ordrno,
                        'total':total,
                        'status':st,
                        'balance':balance,
                        
                        
                        
                    }
                    reportData.append(details)
                    totvendr=len(vendr)

                context = {
                    'allmodules': allmodules,'reportData': reportData,'totalbalance':totalbalance,'details':dash_details,'log_details':log_details,'bill':bill,'vendr':vendr,
                    'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status,
        
                }
                template_path = 'zohomodules/Reports/Billdetails_Report_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_bill_Details'
                subject = f"Report_bill_Details"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Report for - bill Details.  \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)

                # email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - bill Details. \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(BilldetailsReport)
                

        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(BilldetailsReport)

    else:
        return redirect('/') 

#----------------------End--------------------------------------#
#----------------Arya E.R.....Inventory Details-------------------#
def Stock_details_report(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
    
    
        iitems = Items.objects.filter(company=comp_details)
        p_array = []
        p_array_count = iitems.count

        for i in iitems:
            item = Items.objects.get(id=i.id)
            p_total_qty = BillItems.objects.filter(Company=comp_details,item_id=i).values('qty').aggregate(total_qty=Sum('qty'))['total_qty'] or 0
            s_total_qty = invoiceitems.objects.filter(company=comp_details,Items=i).values('quantity').aggregate(total_qty=Sum('quantity'))['total_qty'] or 0
            print(p_total_qty ,' and ', s_total_qty)
            close_qty = int(item.opening_stock) + int(p_total_qty) - int(s_total_qty)
            p_array.append((item.item_name,item.opening_stock,p_total_qty,item.purchase_price,s_total_qty,item.selling_price,close_qty))
        
        context={

 
            'details':dash_details,'log_details':log_details,

        'allmodules':allmodules,
        'p_array':p_array,
        'companyName':comp_details.company_name,
        'p_array_count':p_array_count,
        
        }
        return render(request,'zohomodules/Reports/stockdetails_Report.html', context)
    else:
        return redirect('/')

def Stock_details_date_filter(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
         

        if request.POST:

            startDate = request.POST['from_date']
            endDate = request.POST['end_date']

            if startDate == "":
                    return redirect('Stock_details_report')
            if endDate == "":
                    return redirect('Stock_details_report')

                
            

        currentDate = datetime.today()

        iitems = Items.objects.filter(company=comp_details)

        p_array = []

        p_array_count = []
       
        for i in iitems:
            item = Items.objects.get(id=i.id)
        
            p_total_qty = BillItems.objects.filter(Company=comp_details,item_id=i,Bills__Bill_Date__gte=startDate,Bills__Bill_Date__lte=endDate).values('qty').aggregate(total_qty=Sum('qty'))['total_qty'] or 0
            s_total_qty = invoiceitems.objects.filter(company=comp_details,Items=i,invoice__date__gte=startDate,invoice__date__lte=endDate).values('quantity').aggregate(total_qty=Sum('quantity'))['total_qty'] or 0
            close_qty = int(item.opening_stock) + int(p_total_qty) - int(s_total_qty)
            if p_total_qty != 0 or s_total_qty !=0 :               

                p_array.append((item.item_name, item.opening_stock, p_total_qty, item.purchase_price, s_total_qty, item.selling_price, close_qty))
        p_array_count = len(p_array)
                               
               
                 

        context = {
            'allmodules': allmodules,'details':dash_details,'log_details':log_details,
        'startDate': startDate, 'endDate': endDate, 'p_array':p_array,
        'companyName':comp_details.company_name, 'p_array_count':p_array_count,
        }
        return render(request, 'zohomodules/Reports/stockdetails_Report.html', context)
    else:
        return redirect('/')    


def SendEmail_Stock_Details(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')   

        
       
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                start_date = request.POST.get('start_date') or None
                end_date = request.POST.get('end_date') or None


                iitems = Items.objects.filter(company=comp_details)

                p_array = []
                p_array_count = []


                if start_date != None and end_date != None:
                  for i in iitems:
                    item = Items.objects.get(id=i.id)

                    p_total_qty = BillItems.objects.filter(Company=comp_details,item_id=i,Bills__Bill_Date__gte=start_date,Bills__Bill_Date__lte=end_date).values('qty').aggregate(total_qty=Sum('qty'))['total_qty'] or 0
                    s_total_qty = invoiceitems.objects.filter(company=comp_details,Items=i,invoice__date__gte=start_date,invoice__date__lte=end_date).values('quantity').aggregate(total_qty=Sum('quantity'))['total_qty'] or 0
                    print(p_total_qty ,' and ', s_total_qty)
                    close_qty = int(item.opening_stock) + int(p_total_qty) - int(s_total_qty)
                    if p_total_qty != 0 or s_total_qty !=0 :               

                         p_array.append((item.item_name, item.opening_stock, p_total_qty, item.purchase_price, s_total_qty, item.selling_price, close_qty))
                  p_array_count = len(p_array)
  
                    
                else:
                  for i in iitems:
                    item = Items.objects.get(id=i.id)
                    p_total_qty = BillItems.objects.filter(Company=comp_details,item_id=i).values('qty').aggregate(total_qty=Sum('qty'))['total_qty'] or 0
                    s_total_qty = invoiceitems.objects.filter(company=comp_details,Items=i).values('quantity').aggregate(total_qty=Sum('quantity'))['total_qty'] or 0
                    close_qty = int(item.opening_stock) + int(p_total_qty) - int(s_total_qty)
                    if p_total_qty != 0 or s_total_qty !=0 : 
                        p_array.append((item.item_name, item.opening_stock, p_total_qty, item.purchase_price, s_total_qty, item.selling_price, close_qty))
                  p_array_count = len(p_array)

                    
                context = {'companyName':comp_details.company_name,'p_array_count':p_array_count,'p_array':p_array,
                       'start_date':start_date,'end_date':end_date,'details':dash_details,'log_details':log_details,}
                
                template_path = 'zohomodules/Reports/stockdetails_Report_Pdf.html'
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                # pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Stock Details'
                subject = f"Stock Details"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Stock Details for   \n{email_message}\n\n--\nRegards,\n{comp_details.company_name}\n{comp_details.address}\n{comp_details.state} - {comp_details.country}\n{comp_details.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Stock Details has been shared via email successfully..!')
                return redirect(Stock_details_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Stock_details_report)             

    else:
        return redirect('/')  

#--------------------------------End----------------------#
# sruthi----------------------------------------------------
def discountstatement(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        total_discount_inv = 0
        total_discount_recInv = 0
        total_discount_recbillItem = 0
        total_discount_bill = 0

        inv = invoiceitems.objects.filter(company=cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
        recInv = Reccurring_Invoice_item.objects.filter(company=cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))  
        bills = Bill.objects.filter(Company = cmp) 
        bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
        rec_bills = Recurring_bills.objects.filter(company = cmp)     
        recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills).exclude(discount=0).annotate(total_discount4=Sum('discount'))

        if inv:
            total_discount_inv += inv.aggregate(total_discount1=Sum('discount'))['total_discount1']
        if recInv:
            total_discount_recInv += recInv.aggregate(total_discount2=Sum('discount'))['total_discount2']
        if bill:
            total_discount_bill += bill.aggregate(total_discount3=Sum('discount'))['total_discount3']
        if recbillItem:
            total_discount_recbillItem += recbillItem.aggregate(total_discount4=Sum('discount'))['total_discount4']

        totsalediscount = total_discount_inv + total_discount_recInv
        totpurdiscount = total_discount_bill + total_discount_recbillItem

        context = {
            'allmodules':allmodules, 
            'invoice': inv,  
            'recurringinvoice': recInv, 
            'recurringbill': recbillItem,
            'bill' : bill,
            'startDate':None, 
            'endDate':None,
            'totsalediscount': totsalediscount,
            'totpurdiscount': totpurdiscount,
            'details':dash_details,'log_details':log_details 
        }

        return render(request, 'zohomodules/Reports/discountstatement.html', context)
    else:
        return redirect('/')

def discountstatementCustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        allmodules= ZohoModules.objects.get(company = cmp)

        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            total_discount_inv = 0
            total_discount_recInv = 0
            total_discount_recbillItem = 0
            total_discount_bill = 0

            # inv = None
            # recInv = None
            # recbillItem = None
            if startDate == None or endDate == None:
                if trans == "all":
                    inv = invoiceitems.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                    recInv = Reccurring_Invoice_item.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                    bills = Bill.objects.filter(Company = cmp) 
                    bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                    rec_bills = Recurring_bills.objects.filter(company = cmp)     
                    recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills,).exclude(discount=0).annotate(total_discount4=Sum('discount'))
                elif trans == 'invoice':
                    inv = invoiceitems.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                    recInv = None
                    bill = None
                    recbillItem = None
                elif trans == 'recurring_invoice':
                    inv = None
                    recInv = Reccurring_Invoice_item.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                    bill = None
                    recbillItem = None
                elif trans == 'bill':
                    inv = None
                    recInv = None
                    bill = bills = Bill.objects.filter(Company = cmp) 
                    bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                    recbillItem = None
                elif trans == 'credit_notes':
                    inv = None
                    recInv = None
                    bill = None
                    rec_bills = Recurring_bills.objects.filter(company = cmp)     
                    recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
            else:
                if trans == 'all':
                    invoices =  invoice.objects.filter(date__range=[startDate, endDate],company = cmp)
                    inv = invoiceitems.objects.filter(invoice__in=invoices,company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                    rec_invoices = RecurringInvoice.objects.filter(start_date__range=[startDate, endDate],company = cmp)
                    recInv = Reccurring_Invoice_item.objects.filter(reccuring_invoice__in=rec_invoices,company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                    bills = Bill.objects.filter(Company = cmp, Bill_Date__range = [startDate, endDate]) 
                    bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                    rec_bills = Recurring_bills.objects.filter(company = cmp)     
                    recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills,).exclude(discount=0).annotate(total_discount4=Sum('discount'))
                elif trans == 'invoice':
                    invoices =  invoice.objects.filter(date__range=[startDate, endDate],company = cmp)
                    inv = invoiceitems.objects.filter(invoice__in=invoices,company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                    recInv = None
                    bill = None
                    recbillItem = None
                elif trans =='recurring_invoice':
                    inv = None
                    rec_invoices = RecurringInvoice.objects.filter(start_date__range=[startDate, endDate],company = cmp)
                    recInv = Reccurring_Invoice_item.objects.filter(reccuring_invoice__in=rec_invoices,company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                    bill = None
                    recbillItem = None
                elif trans == 'bill':
                    inv = None
                    recInv = None
                    bills = Bill.objects.filter(Company = cmp, Bill_Date__range = [startDate, endDate]) 
                    bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                    recbillItem = None
                elif trans == 'credit_notes':
                    inv = None
                    recInv = None
                    bill = None
                    rec_bills = Recurring_bills.objects.filter(rec_bill_date__range=[startDate, endDate],company = cmp)
                    recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))

            if inv:
                total_discount_inv += inv.aggregate(total_discount1=Sum('discount'))['total_discount1']
            if recInv:
                total_discount_recInv += recInv.aggregate(total_discount2=Sum('discount'))['total_discount2']
            if bill:
                total_discount_bill += bill.aggregate(total_discount3=Sum('discount'))['total_discount3']
            if recbillItem:
                total_discount_recbillItem += recbillItem.aggregate(total_discount3=Sum('discount'))['total_discount3']

            totsalediscount = total_discount_inv + total_discount_recInv
            totpurdiscount = total_discount_bill + total_discount_recbillItem 


            context = {
                'allmodules':allmodules, 
                'invoice': inv,  
                'recurringinvoice': recInv, 
                'recurringbill': recbillItem,
                'bill': bill ,
                'startDate':startDate, 
                'endDate':endDate, 
                'cmp':cmp,
                'totsalediscount': totsalediscount,
                'totpurdiscount': totpurdiscount,
                'transaction':trans,
                'details':dash_details,'log_details':log_details
            }

            return render(request,'zohomodules/Reports/discountstatement.html', context)
    else:
        return redirect('/')


def sharediscountstatementToEmail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
            dash_details = StaffDetails.objects.get(login_details=log_details)

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                total_discount_inv = 0
                total_discount_recInv = 0
                total_discount_recbillItem = 0
                total_discount_bill = 0

                # inv = None
                # recInv = None
                # recbillItem = None
                if startDate == None or endDate == None:
                    if trans == "all":
                        inv = invoiceitems.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                        recInv = Reccurring_Invoice_item.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                        bills = Bill.objects.filter(Company = cmp) 
                        bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                        rec_bills = Recurring_bills.objects.filter(company = cmp)     
                        recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills,).exclude(discount=0).annotate(total_discount4=Sum('discount'))
                    elif trans == 'invoice':
                        inv = invoiceitems.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                        recInv = None
                        bill = None
                        recbillItem = None
                    elif trans == 'recurring_invoice':
                        inv = None
                        recInv = Reccurring_Invoice_item.objects.filter(company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                        bill = None
                        recbillItem = None
                    elif trans == 'bill':
                        inv = None
                        recInv = None
                        bill = bills = Bill.objects.filter(Company = cmp) 
                        bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                        recbillItem = None
                    elif trans == 'credit_notes':
                        inv = None
                        recInv = None
                        bill = None
                        rec_bills = Recurring_bills.objects.filter(company = cmp)     
                        recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                else:
                    if trans == 'all':
                        invoices =  invoice.objects.filter(date__range=[startDate, endDate],company = cmp)
                        inv = invoiceitems.objects.filter(invoice__in=invoices,company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                        rec_invoices = RecurringInvoice.objects.filter(start_date__range=[startDate, endDate],company = cmp)
                        recInv = Reccurring_Invoice_item.objects.filter(reccuring_invoice__in=rec_invoices,company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                        bills = Bill.objects.filter(Company = cmp, Bill_Date__range = [startDate, endDate]) 
                        bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                        rec_bills = Recurring_bills.objects.filter(company = cmp)     
                        recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills,).exclude(discount=0).annotate(total_discount4=Sum('discount'))
                    elif trans == 'invoice':
                        invoices =  invoice.objects.filter(date__range=[startDate, endDate],company = cmp)
                        inv = invoiceitems.objects.filter(invoice__in=invoices,company = cmp).exclude(discount=0).annotate(total_discount1=Sum('discount'))
                        recInv = None
                        bill = None
                        recbillItem = None
                    elif trans =='recurring_invoice':
                        inv = None
                        rec_invoices = RecurringInvoice.objects.filter(start_date__range=[startDate, endDate],company = cmp)
                        recInv = Reccurring_Invoice_item.objects.filter(reccuring_invoice__in=rec_invoices,company = cmp).exclude(discount=0).annotate(total_discount2=Sum('discount'))
                        bill = None
                        recbillItem = None
                    elif trans == 'bill':
                        inv = None
                        recInv = None
                        bills = Bill.objects.filter(Company = cmp, Bill_Date__range = [startDate, endDate]) 
                        bill = BillItems.objects.filter(Bills__in = bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))
                        recbillItem = None
                    elif trans == 'credit_notes':
                        inv = None
                        recInv = None
                        bill = None
                        rec_bills = Recurring_bills.objects.filter(rec_bill_date__range=[startDate, endDate],company = cmp)
                        recbillItem = RecurrItemsList.objects.filter(recurr_bill_id__in = rec_bills).exclude(discount=0).annotate(total_discount3=Sum('discount'))

                if inv:
                    total_discount_inv += inv.aggregate(total_discount1=Sum('discount'))['total_discount1']
                if recInv:
                    total_discount_recInv += recInv.aggregate(total_discount2=Sum('discount'))['total_discount2']
                if bill:
                    total_discount_bill += bill.aggregate(total_discount3=Sum('discount'))['total_discount3']
                if recbillItem:
                    total_discount_recbillItem += recbillItem.aggregate(total_discount3=Sum('discount'))['total_discount3']

            totsalediscount = total_discount_inv + total_discount_recInv
            totpurdiscount = total_discount_bill + total_discount_recbillItem 


            context = {
                
                'invoice': inv,  
                'recurringinvoice': recInv, 
                'recurringbill': recbillItem,
                'bill': bill ,
                'startDate':startDate, 
                'endDate':endDate, 
                'cmp':cmp,
                'totsalediscount': totsalediscount,
                'totpurdiscount': totpurdiscount,
                'transaction':trans,
                'details':dash_details,'log_details':log_details
            }
            template_path = 'zohomodules/Reports/discountreport_share.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()
            filename = f'Discount Report'
            subject = f"Discount Report"
                # from django.core.mail import EmailMessage as EmailMsg
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Discount Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Discount Report details has been shared via email successfully..!')
            return redirect(discountstatement)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(discountstatement)

#end---------------------------------------------------

def bill_edit(request,pk):
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        allmodules= ZohoModules.objects.get(company=company,status='New')
        recurr_bill = Bill.objects.get(id=pk)
        recurr_lists = Bill.objects.filter(Company=company)
        last_history = Bill_History.objects.filter(bills=recurr_bill.id).last()
        history = Bill_History.objects.filter(bills=recurr_bill.id)
        recurr_items = BillItems.objects.filter(Bills=recurr_bill.id)
        recurr_comment = Bill_comments.objects.filter(bill=recurr_bill)

        item=Items.objects.filter(company=company)
        banks = Banking.objects.filter(company=company)
        vendors = Vendor.objects.filter(company=company)
        customers = Customer.objects.filter(company=company)
        pricelist = PriceList.objects.filter(company=company,status='Active',type='Purchase')
        items = Items.objects.filter(company=company)
        credits = RecurringCreditPeriod.objects.filter(company=company)
        repeat_list = RecurringRepeatEvery.objects.filter(company=company)
        payments=Company_Payment_Term.objects.filter(company_id = company)
        recc_bill_no = Bill_Reference.objects.filter(Company=company).last()
        units = Unit.objects.filter(company=company)
        accounts=Chart_of_Accounts.objects.filter(company=company)

        context = {
            'details': dash_details,
            'allmodules': allmodules,
            'recurr_bill': recurr_bill,
            'recurr_lists':recurr_lists,
            'recurr_items':recurr_items,
            'last_history':last_history,
            'recurr_comment':recurr_comment,
            'history':history,
            'item':item,
            'banks':banks,
            'vendors':vendors,
            "customers":customers,
            'items':items,
            'pricelist':pricelist,
            'credits':credits,
            'repeat_list':repeat_list,
            'payments':payments,
            'recc_bill_no':recc_bill_no,
            'units':units,
            'accounts':accounts,
            'company':company,
        }
    return render(request,'zohomodules/bill/bill_edit.html',context)

def bill_update(request,pk):
    if 'login_id' in request.session:
            if request.session.has_key('login_id'):
                log_id = request.session['login_id']
            else:
                return redirect('/')
        
            log_details = LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Staff':
                dash_details = StaffDetails.objects.get(login_details=log_details)
                comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
            else:    
                dash_details = CompanyDetails.objects.get(login_details=log_details)
                comp_details = CompanyDetails.objects.get(login_details=log_details)
                
            recurring_bill_data = Bill.objects.get(id=pk)
            recurring_bill_data.Login_Details = log_details
            recurring_bill_data.Company = comp_details
            if request.POST.get('vendor_id'):
                recurring_bill_data.Vendor = Vendor.objects.get(id=request.POST.get('vendor_id')) 
                recurring_bill_data.vend_name = request.POST.get('vendor_name')
                recurring_bill_data.vend_mail = request.POST.get('vendorEmail')
                recurring_bill_data.vend_gst_treat = request.POST.get('gst_type')
                recurring_bill_data.vend_gst_no = request.POST.get('gstin')
                recurring_bill_data.vend_source_of_supply = request.POST.get('vendor_source_of_suppy')
                recurring_bill_data.vend_billing_address = request.POST.get('vendor_bill_address')
                recurring_bill_data.Bill_Number = request.POST.get('bill_number')
                recurring_bill_data.Reference_Number = request.POST.get('reference_number')
                recurring_bill_data.profile_name = request.POST.get('profile_name')
                recurring_bill_data.Purchase_Order_Number = request.POST.get('order_number')

                unformatted_date = request.POST.get('rec_bil_Date')
                formatted_date = datetime.strptime(unformatted_date, '%Y-%m-%d').date()
                recurring_bill_data.Bill_Date = formatted_date
                recurring_bill_data.Due_Date = request.POST.get('due_date')

                if request.POST.get('customer_id'):
                    recurring_bill_data.Customer = Customer.objects.get(id=request.POST.get('customer_id')) 
                    recurring_bill_data.cust_name = request.POST.get('customer_name')
                    recurring_bill_data.cust_mail = request.POST.get('customerEmail')
                    recurring_bill_data.cust_gst_treat = request.POST.get('cust_gst_type')
                    recurring_bill_data.cust_gst_no = request.POST.get('cust_gstin')
                    recurring_bill_data.cust_billing_address = request.POST.get('cust_bill_address')
                    recurring_bill_data.cust_place_of_supply = request.POST.get('place_of_supply')
                
                recurring_bill_data.Payment_Method = request.POST.get('payment_method')

                if request.POST.get('payment_method') == 'Cash':
                    recurring_bill_data.Cheque_Number = None
                    recurring_bill_data.UPI_Id = None
                    recurring_bill_data.Bank_Account = None
                elif request.POST.get('payment_method') == 'Cheque':
                    recurring_bill_data.UPI_Id = None
                    recurring_bill_data.Bank_Account = None
                elif request.POST.get('payment_method') == 'UPI':
                    recurring_bill_data.Bank_Account = None
                    recurring_bill_data.Cheque_Number = None
                else:
                    recurring_bill_data.Cheque_Number = None
                    recurring_bill_data.UPI_Id = None

                if request.POST.get('cheque_id'):
                    recurring_bill_data.Cheque_Number = request.POST.get('cheque_id')
                elif request.POST.get('upi_id'):
                    recurring_bill_data.UPI_Id = request.POST.get('upi_id')
                elif request.POST.get('bnk_id'):
                    recurring_bill_data.Bank_Account = Banking.objects.get(id=request.POST.get('payment_method')).account_number

                if 'price_enable' not in request.POST:
                    recurring_bill_data.price_list = None
                else:
                    if request.POST.get('name_latest1'):
                        recurring_bill_data.price_list = PriceList.objects.get(id=request.POST.get('name_latest1'))
                    else:
                        recurring_bill_data.price_list = None

                recurring_bill_data.Sub_Total = request.POST.get('subtotal')
                recurring_bill_data.IGST = request.POST.get('igst')
                recurring_bill_data.CGST = request.POST.get('cgst')
                recurring_bill_data.SGST = request.POST.get('sgst')
                recurring_bill_data.Tax_Amount = request.POST.get('taxamount')
                recurring_bill_data.Shipping_Charge = request.POST.get('ship')
                recurring_bill_data.Adjustment_Number = request.POST.get('adj')
                recurring_bill_data.Grand_Total = request.POST.get('grandtotal')
                recurring_bill_data.Advance_amount_Paid = request.POST.get('advance')
                recurring_bill_data.Balance = request.POST.get('balance')
                if 'Draft' in request.POST:
                    recurring_bill_data.Status = 'Draft'
                elif 'Save' in request.POST:
                    recurring_bill_data.Status = 'Save'
                recurring_bill_data.note = request.POST.get('note')
                recurring_bill_data.document = request.POST.get('file')

                recurring_bill_data.save()

                item_id = request.POST.getlist('item_id[]')
                item_name = request.POST.getlist('item_name[]')
                hsn = request.POST.getlist('hsn[]')
                qty = request.POST.getlist('qty[]')
                price = request.POST.getlist('price[]')
                taxGST = request.POST.getlist('taxGST[]')
                taxIGST = request.POST.getlist('taxIGST[]')
                discount = request.POST.getlist('discount[]')
                total = request.POST.getlist('total[]')

                # stock reset and delete item list
                recurr_item_list = BillItems.objects.filter(Bills=recurring_bill_data, item_id__isnull=False)
                
                for i in recurr_item_list:
                    # check if item exists 
                    try:
                        item = Items.objects.get(id=i.item_id.id)
                        item.current_stock = int(item.current_stock) + int(i.qty)
                        item.save()
                    except:
                        pass

                recurr_item_list.delete()

                # re-create item list
                for i in range(len(item_name)):
                    try:
                        item = Items.objects.get(id=item_id[i])

                        recurr_item = BillItems(
                            item_id=item,
                            item_name=item_name[i],
                            item_hsn=hsn[i],
                            total_qty=item.current_stock,
                            qty=qty[i],
                            bal_qty=int(item.current_stock) - int(qty[i]),
                            price=price[i],
                            taxGST=taxGST[i],
                            taxIGST=taxIGST[i],
                            discount=discount[i],
                            total=total[i],
                            Bills=recurring_bill_data,
                            Login_Details=log_details,
                            Company=comp_details
                        )
                        recurr_item.save()

                        item.current_stock = int(item.current_stock) - int(qty[i])
                        item.save()
                    except:
                        pass

                # history creation
                recurr_history = Bill_History()
                recurr_history.Company = comp_details
                recurr_history.Login_Details = log_details
                recurr_history.bills = recurring_bill_data
                recurr_history.action = 'Edited'
                recurr_history.save()

                print('BILL Edited SUCCESSFULLY')

    return redirect('bill_overview',pk=pk)

def delete_bill(request, pk):
    if 'login_id' not in request.session:
        return redirect('/')
    
    login_id = request.session['login_id']
    log_details = get_object_or_404(LoginDetails, id=login_id)

    if log_details.user_type == 'Staff':
        dash_details = get_object_or_404(StaffDetails, login_details=log_details)
        company = dash_details.company
    elif log_details.user_type == 'Company':
        dash_details = get_object_or_404(CompanyDetails, login_details=log_details)
        company = dash_details

    recurr_bill = get_object_or_404(Bill, id=pk)
    recurr_bill.delete()

    if Bill.objects.filter(Company=company).exists():  # Ensure the field name matches your model definition
        first = Bill.objects.filter(Company=company).first()
        return redirect('bill_listout')
    else:
        return redirect('bill_listout')


def share_email_bill(request, pk):
    try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                

                if 'login_id' not in request.session:
                    return redirect('/')
                else:
                    login_id = request.session['login_id']
                    if 'login_id' not in request.session:
                        return redirect('/')
                    log_details= LoginDetails.objects.get(id=login_id)
                    if log_details.user_type == 'Staff':
                        dash_details = StaffDetails.objects.get(login_details=log_details)
                        company = dash_details.company
                    elif log_details.user_type == 'Company':
                        dash_details = CompanyDetails.objects.get(login_details=log_details)
                        company = dash_details
                emails_list = [email.strip() for email in emails_string.split(',')]
                allmodules= ZohoModules.objects.get(company=company,status='New')
                recurr_bill = Bill.objects.get(id=pk)
                recurr_lists = Bill.objects.filter(Company=company)
                last_history = Bill_History.objects.filter(bills=recurr_bill.id).last()
                history = Bill_History.objects.filter(bills=recurr_bill.id)
                recurr_items = BillItems.objects.filter(Bill=recurr_bill.id)
                recurr_comment = Bill_comments.objects.filter(bill=recurr_bill)
                context = {
                    'details': dash_details,
                    'allmodules': allmodules,
                    'recurr_bill': recurr_bill,
                    'recurr_lists':recurr_lists,
                    'recurr_items':recurr_items,
                    'last_history':last_history,
                    'recurr_comment':recurr_comment,
                    'history':history,
                }
                template_path = 'zohomodules/bill/bill_template1.html'
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'{recurr_bill.Bill_Number}details - {recurr_bill.id}.pdf'
                subject = f"{recurr_bill.Bill_Number}  - {recurr_bill.id}-details"
                body="hi, here is your bill "
                email = EmailMessage(
                    subject,
                    body,
                    settings.EMAIL_HOST_USER,
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
              
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect('bill_overview',pk)


def add_document_bill(request,pk):
    if request.method == "POST":
        document = request.FILES['file']
        recurr = Bill.objects.get(id=pk)
        recurr.Document = document
        recurr.save()
    return redirect('bill_overview',pk=pk)

def add_comments_bill(request, pk):
    if request.method == "POST":
        comment = request.POST.get('comment')
        try:
            bill = Bill.objects.get(id=pk)
            Bill_comments.objects.create(bill=bill, comment=comment)
        except Bill.DoesNotExist:
            return redirect('error_page')  # Redirect to an error page or handle the error appropriately
    return redirect('bill_overview', pk=pk)

def delete_comment_bill(request, pk, bill_id):
    try:
        recurr_comment = Bill_comments.objects.get(id=pk)
        recurr_comment.delete()
    except Bill_comments.DoesNotExist:
        pass  # Optionally handle the case where the comment does not exist
    return redirect('bill_overview', pk=bill_id)
    
    
def apply_filters(transactions, filters):
    # Implement your filtering logic here
    filtered_transactions = transactions
    
    # Example: Filter transactions based on start and end dates
    if filters['start']:
        filtered_transactions = [t for t in filtered_transactions if t['date'] >= filters['start']]
    if filters['end']:
        filtered_transactions = [t for t in filtered_transactions if t['date'] <= filters['end']]
    
    return filtered_transactions
    
    
def DetailsReportToEmail(request):
    if 'login_id' not in request.session:
        return redirect('/')

    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
    else:
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        comp_details = CompanyDetails.objects.get(login_details=log_details)

    allmodules = ZohoModules.objects.get(company=comp_details, status='New')

    if request.method == 'POST':
        try:
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']

            trans = request.POST['transactions']
            startDate = request.POST['start']
            endDate = request.POST['end']

            startDate = startDate if startDate else None
            endDate = endDate if endDate else None

            # Here we get the filters applied by the user
            filters = {
                'start': startDate,
                'end': endDate,
            }

            # Fetch all transactions
            transactions = []

            # Fetch transactions from different models and populate transactions list
            # Invoices
            invoices = invoice.objects.filter(company=comp_details)
            for inv in invoices:
                transactions.append({
                    'date': inv.date,
                    'party_name': inv.customer.first_name + " " + inv.customer.last_name,
                    'type': 'Invoice',
                    'type_number': inv.invoice_number,
                    'total_amount': inv.grand_total,
                    'amount_paid': inv.advanced_paid,
                    'balance': inv.balance
                })

            # Estimates
            estimates = Estimate.objects.filter(company=comp_details)
            for est in estimates:
                transactions.append({
                    'date': est.estimate_date,
                    'party_name': est.customer.first_name + " " + est.customer.last_name,
                    'type': 'Estimate',
                    'type_number': est.estimate_number,
                    'total_amount': est.grand_total,
                    'amount_paid': 0,  # Assuming no payment made for estimates initially
                    'balance': 0  # Similarly, no balance for estimates initially
                })

            # Recurring Invoices
            rec_invoices = RecurringInvoice.objects.filter(company=comp_details)
            for rec_inv in rec_invoices:
                transactions.append({
                    'date': rec_inv.start_date,
                    'party_name': rec_inv.customer.first_name + " " + rec_inv.customer.last_name,
                    'type': 'Recurring Invoice',
                    'type_number': rec_inv.rec_invoice_no,
                    'total_amount': rec_inv.grandtotal,
                    'amount_paid': rec_inv.advance_paid,
                    'balance': rec_inv.balance
                })

            # Purchase Orders
            purchase_orders = PurchaseOrder.objects.filter(company=comp_details)
            for order in purchase_orders:
                transactions.append({
                    'date': order.purchase_order_date,
                    'party_name': order.vendor.first_name + " " + order.vendor.last_name,
                    'type': 'Purchase Order',
                    'type_number': order.sales_order_number,
                    'total_amount': order.grand_total,
                    'amount_paid': order.advanced_paid,
                    'balance': order.balance
                })

            # Debit Notes
            debit_notes = debitnote.objects.filter(company=comp_details)
            for note in debit_notes:
                transactions.append({
                    'date': note.debitnote_date,
                    'party_name': note.vendor.first_name + " " + note.vendor.last_name,
                    'type': 'Debit Note',
                    'type_number': note.debitnote_no,
                    'total_amount': note.grandtotal,
                    'amount_paid': note.advance_paid,
                    'balance': note.balance
                })

            # Credit Notes
            credit_notes = Credit_Note.objects.filter(company=comp_details)
            for credit_note in credit_notes:
                transactions.append({
                    'date': credit_note.credit_note_date,
                    'party_name': credit_note.customer.first_name + " " + credit_note.customer.last_name,
                    'type': 'Credit Note',
                    'type_number': credit_note.credit_note_number,
                    'total_amount': credit_note.grand_total,
                    'amount_paid': credit_note.advance_paid,
                    'balance': credit_note.balance
                })

            # Retainer Invoices
            retainer_invoices = RetainerInvoice.objects.filter(company=comp_details)
            for retainer_inv in retainer_invoices:
                transactions.append({
                    'date': retainer_inv.retainer_invoice_date,
                    'party_name': retainer_inv.customer_name.first_name + " " + retainer_inv.customer_name.last_name,
                    'type': 'Retainer Invoice',
                    'type_number': retainer_inv.retainer_invoice_number,
                    'total_amount': retainer_inv.total_amount,
                    'amount_paid': retainer_inv.paid,
                    'balance': retainer_inv.balance
                })

            # Recurring Bills
            recurring_bills = Recurring_bills.objects.filter(company=comp_details)
            for recurring_bill in recurring_bills:
                transactions.append({
                    'date': recurring_bill.rec_bill_date,
                    'party_name': recurring_bill.vend_name,
                    'type': 'Recurring Bill',
                    'type_number': recurring_bill.recc_bill_no,
                    'total_amount': recurring_bill.total,
                    'amount_paid': recurring_bill.paid,
                    'balance': recurring_bill.bal
                })

            # Payment Received
            payment_received = Payment_recieved.objects.filter(company=comp_details)
            for payment in payment_received:
                transactions.append({
                    'date': payment.payment_date,
                    'party_name': payment.customer.first_name + " " + payment.customer.last_name,
                    'type': 'Payment Received',
                    'type_number': payment.payment_number,
                    'total_amount': payment.amount_to_apply,
                    'amount_paid': payment.total_payment,
                    'balance': payment.amount_to_credit
                })

            # Payment Made
            paymentmade = payment_made.objects.filter(company=comp_details)
            for payment in paymentmade:
                transactions.append({
                    'date': payment.payment_date,
                    'party_name': payment.vendor.first_name + " " + payment.vendor.last_name,
                    'type': 'Payment Made',
                    'type_number': payment.payment_no,
                    'total_amount': payment.total,
                    'amount_paid': payment.balance,
                    'balance': 0
                })

            # Bills
            bills = Bill.objects.filter(Company=comp_details)
            for bill in bills:
                transactions.append({
                    'date': bill.Bill_Date,
                    'party_name': bill.Vendor.first_name + " " + bill.Vendor.last_name,
                    'type': 'Bill',
                    'type_number': bill.Bill_Number,
                    'total_amount': bill.Grand_Total,
                    'amount_paid': bill.Advance_amount_Paid,
                    'balance': bill.Balance
                })

            # Sale Orders
            sale_orders = SaleOrder.objects.filter(company=comp_details)
            for sale_order in sale_orders:
                transactions.append({
                    'date': sale_order.sales_order_date,
                    'party_name': sale_order.customer.first_name + "" + sale_order.customer.last_name,
                    'type': 'Sale Order',
                    'type_number': sale_order.sales_order_number,
                    'total_amount': sale_order.grand_total,
                    'amount_paid': sale_order.advanced_paid,
                    'balance': sale_order.balance
                })

            # Delivery Challans
            delivery_challans = Delivery_challan.objects.filter(company=comp_details)
            for challan in delivery_challans:
                transactions.append({
                    'date': challan.challan_date,
                    'party_name': challan.customer.first_name + " " + challan.customer.last_name,
                    'type': 'Delivery Challan',
                    'type_number': challan.challan_number,
                    'total_amount': challan.grand_total,
                    'amount_paid': challan.advance,
                    'balance': challan.balance
                })

            # Expense
            expenses = Expense.objects.filter(company=comp_details)
            for exp in expenses:
                transactions.append({
                    'date': exp.date,
                    'party_name': exp.customer_name,
                    'type': exp.expense_type,
                    'type_number': exp.expense_number,
                    'total_amount': exp.amount,
                    'amount_paid': 0,
                    'balance': 0
                })

            filtered_transactions = apply_filters(transactions, filters)

            # Prepare email body
            email_body = "Transaction Report:\n\n"
            for item in filtered_transactions:
                email_body += f"Date: {item['date']}, Party Name: {item['party_name']}, Type: {item['type']}, Type Number: {item['type_number']}, Total Amount: {item['total_amount']}, Amount Paid: {item['amount_paid']}, Balance: {item['balance']}\n"
            email_body += f"\n{email_message}"

            # Render HTML template to string
            html_string = render_to_string('trans_pdf.html', {'transactions': filtered_transactions})

            # Generate PDF from HTML string
            pdf_filename = "transaction_report.pdf"
            pdfkit.from_string(html_string, pdf_filename)

            # Send email with PDF attachment
            email = EmailMessage(
                subject="Transaction Report",
                body=email_body,
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach_file(pdf_filename)
            email.send(fail_silently=False)

            # Delete PDF file after sending email
            os.remove(pdf_filename)

            messages.success(request, 'All transaction details have been shared via email successfully!')
            return redirect('all_transactions')
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect('all_transactions')
    else:
        return redirect('/')
        
        
def party_statement(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp  
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff  
        
        order = SaleOrder.objects.filter(company=cmp)
        purchase_order = PurchaseOrder.objects.filter(company=cmp)
        invoice_order = invoice.objects.filter(company=cmp)
        deliverychallan = Delivery_challan.objects.filter(company=cmp)
        recurringinvoice = RecurringInvoice.objects.filter(company=cmp)
        retainerinvoice = RetainerInvoice.objects.filter(company=cmp)
        estimate = Estimate.objects.filter(company=cmp)
        creditnote = Credit_Note.objects.filter(company=cmp)
        debittnote = debitnote.objects.filter(company=cmp)
        bill = Bill.objects.filter(Company_id=cmp.id)
        recurring_bill = Recurring_bills.objects.filter(company=cmp)
        recurring_expense = Recurring_Expense.objects.filter(company=cmp)
        expense = Expense.objects.filter(company=cmp)
        manual_journel = Journal.objects.filter(company=cmp)
        allmodules = ZohoModules.objects.get(company=cmp)

        customers = Customer.objects.filter(company=cmp)
        vendors = Vendor.objects.filter(company=cmp)

        total_expense = Expense.objects.filter(company=cmp).aggregate(Sum('amount'))['amount__sum'] or 0
        total_recurring_invoice = RecurringInvoice.objects.filter(company=cmp).aggregate(Sum('subtotal'))['subtotal__sum'] or 0
        total_retainer_invoice = RetainerInvoice.objects.filter(company=cmp).aggregate(Sum('total_amount'))['total_amount__sum'] or 0
        total_sale_order = SaleOrder.objects.filter(company=cmp).aggregate(Sum('grand_total'))['grand_total__sum'] or 0
        total_invoice = invoice.objects.filter(company=cmp).aggregate(Sum('grand_total'))['grand_total__sum'] or 0
        total_credit_note = Credit_Note.objects.filter(company=cmp).aggregate(Sum('sub_total'))['sub_total__sum'] or 0
        total_recurring_invoice = Decimal(total_recurring_invoice)
        total_retainer_invoice = Decimal(total_retainer_invoice)
        total_sale_order = Decimal(total_sale_order)
        total_invoice = Decimal(total_invoice)
        total_credit_note = Decimal(total_credit_note)
        total_money_in =  total_recurring_invoice + total_retainer_invoice + total_sale_order + total_invoice + total_credit_note

        total_bill = Bill.objects.filter(Company_id=cmp.id).aggregate(Sum('Sub_Total'))['Sub_Total__sum'] or 0
        total_recurring_bills = Recurring_bills.objects.filter(company=cmp).aggregate(Sum('sub_total'))['sub_total__sum'] or 0
        total_purchaseorder = PurchaseOrder.objects.filter(company=cmp).aggregate(Sum('sub_total'))['sub_total__sum'] or 0
        total_debit_note = debitnote.objects.filter(company=cmp).aggregate(Sum('subtotal'))['subtotal__sum'] or 0
        total_bill = Decimal(total_bill)
        total_recurring_bills = Decimal(total_recurring_bills)
        total_purchaseorder = Decimal(total_purchaseorder)
        total_debit_note = Decimal(total_debit_note)
        total_money_out = total_bill + total_recurring_bills + total_purchaseorder + total_debit_note

        total_bill = Bill.objects.filter(Company_id=cmp.id).aggregate(Sum('Sub_Total'))['Sub_Total__sum'] or 0
        total_recurring_bills = Recurring_bills.objects.filter(company=cmp).aggregate(Sum('sub_total'))['sub_total__sum'] or 0
        total_bill = Decimal(total_bill)
        total_recurring_bills = Decimal(total_recurring_bills)
        total_purchase = total_bill + total_recurring_bills

        total_retainer_invoice = RetainerInvoice.objects.filter(company=cmp).aggregate(Sum('total_amount'))['total_amount__sum'] or 0
        total_recurring_invoice = RecurringInvoice.objects.filter(company=cmp).aggregate(Sum('subtotal'))['subtotal__sum'] or 0
        total_invoice = invoice.objects.filter(company=cmp).aggregate(Sum('grand_total'))['grand_total__sum'] or 0
        total_recurring_invoice = Decimal(total_recurring_invoice)
        total_retainer_invoice = Decimal(total_retainer_invoice)
        total_invoice = Decimal(total_invoice)
        total_sale = total_retainer_invoice + total_recurring_invoice + total_invoice

        context = {
            'allmodules': allmodules,
            'details': dash_details,
            'log_details': log_details,
            'expense': expense,
            'manual_journel':manual_journel,
            'order': order,
            'recurring_expense': recurring_expense,
            'debitnote': debittnote,
            'purchase_order': purchase_order,
            'customers': customers,  
            'vendors': vendors,
            'companyName': cmp.company_name,  
            'invoice_order': invoice_order,
            'deliverychallan': deliverychallan,
            'challan': deliverychallan,
            'recurringinvoice': recurringinvoice,
            'rcinvoice': recurringinvoice,
            'recurring_bill': recurring_bill,
            'retainerinvoice': retainerinvoice,
            'rtinvoice': retainerinvoice,
            'estimate': estimate,
            'invo': invoice_order,
            'est': estimate,
            'bills': bill,
            'rcbill': recurring_bill,
            'creditnote': creditnote,
            'cnote': creditnote,
            'total_money_in':total_money_in,
            'total_expense':total_expense,
            'total_money_out':total_money_out,
            'total_purchase':total_purchase,
            'total_sale':total_sale,
            
        }

    return render(request, 'zohomodules/party_reports/partystatement.html', context)

def party_statementcustomized(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company

        allmodules = ZohoModules.objects.get(company=cmp, status='New')
        
        customers = Customer.objects.filter(company=cmp)
        vendors = Vendor.objects.filter(company=cmp)

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)

            selected_orders = SaleOrder.objects.filter(company=cmp)
            selected_purchase_orders = PurchaseOrder.objects.filter(company=cmp)
            selected_recurring_expense = Recurring_Expense.objects.filter(company=cmp)
            selected_expense = Expense.objects.filter(company=cmp)
            selected_debitnote = debitnote.objects.filter(company=cmp)
            selected_deliverychallans = Delivery_challan.objects.filter(company=cmp)
            selected_recurringinvoices = RecurringInvoice.objects.filter(company=cmp)
            selected_estimates = Estimate.objects.filter(company=cmp)
            selected_invoice = invoice.objects.filter(company=cmp)
            selected_creditnotes = Credit_Note.objects.filter(company=cmp)
            selected_bills = Bill.objects.filter(Company=cmp)
            selected_recurring_bills = Recurring_bills.objects.filter(company=cmp)
            selected_manual_journel = Journal.objects.filter(company=cmp)
            selected_retainerinvoices = RetainerInvoice.objects.filter(company=cmp)

            if trans and trans != "all":
                trans_parts = trans.split()
                if len(trans_parts) >= 3:
                    trans_id = trans_parts[0]
                    trans_fname = trans_parts[1]
                    trans_lname = ' '.join(trans_parts[2:])
                    
                    is_vendor = Vendor.objects.filter(id=trans_id, first_name=trans_fname, last_name=trans_lname, company=cmp).exists()
                    
                    if is_vendor:
                        selected_purchase_orders = selected_purchase_orders.filter(vendor_id=trans_id)
                        selected_bills = selected_bills.filter(Vendor_id=trans_id)
                        selected_recurring_bills = selected_recurring_bills.filter(vendor_details_id=trans_id)
                        selected_debitnote = selected_debitnote.filter(vendor_id=trans_id)
                        selected_recurring_expense = selected_recurring_expense.filter(vendor_id=trans_id)  
                        selected_expense = selected_expense.filter(vendor_name=trans_fname)  

                        selected_orders = SaleOrder.objects.none()
                        selected_invoice = invoice.objects.none()
                        selected_deliverychallans = Delivery_challan.objects.none()
                        selected_recurringinvoices = RecurringInvoice.objects.none()
                        selected_retainerinvoices = RetainerInvoice.objects.none()
                        selected_estimates = Estimate.objects.none()
                        selected_creditnotes = Credit_Note.objects.none()
                    else:
                        is_customer = Customer.objects.filter(id=trans_id, first_name=trans_fname, last_name=trans_lname, company=cmp).exists()
                        if is_customer:
                            selected_orders = selected_orders.filter(customer_id=trans_id)
                            selected_invoice = selected_invoice.filter(customer_id=trans_id)
                            selected_deliverychallans = selected_deliverychallans.filter(customer_id=trans_id)
                            selected_recurringinvoices = selected_recurringinvoices.filter(customer_id=trans_id)
                            selected_retainerinvoices = selected_retainerinvoices.filter(customer_name_id=trans_id)
                            selected_estimates = selected_estimates.filter(customer_id=trans_id)
                            selected_creditnotes = selected_creditnotes.filter(customer_id=trans_id)
                            
                            selected_purchase_orders = PurchaseOrder.objects.none()
                            selected_bills = Bill.objects.none()
                            selected_recurring_bills = Recurring_bills.objects.none()
                            selected_debitnote = debitnote.objects.none()
                            selected_recurring_expense = Recurring_Expense.objects.none()
                            selected_expense = Expense.objects.none()

            if startDate and endDate:
                selected_orders = selected_orders.filter(sales_order_date__range=[startDate, endDate])
                selected_deliverychallans = selected_deliverychallans.filter(challan_date__range=[startDate, endDate])
                selected_recurringinvoices = selected_recurringinvoices.filter(start_date__range=[startDate, endDate])
                selected_retainerinvoices = selected_retainerinvoices.filter(retainer_invoice_date__range=[startDate, endDate])
                selected_estimates = selected_estimates.filter(estimate_date__range=[startDate, endDate])
                selected_creditnotes = selected_creditnotes.filter(credit_note_date__range=[startDate, endDate])
                selected_invoice = selected_invoice.filter(date__range=[startDate, endDate])
                
                selected_purchase_orders = selected_purchase_orders.filter(purchase_order_date__range=[startDate, endDate])
                selected_bills = selected_bills.filter(Bill_Date__range=[startDate, endDate])
                selected_recurring_bills = selected_recurring_bills.filter(rec_bill_date__range=[startDate, endDate])
                selected_debitnote = selected_debitnote.filter(debitnote_date__range=[startDate, endDate])
                selected_recurring_expense = selected_recurring_expense.filter(exp_date__range=[startDate, endDate])  
                selected_expense = selected_expense.filter(date__range=[startDate, endDate])

            total_expense_amount = selected_expense.aggregate(Sum('amount'))['amount__sum'] or 0

            total_bill = selected_bills.aggregate(Sum('Sub_Total'))['Sub_Total__sum'] or 0
            total_recurring_bills = selected_recurring_bills.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_purchaseorder = selected_purchase_orders.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_debit_note = selected_debitnote.aggregate(Sum('subtotal'))['subtotal__sum'] or 0
            total_bill = Decimal(total_bill)
            total_recurring_bills = Decimal(total_recurring_bills)
            total_purchaseorder = Decimal(total_purchaseorder)
            total_debit_note = Decimal(total_debit_note)
            total_money_out = total_bill + total_recurring_bills + total_purchaseorder + total_debit_note

           
            total_recurring_invoice = selected_recurringinvoices.aggregate(Sum('subtotal'))['subtotal__sum'] or 0
            total_retainer_invoice = selected_retainerinvoices.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
            total_sale_order = selected_orders.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_invoice = selected_invoice.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_credit_note = selected_creditnotes.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_recurring_invoice = Decimal(total_recurring_invoice)
            total_retainer_invoice = Decimal(total_retainer_invoice)
            total_sale_order = Decimal(total_sale_order)
            total_invoice = Decimal(total_invoice)
            total_credit_note = Decimal(total_credit_note)
            total_money_in =  total_recurring_invoice + total_retainer_invoice + total_sale_order + total_invoice + total_credit_note

            total_bill = selected_bills.aggregate(Sum('Sub_Total'))['Sub_Total__sum'] or 0
            total_recurring_bills = selected_recurring_bills.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_bill = Decimal(total_bill)
            total_recurring_bills = Decimal(total_recurring_bills)
            total_purchase = total_bill + total_recurring_bills

            total_recurring_invoice = selected_recurringinvoices.aggregate(Sum('subtotal'))['subtotal__sum'] or 0
            total_retainer_invoice = selected_retainerinvoices.aggregate(Sum('total_amount'))['total_amount__sum'] or 0
            total_invoice = selected_invoice.aggregate(Sum('sub_total'))['sub_total__sum'] or 0
            total_recurring_invoice = Decimal(total_recurring_invoice)
            total_retainer_invoice = Decimal(total_retainer_invoice)
            total_invoice = Decimal(total_invoice)
            total_sale = total_retainer_invoice + total_recurring_invoice + total_invoice

            context = {
                'order': selected_orders,
                'purchase_order': selected_purchase_orders,
                'recurring_expense': selected_recurring_expense,  
                'deliverychallan': selected_deliverychallans,
                'recurringinvoice': selected_recurringinvoices,
                'estimate': selected_estimates,
                'creditnote': selected_creditnotes,
                'bill': selected_bills,
                'invoice': selected_invoice,
                'recurring_bill': selected_recurring_bills,
                'retainerinvoice': selected_retainerinvoices,
                'debitnote': selected_debitnote,  
                'log_details': log_details,
                'allmodules': allmodules,
                'startDate': startDate,
                'endDate': endDate,
                'transaction': trans,
                'first_name': trans_fname if 'trans_fname' in locals() else None,
                'last_name': trans_lname if 'trans_lname' in locals() else None,
                'companyName': cmp.company_name,
                'customers': customers,
                'vendors': vendors,
                'selected_expense': selected_expense,
                'total_expense_amount': total_expense_amount,
                'total_money_out':total_money_out,
                'total_money_in':total_money_in,
                'total_purchase':total_purchase,
                'total_sale':total_sale
            }

            return render(request, 'zohomodules/party_reports/partystatementcustomized.html', context)
        else:
            return redirect('/')
    else:
        return redirect('/')

def party_statement_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff 

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                order = SaleOrder.objects.filter(company=cmp)
                purchase_order = PurchaseOrder.objects.filter(company=cmp)
                invoice_order = invoice.objects.filter(company=cmp)
                deliverychallan = Delivery_challan.objects.filter(company=cmp)
                recurringinvoice = RecurringInvoice.objects.filter(company=cmp)
                retainerinvoice = RetainerInvoice.objects.filter(company=cmp)
                estimate = Estimate.objects.filter(company=cmp)
                creditnote = Credit_Note.objects.filter(company=cmp)
                debittnote = debitnote.objects.filter(company=cmp)
                bill = Bill.objects.filter(Company_id=cmp.id)
                recurring_bill = Recurring_bills.objects.filter(company=cmp)
                recurring_expense = Recurring_Expense.objects.filter(company=cmp)
                expense = Expense.objects.filter(company=cmp)
                manual_journel = Journal.objects.filter(company=cmp)
                

                customers = Customer.objects.filter(company=cmp)
                vendors = Vendor.objects.filter(company=cmp)

                context = {
                    
                    'details': dash_details,
                    'log_details': log_details,
                    'expense': expense,
                    'manual_journel':manual_journel,
                    'order': order,
                    'recurring_expense': recurring_expense,
                    'debitnote': debittnote,
                    'purchase_order': purchase_order,
                    'customers': customers,  
                    'vendors': vendors,
                    'companyName': cmp.company_name,  
                    'invoice_order': invoice_order,
                    'deliverychallan': deliverychallan,
                    'challan': deliverychallan,
                    'recurringinvoice': recurringinvoice,
                    'rcinvoice': recurringinvoice,
                    'recurring_bill': recurring_bill,
                    'retainerinvoice': retainerinvoice,
                    'rtinvoice': retainerinvoice,
                    'estimate': estimate,
                    'invo': invoice_order,
                    'est': estimate,
                    'bills': bill,
                    'rcbill': recurring_bill,
                    'creditnote': creditnote,
                    'cnote': creditnote,
                    
                    
                }



                template_path = 'zohomodules/party_reports/partystatement_email.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Party Statement'
                subject = 'Party Statement'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Party Statement report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                

                messages.success(request, 'Party Statement report details have been shared via email successfully!')
                return redirect(party_statement)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(party_statement)
        
def party_statement_customize_email(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff 

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                trans = request.GET.get('transactions', None)
                startDate = request.GET.get('from_date', None)
                endDate = request.GET.get('to_date', None)

                selected_orders = SaleOrder.objects.filter(company=cmp)
                selected_purchase_orders = PurchaseOrder.objects.filter(company=cmp)
                selected_recurring_expense = Recurring_Expense.objects.filter(company=cmp)
                selected_expense = Expense.objects.filter(company=cmp)
                selected_debitnote = debitnote.objects.filter(company=cmp)
                selected_deliverychallans = Delivery_challan.objects.filter(company=cmp)
                selected_recurringinvoices = RecurringInvoice.objects.filter(company=cmp)
                selected_estimates = Estimate.objects.filter(company=cmp)
                selected_invoice = invoice.objects.filter(company=cmp)
                selected_creditnotes = Credit_Note.objects.filter(company=cmp)
                selected_bills = Bill.objects.filter(Company=cmp)
                selected_recurring_bills = Recurring_bills.objects.filter(company=cmp)
                selected_manual_journel = Journal.objects.filter(company=cmp)
                selected_retainerinvoices = RetainerInvoice.objects.filter(company=cmp)

                if trans and trans != "all":
                    trans_parts = trans.split()
                    if len(trans_parts) >= 3:
                        trans_id = trans_parts[0]
                        trans_fname = trans_parts[1]
                        trans_lname = ' '.join(trans_parts[2:])
                        
                        is_vendor = Vendor.objects.filter(id=trans_id, first_name=trans_fname, last_name=trans_lname, company=cmp).exists()
                        
                        if is_vendor:
                            selected_purchase_orders = selected_purchase_orders.filter(vendor_id=trans_id)
                            selected_bills = selected_bills.filter(Vendor_id=trans_id)
                            selected_recurring_bills = selected_recurring_bills.filter(vendor_details_id=trans_id)
                            selected_debitnote = selected_debitnote.filter(vendor_id=trans_id)
                            selected_recurring_expense = selected_recurring_expense.filter(vendor_id=trans_id)  
                            selected_expense = selected_expense.filter(vendor_name=trans_fname)  

                            selected_orders = SaleOrder.objects.none()
                            selected_invoice = invoice.objects.none()
                            selected_deliverychallans = Delivery_challan.objects.none()
                            selected_recurringinvoices = RecurringInvoice.objects.none()
                            selected_retainerinvoices = RetainerInvoice.objects.none()
                            selected_estimates = Estimate.objects.none()
                            selected_creditnotes = Credit_Note.objects.none()
                        else:
                            is_customer = Customer.objects.filter(id=trans_id, first_name=trans_fname, last_name=trans_lname, company=cmp).exists()
                            if is_customer:
                                selected_orders = selected_orders.filter(customer_id=trans_id)
                                selected_invoice = selected_invoice.filter(customer_id=trans_id)
                                selected_deliverychallans = selected_deliverychallans.filter(customer_id=trans_id)
                                selected_recurringinvoices = selected_recurringinvoices.filter(customer_id=trans_id)
                                selected_retainerinvoices = selected_retainerinvoices.filter(customer_name_id=trans_id)
                                selected_estimates = selected_estimates.filter(customer_id=trans_id)
                                selected_creditnotes = selected_creditnotes.filter(customer_id=trans_id)
                                
                                selected_purchase_orders = PurchaseOrder.objects.none()
                                selected_bills = Bill.objects.none()
                                selected_recurring_bills = Recurring_bills.objects.none()
                                selected_debitnote = debitnote.objects.none()
                                selected_recurring_expense = Recurring_Expense.objects.none()
                                selected_expense = Expense.objects.none()

                if startDate and endDate:
                    selected_orders = selected_orders.filter(sales_order_date__range=[startDate, endDate])
                    selected_deliverychallans = selected_deliverychallans.filter(challan_date__range=[startDate, endDate])
                    selected_recurringinvoices = selected_recurringinvoices.filter(start_date__range=[startDate, endDate])
                    selected_retainerinvoices = selected_retainerinvoices.filter(retainer_invoice_date__range=[startDate, endDate])
                    selected_estimates = selected_estimates.filter(estimate_date__range=[startDate, endDate])
                    selected_creditnotes = selected_creditnotes.filter(credit_note_date__range=[startDate, endDate])
                    selected_invoice = selected_invoice.filter(date__range=[startDate, endDate])
                    
                    selected_purchase_orders = selected_purchase_orders.filter(purchase_order_date__range=[startDate, endDate])
                    selected_bills = selected_bills.filter(Bill_Date__range=[startDate, endDate])
                    selected_recurring_bills = selected_recurring_bills.filter(rec_bill_date__range=[startDate, endDate])
                    selected_debitnote = selected_debitnote.filter(debitnote_date__range=[startDate, endDate])
                    selected_recurring_expense = selected_recurring_expense.filter(exp_date__range=[startDate, endDate])  
                    selected_expense = selected_expense.filter(date__range=[startDate, endDate])

                
                context = {
                    'order': selected_orders,
                    'purchase_order': selected_purchase_orders,
                    'recurring_expense': selected_recurring_expense,  
                    'deliverychallan': selected_deliverychallans,
                    'recurringinvoice': selected_recurringinvoices,
                    'estimate': selected_estimates,
                    'creditnote': selected_creditnotes,
                    'bill': selected_bills,
                    'invoice': selected_invoice,
                    'recurring_bill': selected_recurring_bills,
                    'retainerinvoice': selected_retainerinvoices,
                    'debitnote': selected_debitnote,  
                    'log_details': log_details,
                    
                    'startDate': startDate,
                    'endDate': endDate,
                    'transaction': trans,
                    'first_name': trans_fname if 'trans_fname' in locals() else None,
                    'last_name': trans_lname if 'trans_lname' in locals() else None,
                    'companyName': cmp.company_name,
                    
                    
                }


                template_path = 'zohomodules/party_reports/partystatement_customized_email.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Party Statement.pdf'
                subject = 'Party Statement'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Party Statement report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                
                messages.success(request, 'Party Statement report details have been shared via email successfully!')
                return redirect(party_statement)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(party_statement)        

    else:
        return redirect('/')
            
            
# expense created by Anoop

def expense(request):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        expenses = Expense.objects.filter(login_details=log_details)
        

        

        return render(request,'zohomodules/expense/expense.html',{'details':dash_details,'allmodules': allmodules,'expenses':expenses,'log_details':log_details}) 


    else:
        return redirect('/')
    
def create_expense(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)
        
        allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        customers = Customer.objects.filter(company=comp_details)
        vendor = Vendor.objects.filter(company=comp_details)
        account = Chart_of_Accounts.objects.all()
        bank = Banking.objects.filter(company=comp_details)
        acc = Chart_of_Accounts.objects.filter(account_type='Expense')
        comp_payment_terms = Company_Payment_Term.objects.filter(company=comp_details)
        price_lists = PriceList.objects.filter(type='Sales', login_details=log_details)
        
        # Generate the next expense number
        last_expense = Expense.objects.filter(login_details=log_details).last()
        if last_expense:
            last_expense_number = last_expense.expense_number
            match = re.search(r'(\d+)$', last_expense_number)
            if match:
                expense_no = int(match.group(1))+1
                next_expense_number = f'EXP{str(expense_no).zfill(3)}'
            else:
                next_expense_number = 'EXP001'
        else:
            next_expense_number = 'EXP001'
        
        # Generate the next reference number
        last_ref = Expense.objects.filter(login_details=log_details).last()
        if last_ref and last_ref.reference_number.isdigit():
            next_ref_number = str(int(last_ref.reference_number) + 1)
        else:
            next_ref_number = '1'
        
        selected_bank = None
        bank_account_number = None
        
        if request.method == 'POST':
            selected_bank_id = request.POST.get('bank_account')
            if selected_bank_id:
                selected_bank = Banking.objects.get(id=selected_bank_id)
                bank_account_number = selected_bank.bnk_acno
      
       
        return render(request,'zohomodules/expense/creation expense.html',{'details':dash_details,'allmodules': allmodules,'log_details':log_details,'c': customers, 'v' : vendor, 'a':account, 'b':bank,'acc':acc, 'p': comp_payment_terms, 'price':  price_lists, 'last_expense_number': next_expense_number,'next_ref_number': next_ref_number, 'bank_account_number': bank_account_number,}) 
    else:
        return redirect('/') 

def check_expense_number(request):
    if request.method != 'POST':
        return JsonResponse({'error': 'Invalid request method.'})

    data = json.loads(request.body)
    expense_number = data.get('expense_number')

    if not expense_number or not re.match(r'^EXP\d+$', expense_number):
        return JsonResponse({'exists': False, 'error': 'Invalid expense number format.'})

    expense_num_digits = int(expense_number[3:])  # Assuming expense number is in the format "EXP001"

    # Get the company details from the session
    if 'login_id' not in request.session:
        return JsonResponse({'error': 'User not logged in.'})

    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)
    
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
    else:
        comp_details = CompanyDetails.objects.get(login_details=log_details)

    company_id = comp_details.id

    # Check if the expense number already exists for this company
    if Expense.objects.filter(expense_number=expense_number, company_id=company_id).exists():
        return JsonResponse({'exists': True})

    # Get the last expense number for this company from the database
    last_expense = Expense.objects.filter(company_id=company_id).order_by('-id').first()
    last_expense_number = int(last_expense.expense_number[3:]) if last_expense else 0

    # Check if the expense number is continuous
    is_continuous = (expense_num_digits == last_expense_number + 1)
    
    return JsonResponse({'exists': False, 'is_continuous': is_continuous})    

def expense_overview(request,expense_id):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
           
        else:
            return redirect('/')
    
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type=='Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(id=dash_details.company.id)

        else:    
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details=CompanyDetails.objects.get(login_details=log_details)

            
        allmodules= ZohoModules.objects.get(company=comp_details,status='New')
        expenses = Expense.objects.filter(login_details=log_details)
       
        over  = get_object_or_404(Expense, pk=expense_id)
   
        #comments  = get_object_or_404(expense_comments, pk=expense_id)
        comments = expense_comments.objects.filter(expense=over) 
        history =  ExpenseHistory.objects.filter(expense=over) 

       
    
    content = {
                'details': dash_details,
               
                'allmodules': allmodules,
                'log_details':log_details,
                'over': over,'exp':expenses,'comments':comments,'history':history
               
        }
    return render(request,'zohomodules/expense/expenseoverview.html',content)  

def create_expense1(request):
    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
        else:
            cmp = StaffDetails.objects.get(login_details=log_details).company

        date = request.POST.get('date')
        account = request.POST.get('account')
        expense_type = request.POST.get('expense_type')
        hsn_code = request.POST.get('hsn_code')
        sac_code = request.POST.get('sac_code')
        expense_number = request.POST.get('expense_number')
        reference_number = request.POST.get('reference_number')
        amount = request.POST.get('amount')
        tax_rate = request.POST.get('tax_rate')
        payment_type = request.POST.get('payment_type')
        check_number = request.POST.get('check_no') if payment_type == 'Cheque' else None
        upi_id = request.POST.get('upi_id') if payment_type == 'UPI' else None
        acc_no = request.POST.get('acc_no') if payment_type not in ['cash', 'Cheque', 'UPI'] else None
        vendor_name = request.POST.get('vendor_name')
        vendor_email = request.POST.get('vendor_email')
        vendor_gstin = request.POST.get('vendor_gstin')
        vendor_gst_type = request.POST.get('vendor_gst_type')
        vendor_source_of_supply = request.POST.get('vendor_source_of_supply')
        vendor_billing_address = request.POST.get('vendor_billing_address')
        customer_name = request.POST.get('customer_name')
        customer_email = request.POST.get('customer_email')
        customer_gstin = request.POST.get('customer_gstin')
        customer_gst_type = request.POST.get('customer_gst_type')
        customer_price_of_supply = request.POST.get('customer_price_of_supply')
        customer_billing_address = request.POST.get('customer_billing_address')
        note = request.POST.get('note')
        status = request.POST.get('status', 'draft')

        # Create Expense object
        expense = Expense.objects.create(
            company=cmp,
            login_details=log_details,
            date=date,
            account=account,
            expense_type=expense_type,
            hsn_code=hsn_code,
            sac_code=sac_code,
            expense_number=expense_number,
            reference_number=reference_number,
            amount=amount,
            tax_rate=tax_rate,
            payment_type=payment_type,
            vendor_name=vendor_name,
            vendor_email=vendor_email,
            vendor_gstin=vendor_gstin,
            vendor_gst_type=vendor_gst_type,
            vendor_source_of_supply=vendor_source_of_supply,
            vendor_billing_address=vendor_billing_address,
            customer_name=customer_name,
            customer_email=customer_email,
            customer_gstin=customer_gstin,
            customer_gst_type=customer_gst_type,
            customer_price_of_supply=customer_price_of_supply,
            customer_billing_address=customer_billing_address,
            note=note,
            checkno=check_number,
            upi=upi_id,
            bankaccno=acc_no,
            status=status
        )

        # Handle file upload
        if 'avatar' in request.FILES:
            avatar = request.FILES['avatar']
            expense.avatar = avatar
            expense.save()

        # Create ExpenseHistory object
        ExpenseHistory.objects.create(
            company=cmp,
            logindetails=log_details,
            expense=expense,
            Date=date,
            action='Created'
        )

        return redirect('expense')  # Redirect to success URL
    else:
        return render(request, 'create_expense.html')

     
def edit_expense(request, pk):
    if 'login_id' in request.session:
        if request.session.has_key('login_id'):
            log_id = request.session['login_id']
        else:
            return redirect('/')

        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        edit = Expense.objects.get(id=pk)
        customers = Customer.objects.filter(company=comp_details)
        vendors = Vendor.objects.filter(company=comp_details)
        bank = Banking.objects.filter(company=comp_details)
        acc = Chart_of_Accounts.objects.filter(account_type='Expense')

        return render(request, 'zohomodules/expense/editexpense.html', {
            'details': dash_details,
            'allmodules': allmodules,
            'log_details': log_details,
            'edit': edit,
            'c': customers,
            'v': vendors,
            'account': acc,
            'bank':bank
        })
    else:
        return redirect('/')  


def edit_expense1(request, pk):
    edit = get_object_or_404(Expense, id=pk)

    if request.method == 'POST':
        log_id = request.session['login_id']
        log_details = get_object_or_404(LoginDetails, id=log_id)

        if log_details.user_type == 'Company':
            cmp = get_object_or_404(CompanyDetails, login_details=log_details)
        else:
            staff_details = get_object_or_404(StaffDetails, login_details=log_details)
            cmp = staff_details.company

        # Getting the POST data safely
        date_value = request.POST.get('date')
        account = request.POST.get('account')
        expense_type = request.POST.get('expense_type')
        hsn_code = request.POST.get('hsn_code')
        sac_code = request.POST.get('sac_code')
        expense_number = request.POST.get('expense_number')
        reference_number = request.POST.get('reference_number')
        amount = request.POST.get('amount')
        tax_rate = request.POST.get('tax_rate')
        payment_type = request.POST.get('payment_type')
        check_no = request.POST.get('check_no') if payment_type == 'Cheque' else None
        upi_id = request.POST.get('upi_id') if payment_type == 'UPI' else None
        bank_acc_no = request.POST.get('acc_no') if payment_type not in ['cash', 'Cheque', 'UPI'] else None
        vendor_name = request.POST.get('vendor_name')
        vendor_email = request.POST.get('vendor_email')
        vendor_gstin = request.POST.get('vendor_gstin')
        vendor_gst_type = request.POST.get('vendor_gst_type')
        vendor_source_of_supply = request.POST.get('vendor_source_of_supply')
        vendor_billing_address = request.POST.get('vendor_billing_address')
        customer_name = request.POST.get('customer_name')
        customer_email = request.POST.get('customer_email')
        customer_gstin = request.POST.get('customer_gstin')
        customer_gst_type = request.POST.get('customer_gst_type')
        customer_price_of_supply = request.POST.get('customer_price_of_supply')
        customer_billing_address = request.POST.get('customer_billing_address')
        note = request.POST.get('note')

        # Updating the expense object
        edit.date = date_value
        edit.account = account
        edit.expense_type = expense_type
        edit.hsn_code = hsn_code
        edit.sac_code = sac_code
        edit.expense_number = expense_number
        edit.reference_number = reference_number
        edit.amount = amount
        edit.tax_rate = tax_rate
        edit.payment_type = payment_type
        edit.checkno = check_no
        edit.upi = upi_id
        edit.bankaccno = bank_acc_no
        edit.vendor_name = vendor_name
        edit.vendor_email = vendor_email
        edit.vendor_gstin = vendor_gstin
        edit.vendor_gst_type = vendor_gst_type
        edit.vendor_source_of_supply = vendor_source_of_supply
        edit.vendor_billing_address = vendor_billing_address
        edit.customer_name = customer_name
        edit.customer_email = customer_email
        edit.customer_gstin = customer_gstin
        edit.customer_gst_type = customer_gst_type
        edit.customer_price_of_supply = customer_price_of_supply
        edit.customer_billing_address = customer_billing_address
        edit.note = note
        edit.save()

        # Creating an ExpenseHistory object
        ExpenseHistory.objects.create(
            company=cmp,
            logindetails=log_details,
            expense=edit,
            Date=date.today(),
            action='Edited'
        )

        return redirect(reverse('expense_overview', args=[edit.id]))

    return render(request, 'zohomodules/expense/editexpense.html', {'edit': edit})

def expense_status(request, pv):                                                                #new by tinto mt
    
    selitem = Expense.objects.get(id=pv)

    if selitem.status == 'save':
        selitem.status = 'draft'
        selitem.save()
    elif selitem.status != 'save':
        selitem.status = 'save'
        selitem.save()

    selitem.save()

    return redirect('expense_overview',pv)


def delete_expense(request, pk):
    expense = get_object_or_404(Expense, id=pk)
    expense.delete()
    return redirect('expense') 

def showexpense(request):
    expenses = Expense.objects.all()  # Retrieve all expenses from the database
    return render(request, 'expense.html', {'expenses': expenses})
# items llist


def fetch_vendor_data(request):
    vendor_name = request.GET.get('vendor')
    if vendor_name:
        try:
            vendor = Vendor.objects.get(name=vendor_name)
            return JsonResponse({'email': vendor.vendor_email})
        except Vendor.DoesNotExist:
            pass
    return JsonResponse({}, status=400)


def getvendorDetailsAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details = log_details)
        else:
            cmp = StaffDetails.objects.get(login_details = log_details).company
        
        vendId = request.POST['id']
        vend = Vendor.objects.get(id = vendId)

        if vend:
            context = {
                'status':True, 'idv':vend.id, 'vemail':vend.vendor_email, 'vgstType':vend.gst_treatment,'vshipState':vend.source_of_supply,'vgstin':False if vend.gst_number == "" or vend.gst_number == None or vend.gst_number == 'null' else True, 'vgstNo':vend.gst_number,
                'vstreet':vend.billing_address, 'vcity':vend.billing_city, 'vstate':vend.billing_state, 'vcountry':vend.billing_country, 'vpincode':vend.billing_pin_code
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')  
    

def newvendorPaymentTermAjax(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details=log_details)
        else:
            com = StaffDetails.objects.get(login_details=log_details).company

        term = request.POST.get('term')
        days = request.POST.get('days')

        if term and days:  # Check if term and days are provided
            if not Company_Payment_Term.objects.filter(company=com, term_name__iexact=term).exists():
                Company_Payment_Term.objects.create(company=com, term_name=term, days=days)

                terms = Company_Payment_Term.objects.filter(company=com)
                term_list = [{'name': term.term_name, 'id': term.id, 'days': term.days} for term in terms]

                return JsonResponse({'status': True, 'terms': term_list}, safe=False)
            else:
                return JsonResponse({'status': False, 'message': f'{term} already exists, try another.!'})
        else:
            return JsonResponse({'status': False, 'message': 'Invalid input. Please provide both term and days.'})

    else:
        return redirect('/')


def check_vendor_email_exist(request):
    if request.method == 'GET':
       vvendoremail = request.GET.get('vvendor_email', None)

       if vvendoremail:
          
            exists = Vendor.objects.filter(
                    vendor_email=vvendoremail
                ).exists()
            return JsonResponse({'exists': exists})          
    else:
        return JsonResponse({'exists': False}) 


def add_expense_comment(request,expense_id):


    if 'login_id' in request.session:
        log_id = request.session['login_id']
        login_d = LoginDetails.objects.get(id=log_id)

        if login_d.user_type == 'Company':
            expense = Expense.objects.get(id=expense_id)
            company = CompanyDetails.objects.get(login_details=login_d)

            comments=request.POST['comments']

            expense = Expense.objects.get(id=expense_id)

            c1 = expense_comments(expense=expense,comments=comments,company=company)
            c1.save()



            return redirect(reverse('expense_overview', args=[expense_id]))

        if login_d.user_type == 'Staff':
            expense = Expense.objects.get(id=expense_id)
            company = CompanyDetails.objects.get(login_details=login_d)

            comments=request.POST['comments']

            expense = Expense.objects.get(id=expense_id)

            c1 = expense_comments(expense=expense,comments=comments,company=company)
            c1.save()

    
            return redirect(reverse('expense_overview', args=[expense_id]))


    else:
        return('/') 


def delete_expense_comment(request, pk):
    try:
        comment = expense_comments.objects.get(id=pk)
        expense_id = comment.expense.id  # Get the expense ID before deleting the comment
        comment.delete()
        # Redirect to the expense overview page or wherever you want to redirect after deletion
        return redirect('expense_overview', expense_id=expense_id)
    except expense_comments.DoesNotExist:
        return HttpResponseNotFound("Comment not found.")

def attachexpenseFile(request, id):
    if 'login_id' in request.session:
        exp = Expense.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            exp.avatar = request.FILES.get('file')
            exp.save()

        return redirect(expense_overview, id)
    else:
        return redirect('/')


def vendor_check_pan(request):
    if request.method == 'POST':
        vendorpanNumber = request.POST.get('vendorpan_number')  # Retrieve the PAN number from the POST data
        vendorpan_exists = Vendor.objects.filter(pan_number=vendorpanNumber).exists()

        if vendorpan_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'})

def vendor_check_gst(request):
    if request.method == 'POST':
        vgstNumber = request.POST.get('vendorgst_number')  # Ensure key matches AJAX data key
        gst_exists = Vendor.objects.filter(gst_number=vgstNumber).exists()
       
        if gst_exists:
            return JsonResponse({'status': 'exists'})
        else:
            return JsonResponse({'status': 'not_exists'})
    else:
        return JsonResponse({'error': 'Invalid request'}, status=400)

def newVendorAjax(request):
    if request.method == 'POST':
        log_id = request.session.get('login_id')
        log_details = get_object_or_404(LoginDetails, id=log_id)

        if log_details.user_type == 'Company':
            company = get_object_or_404(CompanyDetails, login_details=log_details)
        else:
            staff = get_object_or_404(StaffDetails, login_details=log_details)
            company = staff.company

        # Retrieve data from the POST request
        vendorsalutation = request.POST.get('title')
        vendorfirst_name = request.POST.get('first_name')
        vendorlast_name = request.POST.get('last_name')
        vvendor_display_name = request.POST.get('vendor_display_name')
        vcompany_name = request.POST.get('company_name')
        vvendor_email = request.POST.get('vendor_email')
        vendormobile = request.POST.get('mobile')
        vendorw_phone = request.POST.get('phone')
        vendorgst = request.POST.get('gst_treatment')
        vendorgst_number = request.POST.get('gst_number')
        vendorpan_number = request.POST.get('pan_number')
        vendorskype_number = request.POST.get('skype_name_number')
        vendordesignation = request.POST.get('designation')
        vendordepartment = request.POST.get('department')
        vendorwebsite = request.POST.get('website')
        vendorbatten = request.POST.get('billing_attention')
        vendorbadd1 = request.POST.get('billing_address')
        vendorbcountry = request.POST.get('billing_country')
        vendorbcity = request.POST.get('billing_city')
        vendorbstate = request.POST.get('billing_state')
        vendorbzip = request.POST.get('billing_pin_code')
        vendorbphone = request.POST.get('billing_phone')
        vendorbfax = request.POST.get('billing_fax')
        vendorsatten = request.POST.get('shipping_attention')
        vendorsadd1 = request.POST.get('shipping_address')
        vendorscountry = request.POST.get('shipping_country')
        vendorscity = request.POST.get('shipping_city')
        vendorsstate = request.POST.get('shipping_state')
        vendorszip = request.POST.get('shipping_pin_code')
        vendorsphone = request.POST.get('shipping_phone')
        vendorsfax = request.POST.get('shipping_fax')
        vendorsource_supply = request.POST.get('source_of_supply')
        vendorcurrency = request.POST.get('currency')
        vendorop_type = request.POST.get('opening_balance_type')
        vendoropening_bal = request.POST.get('opening_balance')
        vendorcredit_lm = request.POST.get('credit_limit')
       # payment_terms_id = request.POST.get('vendorpayment_terms')
       # payment_terms = get_object_or_404(PaymentTerms, id=payment_terms_id)
        vendorremark = request.POST.get('remark', '')  # Retrieve remarks

        # Create a new Vendor instance with the retrieved data
        new_vendor = Vendor.objects.create(
            company=company,
            login_details=log_details,
            title=vendorsalutation,
            first_name=vendorfirst_name,
            last_name=vendorlast_name,
            vendor_display_name=vvendor_display_name,
            company_name=vcompany_name,
            vendor_email=vvendor_email,
            mobile=vendormobile,
            gst_treatment=vendorgst,
            gst_number=vendorgst_number,
            pan_number=vendorpan_number,
            skype_name_number=vendorskype_number,
            designation=vendordesignation,
            department=vendordepartment,
            website=vendorwebsite,
            billing_attention=vendorbatten,
            billing_address=vendorbadd1,
            billing_country=vendorbcountry,
            billing_city=vendorbcity,
            billing_state=vendorbstate,
            billing_pin_code=vendorbzip,
            billing_fax=vendorbfax,
            shipping_attention=vendorsatten,
            shipping_address=vendorsadd1,
            shipping_country=vendorscountry,
            shipping_city=vendorscity,
            shipping_state=vendorsstate,
            shipping_pin_code=vendorszip,
            shipping_phone=vendorsphone,
            shipping_fax=vendorsfax,
            source_of_supply=vendorsource_supply,
            currency=vendorcurrency,
            opening_balance_type=vendorop_type,
            opening_balance=vendoropening_bal,
            credit_limit=vendorcredit_lm,
           # payment_terms=payment_terms
        )

        # Only set phone fields if they are provided
        if vendorw_phone:
            new_vendor.phone = vendorw_phone
        if vendorbphone:
            new_vendor.billing_phone = vendorbphone
        new_vendor.save()

        # Associate the remark with the new vendor
        Vendor_remarks_table.objects.create(
            vendor=new_vendor,
            company=company,
            remarks=vendorremark  # Save the remarks, even if empty
        )

        # Retrieve contact persons details
        contact_persons_data = json.loads(request.POST.get('vendorcontact_person', '[]'))
        for i in range(len(contact_persons_data.get('title', []))):
            VendorContactPerson.objects.create(
                vendor=new_vendor,
                company=company,
                #salutation=contact_persons_data['title'][i],
                first_name=contact_persons_data['first_name'][i],
                last_name=contact_persons_data['last_name'][i],
                email=contact_persons_data['email'][i],
                work_phone=contact_persons_data['work_phone'][i],
                mobile=contact_persons_data['mobile'][i],
                skype_name_number=contact_persons_data['skype_name_number'][i],
                designation=contact_persons_data['designation'][i],
                department=contact_persons_data['department'][i],
            )

        # Return a JSON response indicating success
        return JsonResponse({'message': 'Vendor and contact persons created successfully'}, status=201)

    # If the request method is not POST, return an error response
    return JsonResponse({'error': 'Invalid request method'}, status=405)

def get_vendor_data(request):

    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            com = CompanyDetails.objects.get(login_details = log_details)
        else:
            com = StaffDetails.objects.get(login_details = log_details).company
    
    
    vendors = Vendor.objects.filter(company = com).values('id', 'title', 'first_name', 'last_name')
    vendor_list = list(vendors)  # Convert queryset to list
    
    # Debugging print statement
   # print("Vendor List:", vendor_list)
    
    return JsonResponse(vendor_list, safe=False)

def downloadexpenseSampleImportFile(request):                                                                  #new by tinto mt
    estimate_table_data = [['Expense Date','Expense Account','Expense Type','HSN','SAC','Expense Number','Referense Number','Amount','TaxRate','Payment Method','Vendor','Vendor Email','Vendor GST Type','Vendor GSTIN','Billing Address','Source Of Supply','Customer','Customer Email','Customer GST Type','Customer GSTIN','Customer Billing Address','Place Of Supply','Note','status']]      
    wb = Workbook()
    sheet1 = wb.active
    sheet1.title = 'Sheet1'
    

    # Populate the sheets with data
    for row in estimate_table_data:
        sheet1.append(row)  
    
    # Create a response with the Excel file
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=expense_sample_file.xlsx'
     # Save the workbook to the response
    wb.save(response)
    return response
        

def import_expense(request):
    if request.method == 'POST' and request.FILES.get('excel_file'):
        excel_file = request.FILES['excel_file']
        log_id = request.session.get('login_id')
        log_details = get_object_or_404(LoginDetails, id=log_id)

        if log_details.user_type == 'Company':
            company = get_object_or_404(CompanyDetails, login_details=log_details)
        else:
            staff = get_object_or_404(StaffDetails, login_details=log_details)
            company = staff.company

        # Check if the uploaded file is an Excel file
        if not excel_file.name.endswith('.xlsx'):
            messages.error(request, 'The file must be an .xlsx file.')
            return redirect('expense')

        try:
            # Load the workbook
            wb = openpyxl.load_workbook(excel_file)

            # Get the sheet named 'Sheet1'
            if 'Sheet1' not in wb.sheetnames:
                messages.error(request, "The workbook does not contain a sheet named 'Sheet1'.")
                return redirect('expense')

            sheet = wb['Sheet1']

            # Iterate through the rows and process the data
            for row_number, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
                try:
                    # Unpack the row data
                    (expense_date, expense_account, expense_type, hsn, sac, expense_number, reference_number, amount, 
                     tax_rate, payment_method, vendor, vendor_email, vendor_gst_type, vendor_gstin, 
                     billing_address, source_of_supply, customer, customer_email, customer_gst_type, 
                     customer_gstin, customer_billing_address, place_of_supply, note,status) = row

                    # Convert date from string to datetime object if needed
                    if isinstance(expense_date, str):
                        expense_date = datetime.strptime(expense_date, '%Y-%m-%d')

                    # Create and save an Expense object (adjust field names as per your model)
                    expense = Expense.objects.create(
                        company=company,
                        login_details=log_details,
                        date=expense_date,
                        account=expense_account,
                        expense_type=expense_type,
                        hsn_code=hsn,
                        sac_code=sac,
                        expense_number=expense_number,
                        reference_number=reference_number,
                        amount=amount,
                        tax_rate=tax_rate,
                        payment_type=payment_method,
                        vendor_name=vendor,
                        vendor_email=vendor_email,
                        vendor_gst_type=vendor_gst_type,
                        vendor_gstin=vendor_gstin,
                        vendor_billing_address=billing_address,
                        vendor_source_of_supply=source_of_supply,
                        customer_name=customer,
                        customer_email=customer_email,
                        customer_gst_type=customer_gst_type,
                        customer_gstin=customer_gstin,
                        customer_billing_address=customer_billing_address,
                        customer_price_of_supply=place_of_supply,
                        note=note,
                        status=status
                        
                        
                    )

                    # Create and save an ExpenseHistory object
                    ExpenseHistory.objects.create(
                        company=company,
                        logindetails=log_details,
                        expense=expense,
                        Date=expense_date,
                        action='Created'
                    )
                except Exception as row_error:
                    messages.error(request, f'Error processing row {row_number}: {row_error}')
                    return redirect('expense')

            messages.success(request, 'Expenses imported successfully.')
        except Exception as e:
            messages.error(request, f'Failed to import expenses. Error: {str(e)}')
        
        return redirect('expense')
    
    messages.error(request, 'No file uploaded.')
    return redirect('expense')

def expense_shareemail(request, pk):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)

        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(id=dash_details.company.id)
        else:
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            comp_details = CompanyDetails.objects.get(login_details=log_details)

        allmodules = ZohoModules.objects.get(company=comp_details, status='New')
        expense_obj = Expense.objects.get(id=pk)

        context = {'expense_obj': expense_obj, 'details': dash_details}

        if request.method == 'POST':
            try:
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                template_path = 'zohomodules/expense/expensemailoverview.html'
                template = get_template(template_path)
                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                subject = "Transaction Details"
                email_content = f"Hi,\nPlease find the attached transaction details for {expense_obj.vendor_name} {expense_obj.customer_name}.\n"
                email_from = settings.EMAIL_HOST_USER

                msg = EmailMultiAlternatives(subject, email_content, email_from, emails_list)
                msg.attach(f'{expense_obj.vendor_name}_{expense_obj.customer_name}_Transactions.pdf', pdf, 'application/pdf')
                msg.send()

                messages.success(request, 'Transaction has been shared via email successfully!')
                return redirect('expense_overview', pk)
            except Exception as e:
                print(f"Error sending email: {e}")
                messages.error(request, 'An error occurred while sending the email. Please try again later.')
                return redirect('expense_overview', pk)
    else:
        return redirect('/')

 #/expense  
 
############Invoice Details########################
def view_invoice_report(request):
    if 'login_id' not in request.session:
        return redirect('/')

    log_id = request.session['login_id']
    
    try:
        log_details = LoginDetails.objects.get(id=log_id)
    except LoginDetails.DoesNotExist:
        return redirect('/')
    
    try:
        if log_details.user_type == "Company":
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            allmodules = ZohoModules.objects.get(company=dash_details, status='New')
        elif log_details.user_type == "Staff":
            company_details = StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=company_details.company.id)
            allmodules = ZohoModules.objects.get(company=company_details.company, status='New')
        else:
            return redirect('/')
        
        currentDate = datetime.today()
        
        reportData1 = []
        total_amount = 0
        total_balance = 0

        invo = invoice.objects.filter(company=dash_details)
        cust = Customer.objects.filter(company=dash_details)
        totcustomer = cust.count()
        
        totalbalance = 0
        totalinvamount = 0
        
        for s in invo:
            customer_name = s.customer.first_name
            invoice_date = s.date
            due_date = s.expiration_date
            total_amount += s.grand_total
            invoice_number = s.invoice_number
            balance = s.balance
            paid = s.advanced_paid
            status = s.status
            total = s.grand_total
            
            sales_order_number = SaleOrder.objects.filter(company=dash_details, customer=s.customer).values_list('sales_order_number', flat=True).first()
            totalinvamount = invo.aggregate(totalinvamount=Sum('grand_total'))['totalinvamount'] or 0
            totalbalance = invo.aggregate(totalbalance=Sum('balance'))['totalbalance'] or 0
            
            if s.status == 'Draft':
                st = 'Draft'
            elif s.advanced_paid == 0 and due_date > currentDate.date():
                st = 'Not paid'
            elif s.advanced_paid == s.grand_total:
                st = 'fully paid'
            elif s.advanced_paid > 0 and s.advanced_paid < s.grand_total and due_date > currentDate.date():
                st = 'partially paid'
            elif due_date < currentDate.date() and s.advanced_paid < s.grand_total:
                st = 'overdue'
            else:
                st = s.status

            details = {
                'invoice_date': invoice_date,
                'customer_name': customer_name,
                'due_date': due_date,
                'invoice_number': invoice_number,
                'sales_order_number': sales_order_number,
                'total': total,
                'status': st, 
                'balance': balance,
                'totcustomer': totcustomer,
                'totalinvamount': totalinvamount,
                'totalbalance': totalbalance,
                'paid': paid,
            }
            reportData1.append(details)
        
        context = {
            'log_id': log_id,
            'log_details': log_details,
            'details': dash_details,
            'allmodules': allmodules,
            'rec': invo,
            'reportData': reportData1,
            'startDate': None,
            'endDate': None,
            'totcustomer': totcustomer,
            'totalinvamount': totalinvamount,
            'totalbalance': totalbalance,
            'total': total_amount,
            'status': st,
        }

        return render(request, 'zohomodules/Reports/invoice_report.html', context)

    except (CompanyDetails.DoesNotExist, ZohoModules.DoesNotExist):
        return redirect('/')

    return redirect('/')


def InvoiceReportCustomized(request):
    if 'login_id' not in request.session:
        return redirect('/')

    log_id = request.session.get('login_id')
    log_details = LoginDetails.objects.get(id=log_id)

    if log_details.user_type == "Company":
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    elif log_details.user_type == "Staff":
        company_details = StaffDetails.objects.get(login_details=log_details)
        dash_details = CompanyDetails.objects.get(id=company_details.company.id)
    else:
        return redirect('/')

    all_modules = ZohoModules.objects.get(company=dash_details, status='New')

    startDate = request.GET.get('start_date', None)
    endDate = request.GET.get('end_date', None)
    status = request.GET.get('status')
    report = request.GET.get('billdate', None)

    currentDate = datetime.today().date()
    reportData = []
    totalinvamount = 0
    totalbalance = 0

    invoices = invoice.objects.filter(company=dash_details)

    if startDate and endDate:
        invoices = invoices.filter(date__range=[startDate, endDate])
    elif report == 'shipdate' and startDate and endDate:
        invoices = invoices.filter(expiration_date__range=[startDate, endDate])

    if status:
        status_filter = None
        if status != 'all':
            status_filter = status

        if status_filter:
            status_mapping = {
                'Draft': Q(status='Draft'),
                'fully paid': Q(advanced_paid=F('grand_total'), status='Saved'),
                'Not paid': Q(advanced_paid=0, expiration_date__gt=currentDate, status='Saved'),
                'partially paid': Q(advanced_paid__gt=0, advanced_paid__lt=F('grand_total'), expiration_date__gt=currentDate, status='Saved'),
                'overdue': Q(expiration_date__lte=currentDate, advanced_paid__lt=F('grand_total'), status='Saved')
            }
            invoices = invoices.filter(status_mapping.get(status_filter))

    cust = Customer.objects.filter(company=dash_details)
    totcustomer = cust.count()

    for inv in invoices:
        customer_name = inv.customer.first_name
        invoice_date = inv.date
        ship_date = inv.expiration_date
        due_date = inv.expiration_date
        totalinvamount += inv.grand_total
        invoice_number = inv.invoice_number
        balance = inv.balance
        total = inv.grand_total
        paid = inv.advanced_paid
        st = inv.status

        if inv.status == 'Draft':
            st = 'Draft'
        elif inv.advanced_paid == 0 and due_date > currentDate:
            st = 'Not paid'
        elif inv.advanced_paid == inv.grand_total:
            st = 'fully paid'
        elif inv.advanced_paid > 0 and inv.advanced_paid < inv.grand_total and due_date > currentDate:
            st = 'partially paid'
        elif due_date < currentDate and inv.advanced_paid <= inv.grand_total:
            st = 'overdue'

        sales_order_number = SaleOrder.objects.filter(company=dash_details, customer=inv.customer).values_list('sales_order_number', flat=True).first()

        reportData.append({
            'invoice_date': invoice_date,
            'customer_name': customer_name,
            'ship_date': ship_date,
            'due_date': due_date,
            'invoice_number': invoice_number,
            'total': total,
            'status': st,
            'balance': balance,
            'totcustomer': totcustomer,
            'paid': paid,
            'sales_order_number': sales_order_number,
        })

    totalinvamount = invoices.aggregate(totalinvamount=Sum('grand_total'))['totalinvamount'] or 0
    totalbalance = invoices.aggregate(totalbalance=Sum('balance'))['totalbalance'] or 0

    context = {
        'log_id': log_id,
        'log_details': log_details,
        'details': dash_details,
        'allmodules': all_modules,
        'reportData': reportData,
        'startDate': startDate,
        'endDate': endDate,
        'report': report,
        'status': status,
        'totalinvamount': totalinvamount,
        'totalbalance': totalbalance,
        'totcustomer': totcustomer,
        'status_filter': status_filter,
    }

    return render(request, 'zohomodules/Reports/invoice_report.html', context)


def invoice_report_email(request):
    if 'login_id' not in request.session:
        return redirect('/')

    log_id = request.session.get('login_id')
    if not log_id:
        return redirect('/')
    
    try:
        log_details = LoginDetails.objects.get(id=log_id)
        print("log_details:", log_details)
        
        if log_details.user_type == "Company":
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        elif log_details.user_type == "Staff":
            company_details = StaffDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(id=company_details.company.id)
        else:
            return redirect('/')

        print("dash_details:", dash_details)

        if request.method == 'POST':
            emails_string = request.POST.get('email_ids')
            email_message = request.POST.get('email_message')
            emails_list = [email.strip() for email in emails_string.split(',')]
            startDate = request.POST.get('from_date')
            endDate = request.POST.get('to_date')
            status = request.POST.get('status')
            
            currentDate = datetime.today().date()

            reportData1 = []
            total_amount = 0
            total_balance = 0
            
            cust = Customer.objects.filter(company=dash_details)
            totcustomer = cust.count()
            
            invoices = invoice.objects.filter(company=dash_details)

            if startDate and endDate:
                invoices = invoices.filter(expiration_date__range=[startDate, endDate])
            
            if status:
                if status == 'Draft':
                    invoices = invoices.filter(status='Draft')
                elif status == 'Fully paid':
                    invoices = invoices.filter(advanced_paid=F('grand_total'), status='Save')
                elif status == 'Not paid':
                    invoices = invoices.filter(Q(advanced_paid=0) & Q(expiration_date__gt=currentDate), status='Save')
                elif status == 'Partially paid':
                    invoices = invoices.filter(Q(advanced_paid__gt=0) & Q(advanced_paid__lt=F('grand_total')) & Q(expiration_date__gt=currentDate), status='Save')
                elif status == 'Overdue':
                    invoices = invoices.filter(Q(expiration_date__lte=currentDate) & Q(advanced_paid__lt=F('grand_total')), status='Save')
            
            for s in invoices:
                customer_name = s.customer.first_name
                invoice_date = s.date
                print("invoice_date:", invoice_date)
                due_date = s.expiration_date
                print("due_date:", due_date)
                total_amount += s.grand_total
                print("total_amount:", total_amount)
                invoice_number = s.invoice_number
                print("invoice_number:", invoice_number)
                status = s.status
                print("status:", status)
                paid = s.advanced_paid
                print("ADVANCE", paid)
                if s.status == 'Draft':
                    status = 'Draft'
                    print("status:", status)
                elif s.advanced_paid == 0 and due_date > currentDate:
                    status = 'Not Paid'
                    print("status:", status)
                elif s.advanced_paid == s.grand_total:
                    status = 'Fully Paid'
                    print("status:", status)
                elif s.advanced_paid > 0 and s.advanced_paid < s.grand_total and due_date > currentDate:
                    status = 'Partially Paid'
                    print("status:", status)
                elif due_date < currentDate and s.advanced_paid <= s.grand_total:
                    status = 'Overdue'
                    print("status:", status)
                balance = s.balance
                print("balance:", balance)
                total = s.grand_total
                print("GRAND:", total)
                sales_order_number = SaleOrder.objects.filter(company=dash_details, customer=s.customer).values_list('sales_order_number', flat=True).first()
                totalinvamount = invoices.aggregate(totalinvamount=Sum('grand_total'))['totalinvamount'] or 0
                totalbalance = invoices.aggregate(totalbalance=Sum('balance'))['totalbalance'] or 0

                details = {
                    'invoice_date': invoice_date,
                    'customer_name': customer_name,
                    'due_date': due_date,
                    'invoice_number': invoice_number,
                    'sales_order_number': sales_order_number,
                    'total': total,
                    'status': status,
                    'balance': balance,
                    'totcustomer': totcustomer,
                    'totalinvamount': totalinvamount,
                    'totalbalance': totalbalance,
                    'paid': paid,
                }
                print("details:", details)
                reportData1.append(details)
                print("reportData1:", reportData1)
            
            context = {
                'log_id': log_id,
                'log_details': log_details,
                'details': dash_details,
                'reportData': reportData1,
                'startDate': None,
                'endDate': None,
                'totcustomer': totcustomer, 
                'totalinvamount': totalinvamount,
                'totalbalance': totalbalance,
                'total': total,
            }
            
            template_path = 'zohomodules/Reports/inv_pdf_report.html'
            template = get_template(template_path)
            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Report_invoice_Details'
            subject = f"Report_invoice_Details"
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached Report for - recinvoice Details. \n{email_message}\n\n--\nRegards,\n{dash_details.company_name}\n{dash_details.address}\n{dash_details.state} - {dash_details.country}\n{dash_details.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)
            
            return redirect('view_invoice_report')
    
    except (LoginDetails.DoesNotExist, CompanyDetails.DoesNotExist, ZohoModules.DoesNotExist):
        pass

    return render(request, 'invoice_report.html')
    
    
def add_new_bill_creadit_period(request):
    credit_name = request.POST['term_name']
    credit_days = request.POST.get('term_days')
    if 'login_id' not in request.session:
        return redirect('/')
    else:
        login_id = request.session['login_id']
        if 'login_id' not in request.session:
            return redirect('/')
        log_details= LoginDetails.objects.get(id=login_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            company = dash_details.company
        elif log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            company = dash_details
        if not BillCreditPeriod.objects.filter(credit_name=credit_name,company=company).exists():
            if not BillCreditPeriod.objects.filter(days=credit_days,company=company).exists():
                credit = BillCreditPeriod(
                            login_details=log_details,
                            company=company,
                            credit_name=credit_name,
                            days=credit_days,)
                credit.save()
                print('CREDIT ADDED SUCCESSFULL')
                data={
                    'success':'success',
                }
                return JsonResponse(data)
            else:
                print('days exiost')
                error_response = {
                    'error':'An error occured',
                    'message':"Day's already exist",
                }
                messages.info(request,'Credit period with this day already exist')
                return JsonResponse(error_response,status =400)
        else:
            error_response = {
                'error':'An error occured',
                'message':"Day's already exist",
            }
            print('name exist')
            messages.info(request,'Credit period with this name already exist')
            data={
                'error':'error',
            }
            return JsonResponse(error_response,status=400)
            
            
def payment_add1(request):
    if 'login_id' in request.session:
        log_id = request.session.get('login_id')
        if not log_id:
            return redirect('/')
        
        try:
            log_details = LoginDetails.objects.get(id=log_id)
            if log_details.user_type == 'Staff':
                staff_details = StaffDetails.objects.get(login_details=log_details)
                dash_details = CompanyDetails.objects.get(id=staff_details.company.id)
            else:
                dash_details = CompanyDetails.objects.get(login_details=log_details)
            
            if request.method == 'POST':
                terms = request.POST.get('term_name')
                day = request.POST.get('term_days')
                
                if terms:
                    normalized_data = terms.replace(" ", "")
                    pay_tm = normalized_data
                    ptr = Company_Payment_Term(term_name=pay_tm, days=day, company=dash_details)
                    ptr.save()
                    
                    payterms_obj = Company_Payment_Term.objects.filter(company=dash_details).values('id', 'term_name', 'days')
                    payment_list = [{'id': pay_terms['id'], 'name': pay_terms['term_name'], 'days': pay_terms['days']} for pay_terms in payterms_obj]
                    
                    response_data = {
                        "message": "success",
                        'payment_list': payment_list,
                    }
                    return JsonResponse(response_data)
                else:
                    return JsonResponse({'error': 'Invalid term name'}, status=400)
            else:
                return JsonResponse({'error': 'Invalid request method'}, status=400)
        except LoginDetails.DoesNotExist:
            return JsonResponse({'error': 'User details not found'}, status=404)
    else:
        return JsonResponse({'error': 'User not logged in'}, status=401)
        
def get_customer_details_for_bill(request,pk):
    customer_data = Customer.objects.get(id=pk)
    data = {
        'customer_first_name':customer_data.first_name,
        'customer_email':customer_data.customer_email,
        'customer_gst_treat':customer_data.GST_treatement,
        'customer_gstin': customer_data.GST_number,
        'customer_address': customer_data.billing_address,
        'customer_place_of_supply': customer_data.place_of_supply,
    }
    print('SUCCESS')
    return JsonResponse(data)   
    
def get_vendors_details_for_bill(request,pk):
    vendor_data = Vendor.objects.get(id=pk)
    data = {
        'vendor_email':vendor_data.vendor_email,
        'vendor_gst_treat':vendor_data.gst_treatment,
        'vendor_gstin': vendor_data.gst_number,
        'vendor_address': vendor_data.billing_address,
        'billing_city': vendor_data.billing_city,
        'billing_state': vendor_data.billing_state,
        'billing_country': vendor_data.billing_country,
        'billing_pin_code': vendor_data.billing_pin_code,
        'vendor_source_of_suppy': vendor_data.source_of_supply,
    }
    print(vendor_data.source_of_supply)
    print('SUCCESS')
    return JsonResponse(data)
    
def payment_received_details(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff
        
        allmodules = ZohoModules.objects.get(company=cmp)
        
        # Use select_related for related fields and prefetch_related for reverse relation
        payment_received = Payment_recieved.objects.filter(company=cmp).prefetch_related('paymentdetails_set').select_related('customer')
        
        context = {
            'allmodules': allmodules,
            'payment_received': payment_received,
            'cmp':cmp.company_name,
        }
    
    return render(request, 'zohomodules/payment_recieved/payment_received_details.html', context)


def payment_received_detailscustomized(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp  
        else:
            staff = StaffDetails.objects.get(login_details=log_id)
            cmp = staff.company
            dash_details = staff 
        allmodules = ZohoModules.objects.get(company=cmp)

        payment_received = Payment_recieved.objects.filter(company=cmp).prefetch_related('paymentdetails_set').select_related('customer')

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)

            if startDate and endDate:
                start_date = parse_date(startDate)
                end_date = parse_date(endDate)
                
                if start_date and end_date:
                    payment_received = payment_received.filter(payment_date__range=(start_date, end_date))

        context = {
            'allmodules': allmodules,
            'payment_received': payment_received,
            'cmp':cmp.company_name,
            'startDate':startDate,
            'endDate':endDate,
        }
        
    return render(request, 'zohomodules/payment_recieved/payment_received_customized.html', context)

def payment_received_detailsemail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff 

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                payment_received = Payment_recieved.objects.filter(company=cmp).prefetch_related('paymentdetails_set').select_related('customer')

        
                context = {
                    'payment_received': payment_received,
                }



                template_path = 'zohomodules/payment_recieved/payment_received_detailsemail.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Payment Received Details'
                subject = 'Payment Received Details'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Payment Received Details report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                

                messages.success(request, 'Payment Received Details have been shared via email successfully!')
                return redirect(payment_received_details)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(payment_received_details)

def payment_received_customizedemail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff 

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                trans = request.GET.get('transactions', None)
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                payment_received = Payment_recieved.objects.filter(company=cmp).prefetch_related('paymentdetails_set').select_related('customer')

                if startDate and endDate:
                    payment_received = payment_received.filter(payment_date__range=[startDate, endDate])

                

                context = {
                    
                    'log_details': log_details,
                    'payment_received':payment_received,
                    
                    'startDate': startDate,
                    'endDate': endDate,
                    'transaction': trans,
                    
                    'companyName': cmp.company_name,
                }
                template_path = 'zohomodules/payment_recieved/payment_received_customizedemail.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Payment Received Details'
                subject = 'Payment Received Details'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Payment Received Details. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                

                messages.success(request, 'Payment Received Details details have been shared via email successfully!')
                return redirect(payment_received_detailscustomized)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(payment_received_detailscustomized)
            
            
def payment_made_details(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff
        
        allmodules = ZohoModules.objects.get(company=cmp)
        
        
        payments = payment_made.objects.filter(company=cmp).prefetch_related('payment_made_bills_set')

        context = {
            'allmodules': allmodules,
            'payments': payments,
        }
    
    return render(request, 'zohomodules/payment_made/payment_made_details.html', context)
    
def payment_made_customized(request):
    context = {}
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = cmp  
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff  
        allmodules = ZohoModules.objects.get(company=cmp)
        paymentmade = payment_made.objects.filter(company=cmp).prefetch_related('payment_made_bills_set')

        if request.method == 'GET':
            trans = request.GET.get('transactions', None)
            startDate = request.GET.get('from_date', None)
            endDate = request.GET.get('to_date', None)

            if startDate and endDate:
                start_date = parse_date(startDate)
                end_date = parse_date(endDate)
                
                if start_date and end_date:
                    paymentmade = paymentmade.filter(payment_date__range=(start_date, end_date))
       
                    
        context = {
            'allmodules': allmodules,
            'paymentmade':paymentmade,
            'cmp':cmp.company_name,
            'startDate':startDate,
            'endDate':endDate
            
            
        }
    return render(request,'zohomodules/payment_made/payment_made_customized.html',context)

def payment_made_detailsemail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details = LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Company':
            cmp = CompanyDetails.objects.get(login_details=log_details)
            dash_details = CompanyDetails.objects.get(login_details=log_details)
        else:
            staff = StaffDetails.objects.get(login_details=log_details)
            cmp = staff.company
            dash_details = staff 

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                paymentmade = payment_made.objects.filter(company=cmp).prefetch_related('payment_made_bills_set')
       
                    
                context = {
                    
                    'paymentmade':paymentmade
                    
                    
                }



                template_path = 'zohomodules/payment_made/payment_made_detailsemail.html'
                template = get_template(template_path)

                html = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = 'Payment Received Details'
                subject = 'Payment Received Details'
                
                email = EmailMsg(
                    subject,
                    f"Hi,\nPlease find the attached Payment Received Details report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                    from_email=settings.EMAIL_HOST_USER,
                    to=emails_list
                )
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                

                messages.success(request, 'Payment Received Details have been shared via email successfully!')
                return redirect(payment_made_details)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(payment_made_details)

def payment_made_customizedemail(request):
    if 'login_id' not in request.session:
        return redirect('login')
    
    log_id = request.session['login_id']
    log_details = LoginDetails.objects.get(id=log_id)
    if log_details.user_type == 'Company':
        cmp = CompanyDetails.objects.get(login_details=log_details)
        dash_details = CompanyDetails.objects.get(login_details=log_details)
    else:
        staff = StaffDetails.objects.get(login_details=log_details)
        cmp = staff.company
        dash_details = staff 

    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            
            startDate = request.POST['start']
            endDate = request.POST['end']

            if not startDate or not endDate:
                messages.error(request, 'Both start date and end date are required.')
                return redirect(payment_made_details)

            try:
                start_date = datetime.strptime(startDate, '%Y-%m-%d')
                end_date = datetime.strptime(endDate, '%Y-%m-%d')
            except ValueError:
                messages.error(request, 'Invalid date format. Please use YYYY-MM-DD format.')
                return redirect(payment_made_details)
            paymentmade = payment_made.objects.filter(company=cmp, payment_date__range=(start_date, end_date)).prefetch_related('payment_made_bills_set')

            context = {
                'paymentmade': paymentmade,
                'cmp': cmp,
                'startDate': startDate,
                'endDate': endDate,
            }

            template_path = 'zohomodules/payment_made/payment_made_customizedemail.html'
            template = get_template(template_path)

            html = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = 'Payment Made Details.pdf'
            subject = 'Payment Made Details'
            
            email = EmailMsg(
                subject,
                f"Hi,\nPlease find the attached Payment Made Details report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
            )
            email.attach(filename, pdf, "application/pdf")

            try:
                email.send(fail_silently=False)
                messages.success(request, 'Payment Made Details have been shared via email successfully!')
            except Exception as email_error:
                messages.error(request, f"Error sending email: {email_error}")

            return redirect(payment_made_details)
    except Exception as e:
        messages.error(request, f'{e}')
        return redirect(payment_made_details)
        

#--------------------Sales purchase by party ------------------------------
        
def salespurchasebyparty(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
    else:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=login_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        cmp = dash_details.company
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        cmp = dash_details


    if request.method == 'POST':
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules= ZohoModules.objects.get(company=cmp,status='New')
            data = invoice.objects.filter(company=dash_details.id, date__range=(start_date, end_date))
            cus = Customer.objects.filter(company=dash_details.id)
            dic = {}
            dic2 = {}

            for i in cus:
                vie = 0
                for s in data:
                    if i.id == s.customer.id:
                        vie += s.sub_total
                dic[i] = vie
            total_price = data.aggregate(total_price=Sum('sub_total'))['total_price'] or 0
            ven = Vendor.objects.filter(company=dash_details.id)
            billses = Bill.objects.filter(Company=dash_details.id, Bill_Date__range=(start_date, end_date))
            for i in ven:
                vie = 0
                for s in billses:
                    if i.id == s.Vendor.id:
                        vie += s.Sub_Total
                        print(s.Sub_Total)
                dic2[i] = vie
            bill_total = billses.aggregate(bill_total=Sum('Sub_Total'))['bill_total'] or 0
            cont = {
                'cmp':cmp,
                'bill_total':bill_total,
                'total_price':total_price,
                'start_date':start_date,
                'end_date':end_date,
                'dic':dic,
                'dic2':dic2,
            }
            return render(request,'zohomodules/Reports/sales_purchase_byparty.html',cont)  
    data = invoice.objects.filter(company=dash_details.id)
    cus = Customer.objects.filter(company=dash_details.id)
    dic = {}
    dic2 = {}

    for i in cus:
        vie = 0
        for s in data:
            if i.id == s.customer.id:
                vie += float(s.sub_total)
        dic[i] = vie
    print(dic)
    total_price = data.aggregate(total_price=Sum('sub_total'))['total_price'] or 0
    allmodules= ZohoModules.objects.get(company=cmp,status='New')
    ven = Vendor.objects.filter(company=dash_details.id)
    billses = Bill.objects.filter(Company=dash_details.id)
    for i in ven:
        vie = 0
        for s in billses:
            if i.id == s.Vendor.id:
                vie += float(s.Sub_Total)
                print(s.Sub_Total)
        dic2[i] = vie
    
    bill_total = billses.aggregate(bill_total=Sum('Sub_Total'))['bill_total'] or 0
    context = {
        'cmp':cmp,
        'allmodules':allmodules,
        'bill_total':bill_total,
        'total_price':total_price,
        'dic':dic,
        'dic2':dic2,

        }
    return render(request,'zohomodules/Reports/sales_purchase_byparty.html',context)


def share_mail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            cmp = dash_details.company
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            cmp = dash_details

        
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

                
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            start_date_str = request.POST.get('from_date')
            end_date_str = request.POST.get('to_date')

            if start_date_str and end_date_str:
                    # Convert date strings to datetime objects
                start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

                data = invoice.objects.filter(company=dash_details.id, date__range=(start_date, end_date))
                cus = Customer.objects.filter(company=dash_details.id)
                dic = {}
                dic2 = {}

                for i in cus:
                    vie = 0
                    for s in data:
                        if i.id == s.customer.id:
                            vie += s.sub_total
                    dic[i] = vie
                total_price = data.aggregate(total_price=Sum('sub_total'))['total_price'] or 0
                ven = Vendor.objects.filter(company=dash_details.id)
                billses = Bill.objects.filter(Company=dash_details.id, Bill_Date__range=(start_date, end_date))
                for i in ven:
                    vie = 0
                    for s in billses:
                        if i.id == s.Vendor.id:
                            vie += s.Sub_Total
                            print(s.Sub_Total)
                    dic2[i].append(float(vie))
                bill_total = billses.aggregate(bill_total=Sum('Sub_Total'))['bill_total'] or 0
                cont = {
                    'cmp':cmp,
                    'bill_total':bill_total,
                    'total_price':total_price,
                    'start_date':start_date,
                    'end_date':end_date,
                    'dic':dic,
                    'dic2':dic2,
                }

                
            data = invoice.objects.filter(company=dash_details.id)
            cus = Customer.objects.filter(company=dash_details.id)
            dic = {}
            dic2 = {}

            for i in cus:
                vie = 0
                for s in data:
                    if i.id == s.customer.id:
                        vie += s.sub_total
                dic[i] = vie
                        
            total_price = data.aggregate(total_price=Sum('sub_total'))['total_price'] or 0
            allmodules= ZohoModules.objects.get(company=cmp,status='New')
            ven = Vendor.objects.filter(company=dash_details.id)
            billses = Bill.objects.filter(Company=dash_details.id)
            for i in ven:
                vie = 0
                for s in billses:
                    if i.id == s.Vendor.id:
                        vie += s.Sub_Total
                        print(s.Sub_Total)
                dic2[i] = vie
            print(dic)
            bill_total = billses.aggregate(bill_total=Sum('Sub_Total'))['bill_total'] or 0
            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'bill_total':bill_total,
                'total_price':total_price,
                'dic':dic,
                'dic2':dic

                }
    
            template_path = 'zohomodules/Reports/sales_purchase_by_party_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            print('for loop executed')
            for i in emails_list:
                print(i)
            result = BytesIO()

            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()
                
            filename = f'Sales Purchase By Party Report'
            subject = f"Sales Purchase By Party Report"
            # from django.core.mail import EmailMessage as EmailMsg
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Sales Purchase By Party Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Sales Purchase By Party Report details has been shared via email successfully..!')
            return redirect('sales_purchase_byparty')
        return redirect('sales_purchase_byparty')


#--------------------Trail balance ------------------------------

def trailbalance(request):
    if 'login_id' in request.session:
        login_id = request.session['login_id']
    else:
        return redirect('/')
    log_details= LoginDetails.objects.get(id=login_id)
    if log_details.user_type == 'Staff':
        dash_details = StaffDetails.objects.get(login_details=log_details)
        cmp = dash_details.company
    if log_details.user_type == 'Company':
        dash_details = CompanyDetails.objects.get(login_details=log_details)
        cmp = dash_details

    
    if request.method == 'POST':
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules= ZohoModules.objects.get(company=cmp,status='New')
            data = invoice.objects.filter(company=dash_details.id, date__range=(start_date, end_date))
            bankaccount = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='credit') & Q(date__range=(start_date, end_date)))
            bankaccount_d = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='debit')  & Q(date__range=(start_date, end_date)))
            customers = Customer.objects.filter(company=dash_details.id)
            total_cus = Customer.objects.filter(company=dash_details.id).aggregate(total_cus=Sum('current_balance'))['total_cus'] or 0
            vendor = Vendor.objects.filter(company=dash_details.id)
            total_ven = Vendor.objects.filter(company=dash_details.id).aggregate(total_ven=Sum('current_balance'))['total_ven'] or 0
            employe = EmployeeLoan.objects.filter(company=dash_details.id)
            total_emp = EmployeeLoan.objects.filter(company=dash_details.id).aggregate(total_emp=Sum('balance'))['total_emp'] or 0
            total = total_emp + total_ven
            credit_note = Credit_Note.objects.filter(company=dash_details.id,credit_note_date__range=(start_date, end_date))
            total_crenote = Credit_Note.objects.filter(company=dash_details.id,credit_note_date__range=(start_date, end_date)).aggregate(total_crenote=Sum('balance'))['total_crenote'] or 0
            
            total_invoice = invoice.objects.filter(company=dash_details.id,date__range=(start_date, end_date)).aggregate(total_invoice=Sum('balance'))['total_invoice'] or 0
            total_recurring = RecurringInvoice.objects.filter(company=dash_details.id,start_date__range=(start_date, end_date)).aggregate(total_recurring=Sum('balance'))['total_recurring'] or 0
            total_retain = RetainerInvoice.objects.filter(company=dash_details.id,retainer_invoice_date__range=(start_date, end_date)).aggregate(total_retain=Sum('balance'))['total_retain'] or 0
            total_sales = total_invoice + total_recurring + total_retain
            
            total_bill = Bill.objects.filter(Company=dash_details.id,Bill_Date__range=(start_date, end_date)).aggregate(total_bill=Sum('Balance'))['total_bill'] or 0
            total_recrringbill = Recurring_bills.objects.filter(company=dash_details.id,rec_bill_date__range=(start_date, end_date)).aggregate(total_recrringbill=Sum('bal'))['total_recrringbill'] or 0
            total_purchase = int(total_bill) + int(total_recrringbill)

            total_expense = Expense.objects.filter(company=dash_details.id).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
            total_recurring_expense = Recurring_Expense.objects.filter(company=dash_details.id,exp_date__range=(start_date, end_date)).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
            total_ex = int(total_expense) + int(total_recurring_expense)

            total_discount_paidrecurring = Reccurring_Invoice_item.objects.filter(company=dash_details.id).aggregate(total_discount_paidrecurring=Sum('discount'))['total_discount_paidrecurring'] or 0
            total_discount_paidinvoice = invoiceitems.objects.filter(company=dash_details.id).aggregate(total_discount_paidinvoice=Sum('discount'))['total_discount_paidinvoice'] or 0
            total_discount_paid = int(total_discount_paidrecurring) + int(total_discount_paidinvoice)

            total_expen = total_ex + total_discount_paid

            total_discount_receivedbill = BillItems.objects.filter(Company=dash_details.id).aggregate(total_discount_receivedbill=Sum('discount'))['total_discount_receivedbill'] or 0
            recur = Recurring_bills.objects.filter(company=dash_details.id)


            if recur:

                for s in recur:
                    
                    total_discount_billrecurrimg = RecurrItemsList.objects.filter(recurr_bill_id=s.id).aggregate(total_discount_billrecurrimg=Sum('discount'))['total_discount_billrecurrimg'] or 0
            else:
                total_discount_billrecurrimg = 0

            tot_discount_receive = int(total_discount_receivedbill) + int(total_discount_billrecurrimg)

            if bankaccount:

                for i in bankaccount:
                    
                    total_credit = loan_account.objects.filter(bank_holder=i.id).aggregate(total_credit=Sum('balance'))['total_credit'] or 0

                    print(total_credit)
            else:
                total_credit = 0

            if bankaccount_d:
                    

                for s in bankaccount_d:
                
                    total_debit = loan_account.objects.filter(bank_holder=s.id).aggregate(total_debit=Sum('balance'))['total_debit'] or 0

            else:
                total_debit = 0


            difference_d =  int(total) + int(total_debit) + int(total_crenote) + int(total_purchase) + int(total_expen)
            difference_c =  int(total_cus) + int(total_sales) + int(total_credit) + int(tot_discount_receive)
            difference = difference_d - difference_c
            print(difference)

            if difference_d < difference_c:
                tot = int(difference_d) + int(difference)
            elif difference_c < difference_d:
                tot = int(difference_c) + int(difference)
            else:
                tot = 0

            cont = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_credit':total_credit,
                'total_debit':total_debit,
                'total_cus':total_cus,
                'customers':customers,
                'total_ven':total_ven,
                'vendor':vendor,
                'total_emp':total_emp,
                'total':total,  
                'total_crenote':total_crenote,
                'total_sales':total_sales,
                'total_purchase':total_purchase,
                'difference_d':difference_d,
                'difference_c':difference_c,
                'difference':difference,
                'tot':tot,
                'start_date':start_date,
                'end_date':end_date,
                'total_expense':total_expense,
                'total_ex':total_ex,
                'total_recurring_expense':total_recurring_expense,
                'total_discount_paid':total_discount_paid,
                'total_expen':total_expen,
                'tot_discount_receive':tot_discount_receive,
            
            }
            return render(request,'zohomodules/Reports/trail_balance.html',cont)    


    

    allmodules= ZohoModules.objects.get(company=cmp,status='New')
    bankaccount = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='credit'))
    bankaccount_d = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='debit'))
    customers = Customer.objects.filter(company=dash_details.id)
    total_cus = Customer.objects.filter(company=dash_details.id).aggregate(total_cus=Sum('current_balance'))['total_cus'] or 0
    vendor = Vendor.objects.filter(company=dash_details.id)
    total_ven = Vendor.objects.filter(company=dash_details.id).aggregate(total_ven=Sum('current_balance'))['total_ven'] or 0
    employe = EmployeeLoan.objects.filter(company=dash_details.id)
    total_emp = EmployeeLoan.objects.filter(company=dash_details.id).aggregate(total_emp=Sum('balance'))['total_emp'] or 0
    total = total_emp + total_ven
    credit_note = Credit_Note.objects.filter(company=dash_details.id)
    total_crenote = Credit_Note.objects.filter(company=dash_details.id).aggregate(total_crenote=Sum('balance'))['total_crenote'] or 0
    
    total_invoice = invoice.objects.filter(company=dash_details.id).aggregate(total_invoice=Sum('balance'))['total_invoice'] or 0
    total_recurring = RecurringInvoice.objects.filter(company=dash_details.id).aggregate(total_recurring=Sum('balance'))['total_recurring'] or 0
    total_retain = RetainerInvoice.objects.filter(company=dash_details.id).aggregate(total_retain=Sum('balance'))['total_retain'] or 0
    total_sales = total_invoice + total_recurring + total_retain
    
    total_bill = Bill.objects.filter(Company=dash_details.id).aggregate(total_bill=Sum('Balance'))['total_bill'] or 0
    total_recrringbill = Recurring_bills.objects.filter(company=dash_details.id).aggregate(total_recrringbill=Sum('bal'))['total_recrringbill'] or 0
    total_purchase = int(total_bill) + int(total_recrringbill)

    total_expense = Expense.objects.filter(company=dash_details.id).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
    total_recurring_expense = Recurring_Expense.objects.filter(company=dash_details.id).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
    total_ex = int(total_expense) + int(total_recurring_expense)

    total_discount_paidrecurring = Reccurring_Invoice_item.objects.filter(company=dash_details.id).aggregate(total_discount_paidrecurring=Sum('discount'))['total_discount_paidrecurring'] or 0
    total_discount_paidinvoice = invoiceitems.objects.filter(company=dash_details.id).aggregate(total_discount_paidinvoice=Sum('discount'))['total_discount_paidinvoice'] or 0
    total_discount_paid = int(total_discount_paidrecurring) + int(total_discount_paidinvoice)

    total_expen = total_ex + total_discount_paid 

    total_discount_receivedbill = BillItems.objects.filter(Company=dash_details.id).aggregate(total_discount_receivedbill=Sum('discount'))['total_discount_receivedbill'] or 0
    recur = Recurring_bills.objects.filter(company=dash_details.id)
    print(total_discount_receivedbill)

    if recur:

        for s in recur:
            
            total_discount_billrecurrimg = RecurrItemsList.objects.filter(recurr_bill_id=s.id).aggregate(total_discount_billrecurrimg=Sum('discount'))['total_discount_billrecurrimg'] or 0
        
    else:
        total_discount_billrecurrimg = 0

    

    tot_discount_receive = int(total_discount_receivedbill) + int(total_discount_billrecurrimg)

    

    if bankaccount:

        for i in bankaccount:
                    
            total_credit = loan_account.objects.filter(bank_holder=i.id).aggregate(total_credit=Sum('balance'))['total_credit'] or 0

           
    else:
        total_credit = 0

    if bankaccount_d:
                    

        for s in bankaccount_d:
                
            total_debit = loan_account.objects.filter(bank_holder=s.id).aggregate(total_debit=Sum('balance'))['total_debit'] or 0

    else:
        total_debit = 0


    difference_d =  int(total) + int(total_debit) + int(total_crenote) + int(total_purchase) + int(total_expen)
    difference_c =  int(total_cus) + int(total_sales) + int(total_credit) + int(tot_discount_receive)
    difference = difference_d - difference_c
    

    if difference_d < difference_c:
        tot = int(difference_d) + int(difference)

    elif difference_c < difference_d:
        tot = int(difference_c) + int(difference)
    else:
        tot = 0


    context = {
        'cmp':cmp,
        'allmodules':allmodules,
        'total_credit':total_credit,
        'total_debit':total_debit,
        'total_cus':total_cus,
        'customers':customers,
        'total_ven':total_ven,
        'vendor':vendor,
        'total_emp':total_emp,
        'total':total,  
        'total_crenote':total_crenote,
        'total_sales':total_sales,
        'total_purchase':total_purchase,
        'difference_d':difference_d,
        'difference_c':difference_c,
        'difference':difference,
        'tot':tot,
        'total_expense':total_expense,
        'total_ex':total_ex,
        'total_recurring_expense':total_recurring_expense,
        'total_discount_paid':total_discount_paid,
        'total_expen':total_expen,
        'tot_discount_receive':tot_discount_receive
        
       
    }
    return render(request,'zohomodules/Reports/trail_balance.html',context)

def share_mail_trail(request):
    if 'login_id' in request.session:
        log_id = request.session['login_id']
        log_details= LoginDetails.objects.get(id=log_id)
        if log_details.user_type == 'Staff':
            dash_details = StaffDetails.objects.get(login_details=log_details)
            cmp = dash_details.company
        if log_details.user_type == 'Company':
            dash_details = CompanyDetails.objects.get(login_details=log_details)
            cmp = dash_details

        
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

                
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            start_date_str = request.POST.get('from_date')
            end_date_str = request.POST.get('to_date')

            if start_date_str and end_date_str:
                # Convert date strings to datetime objects
                start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

                allmodules= ZohoModules.objects.get(company=cmp,status='New')
                data = invoice.objects.filter(company=dash_details.id, date__range=(start_date, end_date))
                bankaccount = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='credit') & Q(date__range=(start_date, end_date)))
                bankaccount_d = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='debit')  & Q(date__range=(start_date, end_date)))
                customers = Customer.objects.filter(company=dash_details.id)
                total_cus = Customer.objects.filter(company=dash_details.id).aggregate(total_cus=Sum('current_balance'))['total_cus'] or 0
                vendor = Vendor.objects.filter(company=dash_details.id)
                total_ven = Vendor.objects.filter(company=dash_details.id).aggregate(total_ven=Sum('current_balance'))['total_ven'] or 0
                employe = EmployeeLoan.objects.filter(company=dash_details.id)
                total_emp = EmployeeLoan.objects.filter(company=dash_details.id).aggregate(total_emp=Sum('balance'))['total_emp'] or 0
                total = total_emp + total_ven
                credit_note = Credit_Note.objects.filter(company=dash_details.id,credit_note_date__range=(start_date, end_date))
                total_crenote = Credit_Note.objects.filter(company=dash_details.id,credit_note_date__range=(start_date, end_date)).aggregate(total_crenote=Sum('balance'))['total_crenote'] or 0
                
                total_invoice = invoice.objects.filter(company=dash_details.id,date__range=(start_date, end_date)).aggregate(total_invoice=Sum('balance'))['total_invoice'] or 0
                total_recurring = RecurringInvoice.objects.filter(company=dash_details.id,start_date__range=(start_date, end_date)).aggregate(total_recurring=Sum('balance'))['total_recurring'] or 0
                total_retain = RetainerInvoice.objects.filter(company=dash_details.id,retainer_invoice_date__range=(start_date, end_date)).aggregate(total_retain=Sum('balance'))['total_retain'] or 0
                total_sales = total_invoice + total_recurring + total_retain
                
                total_bill = Bill.objects.filter(Company=dash_details.id,Bill_Date__range=(start_date, end_date)).aggregate(total_bill=Sum('Balance'))['total_bill'] or 0
                total_recrringbill = Recurring_bills.objects.filter(company=dash_details.id,rec_bill_date__range=(start_date, end_date)).aggregate(total_recrringbill=Sum('bal'))['total_recrringbill'] or 0
                total_purchase = int(total_bill) + int(total_recrringbill)

                total_expense = Expense.objects.filter(company=dash_details.id).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
                total_recurring_expense = Recurring_Expense.objects.filter(company=dash_details.id,exp_date__range=(start_date, end_date)).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
                total_ex = int(total_expense) + int(total_recurring_expense)

                total_discount_paidrecurring = Reccurring_Invoice_item.objects.filter(company=dash_details.id).aggregate(total_discount_paidrecurring=Sum('discount'))['total_discount_paidrecurring'] or 0
                total_discount_paidinvoice = invoiceitems.objects.filter(company=dash_details.id).aggregate(total_discount_paidinvoice=Sum('discount'))['total_discount_paidinvoice'] or 0
                total_discount_paid = int(total_discount_paidrecurring) + int(total_discount_paidinvoice)

                total_expen = total_ex + total_discount_paid

                total_discount_receivedbill = BillItems.objects.filter(Company=dash_details.id).aggregate(total_discount_receivedbill=Sum('discount'))['total_discount_receivedbill'] or 0
                recur = Recurring_bills.objects.filter(company=dash_details.id)


                if recur:

                    for s in recur:
                        
                        total_discount_billrecurrimg = RecurrItemsList.objects.filter(recurr_bill_id=s.id).aggregate(total_discount_billrecurrimg=Sum('discount'))['total_discount_billrecurrimg'] or 0
                else:
                    total_discount_billrecurrimg = 0

                tot_discount_receive = int(total_discount_receivedbill) + int(total_discount_billrecurrimg)
                

                if bankaccount:

                    for i in bankaccount:
                        
                        total_credit = loan_account.objects.filter(bank_holder=i.id).aggregate(total_credit=Sum('balance'))['total_credit'] or 0

                        print(total_credit)
                else:
                    total_credit = 0

                if bankaccount_d:
                        

                    for s in bankaccount_d:
                    
                        total_debit = loan_account.objects.filter(bank_holder=s.id).aggregate(total_debit=Sum('balance'))['total_debit'] or 0

                else:
                    total_debit = 0


                difference_d =  int(total) + int(total_debit) + int(total_crenote) + int(total_purchase) + int(total_expen)
                difference_c =  int(total_cus) + int(total_sales) + int(total_credit) + int(total_discount_billrecurrimg)
                difference = difference_d - difference_c
                print(difference)

                if difference_d < difference_c:
                    tot = int(difference_d) + int(difference)
                elif difference_c < difference_d:
                    tot = int(difference_c) + int(difference)
                else:
                    tot = 0

                cont = {
                    'cmp':cmp,
                    'allmodules':allmodules,
                    'total_credit':total_credit,
                    'total_debit':total_debit,
                    'total_cus':total_cus,
                    'customers':customers,
                    'total_ven':total_ven,
                    'vendor':vendor,
                    'total_emp':total_emp,
                    'total':total,  
                    'total_crenote':total_crenote,
                    'total_sales':total_sales,
                    'total_purchase':total_purchase,
                    'difference_d':difference_d,
                    'difference_c':difference_c,
                    'difference':difference,
                    'tot':tot,
                    'total_expense':total_expense,
                    'total_ex':total_ex,
                    'total_recurring_expense':total_recurring_expense,
                    'total_discount_paid':total_discount_paid,
                    'total_expen':total_expen,
                    'total_discount_billrecurrimg':total_discount_billrecurrimg,
                
                }
                    


        

            allmodules= ZohoModules.objects.get(company=cmp,status='New')
            bankaccount = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='credit'))
            bankaccount_d = BankAccount.objects.filter(Q(company=dash_details.id) & Q(amount_type='debit'))
            customers = Customer.objects.filter(company=dash_details.id)
            total_cus = Customer.objects.filter(company=dash_details.id).aggregate(total_cus=Sum('current_balance'))['total_cus'] or 0
            vendor = Vendor.objects.filter(company=dash_details.id)
            total_ven = Vendor.objects.filter(company=dash_details.id).aggregate(total_ven=Sum('current_balance'))['total_ven'] or 0
            employe = EmployeeLoan.objects.filter(company=dash_details.id)
            total_emp = EmployeeLoan.objects.filter(company=dash_details.id).aggregate(total_emp=Sum('balance'))['total_emp'] or 0
            total = total_emp + total_ven
            credit_note = Credit_Note.objects.filter(company=dash_details.id)
            total_crenote = Credit_Note.objects.filter(company=dash_details.id).aggregate(total_crenote=Sum('balance'))['total_crenote'] or 0
            
            total_invoice = invoice.objects.filter(company=dash_details.id).aggregate(total_invoice=Sum('balance'))['total_invoice'] or 0
            total_recurring = RecurringInvoice.objects.filter(company=dash_details.id).aggregate(total_recurring=Sum('balance'))['total_recurring'] or 0
            total_retain = RetainerInvoice.objects.filter(company=dash_details.id).aggregate(total_retain=Sum('balance'))['total_retain'] or 0
            total_sales = total_invoice + total_recurring + total_retain
            
            total_bill = Bill.objects.filter(Company=dash_details.id).aggregate(total_bill=Sum('Balance'))['total_bill'] or 0
            total_recrringbill = Recurring_bills.objects.filter(company=dash_details.id).aggregate(total_recrringbill=Sum('bal'))['total_recrringbill'] or 0
            total_purchase = int(total_bill) + int(total_recrringbill)

            total_expense = Expense.objects.filter(company=dash_details.id).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
            total_recurring_expense = Recurring_Expense.objects.filter(company=dash_details.id).aggregate(total_expense=Sum('amount'))['total_expense'] or 0
            total_ex = int(total_expense) + int(total_recurring_expense)

            total_discount_paidrecurring = Reccurring_Invoice_item.objects.filter(company=dash_details.id).aggregate(total_discount_paidrecurring=Sum('discount'))['total_discount_paidrecurring'] or 0
            total_discount_paidinvoice = invoiceitems.objects.filter(company=dash_details.id).aggregate(total_discount_paidinvoice=Sum('discount'))['total_discount_paidinvoice'] or 0
            total_discount_paid = int(total_discount_paidrecurring) + int(total_discount_paidinvoice)

            total_expen = total_ex + total_discount_paid

            total_discount_receivedbill = BillItems.objects.filter(Company=dash_details.id).aggregate(total_discount_receivedbill=Sum('discount'))['total_discount_receivedbill'] or 0
            recur = Recurring_bills.objects.filter(company=dash_details.id)



            if recur:

                for s in recur:
                        
                    total_discount_billrecurrimg = RecurrItemsList.objects.filter(recurr_bill_id=s.id).aggregate(total_discount_billrecurrimg=Sum('discount'))['total_discount_billrecurrimg'] or 0
            else:
                total_discount_billrecurrimg = 0

            tot_discount_receive = int(total_discount_receivedbill) + int(total_discount_billrecurrimg)

            if bankaccount:

                for i in bankaccount:
                            
                    total_credit = loan_account.objects.filter(bank_holder=i.id).aggregate(total_credit=Sum('balance'))['total_credit'] or 0

                    print(total_credit)
            else:
                total_credit = 0

            if bankaccount_d:
                            

                for s in bankaccount_d:
                        
                    total_debit = loan_account.objects.filter(bank_holder=s.id).aggregate(total_debit=Sum('balance'))['total_debit'] or 0

            else:
                total_debit = 0


            difference_d =  int(total) + int(total_debit) + int(total_crenote) + int(total_purchase) + int(total_expen)
            difference_c =  int(total_cus) + int(total_sales) + int(total_credit) + int(total_discount_billrecurrimg)
            difference = difference_d - difference_c
            print(difference)

            if difference_d < difference_c:
                tot = int(difference_d) + int(difference)
            elif difference_c < difference_d:
                tot = int(difference_c) + int(difference)
            else:
                tot = 0


            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_credit':total_credit,
                'total_debit':total_debit,
                'total_cus':total_cus,
                'customers':customers,
                'total_ven':total_ven,
                'vendor':vendor,
                'total_emp':total_emp,
                'total':total,  
                'total_crenote':total_crenote,
                'total_sales':total_sales,
                'total_purchase':total_purchase,
                'difference_d':difference_d,
                'difference_c':difference_c,
                'difference':difference,
                'tot':tot,
                'total_expense':total_expense,
                'total_ex':total_ex,
                'total_recurring_expense':total_recurring_expense,
                'total_discount_paid':total_discount_paid,
                'total_expen':total_expen,
                'total_discount_billrecurrimg':total_discount_billrecurrimg,
            
            }
        
            template_path = 'zohomodules/Reports/trailbalance_pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            print('for loop executed')
            for i in emails_list:
                print(i)
            result = BytesIO()

            pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
            pdf = result.getvalue()
                    
            filename = f'Trail Balance Report'
            subject = f"Trail Balance Report"
            # from django.core.mail import EmailMessage as EmailMsg
            email = EmailMsg(subject, f"Hi,\nPlease find the attached Trail Balance Report. \n{email_message}\n\n--\nRegards,\n{cmp.company_name}\n{cmp.address}\n{cmp.state} - {cmp.country}\n{cmp.contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Trail Balance Report details has been shared via email successfully..!')
            return redirect('trail_balance')
        return redirect('trail_balance')